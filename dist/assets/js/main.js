/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={203:()=>{"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}document.addEventListener("DOMContentLoaded",(function(){var t,n=document.querySelector("html"),r=n.querySelector(".menu-toggle"),i=n.querySelector(".navigation"),a=function(t,n){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){r&&(t=r);var i=0,a=function(){};return{s:a,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,l=!1;return{s:function(){r=r.call(t)},n:function(){var e=r.next();return o=e.done,e},e:function(e){l=!0,s=e},f:function(){try{o||null==r.return||r.return()}finally{if(l)throw s}}}}(i.querySelectorAll(".navigation__subnav"));try{var s=function(){var e=t.value;e.addEventListener("click",(function(){e.classList.toggle("active")}))};for(a.s();!(t=a.n()).done;)s()}catch(e){a.e(e)}finally{a.f()}r.addEventListener("click",(function(){r.classList.toggle("active"),i.classList.toggle("active"),n.classList.toggle("active")}));var o=document.querySelector('a[href$="projects/"]');console.log(o),o.addEventListener("click",(function(e){e.preventDefault()}))}))},862:()=>{"use strict";document.addEventListener("DOMContentLoaded",(function(){document.body.classList.add("loaded-hiding"),window.setTimeout((function(){document.body.classList.add("loaded"),document.body.classList.remove("loaded-hiding")}),1200)}))},288:()=>{"use strict";function e(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function t(n,r){void 0===n&&(n={}),void 0===r&&(r={}),Object.keys(r).forEach((function(i){void 0===n[i]?n[i]=r[i]:e(r[i])&&e(n[i])&&Object.keys(r[i]).length>0&&t(n[i],r[i])}))}var n={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function r(){var e="undefined"!=typeof document?document:{};return t(e,n),e}var i={document:n,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function a(){var e="undefined"!=typeof window?window:{};return t(e,i),e}function s(e){return s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},s(e)}function o(e,t){return o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},o(e,t)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,n){return u=l()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&o(i,n.prototype),i},u.apply(null,arguments)}function c(e){var t="function"==typeof Map?new Map:void 0;return c=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return u(e,arguments,s(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),o(r,e)},c(e)}var d=function(e){var t,n;function r(t){var n,r,i;return r=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n=e.call.apply(e,[this].concat(t))||this),i=r.__proto__,Object.defineProperty(r,"__proto__",{get:function(){return i},set:function(e){i.__proto__=e}}),n}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r}(c(Array));function p(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,p(e)):t.push(e)})),t}function f(e,t){return Array.prototype.filter.call(e,t)}function h(e,t){var n=a(),i=r(),s=[];if(!t&&e instanceof d)return e;if(!e)return new d(s);if("string"==typeof e){var o=e.trim();if(o.indexOf("<")>=0&&o.indexOf(">")>=0){var l="div";0===o.indexOf("<li")&&(l="ul"),0===o.indexOf("<tr")&&(l="tbody"),0!==o.indexOf("<td")&&0!==o.indexOf("<th")||(l="tr"),0===o.indexOf("<tbody")&&(l="table"),0===o.indexOf("<option")&&(l="select");var u=i.createElement(l);u.innerHTML=o;for(var c=0;c<u.childNodes.length;c+=1)s.push(u.childNodes[c])}else s=function(e,t){if("string"!=typeof e)return[e];for(var n=[],r=t.querySelectorAll(e),i=0;i<r.length;i+=1)n.push(r[i]);return n}(e.trim(),t||i)}else if(e.nodeType||e===n||e===i)s.push(e);else if(Array.isArray(e)){if(e instanceof d)return e;s=e}return new d(function(e){for(var t=[],n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(s))}h.fn=d.prototype;var v="resize scroll".split(" ");function m(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];if(void 0===n[0]){for(var i=0;i<this.length;i+=1)v.indexOf(e)<0&&(e in this[i]?this[i][e]():h(this[i]).trigger(e));return this}return this.on.apply(this,[e].concat(n))}}m("click"),m("blur"),m("focus"),m("focusin"),m("focusout"),m("keyup"),m("keydown"),m("keypress"),m("submit"),m("change"),m("mousedown"),m("mousemove"),m("mouseup"),m("mouseenter"),m("mouseleave"),m("mouseout"),m("mouseover"),m("touchstart"),m("touchend"),m("touchmove"),m("resize"),m("scroll");var g={addClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=p(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,r)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=p(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,r)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=p(t.map((function(e){return e.split(" ")})));return f(this,(function(e){return r.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=p(t.map((function(e){return e.split(" ")})));this.forEach((function(e){r.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(var r in e)this[n][r]=e[r],this[n].setAttribute(r,e[r]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],i=t[1],a=t[2],s=t[3];function o(e){var t=e.target;if(t){var n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),h(t).is(i))a.apply(t,n);else for(var r=h(t).parents(),s=0;s<r.length;s+=1)h(r[s]).is(i)&&a.apply(r[s],n)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),a.apply(this,t)}"function"==typeof t[1]&&(r=t[0],a=t[1],s=t[2],i=void 0),s||(s=!1);for(var u,c=r.split(" "),d=0;d<this.length;d+=1){var p=this[d];if(i)for(u=0;u<c.length;u+=1){var f=c[u];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[f]||(p.dom7LiveListeners[f]=[]),p.dom7LiveListeners[f].push({listener:a,proxyListener:o}),p.addEventListener(f,o,s)}else for(u=0;u<c.length;u+=1){var v=c[u];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[v]||(p.dom7Listeners[v]=[]),p.dom7Listeners[v].push({listener:a,proxyListener:l}),p.addEventListener(v,l,s)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],i=t[1],a=t[2],s=t[3];"function"==typeof t[1]&&(r=t[0],a=t[1],s=t[2],i=void 0),s||(s=!1);for(var o=r.split(" "),l=0;l<o.length;l+=1)for(var u=o[l],c=0;c<this.length;c+=1){var d=this[c],p=void 0;if(!i&&d.dom7Listeners?p=d.dom7Listeners[u]:i&&d.dom7LiveListeners&&(p=d.dom7LiveListeners[u]),p&&p.length)for(var f=p.length-1;f>=0;f-=1){var h=p[f];a&&h.listener===a||a&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===a?(d.removeEventListener(u,h.proxyListener,s),p.splice(f,1)):a||(d.removeEventListener(u,h.proxyListener,s),p.splice(f,1))}}return this},trigger:function(){for(var e=a(),t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];for(var i=n[0].split(" "),s=n[1],o=0;o<i.length;o+=1)for(var l=i[o],u=0;u<this.length;u+=1){var c=this[u];if(e.CustomEvent){var d=new e.CustomEvent(l,{detail:s,bubbles:!0,cancelable:!0});c.dom7EventData=n.filter((function(e,t){return t>0})),c.dispatchEvent(d),c.dom7EventData=[],delete c.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on("transitionend",(function n(r){r.target===this&&(e.call(this,r),t.off("transitionend",n))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=a();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=a(),t=r(),n=this[0],i=n.getBoundingClientRect(),s=t.body,o=n.clientTop||s.clientTop||0,l=n.clientLeft||s.clientLeft||0,u=n===e?e.scrollY:n.scrollTop,c=n===e?e.scrollX:n.scrollLeft;return{top:i.top+u-o,left:i.left+c-l}}return null},css:function(e,t){var n,r=a();if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(var i in e)this[n].style[i]=e[i];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,n){e.apply(t,[t,n])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,n,i=a(),s=r(),o=this[0];if(!o||void 0===e)return!1;if("string"==typeof e){if(o.matches)return o.matches(e);if(o.webkitMatchesSelector)return o.webkitMatchesSelector(e);if(o.msMatchesSelector)return o.msMatchesSelector(e);for(t=h(e),n=0;n<t.length;n+=1)if(t[n]===o)return!0;return!1}if(e===s)return o===s;if(e===i)return o===i;if(e.nodeType||e instanceof d){for(t=e.nodeType?[e]:e,n=0;n<t.length;n+=1)if(t[n]===o)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return h([]);if(e<0){var n=t+e;return h(n<0?[]:[this[n]])}return h([this[e]])},append:function(){for(var e,t=r(),n=0;n<arguments.length;n+=1){e=n<0||arguments.length<=n?void 0:arguments[n];for(var i=0;i<this.length;i+=1)if("string"==typeof e){var a=t.createElement("div");for(a.innerHTML=e;a.firstChild;)this[i].appendChild(a.firstChild)}else if(e instanceof d)for(var s=0;s<e.length;s+=1)this[i].appendChild(e[s]);else this[i].appendChild(e)}return this},prepend:function(e){var t,n,i=r();for(t=0;t<this.length;t+=1)if("string"==typeof e){var a=i.createElement("div");for(a.innerHTML=e,n=a.childNodes.length-1;n>=0;n-=1)this[t].insertBefore(a.childNodes[n],this[t].childNodes[0])}else if(e instanceof d)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&h(this[0].nextElementSibling).is(e)?h([this[0].nextElementSibling]):h([]):this[0].nextElementSibling?h([this[0].nextElementSibling]):h([]):h([])},nextAll:function(e){var t=[],n=this[0];if(!n)return h([]);for(;n.nextElementSibling;){var r=n.nextElementSibling;e?h(r).is(e)&&t.push(r):t.push(r),n=r}return h(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&h(t.previousElementSibling).is(e)?h([t.previousElementSibling]):h([]):t.previousElementSibling?h([t.previousElementSibling]):h([])}return h([])},prevAll:function(e){var t=[],n=this[0];if(!n)return h([]);for(;n.previousElementSibling;){var r=n.previousElementSibling;e?h(r).is(e)&&t.push(r):t.push(r),n=r}return h(t)},parent:function(e){for(var t=[],n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?h(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return h(t)},parents:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].parentNode;r;)e?h(r).is(e)&&t.push(r):t.push(r),r=r.parentNode;return h(t)},closest:function(e){var t=this;return void 0===e?h([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].querySelectorAll(e),i=0;i<r.length;i+=1)t.push(r[i]);return h(t)},children:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].children,i=0;i<r.length;i+=1)e&&!h(r[i]).is(e)||t.push(r[i]);return h(t)},filter:function(e){return h(f(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};Object.keys(g).forEach((function(e){Object.defineProperty(h.fn,e,{value:g[e],writable:!0})}));const y=h;function b(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function x(){return Date.now()}function w(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function T(e){return"undefined"!=typeof window&&void 0!==window.HTMLElement?e instanceof HTMLElement:e&&(1===e.nodeType||11===e.nodeType)}function _(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"],n=1;n<arguments.length;n+=1){var r=n<0||arguments.length<=n?void 0:arguments[n];if(null!=r&&!T(r))for(var i=Object.keys(Object(r)).filter((function(e){return t.indexOf(e)<0})),a=0,s=i.length;a<s;a+=1){var o=i[a],l=Object.getOwnPropertyDescriptor(r,o);void 0!==l&&l.enumerable&&(w(e[o])&&w(r[o])?r[o].__swiper__?e[o]=r[o]:_(e[o],r[o]):!w(e[o])&&w(r[o])?(e[o]={},r[o].__swiper__?e[o]=r[o]:_(e[o],r[o])):e[o]=r[o])}}return e}function C(e,t){Object.keys(t).forEach((function(n){w(t[n])&&Object.keys(t[n]).forEach((function(r){"function"==typeof t[n][r]&&(t[n][r]=t[n][r].bind(e))})),e[n]=t[n]}))}function S(e){return void 0===e&&(e=""),"."+e.trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}function E(e,t,n,i){var a=r();return n&&Object.keys(i).forEach((function(n){if(!t[n]&&!0===t.auto){var r=a.createElement("div");r.className=i[n],e.append(r),t[n]=r}})),t}var k,M,A;function O(){return k||(k=function(){var e=a(),t=r();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,n)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),k}function P(e){return void 0===e&&(e={}),M||(M=function(e){var t=(void 0===e?{}:e).userAgent,n=O(),r=a(),i=r.navigator.platform,s=t||r.navigator.userAgent,o={ios:!1,android:!1},l=r.screen.width,u=r.screen.height,c=s.match(/(Android);?[\s\/]+([\d.]+)?/),d=s.match(/(iPad).*OS\s([\d_]+)/),p=s.match(/(iPod)(.*OS\s([\d_]+))?/),f=!d&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),h="Win32"===i,v="MacIntel"===i;return!d&&v&&n.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(l+"x"+u)>=0&&((d=s.match(/(Version)\/([\d.]+)/))||(d=[0,1,"13_0_0"]),v=!1),c&&!h&&(o.os="android",o.android=!0),(d||f||p)&&(o.os="ios",o.ios=!0),o}(e)),M}function L(){return A||(A=function(){var e,t=a();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),A}const D={name:"resize",create:function(){var e=this;_(e,{resize:{observer:null,createObserver:function(){e&&!e.destroyed&&e.initialized&&(e.resize.observer=new ResizeObserver((function(t){var n=e.width,r=e.height,i=n,a=r;t.forEach((function(t){var n=t.contentBoxSize,r=t.contentRect,s=t.target;s&&s!==e.el||(i=r?r.width:(n[0]||n).inlineSize,a=r?r.height:(n[0]||n).blockSize)})),i===n&&a===r||e.resize.resizeHandler()})),e.resize.observer.observe(e.el))},removeObserver:function(){e.resize.observer&&e.resize.observer.unobserve&&e.el&&(e.resize.observer.unobserve(e.el),e.resize.observer=null)},resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=a();e.params.resizeObserver&&void 0!==a().ResizeObserver?e.resize.createObserver():(t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler))},destroy:function(e){var t=a();e.resize.removeObserver(),t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}};function j(){return j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},j.apply(this,arguments)}var N={attach:function(e,t){void 0===t&&(t={});var n=a(),r=this,i=new(n.MutationObserver||n.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){r.emit("observerUpdate",e[0])};n.requestAnimationFrame?n.requestAnimationFrame(t):n.setTimeout(t,0)}else r.emit("observerUpdate",e[0])}));i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),r.observer.observers.push(i)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),n=0;n<t.length;n+=1)e.observer.attach(t[n]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}};const z={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){C(this,{observer:j({},N,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}},I={on:function(e,t,n){var r=this;if("function"!=typeof t)return r;var i=n?"unshift":"push";return e.split(" ").forEach((function(e){r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](t)})),r},once:function(e,t,n){var r=this;if("function"!=typeof t)return r;function i(){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];t.apply(r,a)}return i.__emitterProxy=t,r.on(e,i,n)},onAny:function(e,t){var n=this;if("function"!=typeof e)return n;var r=t?"unshift":"push";return n.eventsAnyListeners.indexOf(e)<0&&n.eventsAnyListeners[r](e),n},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var n=t.eventsAnyListeners.indexOf(e);return n>=0&&t.eventsAnyListeners.splice(n,1),t},off:function(e,t){var n=this;return n.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e]&&n.eventsListeners[e].forEach((function(r,i){(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&n.eventsListeners[e].splice(i,1)}))})),n):n},emit:function(){var e,t,n,r=this;if(!r.eventsListeners)return r;for(var i=arguments.length,a=new Array(i),s=0;s<i;s++)a[s]=arguments[s];"string"==typeof a[0]||Array.isArray(a[0])?(e=a[0],t=a.slice(1,a.length),n=r):(e=a[0].events,t=a[0].data,n=a[0].context||r),t.unshift(n);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){r.eventsAnyListeners&&r.eventsAnyListeners.length&&r.eventsAnyListeners.forEach((function(r){r.apply(n,[e].concat(t))})),r.eventsListeners&&r.eventsListeners[e]&&r.eventsListeners[e].forEach((function(e){e.apply(n,t)}))})),r}},B={updateSize:function(){var e,t,n=this,r=n.$el;e=void 0!==n.params.width&&null!==n.params.width?n.params.width:r[0].clientWidth,t=void 0!==n.params.height&&null!==n.params.height?n.params.height:r[0].clientHeight,0===e&&n.isHorizontal()||0===t&&n.isVertical()||(e=e-parseInt(r.css("padding-left")||0,10)-parseInt(r.css("padding-right")||0,10),t=t-parseInt(r.css("padding-top")||0,10)-parseInt(r.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),_(n,{width:e,height:t,size:n.isHorizontal()?e:t}))},updateSlides:function(){var e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function n(e,n){return parseFloat(e.getPropertyValue(t(n))||0)}var r=e.params,i=e.$wrapperEl,a=e.size,s=e.rtlTranslate,o=e.wrongRTL,l=e.virtual&&r.virtual.enabled,u=l?e.virtual.slides.length:e.slides.length,c=i.children("."+e.params.slideClass),d=l?e.virtual.slides.length:c.length,p=[],f=[],h=[],v=r.slidesOffsetBefore;"function"==typeof v&&(v=r.slidesOffsetBefore.call(e));var m=r.slidesOffsetAfter;"function"==typeof m&&(m=r.slidesOffsetAfter.call(e));var g=e.snapGrid.length,y=e.slidesGrid.length,b=r.spaceBetween,x=-v,w=0,T=0;if(void 0!==a){var C,S;"string"==typeof b&&b.indexOf("%")>=0&&(b=parseFloat(b.replace("%",""))/100*a),e.virtualSize=-b,s?c.css({marginLeft:"",marginBottom:"",marginTop:""}):c.css({marginRight:"",marginBottom:"",marginTop:""}),r.slidesPerColumn>1&&(C=Math.floor(d/r.slidesPerColumn)===d/e.params.slidesPerColumn?d:Math.ceil(d/r.slidesPerColumn)*r.slidesPerColumn,"auto"!==r.slidesPerView&&"row"===r.slidesPerColumnFill&&(C=Math.max(C,r.slidesPerView*r.slidesPerColumn)));for(var E,k,M,A=r.slidesPerColumn,O=C/A,P=Math.floor(d/r.slidesPerColumn),L=0;L<d;L+=1){S=0;var D=c.eq(L);if(r.slidesPerColumn>1){var j=void 0,N=void 0,z=void 0;if("row"===r.slidesPerColumnFill&&r.slidesPerGroup>1){var I=Math.floor(L/(r.slidesPerGroup*r.slidesPerColumn)),B=L-r.slidesPerColumn*r.slidesPerGroup*I,R=0===I?r.slidesPerGroup:Math.min(Math.ceil((d-I*A*r.slidesPerGroup)/A),r.slidesPerGroup);j=(N=B-(z=Math.floor(B/R))*R+I*r.slidesPerGroup)+z*C/A,D.css({"-webkit-box-ordinal-group":j,"-moz-box-ordinal-group":j,"-ms-flex-order":j,"-webkit-order":j,order:j})}else"column"===r.slidesPerColumnFill?(z=L-(N=Math.floor(L/A))*A,(N>P||N===P&&z===A-1)&&(z+=1)>=A&&(z=0,N+=1)):N=L-(z=Math.floor(L/O))*O;D.css(t("margin-top"),0!==z?r.spaceBetween&&r.spaceBetween+"px":"")}if("none"!==D.css("display")){if("auto"===r.slidesPerView){var H=getComputedStyle(D[0]),F=D[0].style.transform,q=D[0].style.webkitTransform;if(F&&(D[0].style.transform="none"),q&&(D[0].style.webkitTransform="none"),r.roundLengths)S=e.isHorizontal()?D.outerWidth(!0):D.outerHeight(!0);else{var $=n(H,"width"),W=n(H,"padding-left"),G=n(H,"padding-right"),V=n(H,"margin-left"),X=n(H,"margin-right"),Y=H.getPropertyValue("box-sizing");if(Y&&"border-box"===Y)S=$+V+X;else{var U=D[0],K=U.clientWidth;S=$+W+G+V+X+(U.offsetWidth-K)}}F&&(D[0].style.transform=F),q&&(D[0].style.webkitTransform=q),r.roundLengths&&(S=Math.floor(S))}else S=(a-(r.slidesPerView-1)*b)/r.slidesPerView,r.roundLengths&&(S=Math.floor(S)),c[L]&&(c[L].style[t("width")]=S+"px");c[L]&&(c[L].swiperSlideSize=S),h.push(S),r.centeredSlides?(x=x+S/2+w/2+b,0===w&&0!==L&&(x=x-a/2-b),0===L&&(x=x-a/2-b),Math.abs(x)<.001&&(x=0),r.roundLengths&&(x=Math.floor(x)),T%r.slidesPerGroup==0&&p.push(x),f.push(x)):(r.roundLengths&&(x=Math.floor(x)),(T-Math.min(e.params.slidesPerGroupSkip,T))%e.params.slidesPerGroup==0&&p.push(x),f.push(x),x=x+S+b),e.virtualSize+=S+b,w=S,T+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+m,s&&o&&("slide"===r.effect||"coverflow"===r.effect)&&i.css({width:e.virtualSize+r.spaceBetween+"px"}),r.setWrapperSize&&i.css(((k={})[t("width")]=e.virtualSize+r.spaceBetween+"px",k)),r.slidesPerColumn>1&&(e.virtualSize=(S+r.spaceBetween)*C,e.virtualSize=Math.ceil(e.virtualSize/r.slidesPerColumn)-r.spaceBetween,i.css(((M={})[t("width")]=e.virtualSize+r.spaceBetween+"px",M)),r.centeredSlides)){E=[];for(var Q=0;Q<p.length;Q+=1){var J=p[Q];r.roundLengths&&(J=Math.floor(J)),p[Q]<e.virtualSize+p[0]&&E.push(J)}p=E}if(!r.centeredSlides){E=[];for(var Z=0;Z<p.length;Z+=1){var ee=p[Z];r.roundLengths&&(ee=Math.floor(ee)),p[Z]<=e.virtualSize-a&&E.push(ee)}p=E,Math.floor(e.virtualSize-a)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-a)}if(0===p.length&&(p=[0]),0!==r.spaceBetween){var te,ne=e.isHorizontal()&&s?"marginLeft":t("marginRight");c.filter((function(e,t){return!r.cssMode||t!==c.length-1})).css(((te={})[ne]=b+"px",te))}if(r.centeredSlides&&r.centeredSlidesBounds){var re=0;h.forEach((function(e){re+=e+(r.spaceBetween?r.spaceBetween:0)}));var ie=(re-=r.spaceBetween)-a;p=p.map((function(e){return e<0?-v:e>ie?ie+m:e}))}if(r.centerInsufficientSlides){var ae=0;if(h.forEach((function(e){ae+=e+(r.spaceBetween?r.spaceBetween:0)})),(ae-=r.spaceBetween)<a){var se=(a-ae)/2;p.forEach((function(e,t){p[t]=e-se})),f.forEach((function(e,t){f[t]=e+se}))}}_(e,{slides:c,snapGrid:p,slidesGrid:f,slidesSizesGrid:h}),d!==u&&e.emit("slidesLengthChange"),p.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==y&&e.emit("slidesGridLengthChange"),(r.watchSlidesProgress||r.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,n=this,r=[],i=n.virtual&&n.params.virtual.enabled,a=0;"number"==typeof e?n.setTransition(e):!0===e&&n.setTransition(n.params.speed);var s=function(e){return i?n.slides.filter((function(t){return parseInt(t.getAttribute("data-swiper-slide-index"),10)===e}))[0]:n.slides.eq(e)[0]};if("auto"!==n.params.slidesPerView&&n.params.slidesPerView>1)if(n.params.centeredSlides)n.visibleSlides.each((function(e){r.push(e)}));else for(t=0;t<Math.ceil(n.params.slidesPerView);t+=1){var o=n.activeIndex+t;if(o>n.slides.length&&!i)break;r.push(s(o))}else r.push(s(n.activeIndex));for(t=0;t<r.length;t+=1)if(void 0!==r[t]){var l=r[t].offsetHeight;a=l>a?l:a}a&&n.$wrapperEl.css("height",a+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,n=t.params,r=t.slides,i=t.rtlTranslate;if(0!==r.length){void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();var a=-e;i&&(a=e),r.removeClass(n.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<r.length;s+=1){var o=r[s],l=(a+(n.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+n.spaceBetween);if(n.watchSlidesVisibility||n.centeredSlides&&n.autoHeight){var u=-(a-o.swiperSlideOffset),c=u+t.slidesSizesGrid[s];(u>=0&&u<t.size-1||c>1&&c<=t.size||u<=0&&c>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(s),r.eq(s).addClass(n.slideVisibleClass))}o.progress=i?-l:l}t.visibleSlides=y(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var n=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*n||0}var r=t.params,i=t.maxTranslate()-t.minTranslate(),a=t.progress,s=t.isBeginning,o=t.isEnd,l=s,u=o;0===i?(a=0,s=!0,o=!0):(s=(a=(e-t.minTranslate())/i)<=0,o=a>=1),_(t,{progress:a,isBeginning:s,isEnd:o}),(r.watchSlidesProgress||r.watchSlidesVisibility||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),s&&!l&&t.emit("reachBeginning toEdge"),o&&!u&&t.emit("reachEnd toEdge"),(l&&!s||u&&!o)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){var e,t=this,n=t.slides,r=t.params,i=t.$wrapperEl,a=t.activeIndex,s=t.realIndex,o=t.virtual&&r.virtual.enabled;n.removeClass(r.slideActiveClass+" "+r.slideNextClass+" "+r.slidePrevClass+" "+r.slideDuplicateActiveClass+" "+r.slideDuplicateNextClass+" "+r.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+r.slideClass+'[data-swiper-slide-index="'+a+'"]'):n.eq(a)).addClass(r.slideActiveClass),r.loop&&(e.hasClass(r.slideDuplicateClass)?i.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(r.slideDuplicateActiveClass):i.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(r.slideDuplicateActiveClass));var l=e.nextAll("."+r.slideClass).eq(0).addClass(r.slideNextClass);r.loop&&0===l.length&&(l=n.eq(0)).addClass(r.slideNextClass);var u=e.prevAll("."+r.slideClass).eq(0).addClass(r.slidePrevClass);r.loop&&0===u.length&&(u=n.eq(-1)).addClass(r.slidePrevClass),r.loop&&(l.hasClass(r.slideDuplicateClass)?i.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicateNextClass):i.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicateNextClass),u.hasClass(r.slideDuplicateClass)?i.children("."+r.slideClass+":not(."+r.slideDuplicateClass+')[data-swiper-slide-index="'+u.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicatePrevClass):i.children("."+r.slideClass+"."+r.slideDuplicateClass+'[data-swiper-slide-index="'+u.attr("data-swiper-slide-index")+'"]').addClass(r.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,n=this,r=n.rtlTranslate?n.translate:-n.translate,i=n.slidesGrid,a=n.snapGrid,s=n.params,o=n.activeIndex,l=n.realIndex,u=n.snapIndex,c=e;if(void 0===c){for(var d=0;d<i.length;d+=1)void 0!==i[d+1]?r>=i[d]&&r<i[d+1]-(i[d+1]-i[d])/2?c=d:r>=i[d]&&r<i[d+1]&&(c=d+1):r>=i[d]&&(c=d);s.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}if(a.indexOf(r)>=0)t=a.indexOf(r);else{var p=Math.min(s.slidesPerGroupSkip,c);t=p+Math.floor((c-p)/s.slidesPerGroup)}if(t>=a.length&&(t=a.length-1),c!==o){var f=parseInt(n.slides.eq(c).attr("data-swiper-slide-index")||c,10);_(n,{snapIndex:t,realIndex:f,previousIndex:o,activeIndex:c}),n.emit("activeIndexChange"),n.emit("snapIndexChange"),l!==f&&n.emit("realIndexChange"),(n.initialized||n.params.runCallbacksOnInit)&&n.emit("slideChange")}else t!==u&&(n.snapIndex=t,n.emit("snapIndexChange"))},updateClickedSlide:function(e){var t,n=this,r=n.params,i=y(e.target).closest("."+r.slideClass)[0],a=!1;if(i)for(var s=0;s<n.slides.length;s+=1)if(n.slides[s]===i){a=!0,t=s;break}if(!i||!a)return n.clickedSlide=void 0,void(n.clickedIndex=void 0);n.clickedSlide=i,n.virtual&&n.params.virtual.enabled?n.clickedIndex=parseInt(y(i).attr("data-swiper-slide-index"),10):n.clickedIndex=t,r.slideToClickedSlide&&void 0!==n.clickedIndex&&n.clickedIndex!==n.activeIndex&&n.slideToClickedSlide()}},R={slideTo:function(e,t,n,r,i){if(void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),"number"!=typeof e&&"string"!=typeof e)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+typeof e+"] given.");if("string"==typeof e){var a=parseInt(e,10);if(!isFinite(a))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+e+"] given.");e=a}var s=this,o=e;o<0&&(o=0);var l=s.params,u=s.snapGrid,c=s.slidesGrid,d=s.previousIndex,p=s.activeIndex,f=s.rtlTranslate,h=s.wrapperEl,v=s.enabled;if(s.animating&&l.preventInteractionOnTransition||!v&&!r&&!i)return!1;var m=Math.min(s.params.slidesPerGroupSkip,o),g=m+Math.floor((o-m)/s.params.slidesPerGroup);g>=u.length&&(g=u.length-1),(p||l.initialSlide||0)===(d||0)&&n&&s.emit("beforeSlideChangeStart");var y,b=-u[g];if(s.updateProgress(b),l.normalizeSlideIndex)for(var x=0;x<c.length;x+=1){var w=-Math.floor(100*b),T=Math.floor(100*c[x]),_=Math.floor(100*c[x+1]);void 0!==c[x+1]?w>=T&&w<_-(_-T)/2?o=x:w>=T&&w<_&&(o=x+1):w>=T&&(o=x)}if(s.initialized&&o!==p){if(!s.allowSlideNext&&b<s.translate&&b<s.minTranslate())return!1;if(!s.allowSlidePrev&&b>s.translate&&b>s.maxTranslate()&&(p||0)!==o)return!1}if(y=o>p?"next":o<p?"prev":"reset",f&&-b===s.translate||!f&&b===s.translate)return s.updateActiveIndex(o),l.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==l.effect&&s.setTranslate(b),"reset"!==y&&(s.transitionStart(n,y),s.transitionEnd(n,y)),!1;if(l.cssMode){var C,S=s.isHorizontal(),E=-b;return f&&(E=h.scrollWidth-h.offsetWidth-E),0===t?h[S?"scrollLeft":"scrollTop"]=E:h.scrollTo?h.scrollTo(((C={})[S?"left":"top"]=E,C.behavior="smooth",C)):h[S?"scrollLeft":"scrollTop"]=E,!0}return 0===t?(s.setTransition(0),s.setTranslate(b),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,r),s.transitionStart(n,y),s.transitionEnd(n,y)):(s.setTransition(t),s.setTranslate(b),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,r),s.transitionStart(n,y),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(n,y))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,n,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0);var i=this,a=e;return i.params.loop&&(a+=i.loopedSlides),i.slideTo(a,t,n,r)},slideNext:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var r=this,i=r.params,a=r.animating;if(!r.enabled)return r;var s=r.activeIndex<i.slidesPerGroupSkip?1:i.slidesPerGroup;if(i.loop){if(a&&i.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}return r.slideTo(r.activeIndex+s,e,t,n)},slidePrev:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var r=this,i=r.params,a=r.animating,s=r.snapGrid,o=r.slidesGrid,l=r.rtlTranslate;if(!r.enabled)return r;if(i.loop){if(a&&i.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,d=u(l?r.translate:-r.translate),p=s.map((function(e){return u(e)})),f=s[p.indexOf(d)-1];return void 0===f&&i.cssMode&&s.forEach((function(e){!f&&d>=e&&(f=e)})),void 0!==f&&(c=o.indexOf(f))<0&&(c=r.activeIndex-1),r.slideTo(c,e,t,n)},slideReset:function(e,t,n){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e,t,n,r){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===r&&(r=.5);var i=this,a=i.activeIndex,s=Math.min(i.params.slidesPerGroupSkip,a),o=s+Math.floor((a-s)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;if(l>=i.snapGrid[o]){var u=i.snapGrid[o];l-u>(i.snapGrid[o+1]-u)*r&&(a+=i.params.slidesPerGroup)}else{var c=i.snapGrid[o-1];l-c<=(i.snapGrid[o]-c)*r&&(a-=i.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,i.slidesGrid.length-1),i.slideTo(a,e,t,n)},slideToClickedSlide:function(){var e,t=this,n=t.params,r=t.$wrapperEl,i="auto"===n.slidesPerView?t.slidesPerViewDynamic():n.slidesPerView,a=t.clickedIndex;if(n.loop){if(t.animating)return;e=parseInt(y(t.clickedSlide).attr("data-swiper-slide-index"),10),n.centeredSlides?a<t.loopedSlides-i/2||a>t.slides.length-t.loopedSlides+i/2?(t.loopFix(),a=r.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),b((function(){t.slideTo(a)}))):t.slideTo(a):a>t.slides.length-i?(t.loopFix(),a=r.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),b((function(){t.slideTo(a)}))):t.slideTo(a)}else t.slideTo(a)}},H={loopCreate:function(){var e=this,t=r(),n=e.params,i=e.$wrapperEl;i.children("."+n.slideClass+"."+n.slideDuplicateClass).remove();var a=i.children("."+n.slideClass);if(n.loopFillGroupWithBlank){var s=n.slidesPerGroup-a.length%n.slidesPerGroup;if(s!==n.slidesPerGroup){for(var o=0;o<s;o+=1){var l=y(t.createElement("div")).addClass(n.slideClass+" "+n.slideBlankClass);i.append(l)}a=i.children("."+n.slideClass)}}"auto"!==n.slidesPerView||n.loopedSlides||(n.loopedSlides=a.length),e.loopedSlides=Math.ceil(parseFloat(n.loopedSlides||n.slidesPerView,10)),e.loopedSlides+=n.loopAdditionalSlides,e.loopedSlides>a.length&&(e.loopedSlides=a.length);var u=[],c=[];a.each((function(t,n){var r=y(t);n<e.loopedSlides&&c.push(t),n<a.length&&n>=a.length-e.loopedSlides&&u.push(t),r.attr("data-swiper-slide-index",n)}));for(var d=0;d<c.length;d+=1)i.append(y(c[d].cloneNode(!0)).addClass(n.slideDuplicateClass));for(var p=u.length-1;p>=0;p-=1)i.prepend(y(u[p].cloneNode(!0)).addClass(n.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t,n=e.activeIndex,r=e.slides,i=e.loopedSlides,a=e.allowSlidePrev,s=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var u=-o[n]-e.getTranslate();n<i?(t=r.length-3*i+n,t+=i,e.slideTo(t,0,!1,!0)&&0!==u&&e.setTranslate((l?-e.translate:e.translate)-u)):n>=r.length-i&&(t=-r.length+n+i,t+=i,e.slideTo(t,0,!1,!0)&&0!==u&&e.setTranslate((l?-e.translate:e.translate)-u)),e.allowSlidePrev=a,e.allowSlideNext=s,e.emit("loopFix")},loopDestroy:function(){var e=this,t=e.$wrapperEl,n=e.params,r=e.slides;t.children("."+n.slideClass+"."+n.slideDuplicateClass+",."+n.slideClass+"."+n.slideBlankClass).remove(),r.removeAttr("data-swiper-slide-index")}};function F(e){var t=this,n=r(),i=a(),s=t.touchEventsData,o=t.params,l=t.touches;if(t.enabled&&(!t.animating||!o.preventInteractionOnTransition)){var u=e;u.originalEvent&&(u=u.originalEvent);var c=y(u.target);if(("wrapper"!==o.touchEventsTarget||c.closest(t.wrapperEl).length)&&(s.isTouchEvent="touchstart"===u.type,(s.isTouchEvent||!("which"in u)||3!==u.which)&&!(!s.isTouchEvent&&"button"in u&&u.button>0||s.isTouched&&s.isMoved))){o.noSwipingClass&&""!==o.noSwipingClass&&u.target&&u.target.shadowRoot&&e.path&&e.path[0]&&(c=y(e.path[0]));var d=o.noSwipingSelector?o.noSwipingSelector:"."+o.noSwipingClass,p=!(!u.target||!u.target.shadowRoot);if(o.noSwiping&&(p?function(e,t){return void 0===t&&(t=this),function t(n){return n&&n!==r()&&n!==a()?(n.assignedSlot&&(n=n.assignedSlot),n.closest(e)||t(n.getRootNode().host)):null}(t)}(d,u.target):c.closest(d)[0]))t.allowClick=!0;else if(!o.swipeHandler||c.closest(o.swipeHandler)[0]){l.currentX="touchstart"===u.type?u.targetTouches[0].pageX:u.pageX,l.currentY="touchstart"===u.type?u.targetTouches[0].pageY:u.pageY;var f=l.currentX,h=l.currentY,v=o.edgeSwipeDetection||o.iOSEdgeSwipeDetection,m=o.edgeSwipeThreshold||o.iOSEdgeSwipeThreshold;if(v&&(f<=m||f>=i.innerWidth-m)){if("prevent"!==v)return;e.preventDefault()}if(_(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=f,l.startY=h,s.touchStartTime=x(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,o.threshold>0&&(s.allowThresholdMove=!1),"touchstart"!==u.type){var g=!0;c.is(s.focusableElements)&&(g=!1),n.activeElement&&y(n.activeElement).is(s.focusableElements)&&n.activeElement!==c[0]&&n.activeElement.blur();var b=g&&t.allowTouchMove&&o.touchStartPreventDefault;!o.touchStartForcePreventDefault&&!b||c[0].isContentEditable||u.preventDefault()}t.emit("touchStart",u)}}}}function q(e){var t=r(),n=this,i=n.touchEventsData,a=n.params,s=n.touches,o=n.rtlTranslate;if(n.enabled){var l=e;if(l.originalEvent&&(l=l.originalEvent),i.isTouched){if(!i.isTouchEvent||"touchmove"===l.type){var u="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),c="touchmove"===l.type?u.pageX:l.pageX,d="touchmove"===l.type?u.pageY:l.pageY;if(l.preventedByNestedSwiper)return s.startX=c,void(s.startY=d);if(!n.allowTouchMove)return n.allowClick=!1,void(i.isTouched&&(_(s,{startX:c,startY:d,currentX:c,currentY:d}),i.touchStartTime=x()));if(i.isTouchEvent&&a.touchReleaseOnEdges&&!a.loop)if(n.isVertical()){if(d<s.startY&&n.translate<=n.maxTranslate()||d>s.startY&&n.translate>=n.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(c<s.startX&&n.translate<=n.maxTranslate()||c>s.startX&&n.translate>=n.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&y(l.target).is(i.focusableElements))return i.isMoved=!0,void(n.allowClick=!1);if(i.allowTouchCallbacks&&n.emit("touchMove",l),!(l.targetTouches&&l.targetTouches.length>1)){s.currentX=c,s.currentY=d;var p,f=s.currentX-s.startX,h=s.currentY-s.startY;if(!(n.params.threshold&&Math.sqrt(Math.pow(f,2)+Math.pow(h,2))<n.params.threshold))if(void 0===i.isScrolling&&(n.isHorizontal()&&s.currentY===s.startY||n.isVertical()&&s.currentX===s.startX?i.isScrolling=!1:f*f+h*h>=25&&(p=180*Math.atan2(Math.abs(h),Math.abs(f))/Math.PI,i.isScrolling=n.isHorizontal()?p>a.touchAngle:90-p>a.touchAngle)),i.isScrolling&&n.emit("touchMoveOpposite",l),void 0===i.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){n.allowClick=!1,!a.cssMode&&l.cancelable&&l.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&l.stopPropagation(),i.isMoved||(a.loop&&n.loopFix(),i.startTranslate=n.getTranslate(),n.setTransition(0),n.animating&&n.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!a.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",l)),n.emit("sliderMove",l),i.isMoved=!0;var v=n.isHorizontal()?f:h;s.diff=v,v*=a.touchRatio,o&&(v=-v),n.swipeDirection=v>0?"prev":"next",i.currentTranslate=v+i.startTranslate;var m=!0,g=a.resistanceRatio;if(a.touchReleaseOnEdges&&(g=0),v>0&&i.currentTranslate>n.minTranslate()?(m=!1,a.resistance&&(i.currentTranslate=n.minTranslate()-1+Math.pow(-n.minTranslate()+i.startTranslate+v,g))):v<0&&i.currentTranslate<n.maxTranslate()&&(m=!1,a.resistance&&(i.currentTranslate=n.maxTranslate()+1-Math.pow(n.maxTranslate()-i.startTranslate-v,g))),m&&(l.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),n.allowSlidePrev||n.allowSlideNext||(i.currentTranslate=i.startTranslate),a.threshold>0){if(!(Math.abs(v)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,i.currentTranslate=i.startTranslate,void(s.diff=n.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}a.followFinger&&!a.cssMode&&((a.freeMode||a.watchSlidesProgress||a.watchSlidesVisibility)&&(n.updateActiveIndex(),n.updateSlidesClasses()),a.freeMode&&(0===i.velocities.length&&i.velocities.push({position:s[n.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:s[n.isHorizontal()?"currentX":"currentY"],time:x()})),n.updateProgress(i.currentTranslate),n.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&n.emit("touchMoveOpposite",l)}}function $(e){var t=this,n=t.touchEventsData,r=t.params,i=t.touches,a=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid;if(t.enabled){var u=e;if(u.originalEvent&&(u=u.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",u),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&r.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);r.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,d=x(),p=d-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(u),t.emit("tap click",u),p<300&&d-n.lastClickTime<300&&t.emit("doubleTap doubleClick",u)),n.lastClickTime=x(),b((function(){t.destroyed||(t.allowClick=!0)})),!n.isTouched||!n.isMoved||!t.swipeDirection||0===i.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,c=r.followFinger?a?t.translate:-t.translate:-n.currentTranslate,!r.cssMode)if(r.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(r.freeModeMomentum){if(n.velocities.length>1){var f=n.velocities.pop(),h=n.velocities.pop(),v=f.position-h.position,m=f.time-h.time;t.velocity=v/m,t.velocity/=2,Math.abs(t.velocity)<r.freeModeMinimumVelocity&&(t.velocity=0),(m>150||x()-f.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=r.freeModeMomentumVelocityRatio,n.velocities.length=0;var g=1e3*r.freeModeMomentumRatio,y=t.velocity*g,w=t.translate+y;a&&(w=-w);var T,_,C=!1,S=20*Math.abs(t.velocity)*r.freeModeMomentumBounceRatio;if(w<t.maxTranslate())r.freeModeMomentumBounce?(w+t.maxTranslate()<-S&&(w=t.maxTranslate()-S),T=t.maxTranslate(),C=!0,n.allowMomentumBounce=!0):w=t.maxTranslate(),r.loop&&r.centeredSlides&&(_=!0);else if(w>t.minTranslate())r.freeModeMomentumBounce?(w-t.minTranslate()>S&&(w=t.minTranslate()+S),T=t.minTranslate(),C=!0,n.allowMomentumBounce=!0):w=t.minTranslate(),r.loop&&r.centeredSlides&&(_=!0);else if(r.freeModeSticky){for(var E,k=0;k<l.length;k+=1)if(l[k]>-w){E=k;break}w=-(w=Math.abs(l[E]-w)<Math.abs(l[E-1]-w)||"next"===t.swipeDirection?l[E]:l[E-1])}if(_&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(g=a?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity),r.freeModeSticky){var M=Math.abs((a?-w:w)-t.translate),A=t.slidesSizesGrid[t.activeIndex];g=M<A?r.speed:M<2*A?1.5*r.speed:2.5*r.speed}}else if(r.freeModeSticky)return void t.slideToClosest();r.freeModeMomentumBounce&&C?(t.updateProgress(T),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(r.speed),setTimeout((function(){t.setTranslate(T),s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(w),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):(t.emit("_freeModeNoMomentumRelease"),t.updateProgress(w)),t.updateActiveIndex(),t.updateSlidesClasses()}else{if(r.freeModeSticky)return void t.slideToClosest();r.freeMode&&t.emit("_freeModeNoMomentumRelease")}(!r.freeModeMomentum||p>=r.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var O=0,P=t.slidesSizesGrid[0],L=0;L<o.length;L+=L<r.slidesPerGroupSkip?1:r.slidesPerGroup){var D=L<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==o[L+D]?c>=o[L]&&c<o[L+D]&&(O=L,P=o[L+D]-o[L]):c>=o[L]&&(O=L,P=o[o.length-1]-o[o.length-2])}var j=(c-o[O])/P,N=O<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;if(p>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(j>=r.longSwipesRatio?t.slideTo(O+N):t.slideTo(O)),"prev"===t.swipeDirection&&(j>1-r.longSwipesRatio?t.slideTo(O+N):t.slideTo(O))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||u.target!==t.navigation.nextEl&&u.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(O+N),"prev"===t.swipeDirection&&t.slideTo(O)):u.target===t.navigation.nextEl?t.slideTo(O+N):t.slideTo(O)}}}}function W(){var e=this,t=e.params,n=e.el;if(!n||0!==n.offsetWidth){t.breakpoints&&e.setBreakpoint();var r=e.allowSlideNext,i=e.allowSlidePrev,a=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}}function G(e){var t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function V(){var e=this,t=e.wrapperEl,n=e.rtlTranslate;if(e.enabled){e.previousTranslate=e.translate,e.isHorizontal()?e.translate=n?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var r=e.maxTranslate()-e.minTranslate();(0===r?0:(e.translate-e.minTranslate())/r)!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}}var X=!1;function Y(){}const U={attachEvents:function(){var e=this,t=r(),n=e.params,i=e.touchEvents,a=e.el,s=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=F.bind(e),e.onTouchMove=q.bind(e),e.onTouchEnd=$.bind(e),n.cssMode&&(e.onScroll=V.bind(e)),e.onClick=G.bind(e);var u=!!n.nested;if(!l.touch&&l.pointerEvents)a.addEventListener(i.start,e.onTouchStart,!1),t.addEventListener(i.move,e.onTouchMove,u),t.addEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var c=!("touchstart"!==i.start||!l.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};a.addEventListener(i.start,e.onTouchStart,c),a.addEventListener(i.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:u}:u),a.addEventListener(i.end,e.onTouchEnd,c),i.cancel&&a.addEventListener(i.cancel,e.onTouchEnd,c),X||(t.addEventListener("touchstart",Y),X=!0)}(n.simulateTouch&&!o.ios&&!o.android||n.simulateTouch&&!l.touch&&o.ios)&&(a.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,u),t.addEventListener("mouseup",e.onTouchEnd,!1))}(n.preventClicks||n.preventClicksPropagation)&&a.addEventListener("click",e.onClick,!0),n.cssMode&&s.addEventListener("scroll",e.onScroll),n.updateOnWindowResize?e.on(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",W,!0):e.on("observerUpdate",W,!0)},detachEvents:function(){var e=this,t=r(),n=e.params,i=e.touchEvents,a=e.el,s=e.wrapperEl,o=e.device,l=e.support,u=!!n.nested;if(!l.touch&&l.pointerEvents)a.removeEventListener(i.start,e.onTouchStart,!1),t.removeEventListener(i.move,e.onTouchMove,u),t.removeEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var c=!("onTouchStart"!==i.start||!l.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};a.removeEventListener(i.start,e.onTouchStart,c),a.removeEventListener(i.move,e.onTouchMove,u),a.removeEventListener(i.end,e.onTouchEnd,c),i.cancel&&a.removeEventListener(i.cancel,e.onTouchEnd,c)}(n.simulateTouch&&!o.ios&&!o.android||n.simulateTouch&&!l.touch&&o.ios)&&(a.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,u),t.removeEventListener("mouseup",e.onTouchEnd,!1))}(n.preventClicks||n.preventClicksPropagation)&&a.removeEventListener("click",e.onClick,!0),n.cssMode&&s.removeEventListener("scroll",e.onScroll),e.off(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",W)}},K={addClasses:function(){var e,t,n,r=this,i=r.classNames,a=r.params,s=r.rtl,o=r.$el,l=r.device,u=r.support,c=(e=["initialized",a.direction,{"pointer-events":u.pointerEvents&&!u.touch},{"free-mode":a.freeMode},{autoheight:a.autoHeight},{rtl:s},{multirow:a.slidesPerColumn>1},{"multirow-column":a.slidesPerColumn>1&&"column"===a.slidesPerColumnFill},{android:l.android},{ios:l.ios},{"css-mode":a.cssMode}],t=a.containerModifierClass,n=[],e.forEach((function(e){"object"==typeof e?Object.keys(e).forEach((function(r){e[r]&&n.push(t+r)})):"string"==typeof e&&n.push(t+e)})),n);i.push.apply(i,c),o.addClass([].concat(i).join(" ")),r.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,n=e.classNames;t.removeClass(n.join(" ")),e.emitContainerClasses()}},Q={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!1,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};function J(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Z={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(n){var r=t.modules[n];r.params&&_(e,r.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(n){var r=t.modules[n],i=e[n]||{};r.on&&t.on&&Object.keys(r.on).forEach((function(e){t.on(e,r.on[e])})),r.create&&r.create.bind(t)(i)}))}},eventsEmitter:I,update:B,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,n=t.params,r=t.rtlTranslate,i=t.translate,s=t.$wrapperEl;if(n.virtualTranslate)return r?-i:i;if(n.cssMode)return i;var o=function(e,t){void 0===t&&(t="x");var n,r,i,s=a(),o=function(e){var t,n=a();return n.getComputedStyle&&(t=n.getComputedStyle(e,null)),!t&&e.currentStyle&&(t=e.currentStyle),t||(t=e.style),t}(e);return s.WebKitCSSMatrix?((r=o.transform||o.webkitTransform).split(",").length>6&&(r=r.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),i=new s.WebKitCSSMatrix("none"===r?"":r)):n=(i=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(r=s.WebKitCSSMatrix?i.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(r=s.WebKitCSSMatrix?i.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),r||0}(s[0],e);return r&&(o=-o),o||0},setTranslate:function(e,t){var n=this,r=n.rtlTranslate,i=n.params,a=n.$wrapperEl,s=n.wrapperEl,o=n.progress,l=0,u=0;n.isHorizontal()?l=r?-e:e:u=e,i.roundLengths&&(l=Math.floor(l),u=Math.floor(u)),i.cssMode?s[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-l:-u:i.virtualTranslate||a.transform("translate3d("+l+"px, "+u+"px, 0px)"),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?l:u;var c=n.maxTranslate()-n.minTranslate();(0===c?0:(e-n.minTranslate())/c)!==o&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,n,r,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),void 0===r&&(r=!0);var a=this,s=a.params,o=a.wrapperEl;if(a.animating&&s.preventInteractionOnTransition)return!1;var l,u=a.minTranslate(),c=a.maxTranslate();if(l=r&&e>u?u:r&&e<c?c:e,a.updateProgress(l),s.cssMode){var d,p=a.isHorizontal();return 0===t?o[p?"scrollLeft":"scrollTop"]=-l:o.scrollTo?o.scrollTo(((d={})[p?"left":"top"]=-l,d.behavior="smooth",d)):o[p?"scrollLeft":"scrollTop"]=-l,!0}return 0===t?(a.setTransition(0),a.setTranslate(l),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(l),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,n&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var n=this;n.params.cssMode||n.$wrapperEl.transition(e),n.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var n=this,r=n.activeIndex,i=n.params,a=n.previousIndex;if(!i.cssMode){i.autoHeight&&n.updateAutoHeight();var s=t;if(s||(s=r>a?"next":r<a?"prev":"reset"),n.emit("transitionStart"),e&&r!==a){if("reset"===s)return void n.emit("slideResetTransitionStart");n.emit("slideChangeTransitionStart"),"next"===s?n.emit("slideNextTransitionStart"):n.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var n=this,r=n.activeIndex,i=n.previousIndex,a=n.params;if(n.animating=!1,!a.cssMode){n.setTransition(0);var s=t;if(s||(s=r>i?"next":r<i?"prev":"reset"),n.emit("transitionEnd"),e&&r!==i){if("reset"===s)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===s?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}}},slide:R,loop:H,grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var n=t.el;n.style.cursor="move",n.style.cursor=e?"-webkit-grabbing":"-webkit-grab",n.style.cursor=e?"-moz-grabbin":"-moz-grab",n.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor="")}},manipulation:{appendSlide:function(e){var t=this,n=t.$wrapperEl,r=t.params;if(r.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var i=0;i<e.length;i+=1)e[i]&&n.append(e[i]);else n.append(e);r.loop&&t.loopCreate(),r.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,n=t.params,r=t.$wrapperEl,i=t.activeIndex;n.loop&&t.loopDestroy();var a=i+1;if("object"==typeof e&&"length"in e){for(var s=0;s<e.length;s+=1)e[s]&&r.prepend(e[s]);a=i+e.length}else r.prepend(e);n.loop&&t.loopCreate(),n.observer&&t.support.observer||t.update(),t.slideTo(a,0,!1)},addSlide:function(e,t){var n=this,r=n.$wrapperEl,i=n.params,a=n.activeIndex;i.loop&&(a-=n.loopedSlides,n.loopDestroy(),n.slides=r.children("."+i.slideClass));var s=n.slides.length;if(e<=0)n.prependSlide(t);else if(e>=s)n.appendSlide(t);else{for(var o=a>e?a+1:a,l=[],u=s-1;u>=e;u-=1){var c=n.slides.eq(u);c.remove(),l.unshift(c)}if("object"==typeof t&&"length"in t){for(var d=0;d<t.length;d+=1)t[d]&&r.append(t[d]);o=a>e?a+t.length:a}else r.append(t);for(var p=0;p<l.length;p+=1)r.append(l[p]);i.loop&&n.loopCreate(),i.observer&&n.support.observer||n.update(),i.loop?n.slideTo(o+n.loopedSlides,0,!1):n.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,n=t.params,r=t.$wrapperEl,i=t.activeIndex;n.loop&&(i-=t.loopedSlides,t.loopDestroy(),t.slides=r.children("."+n.slideClass));var a,s=i;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)a=e[o],t.slides[a]&&t.slides.eq(a).remove(),a<s&&(s-=1);s=Math.max(s,0)}else a=e,t.slides[a]&&t.slides.eq(a).remove(),a<s&&(s-=1),s=Math.max(s,0);n.loop&&t.loopCreate(),n.observer&&t.support.observer||t.update(),n.loop?t.slideTo(s+t.loopedSlides,0,!1):t.slideTo(s,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:U,breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,n=e.initialized,r=e.loopedSlides,i=void 0===r?0:r,a=e.params,s=e.$el,o=a.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o,e.params.breakpointsBase,e.el);if(l&&e.currentBreakpoint!==l){var u=l in o?o[l]:void 0;u&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=u[e];void 0!==t&&(u[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var c=u||e.originalParams,d=a.slidesPerColumn>1,p=c.slidesPerColumn>1,f=a.enabled;d&&!p?(s.removeClass(a.containerModifierClass+"multirow "+a.containerModifierClass+"multirow-column"),e.emitContainerClasses()):!d&&p&&(s.addClass(a.containerModifierClass+"multirow"),(c.slidesPerColumnFill&&"column"===c.slidesPerColumnFill||!c.slidesPerColumnFill&&"column"===a.slidesPerColumnFill)&&s.addClass(a.containerModifierClass+"multirow-column"),e.emitContainerClasses());var h=c.direction&&c.direction!==a.direction,v=a.loop&&(c.slidesPerView!==a.slidesPerView||h);h&&n&&e.changeDirection(),_(e.params,c);var m=e.params.enabled;_(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),f&&!m?e.disable():!f&&m&&e.enable(),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",c),v&&n&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",c)}}},getBreakpoint:function(e,t,n){if(void 0===t&&(t="window"),e&&("container"!==t||n)){var r=!1,i=a(),s="window"===t?i.innerHeight:n.clientHeight,o=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var t=parseFloat(e.substr(1));return{value:s*t,point:e}}return{value:e,point:e}}));o.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var l=0;l<o.length;l+=1){var u=o[l],c=u.point,d=u.value;"window"===t?i.matchMedia("(min-width: "+d+"px)").matches&&(r=c):d<=n.clientWidth&&(r=c)}return r||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,n=e.isLocked,r=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&r?e.isLocked=r<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,n!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),n&&n!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:K,images:{loadImage:function(e,t,n,r,i,s){var o,l=a();function u(){s&&s()}y(e).parent("picture")[0]||e.complete&&i?u():t?((o=new l.Image).onload=u,o.onerror=u,r&&(o.sizes=r),n&&(o.srcset=n),t&&(o.src=t)):u()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var n=0;n<e.imagesToLoad.length;n+=1){var r=e.imagesToLoad[n];e.loadImage(r,r.currentSrc||r.getAttribute("src"),r.srcset||r.getAttribute("srcset"),r.sizes||r.getAttribute("sizes"),!0,t)}}}},ee={},te=function(){function e(){for(var t,n,r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];if(1===i.length&&i[0].constructor&&"Object"===Object.prototype.toString.call(i[0]).slice(8,-1)?n=i[0]:(t=i[0],n=i[1]),n||(n={}),n=_({},n),t&&!n.el&&(n.el=t),n.el&&y(n.el).length>1){var s=[];return y(n.el).each((function(t){var r=_({},n,{el:t});s.push(new e(r))})),s}var o=this;o.__swiper__=!0,o.support=O(),o.device=P({userAgent:n.userAgent}),o.browser=L(),o.eventsListeners={},o.eventsAnyListeners=[],void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach((function(e){var t=o.modules[e];if(t.params){var r=Object.keys(t.params)[0],i=t.params[r];if("object"!=typeof i||null===i)return;if(["navigation","pagination","scrollbar"].indexOf(r)>=0&&!0===n[r]&&(n[r]={auto:!0}),!(r in n)||!("enabled"in i))return;!0===n[r]&&(n[r]={enabled:!0}),"object"!=typeof n[r]||"enabled"in n[r]||(n[r].enabled=!0),n[r]||(n[r]={enabled:!1})}}));var l,u,c=_({},Q);return o.useParams(c),o.params=_({},c,ee,n),o.originalParams=_({},o.params),o.passedParams=_({},n),o.params&&o.params.on&&Object.keys(o.params.on).forEach((function(e){o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),o.$=y,_(o,{enabled:o.params.enabled,el:t,classNames:[],slides:y(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===o.params.direction},isVertical:function(){return"vertical"===o.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend","touchcancel"],u=["mousedown","mousemove","mouseup"],o.support.pointerEvents&&(u=["pointerdown","pointermove","pointerup"]),o.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},o.touchEventsDesktop={start:u[0],move:u[1],end:u[2]},o.support.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:x(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.emit("_swiper"),o.params.init&&o.init(),o}var t,n,i=e.prototype;return i.enable=function(){var e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))},i.disable=function(){var e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))},i.setProgress=function(e,t){var n=this;e=Math.min(Math.max(e,0),1);var r=n.minTranslate(),i=(n.maxTranslate()-r)*e+r;n.translateTo(i,void 0===t?0:t),n.updateActiveIndex(),n.updateSlidesClasses()},i.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},i.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter((function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)})).join(" ")},i.emitSlidesClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=[];e.slides.each((function(n){var r=e.getSlideClasses(n);t.push({slideEl:n,classNames:r}),e.emit("_slideClass",n,r)})),e.emit("_slideClasses",t)}},i.slidesPerViewDynamic=function(){var e=this,t=e.params,n=e.slides,r=e.slidesGrid,i=e.size,a=e.activeIndex,s=1;if(t.centeredSlides){for(var o,l=n[a].swiperSlideSize,u=a+1;u<n.length;u+=1)n[u]&&!o&&(s+=1,(l+=n[u].swiperSlideSize)>i&&(o=!0));for(var c=a-1;c>=0;c-=1)n[c]&&!o&&(s+=1,(l+=n[c].swiperSlideSize)>i&&(o=!0))}else for(var d=a+1;d<n.length;d+=1)r[d]-r[a]<i&&(s+=1);return s},i.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,n=e.params;n.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(r(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||r(),n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function r(){var t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}},i.changeDirection=function(e,t){void 0===t&&(t=!0);var n=this,r=n.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(n.$el.removeClass(""+n.params.containerModifierClass+r).addClass(""+n.params.containerModifierClass+e),n.emitContainerClasses(),n.params.direction=e,n.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),n.emit("changeDirection"),t&&n.update()),n},i.mount=function(e){var t=this;if(t.mounted)return!0;var n=y(e||t.params.el);if(!(e=n[0]))return!1;e.swiper=t;var i=function(){return"."+(t.params.wrapperClass||"").trim().split(" ").join(".")},a=function(){if(e&&e.shadowRoot&&e.shadowRoot.querySelector){var t=y(e.shadowRoot.querySelector(i()));return t.children=function(e){return n.children(e)},t}return n.children(i())}();if(0===a.length&&t.params.createElements){var s=r().createElement("div");a=y(s),s.className=t.params.wrapperClass,n.append(s),n.children("."+t.params.slideClass).each((function(e){a.append(e)}))}return _(t,{$el:n,el:e,$wrapperEl:a,wrapperEl:a[0],mounted:!0,rtl:"rtl"===e.dir.toLowerCase()||"rtl"===n.css("direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===e.dir.toLowerCase()||"rtl"===n.css("direction")),wrongRTL:"-webkit-box"===a.css("display")}),!0},i.init=function(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t},i.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var n,r=this,i=r.params,a=r.$el,s=r.$wrapperEl,o=r.slides;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),i.loop&&r.loopDestroy(),t&&(r.removeClasses(),a.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),r.emit("destroy"),Object.keys(r.eventsListeners).forEach((function(e){r.off(e)})),!1!==e&&(r.$el[0].swiper=null,n=r,Object.keys(n).forEach((function(e){try{n[e]=null}catch(e){}try{delete n[e]}catch(e){}}))),r.destroyed=!0),null},e.extendDefaults=function(e){_(ee,e)},e.installModule=function(t){e.prototype.modules||(e.prototype.modules={});var n=t.name||Object.keys(e.prototype.modules).length+"_"+x();e.prototype.modules[n]=t},e.use=function(t){return Array.isArray(t)?(t.forEach((function(t){return e.installModule(t)})),e):(e.installModule(t),e)},t=e,n=[{key:"extendedDefaults",get:function(){return ee}},{key:"defaults",get:function(){return Q}}],null&&J(t.prototype,null),n&&J(t,n),e}();Object.keys(Z).forEach((function(e){Object.keys(Z[e]).forEach((function(t){te.prototype[t]=Z[e][t]}))})),te.use([D,z]);const ne=te;function re(){return re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},re.apply(this,arguments)}var ie={setTranslate:function(){for(var e=this,t=e.slides,n=0;n<t.length;n+=1){var r=e.slides.eq(n),i=-r[0].swiperSlideOffset;e.params.virtualTranslate||(i-=e.translate);var a=0;e.isHorizontal()||(a=i,i=0);var s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(r[0].progress),0):1+Math.min(Math.max(r[0].progress,-1),0);r.css({opacity:s}).transform("translate3d("+i+"px, "+a+"px, 0px)")}},setTransition:function(e){var t=this,n=t.slides,r=t.$wrapperEl;if(n.transition(e),t.params.virtualTranslate&&0!==e){var i=!1;n.transitionEnd((function(){if(!i&&t&&!t.destroyed){i=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],n=0;n<e.length;n+=1)r.trigger(e[n])}}))}}};const ae={name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){C(this,{fadeEffect:re({},ie)})},on:{beforeInit:function(e){if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};_(e.params,t),_(e.originalParams,t)}},setTranslate:function(e){"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){"fade"===e.params.effect&&e.fadeEffect.setTransition(t)}}};function se(){return se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},se.apply(this,arguments)}var oe={toggleEl:function(e,t){e[t?"addClass":"removeClass"](this.params.navigation.disabledClass),e[0]&&"BUTTON"===e[0].tagName&&(e[0].disabled=t)},update:function(){var e=this,t=e.params.navigation,n=e.navigation.toggleEl;if(!e.params.loop){var r=e.navigation,i=r.$nextEl,a=r.$prevEl;a&&a.length>0&&(e.isBeginning?n(a,!0):n(a,!1),e.params.watchOverflow&&e.enabled&&a[e.isLocked?"addClass":"removeClass"](t.lockClass)),i&&i.length>0&&(e.isEnd?n(i,!0):n(i,!1),e.params.watchOverflow&&e.enabled&&i[e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,n=this,r=n.params.navigation;n.params.navigation=E(n.$el,n.params.navigation,n.params.createElements,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),(r.nextEl||r.prevEl)&&(r.nextEl&&(e=y(r.nextEl),n.params.uniqueNavElements&&"string"==typeof r.nextEl&&e.length>1&&1===n.$el.find(r.nextEl).length&&(e=n.$el.find(r.nextEl))),r.prevEl&&(t=y(r.prevEl),n.params.uniqueNavElements&&"string"==typeof r.prevEl&&t.length>1&&1===n.$el.find(r.prevEl).length&&(t=n.$el.find(r.prevEl))),e&&e.length>0&&e.on("click",n.navigation.onNextClick),t&&t.length>0&&t.on("click",n.navigation.onPrevClick),_(n.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}),n.enabled||(e&&e.addClass(r.lockClass),t&&t.addClass(r.lockClass)))},destroy:function(){var e=this,t=e.navigation,n=t.$nextEl,r=t.$prevEl;n&&n.length&&(n.off("click",e.navigation.onNextClick),n.removeClass(e.params.navigation.disabledClass)),r&&r.length&&(r.off("click",e.navigation.onPrevClick),r.removeClass(e.params.navigation.disabledClass))}};const le={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){C(this,{navigation:se({},oe)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},"enable disable":function(e){var t=e.navigation,n=t.$nextEl,r=t.$prevEl;n&&n[e.enabled?"removeClass":"addClass"](e.params.navigation.lockClass),r&&r[e.enabled?"removeClass":"addClass"](e.params.navigation.lockClass)},click:function(e,t){var n=e.navigation,r=n.$nextEl,i=n.$prevEl,a=t.target;if(e.params.navigation.hideOnClick&&!y(a).is(i)&&!y(a).is(r)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===a||e.pagination.el.contains(a)))return;var s;r?s=r.hasClass(e.params.navigation.hiddenClass):i&&(s=i.hasClass(e.params.navigation.hiddenClass)),!0===s?e.emit("navigationShow"):e.emit("navigationHide"),r&&r.toggleClass(e.params.navigation.hiddenClass),i&&i.toggleClass(e.params.navigation.hiddenClass)}}}};function ue(){return ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ue.apply(this,arguments)}var ce={update:function(){var e=this,t=e.rtl,n=e.params.pagination;if(n.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var r,i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,a=e.pagination.$el,s=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((r=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>i-1-2*e.loopedSlides&&(r-=i-2*e.loopedSlides),r>s-1&&(r-=s),r<0&&"bullets"!==e.params.paginationType&&(r=s+r)):r=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===n.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,u,c=e.pagination.bullets;if(n.dynamicBullets&&(e.pagination.bulletSize=c.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),a.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(n.dynamicMainBullets+4)+"px"),n.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=r-e.previousIndex,e.pagination.dynamicBulletIndex>n.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=n.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=r-e.pagination.dynamicBulletIndex,u=((l=o+(Math.min(c.length,n.dynamicMainBullets)-1))+o)/2),c.removeClass(n.bulletActiveClass+" "+n.bulletActiveClass+"-next "+n.bulletActiveClass+"-next-next "+n.bulletActiveClass+"-prev "+n.bulletActiveClass+"-prev-prev "+n.bulletActiveClass+"-main"),a.length>1)c.each((function(e){var t=y(e),i=t.index();i===r&&t.addClass(n.bulletActiveClass),n.dynamicBullets&&(i>=o&&i<=l&&t.addClass(n.bulletActiveClass+"-main"),i===o&&t.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),i===l&&t.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next"))}));else{var d=c.eq(r),p=d.index();if(d.addClass(n.bulletActiveClass),n.dynamicBullets){for(var f=c.eq(o),h=c.eq(l),v=o;v<=l;v+=1)c.eq(v).addClass(n.bulletActiveClass+"-main");if(e.params.loop)if(p>=c.length-n.dynamicMainBullets){for(var m=n.dynamicMainBullets;m>=0;m-=1)c.eq(c.length-m).addClass(n.bulletActiveClass+"-main");c.eq(c.length-n.dynamicMainBullets-1).addClass(n.bulletActiveClass+"-prev")}else f.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),h.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next");else f.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),h.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next")}}if(n.dynamicBullets){var g=Math.min(c.length,n.dynamicMainBullets+4),b=(e.pagination.bulletSize*g-e.pagination.bulletSize)/2-u*e.pagination.bulletSize,x=t?"right":"left";c.css(e.isHorizontal()?x:"top",b+"px")}}if("fraction"===n.type&&(a.find(S(n.currentClass)).text(n.formatFractionCurrent(r+1)),a.find(S(n.totalClass)).text(n.formatFractionTotal(s))),"progressbar"===n.type){var w;w=n.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var T=(r+1)/s,_=1,C=1;"horizontal"===w?_=T:C=T,a.find(S(n.progressbarFillClass)).transform("translate3d(0,0,0) scaleX("+_+") scaleY("+C+")").transition(e.params.speed)}"custom"===n.type&&n.renderCustom?(a.html(n.renderCustom(e,r+1,s)),e.emit("paginationRender",a[0])):e.emit("paginationUpdate",a[0]),e.params.watchOverflow&&e.enabled&&a[e.isLocked?"addClass":"removeClass"](n.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el,i="";if("bullets"===t.type){var a=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&!e.params.loop&&a>n&&(a=n);for(var s=0;s<a;s+=1)t.renderBullet?i+=t.renderBullet.call(e,s,t.bulletClass):i+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";r.html(i),e.pagination.bullets=r.find(S(t.bulletClass))}"fraction"===t.type&&(i=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',r.html(i)),"progressbar"===t.type&&(i=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',r.html(i)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e=this;e.params.pagination=E(e.$el,e.params.pagination,e.params.createElements,{el:"swiper-pagination"});var t=e.params.pagination;if(t.el){var n=y(t.el);0!==n.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&n.length>1&&(n=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&n.addClass(t.clickableClass),n.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(n.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&n.addClass(t.progressbarOppositeClass),t.clickable&&n.on("click",S(t.bulletClass),(function(t){t.preventDefault();var n=y(this).index()*e.params.slidesPerGroup;e.params.loop&&(n+=e.loopedSlides),e.slideTo(n)})),_(e.pagination,{$el:n,el:n[0]}),e.enabled||n.addClass(t.lockClass))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.pagination.$el;n.removeClass(t.hiddenClass),n.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&n.off("click",S(t.bulletClass))}}};const de={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){C(this,{pagination:ue({dynamicBulletIndex:0},ce)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},"enable disable":function(e){var t=e.pagination.$el;t&&t[e.enabled?"removeClass":"addClass"](e.params.pagination.lockClass)},click:function(e,t){var n=t.target;if(e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!y(n).hasClass(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&n===e.navigation.nextEl||e.navigation.prevEl&&n===e.navigation.prevEl))return;!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass)}}}};function pe(){return pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},pe.apply(this,arguments)}var fe={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,n=e.rtlTranslate,r=e.progress,i=t.dragSize,a=t.trackSize,s=t.$dragEl,o=t.$el,l=e.params.scrollbar,u=i,c=(a-i)*r;n?(c=-c)>0?(u=i-c,c=0):-c+i>a&&(u=a+c):c<0?(u=i+c,c=0):c+i>a&&(u=a-c),e.isHorizontal()?(s.transform("translate3d("+c+"px, 0, 0)"),s[0].style.width=u+"px"):(s.transform("translate3d(0px, "+c+"px, 0)"),s[0].style.height=u+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout((function(){o[0].style.opacity=0,o.transition(400)}),1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,n=t.$dragEl,r=t.$el;n[0].style.width="",n[0].style.height="";var i,a=e.isHorizontal()?r[0].offsetWidth:r[0].offsetHeight,s=e.size/e.virtualSize,o=s*(a/e.size);i="auto"===e.params.scrollbar.dragSize?a*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?n[0].style.width=i+"px":n[0].style.height=i+"px",r[0].style.display=s>=1?"none":"",e.params.scrollbar.hide&&(r[0].style.opacity=0),_(t,{trackSize:a,divider:s,moveDivider:o,dragSize:i}),e.params.watchOverflow&&e.enabled&&t.$el[e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,n=this,r=n.scrollbar,i=n.rtlTranslate,a=r.$el,s=r.dragSize,o=r.trackSize,l=r.dragStartPos;t=(r.getPointerPosition(e)-a.offset()[n.isHorizontal()?"left":"top"]-(null!==l?l:s/2))/(o-s),t=Math.max(Math.min(t,1),0),i&&(t=1-t);var u=n.minTranslate()+(n.maxTranslate()-n.minTranslate())*t;n.updateProgress(u),n.setTranslate(u),n.updateActiveIndex(),n.updateSlidesClasses()},onDragStart:function(e){var t=this,n=t.params.scrollbar,r=t.scrollbar,i=t.$wrapperEl,a=r.$el,s=r.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===s[0]||e.target===s?r.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),i.transition(100),s.transition(100),r.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),a.transition(0),n.hide&&a.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this,n=t.scrollbar,r=t.$wrapperEl,i=n.$el,a=n.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,n.setDragPosition(e),r.transition(0),i.transition(0),a.transition(0),t.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,n=t.params.scrollbar,r=t.scrollbar,i=t.$wrapperEl,a=r.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),i.transition("")),n.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=b((function(){a.css("opacity",0),a.transition(400)}),1e3)),t.emit("scrollbarDragEnd",e),n.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),n=e.scrollbar,i=e.touchEventsTouch,a=e.touchEventsDesktop,s=e.params,o=e.support,l=n.$el[0],u=!(!o.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},c=!(!o.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.addEventListener(i.start,e.scrollbar.onDragStart,u),l.addEventListener(i.move,e.scrollbar.onDragMove,u),l.addEventListener(i.end,e.scrollbar.onDragEnd,c)):(l.addEventListener(a.start,e.scrollbar.onDragStart,u),t.addEventListener(a.move,e.scrollbar.onDragMove,u),t.addEventListener(a.end,e.scrollbar.onDragEnd,c)))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=r(),n=e.scrollbar,i=e.touchEventsTouch,a=e.touchEventsDesktop,s=e.params,o=e.support,l=n.$el[0],u=!(!o.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},c=!(!o.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};l&&(o.touch?(l.removeEventListener(i.start,e.scrollbar.onDragStart,u),l.removeEventListener(i.move,e.scrollbar.onDragMove,u),l.removeEventListener(i.end,e.scrollbar.onDragEnd,c)):(l.removeEventListener(a.start,e.scrollbar.onDragStart,u),t.removeEventListener(a.move,e.scrollbar.onDragMove,u),t.removeEventListener(a.end,e.scrollbar.onDragEnd,c)))}},init:function(){var e=this,t=e.scrollbar,n=e.$el;e.params.scrollbar=E(n,e.params.scrollbar,e.params.createElements,{el:"swiper-scrollbar"});var r=e.params.scrollbar;if(r.el){var i=y(r.el);e.params.uniqueNavElements&&"string"==typeof r.el&&i.length>1&&1===n.find(r.el).length&&(i=n.find(r.el));var a=i.find("."+e.params.scrollbar.dragClass);0===a.length&&(a=y('<div class="'+e.params.scrollbar.dragClass+'"></div>'),i.append(a)),_(t,{$el:i,el:i[0],$dragEl:a,dragEl:a[0]}),r.draggable&&t.enableDraggable(),i&&i[e.enabled?"removeClass":"addClass"](e.params.scrollbar.lockClass)}},destroy:function(){this.scrollbar.disableDraggable()}};const he={name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){C(this,{scrollbar:pe({isTouched:!1,timeout:null,dragTimeout:null},fe)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},"enable disable":function(e){var t=e.scrollbar.$el;t&&t[e.enabled?"removeClass":"addClass"](e.params.scrollbar.lockClass)},destroy:function(e){e.scrollbar.destroy()}}};function ve(){return ve=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ve.apply(this,arguments)}var me={LinearSpline:function(e,t){var n,r,i,a,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=function(e,t){for(r=-1,n=e.length;n-r>1;)e[i=n+r>>1]<=t?r=i:n=i;return n}(this.x,e),a=s-1,(e-this.x[a])*(this.y[s]-this.y[a])/(this.x[s]-this.x[a])+this.y[a]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new me.LinearSpline(t.slidesGrid,e.slidesGrid):new me.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var n,r,i=this,a=i.controller.control,s=i.constructor;function o(e){var t=i.rtlTranslate?-i.translate:i.translate;"slide"===i.params.controller.by&&(i.controller.getInterpolateFunction(e),r=-i.controller.spline.interpolate(-t)),r&&"container"!==i.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(i.maxTranslate()-i.minTranslate()),r=(t-i.minTranslate())*n+e.minTranslate()),i.params.controller.inverse&&(r=e.maxTranslate()-r),e.updateProgress(r),e.setTranslate(r,i),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(var l=0;l<a.length;l+=1)a[l]!==t&&a[l]instanceof s&&o(a[l]);else a instanceof s&&t!==a&&o(a)},setTransition:function(e,t){var n,r=this,i=r.constructor,a=r.controller.control;function s(t){t.setTransition(e,r),0!==e&&(t.transitionStart(),t.params.autoHeight&&b((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){a&&(t.params.loop&&"slide"===r.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(a))for(n=0;n<a.length;n+=1)a[n]!==t&&a[n]instanceof i&&s(a[n]);else a instanceof i&&t!==a&&s(a)}};const ge={name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){C(this,{controller:ve({control:this.params.controller.control},me)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,n){e.controller.control&&e.controller.setTranslate(t,n)},setTransition:function(e,t,n){e.controller.control&&e.controller.setTransition(t,n)}}};function ye(){return ye=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ye.apply(this,arguments)}var be={setTransform:function(e,t){var n=this.rtl,r=y(e),i=n?-1:1,a=r.attr("data-swiper-parallax")||"0",s=r.attr("data-swiper-parallax-x"),o=r.attr("data-swiper-parallax-y"),l=r.attr("data-swiper-parallax-scale"),u=r.attr("data-swiper-parallax-opacity");if(s||o?(s=s||"0",o=o||"0"):this.isHorizontal()?(s=a,o="0"):(o=a,s="0"),s=s.indexOf("%")>=0?parseInt(s,10)*t*i+"%":s*t*i+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=u){var c=u-(u-1)*(1-Math.abs(t));r[0].style.opacity=c}if(null==l)r.transform("translate3d("+s+", "+o+", 0px)");else{var d=l-(l-1)*(1-Math.abs(t));r.transform("translate3d("+s+", "+o+", 0px) scale("+d+")")}},setTranslate:function(){var e=this,t=e.$el,n=e.slides,r=e.progress,i=e.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,r)})),n.each((function(t,n){var a=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(a+=Math.ceil(n/2)-r*(i.length-1)),a=Math.min(Math.max(a,-1),1),y(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,a)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){var n=y(t),r=parseInt(n.attr("data-swiper-parallax-duration"),10)||e;0===e&&(r=0),n.transition(r)}))}};const xe={name:"parallax",params:{parallax:{enabled:!1}},create:function(){C(this,{parallax:ye({},be)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}};var we={lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return a().navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e=r(),t="onwheel",n=t in e;if(!n){var i=e.createElement("div");i.setAttribute(t,"return;"),n="function"==typeof i.onwheel}return!n&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature("","")&&(n=e.implementation.hasFeature("Events.wheel","3.0")),n}()?"wheel":"mousewheel"},normalize:function(e){var t=0,n=0,r=0,i=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),r=10*t,i=10*n,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(r=e.deltaX),e.shiftKey&&!r&&(r=i,i=0),(r||i)&&e.deltaMode&&(1===e.deltaMode?(r*=40,i*=40):(r*=800,i*=800)),r&&!t&&(t=r<1?-1:1),i&&!n&&(n=i<1?-1:1),{spinX:t,spinY:n,pixelX:r,pixelY:i}},handleMouseEnter:function(){this.enabled&&(this.mouseEntered=!0)},handleMouseLeave:function(){this.enabled&&(this.mouseEntered=!1)},handle:function(e){var t=e,n=this;if(n.enabled){var r=n.params.mousewheel;n.params.cssMode&&t.preventDefault();var i=n.$el;if("container"!==n.params.mousewheel.eventsTarget&&(i=y(n.params.mousewheel.eventsTarget)),!n.mouseEntered&&!i[0].contains(t.target)&&!r.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,s=n.rtlTranslate?-1:1,o=we.normalize(t);if(r.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;a=-o.pixelX*s}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;a=-o.pixelY}else a=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*s:-o.pixelY;if(0===a)return!0;r.invert&&(a=-a);var l=n.getTranslate()+a*r.sensitivity;if(l>=n.minTranslate()&&(l=n.minTranslate()),l<=n.maxTranslate()&&(l=n.maxTranslate()),(!!n.params.loop||!(l===n.minTranslate()||l===n.maxTranslate()))&&n.params.nested&&t.stopPropagation(),n.params.freeMode){var u={time:x(),delta:Math.abs(a),direction:Math.sign(a)},c=n.mousewheel.lastEventBeforeSnap,d=c&&u.time<c.time+500&&u.delta<=c.delta&&u.direction===c.direction;if(!d){n.mousewheel.lastEventBeforeSnap=void 0,n.params.loop&&n.loopFix();var p=n.getTranslate()+a*r.sensitivity,f=n.isBeginning,h=n.isEnd;if(p>=n.minTranslate()&&(p=n.minTranslate()),p<=n.maxTranslate()&&(p=n.maxTranslate()),n.setTransition(0),n.setTranslate(p),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!f&&n.isBeginning||!h&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky){clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=void 0;var v=n.mousewheel.recentWheelEvents;v.length>=15&&v.shift();var m=v.length?v[v.length-1]:void 0,g=v[0];if(v.push(u),m&&(u.delta>m.delta||u.direction!==m.direction))v.splice(0);else if(v.length>=15&&u.time-g.time<500&&g.delta-u.delta>=1&&u.delta<=6){var w=a>0?.8:.2;n.mousewheel.lastEventBeforeSnap=u,v.splice(0),n.mousewheel.timeout=b((function(){n.slideToClosest(n.params.speed,!0,void 0,w)}),0)}n.mousewheel.timeout||(n.mousewheel.timeout=b((function(){n.mousewheel.lastEventBeforeSnap=u,v.splice(0),n.slideToClosest(n.params.speed,!0,void 0,.5)}),500))}if(d||n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.autoplay.stop(),p===n.minTranslate()||p===n.maxTranslate())return!0}}else{var T={time:x(),delta:Math.abs(a),direction:Math.sign(a),raw:e},_=n.mousewheel.recentWheelEvents;_.length>=2&&_.shift();var C=_.length?_[_.length-1]:void 0;if(_.push(T),C?(T.direction!==C.direction||T.delta>C.delta||T.time>C.time+150)&&n.mousewheel.animateSlider(T):n.mousewheel.animateSlider(T),n.mousewheel.releaseScroll(T))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1}},animateSlider:function(e){var t=this,n=a();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta||this.params.mousewheel.thresholdTime&&x()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime||!(e.delta>=6&&x()-t.mousewheel.lastScrollTime<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new n.Date).getTime(),1))},releaseScroll:function(e){var t=this,n=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&n.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&n.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=we.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var n=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(n=y(e.params.mousewheel.eventsTarget)),n.on("mouseenter",e.mousewheel.handleMouseEnter),n.on("mouseleave",e.mousewheel.handleMouseLeave),n.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable:function(){var e=this,t=we.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var n=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(n=y(e.params.mousewheel.eventsTarget)),n.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const Te={name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}},create:function(){C(this,{mousewheel:{enabled:!1,lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:we.enable,disable:we.disable,handle:we.handle,handleMouseEnter:we.handleMouseEnter,handleMouseLeave:we.handleMouseLeave,animateSlider:we.animateSlider,releaseScroll:we.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}};ne.use([ae,le,de,he,ge,xe,Te]),console.log("slider"),new ne(".slider-project",{slidesPerView:"auto",spaceBetween:30,observer:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},scrollbar:{el:".swiper-scrollbar",draggable:!0},breakpoints:{320:{spaceBetween:20}}}),new ne(".slider-services-filter",{slidesPerView:"auto",spaceBetween:10}),new ne(".slider-gallery",{loop:!1,slidesPerView:"auto",spaceBetween:30,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},scrollbar:{el:".swiper-scrollbar",draggable:!0}}),new ne(".slider-gallery-min",{loop:!1,slidesPerView:4,spaceBetween:30,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},scrollbar:{el:".swiper-scrollbar",draggable:!0}});var _e=new ne(".slider-header",{loop:!1,effect:"fade"}),Ce=new ne(".slider-thumbs",{loop:!1,effect:"fade",navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},pagination:{el:".swiper-pagination",clickable:!0},scrollbar:{el:".swiper-scrollbar",draggable:!0}});_e.controller.control=Ce,Ce.controller.control=_e,new ne(".slider-service",{slidesPerView:"auto",spaceBetween:30,pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},scrollbar:{el:".swiper-scrollbar",draggable:!0},breakpoints:{320:{slidesPerView:"auto",spaceBetween:20},1140:{slidesPerView:"auto",spaceBetween:30}}}),new ne(".slider-project-single",{navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}})},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var a=[],s=Object.getPrototypeOf,o=a.slice,l=a.flat?function(e){return a.flat.call(e)}:function(e){return a.concat.apply([],e)},u=a.push,c=a.indexOf,d={},p=d.toString,f=d.hasOwnProperty,h=f.toString,v=h.call(Object),m={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=r.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,i,a=(n=n||b).createElement("script");if(a.text=e,t)for(r in x)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&a.setAttribute(r,i);n.head.appendChild(a).parentNode.removeChild(a)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var _="3.6.0",C=function(e,t){return new C.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:_,constructor:C,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(C.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(C.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:a.sort,splice:a.splice},C.extend=C.fn.extend=function(){var e,t,n,r,i,a,s=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[o]||{},o++),"object"==typeof s||g(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(u&&r&&(C.isPlainObject(r)||(i=Array.isArray(r)))?(n=s[t],a=i&&!Array.isArray(n)?[]:i||C.isPlainObject(n)?n:{},i=!1,s[t]=C.extend(u,a,r)):void 0!==r&&(s[t]=r));return s},C.extend({expando:"jQuery"+(_+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=s(e))&&("function"!=typeof(n=f.call(t,"constructor")&&t.constructor)||h.call(n)!==v))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(S(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?C.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,a=e.length,s=!n;i<a;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,a=0,s=[];if(S(e))for(r=e.length;a<r;a++)null!=(i=t(e[a],a,n))&&s.push(i);else for(a in e)null!=(i=t(e[a],a,n))&&s.push(i);return l(s)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=a[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,r,i,a,s,o,l,u,c,d,p,f,h,v,m,g,y,b,x="sizzle"+1*new Date,w=e.document,T=0,_=0,C=le(),S=le(),E=le(),k=le(),M=function(e,t){return e===t&&(d=!0),0},A={}.hasOwnProperty,O=[],P=O.pop,L=O.push,D=O.push,j=O.slice,N=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},z="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\[[\\x20\\t\\r\\n\\f]*("+B+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+I+"*\\]",H=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",F=new RegExp(I+"+","g"),q=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),W=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),G=new RegExp(I+"|>"),V=new RegExp(H),X=new RegExp("^"+B+"$"),Y={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+z+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},U=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=function(){p()},se=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{D.apply(O=j.call(w.childNodes),w.childNodes),O[w.childNodes.length].nodeType}catch(e){D={apply:O.length?function(e,t){L.apply(e,j.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,i){var a,o,u,c,d,h,g,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!i&&(p(t),t=t||f,v)){if(11!==w&&(d=Z.exec(e)))if(a=d[1]){if(9===w){if(!(u=t.getElementById(a)))return r;if(u.id===a)return r.push(u),r}else if(y&&(u=y.getElementById(a))&&b(t,u)&&u.id===a)return r.push(u),r}else{if(d[2])return D.apply(r,t.getElementsByTagName(e)),r;if((a=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&!k[e+" "]&&(!m||!m.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===w&&(G.test(e)||W.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,ie):t.setAttribute("id",c=x)),o=(h=s(e)).length;o--;)h[o]=(c?"#"+c:":scope")+" "+be(h[o]);g=h.join(",")}try{return D.apply(r,y.querySelectorAll(g)),r}catch(t){k(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(q,"$1"),t,r,i)}function le(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ue(e){return e[x]=!0,e}function ce(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ve(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ue((function(t){return t=+t,ue((function(n,r){for(var i,a=e([],n.length,t),s=a.length;s--;)n[i=a[s]]&&(n[i]=!(r[i]=n[i]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},a=oe.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!U.test(t||n&&n.nodeName||"HTML")},p=oe.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:w;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,v=!a(f),w!=f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ae,!1):i.attachEvent&&i.attachEvent("onunload",ae)),n.scope=ce((function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(f.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,r,i,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(i=t.getElementsByName(e),r=0;a=i[r++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[i++];)1===n.nodeType&&r.push(n);return r}return a},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},g=[],m=[],(n.qsa=J.test(f.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+z+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),(t=f.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",H)})),m=m.length&&new RegExp(m.join("|")),g=g.length&&new RegExp(g.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},M=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==f||e.ownerDocument==w&&b(w,e)?-1:t==f||t.ownerDocument==w&&b(w,t)?1:c?N(c,e)-N(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,a=t.parentNode,s=[e],o=[t];if(!i||!a)return e==f?-1:t==f?1:i?-1:a?1:c?N(c,e)-N(c,t):0;if(i===a)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[r]===o[r];)r++;return r?pe(s[r],o[r]):s[r]==w?-1:o[r]==w?1:0},f):f},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&v&&!k[t+" "]&&(!g||!g.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){k(t,!0)}return oe(t,f,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!=f&&p(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=f&&p(e);var i=r.attrHandle[t.toLowerCase()],a=i&&A.call(r.attrHandle,t.toLowerCase())?i(e,t,!v):void 0;return void 0!==a?a:n.attributes||!v?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},oe.escape=function(e){return(e+"").replace(re,ie)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,a=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(M),d){for(;t=e[a++];)t===e[a]&&(i=r.push(a));for(;i--;)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},r=oe.selectors={cacheLength:50,createPseudo:ue,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+I+"|$)"))&&C(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var a="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,p,f,h,v=a!==s?"nextSibling":"previousSibling",m=t.parentNode,g=o&&t.nodeName.toLowerCase(),y=!l&&!o,b=!1;if(m){if(a){for(;v;){for(p=t;p=p[v];)if(o?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(b=(f=(u=(c=(d=(p=m)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===T&&u[1])&&u[2],p=f&&m.childNodes[f];p=++f&&p&&p[v]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[T,f,b];break}}else if(y&&(b=f=(u=(c=(d=(p=t)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===T&&u[1]),!1===b)for(;(p=++f&&p&&p[v]||(b=f=0)||h.pop())&&((o?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++b||(y&&((c=(d=p[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[T,b]),p!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[x]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,a=i(e,t),s=a.length;s--;)e[r=N(e,a[s])]=!(n[r]=a[s])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ue((function(e){var t=[],n=[],r=o(e.replace(q,"$1"));return r[x]?ue((function(e,t,n,i){for(var a,s=r(e,null,i,[]),o=e.length;o--;)(a=s[o])&&(e[o]=!(t[o]=a))})):function(e,i,a){return t[0]=e,r(t,null,a,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return oe(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ue((function(e){return X.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,i=t.next,a=i||r,s=n&&"parentNode"===a,o=_++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,l){var u,c,d,p=[T,o];if(l){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[a])&&u[0]===T&&u[1]===o)return p[2]=u[2];if(c[a]=p,p[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Te(e,t,n,r,i){for(var a,s=[],o=0,l=e.length,u=null!=t;o<l;o++)(a=e[o])&&(n&&!n(a,r,i)||(s.push(a),u&&t.push(o)));return s}function _e(e,t,n,r,i,a){return r&&!r[x]&&(r=_e(r)),i&&!i[x]&&(i=_e(i,a)),ue((function(a,s,o,l){var u,c,d,p=[],f=[],h=s.length,v=a||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(t||"*",o.nodeType?[o]:o,[]),m=!e||!a&&t?v:Te(v,p,e,o,l),g=n?i||(a?e:h||r)?[]:s:m;if(n&&n(m,g,o,l),r)for(u=Te(g,f),r(u,[],o,l),c=u.length;c--;)(d=u[c])&&(g[f[c]]=!(m[f[c]]=d));if(a){if(i||e){if(i){for(u=[],c=g.length;c--;)(d=g[c])&&u.push(m[c]=d);i(null,g=[],u,l)}for(c=g.length;c--;)(d=g[c])&&(u=i?N(a,d):p[c])>-1&&(a[u]=!(s[u]=d))}}else g=Te(g===s?g.splice(h,g.length):g),i?i(null,s,g,l):D.apply(s,g)}))}function Ce(e){for(var t,n,i,a=e.length,s=r.relative[e[0].type],o=s||r.relative[" "],l=s?1:0,c=xe((function(e){return e===t}),o,!0),d=xe((function(e){return N(t,e)>-1}),o,!0),p=[function(e,n,r){var i=!s&&(r||n!==u)||((t=n).nodeType?c(e,n,r):d(e,n,r));return t=null,i}];l<a;l++)if(n=r.relative[e[l].type])p=[xe(we(p),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[x]){for(i=++l;i<a&&!r.relative[e[i].type];i++);return _e(l>1&&we(p),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(q,"$1"),n,l<i&&Ce(e.slice(l,i)),i<a&&Ce(e=e.slice(i)),i<a&&be(e))}p.push(n)}return we(p)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,s=oe.tokenize=function(e,t){var n,i,a,s,o,l,u,c=S[e+" "];if(c)return t?0:c.slice(0);for(o=e,l=[],u=r.preFilter;o;){for(s in n&&!(i=$.exec(o))||(i&&(o=o.slice(i[0].length)||o),l.push(a=[])),n=!1,(i=W.exec(o))&&(n=i.shift(),a.push({value:n,type:i[0].replace(q," ")}),o=o.slice(n.length)),r.filter)!(i=Y[s].exec(o))||u[s]&&!(i=u[s](i))||(n=i.shift(),a.push({value:n,type:s,matches:i}),o=o.slice(n.length));if(!n)break}return t?o.length:o?oe.error(e):S(e,l).slice(0)},o=oe.compile=function(e,t){var n,i=[],a=[],o=E[e+" "];if(!o){for(t||(t=s(e)),n=t.length;n--;)(o=Ce(t[n]))[x]?i.push(o):a.push(o);o=E(e,function(e,t){var n=t.length>0,i=e.length>0,a=function(a,s,o,l,c){var d,h,m,g=0,y="0",b=a&&[],x=[],w=u,_=a||i&&r.find.TAG("*",c),C=T+=null==w?1:Math.random()||.1,S=_.length;for(c&&(u=s==f||s||c);y!==S&&null!=(d=_[y]);y++){if(i&&d){for(h=0,s||d.ownerDocument==f||(p(d),o=!v);m=e[h++];)if(m(d,s||f,o)){l.push(d);break}c&&(T=C)}n&&((d=!m&&d)&&g--,a&&b.push(d))}if(g+=y,n&&y!==g){for(h=0;m=t[h++];)m(b,x,s,o);if(a){if(g>0)for(;y--;)b[y]||x[y]||(x[y]=P.call(l));x=Te(x)}D.apply(l,x),c&&!a&&x.length>0&&g+t.length>1&&oe.uniqueSort(l)}return c&&(T=C,u=w),b};return n?ue(a):a}(a,i)),o.selector=e}return o},l=oe.select=function(e,t,n,i){var a,l,u,c,d,p="function"==typeof e&&e,f=!i&&s(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&v&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(a=Y.needsContext.test(e)?0:l.length;a--&&(u=l[a],!r.relative[c=u.type]);)if((d=r.find[c])&&(i=d(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(a,1),!(e=i.length&&be(l)))return D.apply(n,i),n;break}}return(p||o(e,f))(i,t,!v,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=x.split("").sort(M).join("")===x,n.detectDuplicates=!!d,p(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(z,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),oe}(r);C.find=E,C.expr=E.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=E.uniqueSort,C.text=E.getText,C.isXMLDoc=E.isXML,C.contains=E.contains,C.escapeSelector=E.escape;var k=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&C(e).is(n))break;r.push(e)}return r},M=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=C.expr.match.needsContext;function O(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var P=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,t,n){return g(t)?C.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?C.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?C.grep(e,(function(e){return c.call(t,e)>-1!==n})):C.filter(t,e,n)}C.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?C.find.matchesSelector(r,e)?[r]:[]:C.find.matches(e,C.grep(t,(function(e){return 1===e.nodeType})))},C.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(C(e).filter((function(){for(t=0;t<r;t++)if(C.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)C.find(e,i[t],n);return r>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&A.test(e)?C(e):e||[],!1).length}});var D,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),P.test(r[1])&&C.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=b.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,D=C(b);var N=/^(?:parents|prev(?:Until|All))/,z={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,a=[],s="string"!=typeof e&&C(e);if(!A.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?C.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?c.call(C(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return M((e.parentNode||{}).firstChild,e)},children:function(e){return M(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(O(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},(function(e,t){C.fn[e]=function(n,r){var i=C.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=C.filter(r,i)),this.length>1&&(z[e]||C.uniqueSort(i),N.test(e)&&i.reverse()),this.pushStack(i)}}));var B=/[^\x20\t\r\n\f]+/g;function R(e){return e}function H(e){throw e}function F(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(B)||[],(function(e,n){t[n]=!0})),t}(e):C.extend({},e);var t,n,r,i,a=[],s=[],o=-1,l=function(){for(i=i||e.once,r=t=!0;s.length;o=-1)for(n=s.shift();++o<a.length;)!1===a[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},u={add:function(){return a&&(n&&!t&&(o=a.length-1,s.push(n)),function t(n){C.each(n,(function(n,r){g(r)?e.unique&&u.has(r)||a.push(r):r&&r.length&&"string"!==T(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return C.each(arguments,(function(e,t){for(var n;(n=C.inArray(t,a,n))>-1;)a.splice(n,1),n<=o&&o--})),this},has:function(e){return e?C.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=s=[],n||t||(a=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return a.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return C.Deferred((function(n){C.each(t,(function(t,r){var i=g(e[r[4]])&&e[r[4]];a[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,i){var a=0;function s(e,t,n,i){return function(){var o=this,l=arguments,u=function(){var r,u;if(!(e<a)){if((r=n.apply(o,l))===t.promise())throw new TypeError("Thenable self-resolution");u=r&&("object"==typeof r||"function"==typeof r)&&r.then,g(u)?i?u.call(r,s(a,t,R,i),s(a,t,H,i)):(a++,u.call(r,s(a,t,R,i),s(a,t,H,i),s(a,t,R,t.notifyWith))):(n!==R&&(o=void 0,l=[r]),(i||t.resolveWith)(o,l))}},c=i?u:function(){try{u()}catch(r){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(r,c.stackTrace),e+1>=a&&(n!==H&&(o=void 0,l=[r]),t.rejectWith(o,l))}};e?c():(C.Deferred.getStackHook&&(c.stackTrace=C.Deferred.getStackHook()),r.setTimeout(c))}}return C.Deferred((function(r){t[0][3].add(s(0,r,g(i)?i:R,r.notifyWith)),t[1][3].add(s(0,r,g(e)?e:R)),t[2][3].add(s(0,r,g(n)?n:H))})).promise()},promise:function(e){return null!=e?C.extend(e,i):i}},a={};return C.each(t,(function(e,r){var s=r[2],o=r[5];i[r[1]]=s.add,o&&s.add((function(){n=o}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(r[3].fire),a[r[0]]=function(){return a[r[0]+"With"](this===a?void 0:this,arguments),this},a[r[0]+"With"]=s.fireWith})),i.promise(a),e&&e.call(a,a),a},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=C.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&(F(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();for(;n--;)F(i[n],s(n),a.reject);return a.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&q.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){r.setTimeout((function(){throw e}))};var $=C.Deferred();function W(){b.removeEventListener("DOMContentLoaded",W),r.removeEventListener("load",W),C.ready()}C.fn.ready=function(e){return $.then(e).catch((function(e){C.readyException(e)})),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||$.resolveWith(b,[C]))}}),C.ready.then=$.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(C.ready):(b.addEventListener("DOMContentLoaded",W),r.addEventListener("load",W));var G=function(e,t,n,r,i,a,s){var o=0,l=e.length,u=null==n;if("object"===T(n))for(o in i=!0,n)G(e,t,o,n[o],!0,a,s);else if(void 0!==r&&(i=!0,g(r)||(s=!0),u&&(s?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(C(e),n)})),t))for(;o<l;o++)t(e[o],n,s?r:r.call(e[o],o,t(e[o],n)));return i?e:u?t.call(e):l?t(e[0],n):a},V=/^-ms-/,X=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function U(e){return e.replace(V,"ms-").replace(X,Y)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=C.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[U(t)]=n;else for(r in t)i[U(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in r?[t]:t.match(B)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||C.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var J=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,r,i,a=this[0],s=a&&a.attributes;if(void 0===e){if(this.length&&(i=Z.get(a),1===a.nodeType&&!J.get(a,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=U(r.slice(5)),ne(a,r,i[r]));J.set(a,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Z.set(this,e)})):G(this,(function(t){var n;if(a&&void 0===t)return void 0!==(n=Z.get(a,e))||void 0!==(n=ne(a,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),C.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,C.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),r=n.length,i=n.shift(),a=C._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete a.stop,i.call(e,(function(){C.dequeue(e,t)}),a)),!r&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:C.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each((function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){C.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=C.Deferred(),a=this,s=this.length,o=function(){--r||i.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=J.get(a[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(o));return o(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ae=["Top","Right","Bottom","Left"],se=b.documentElement,oe=function(e){return C.contains(e.ownerDocument,e)},le={composed:!0};se.getRootNode&&(oe=function(e){return C.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===C.css(e,"display")};function ce(e,t,n,r){var i,a,s=20,o=r?function(){return r.cur()}:function(){return C.css(e,t,"")},l=o(),u=n&&n[3]||(C.cssNumber[t]?"":"px"),c=e.nodeType&&(C.cssNumber[t]||"px"!==u&&+l)&&ie.exec(C.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)C.style(e,t,c+u),(1-a)*(1-(a=o()/l||.5))<=0&&(s=0),c/=a;c*=2,C.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}var de={};function pe(e){var t,n=e.ownerDocument,r=e.nodeName,i=de[r];return i||(t=n.body.appendChild(n.createElement(r)),i=C.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),de[r]=i,i)}function fe(e,t){for(var n,r,i=[],a=0,s=e.length;a<s;a++)(r=e[a]).style&&(n=r.style.display,t?("none"===n&&(i[a]=J.get(r,"display")||null,i[a]||(r.style.display="")),""===r.style.display&&ue(r)&&(i[a]=pe(r))):"none"!==n&&(i[a]="none",J.set(r,"display",n)));for(a=0;a<s;a++)null!=i[a]&&(e[a].style.display=i[a]);return e}C.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?C(this).show():C(this).hide()}))}});var he,ve,me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(ve=b.createElement("input")).setAttribute("type","radio"),ve.setAttribute("checked","checked"),ve.setAttribute("name","t"),he.appendChild(ve),m.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",m.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function xe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&O(e,t)?C.merge([e],n):n}function we(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,m.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function _e(e,t,n,r,i){for(var a,s,o,l,u,c,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((a=e[f])||0===a)if("object"===T(a))C.merge(p,a.nodeType?[a]:a);else if(Te.test(a)){for(s=s||d.appendChild(t.createElement("div")),o=(ge.exec(a)||["",""])[1].toLowerCase(),l=be[o]||be._default,s.innerHTML=l[1]+C.htmlPrefilter(a)+l[2],c=l[0];c--;)s=s.lastChild;C.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(a));for(d.textContent="",f=0;a=p[f++];)if(r&&C.inArray(a,r)>-1)i&&i.push(a);else if(u=oe(a),s=xe(d.appendChild(a),"script"),u&&we(s),n)for(c=0;a=s[c++];)ye.test(a.type||"")&&n.push(a);return d}var Ce=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ee(){return!1}function ke(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Me(e,t,n,r,i,a){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(r=r||n,n=void 0),t)Me(e,o,n,r,t[o],a);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ee;else if(!i)return e;return 1===a&&(s=i,i=function(e){return C().off(e),s.apply(this,arguments)},i.guid=s.guid||(s.guid=C.guid++)),e.each((function(){C.event.add(this,t,i,r,n)}))}function Ae(e,t,n){n?(J.set(e,t,!1),C.event.add(e,t,{namespace:!1,handler:function(e){var r,i,a=J.get(this,t);if(1&e.isTrigger&&this[t]){if(a.length)(C.event.special[t]||{}).delegateType&&e.stopPropagation();else if(a=o.call(arguments),J.set(this,t,a),r=n(this,t),this[t](),a!==(i=J.get(this,t))||r?J.set(this,t,!1):i={},a!==i)return e.stopImmediatePropagation(),e.preventDefault(),i&&i.value}else a.length&&(J.set(this,t,{value:C.event.trigger(C.extend(a[0],C.Event.prototype),a.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&C.event.add(e,t,Se)}C.event={global:{},add:function(e,t,n,r,i){var a,s,o,l,u,c,d,p,f,h,v,m=J.get(e);if(K(e))for(n.handler&&(n=(a=n).handler,i=a.selector),i&&C.find.matchesSelector(se,i),n.guid||(n.guid=C.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(B)||[""]).length;u--;)f=v=(o=Ce.exec(t[u])||[])[1],h=(o[2]||"").split(".").sort(),f&&(d=C.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=C.event.special[f]||{},c=C.extend({type:f,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&C.expr.match.needsContext.test(i),namespace:h.join(".")},a),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),C.event.global[f]=!0)},remove:function(e,t,n,r,i){var a,s,o,l,u,c,d,p,f,h,v,m=J.hasData(e)&&J.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(B)||[""]).length;u--;)if(f=v=(o=Ce.exec(t[u])||[])[1],h=(o[2]||"").split(".").sort(),f){for(d=C.event.special[f]||{},p=l[f=(r?d.delegateType:d.bindType)||f]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=a=p.length;a--;)c=p[a],!i&&v!==c.origType||n&&n.guid!==c.guid||o&&!o.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(a,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||C.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)C.event.remove(e,f+t[u],n,r,!0);C.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,a,s,o=new Array(arguments.length),l=C.event.fix(e),u=(J.get(this,"events")||Object.create(null))[l.type]||[],c=C.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(s=C.event.handlers.call(this,l,u),t=0;(i=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(a=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(r=((C.event.special[a.origType]||{}).handle||a.handler).apply(i.elem,o))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,a,s,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(a=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?C(i,this).index(u)>-1:C.find(i,this,null,[u]).length),s[i]&&a.push(r);a.length&&o.push({elem:u,handlers:a})}return u=this,l<t.length&&o.push({elem:u,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&O(t,"input")&&Ae(t,"click",Se),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&O(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&O(t,"input")&&J.get(t,"click")||O(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},C.event.addProp),C.each({focus:"focusin",blur:"focusout"},(function(e,t){C.event.special[e]={setup:function(){return Ae(this,e,ke),!1},trigger:function(){return Ae(this,e),!0},_default:function(){return!0},delegateType:t}})),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,a=e.handleObj;return i&&(i===r||C.contains(r,i))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}})),C.fn.extend({on:function(e,t,n,r){return Me(this,e,t,n,r)},one:function(e,t,n,r){return Me(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,C(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){C.event.remove(this,e,n,t)}))}});var Oe=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return O(e,"table")&&O(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function je(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ne(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ze(e,t){var n,r,i,a,s,o;if(1===t.nodeType){if(J.hasData(e)&&(o=J.get(e).events))for(i in J.remove(t,"handle events"),o)for(n=0,r=o[i].length;n<r;n++)C.event.add(t,i,o[i][n]);Z.hasData(e)&&(a=Z.access(e),s=C.extend({},a),Z.set(t,s))}}function Ie(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Be(e,t,n,r){t=l(t);var i,a,s,o,u,c,d=0,p=e.length,f=p-1,h=t[0],v=g(h);if(v||p>1&&"string"==typeof h&&!m.checkClone&&Pe.test(h))return e.each((function(i){var a=e.eq(i);v&&(t[0]=h.call(this,i,a.html())),Be(a,t,n,r)}));if(p&&(a=(i=_e(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=a),a||r)){for(o=(s=C.map(xe(i,"script"),je)).length;d<p;d++)u=i,d!==f&&(u=C.clone(u,!0,!0),o&&C.merge(s,xe(u,"script"))),n.call(e[d],u,d);if(o)for(c=s[s.length-1].ownerDocument,C.map(s,Ne),d=0;d<o;d++)u=s[d],ye.test(u.type||"")&&!J.access(u,"globalEval")&&C.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?C._evalUrl&&!u.noModule&&C._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):w(u.textContent.replace(Le,""),u,c))}return e}function Re(e,t,n){for(var r,i=t?C.filter(t,e):e,a=0;null!=(r=i[a]);a++)n||1!==r.nodeType||C.cleanData(xe(r)),r.parentNode&&(n&&oe(r)&&we(xe(r,"script")),r.parentNode.removeChild(r));return e}C.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,a,s,o=e.cloneNode(!0),l=oe(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=xe(o),r=0,i=(a=xe(e)).length;r<i;r++)Ie(a[r],s[r]);if(t)if(n)for(a=a||xe(e),s=s||xe(o),r=0,i=a.length;r<i;r++)ze(a[r],s[r]);else ze(e,o);return(s=xe(o,"script")).length>0&&we(s,!l&&xe(e,"script")),o},cleanData:function(e){for(var t,n,r,i=C.event.special,a=0;void 0!==(n=e[a]);a++)if(K(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?C.event.remove(n,r):C.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return G(this,(function(e){return void 0===e?C.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Be(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)}))},prepend:function(){return Be(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=De(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Be(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Be(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(xe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return C.clone(this,e,t)}))},html:function(e){return G(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Oe.test(e)&&!be[(ge.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(xe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Be(this,arguments,(function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(xe(this)),n&&n.replaceChild(t,this))}),e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){C.fn[e]=function(e){for(var n,r=[],i=C(e),a=i.length-1,s=0;s<=a;s++)n=s===a?this:this.clone(!0),C(i[s])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var He=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},qe=function(e,t,n){var r,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=a[i];return r},$e=new RegExp(ae.join("|"),"i");function We(e,t,n){var r,i,a,s,o=e.style;return(n=n||Fe(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||oe(e)||(s=C.style(e,t)),!m.pixelBoxStyles()&&He.test(s)&&$e.test(t)&&(r=o.width,i=o.minWidth,a=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=r,o.minWidth=i,o.maxWidth=a)),void 0!==s?s+"":s}function Ge(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(u).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",s=36===t(e.right),i=36===t(e.width),c.style.position="absolute",a=12===t(c.offsetWidth/3),se.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var n,i,a,s,o,l,u=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===c.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),a},reliableTrDimensions:function(){var e,t,n,i;return null==o&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),i=r.getComputedStyle(t),o=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),o}}))}();var Ve=["Webkit","Moz","ms"],Xe=b.createElement("div").style,Ye={};function Ue(e){return C.cssProps[e]||Ye[e]||(e in Xe?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ve.length;n--;)if((e=Ve[n]+t)in Xe)return e}(e)||e)}var Ke=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,i,a){var s="width"===t?1:0,o=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=C.css(e,n+ae[s],!0,i)),r?("content"===n&&(l-=C.css(e,"padding"+ae[s],!0,i)),"margin"!==n&&(l-=C.css(e,"border"+ae[s]+"Width",!0,i))):(l+=C.css(e,"padding"+ae[s],!0,i),"padding"!==n?l+=C.css(e,"border"+ae[s]+"Width",!0,i):o+=C.css(e,"border"+ae[s]+"Width",!0,i));return!r&&a>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-o-.5))||0),l}function nt(e,t,n){var r=Fe(e),i=(!m.boxSizingReliable()||n)&&"border-box"===C.css(e,"boxSizing",!1,r),a=i,s=We(e,t,r),o="offset"+t[0].toUpperCase()+t.slice(1);if(He.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&O(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===C.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===C.css(e,"boxSizing",!1,r),(a=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+tt(e,t,n||(i?"border":"content"),a,r,s)+"px"}function rt(e,t,n,r,i){return new rt.prototype.init(e,t,n,r,i)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,a,s,o=U(t),l=Qe.test(t),u=e.style;if(l||(t=Ue(o)),s=C.cssHooks[t]||C.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:u[t];"string"==(a=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ce(e,t,i),a="number"),null!=n&&n==n&&("number"!==a||l||(n+=i&&i[3]||(C.cssNumber[o]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,a,s,o=U(t);return Qe.test(t)||(t=Ue(o)),(s=C.cssHooks[t]||C.cssHooks[o])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=We(e,t,r)),"normal"===i&&t in Ze&&(i=Ze[t]),""===n||n?(a=parseFloat(i),!0===n||isFinite(a)?a||0:i):i}}),C.each(["height","width"],(function(e,t){C.cssHooks[t]={get:function(e,n,r){if(n)return!Ke.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):qe(e,Je,(function(){return nt(e,t,r)}))},set:function(e,n,r){var i,a=Fe(e),s=!m.scrollboxSize()&&"absolute"===a.position,o=(s||r)&&"border-box"===C.css(e,"boxSizing",!1,a),l=r?tt(e,t,r,o,a):0;return o&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-tt(e,t,"border",!1,a)-.5)),l&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),et(0,n,l)}}})),C.cssHooks.marginLeft=Ge(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),C.each({margin:"",padding:"",border:"Width"},(function(e,t){C.cssHooks[e+t]={expand:function(n){for(var r=0,i={},a="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+ae[r]+t]=a[r]||a[r-2]||a[0];return i}},"margin"!==e&&(C.cssHooks[e+t].set=et)})),C.fn.extend({css:function(e,t){return G(this,(function(e,t,n){var r,i,a={},s=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;s<i;s++)a[t[s]]=C.css(e,t[s],!1,r);return a}return void 0!==n?C.style(e,t,n):C.css(e,t)}),e,t,arguments.length>1)}}),C.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,i,a){this.elem=e,this.prop=n,this.easing=i||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=a||(C.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||!C.cssHooks[e.prop]&&null==e.elem.style[Ue(e.prop)]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=rt.prototype.init,C.fx.step={};var it,at,st=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function lt(){at&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(lt):r.setTimeout(lt,C.fx.interval),C.fx.tick())}function ut(){return r.setTimeout((function(){it=void 0})),it=Date.now()}function ct(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ae[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function dt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),a=0,s=i.length;a<s;a++)if(r=i[a].call(n,t,e))return r}function pt(e,t,n){var r,i,a=0,s=pt.prefilters.length,o=C.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var t=it||ut(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),a=0,s=u.tweens.length;a<s;a++)u.tweens[a].run(r);return o.notifyWith(e,[u,r,n]),r<1&&s?n:(s||o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u]),!1)},u=o.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:it||ut(),duration:n.duration,tweens:[],createTween:function(t,n){var r=C.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u,t])):o.rejectWith(e,[u,t]),this}}),c=u.props;for(function(e,t){var n,r,i,a,s;for(n in e)if(i=t[r=U(n)],a=e[n],Array.isArray(a)&&(i=a[1],a=e[n]=a[0]),n!==r&&(e[r]=a,delete e[n]),(s=C.cssHooks[r])&&"expand"in s)for(n in a=s.expand(a),delete e[r],a)n in e||(e[n]=a[n],t[n]=i);else t[r]=i}(c,u.opts.specialEasing);a<s;a++)if(r=pt.prefilters[a].call(u,e,c,u.opts))return g(r.stop)&&(C._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return C.map(c,dt,u),g(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),C.fx.timer(C.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}C.Animation=C.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(B);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,a,s,o,l,u,c,d="width"in t||"height"in t,p=this,f={},h=e.style,v=e.nodeType&&ue(e),m=J.get(e,"fxshow");for(r in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()}))}))),t)if(i=t[r],st.test(i)){if(delete t[r],a=a||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;v=!0}f[r]=m&&m[r]||C.style(e,r)}if((l=!C.isEmptyObject(t))||!C.isEmptyObject(f))for(r in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=m&&m.display)&&(u=J.get(e,"display")),"none"===(c=C.css(e,"display"))&&(u?c=u:(fe([e],!0),u=e.style.display||u,c=C.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===C.css(e,"float")&&(l||(p.done((function(){h.display=u})),null==u&&(c=h.display,u="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(v=m.hidden):m=J.access(e,"fxshow",{display:u}),a&&(m.hidden=!v),v&&fe([e],!0),p.done((function(){for(r in v||fe([e]),J.remove(e,"fxshow"),f)C.style(e,r,f[r])}))),l=dt(v?m[r]:0,r,p),r in m||(m[r]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),C.speed=function(e,t,n){var r=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return C.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in C.fx.speeds?r.duration=C.fx.speeds[r.duration]:r.duration=C.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&C.dequeue(this,r.queue)},r},C.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=C.isEmptyObject(e),a=C.speed(t,n,r),s=function(){var t=pt(this,C.extend({},e),a);(i||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===a.queue?this.each(s):this.queue(a.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",a=C.timers,s=J.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&ot.test(i)&&r(s[i]);for(i=a.length;i--;)a[i].elem!==this||null!=e&&a[i].queue!==e||(a[i].anim.stop(n),t=!1,a.splice(i,1));!t&&n||C.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],a=C.timers,s=r?r.length:0;for(n.finish=!0,C.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),C.each(["toggle","show","hide"],(function(e,t){var n=C.fn[t];C.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,i)}})),C.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){C.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(it=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),it=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){at||(at=!0,lt())},C.fx.stop=function(){at=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var i=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(i)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ft,ht=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return G(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){C.removeAttr(this,e)}))}}),C.extend({attr:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?C.prop(e,t,n):(1===a&&C.isXMLDoc(e)||(i=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=C.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&O(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(B);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||C.find.attr;ht[t]=function(e,t,r){var i,a,s=t.toLowerCase();return r||(a=ht[s],ht[s]=i,i=null!=n(e,t,r)?s:null,ht[s]=a),i}}));var vt=/^(?:input|select|textarea|button)$/i,mt=/^(?:a|area)$/i;function gt(e){return(e.match(B)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(B)||[]}C.fn.extend({prop:function(e,t){return G(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[C.propFix[e]||e]}))}}),C.extend({prop:function(e,t,n){var r,i,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&C.isXMLDoc(e)||(t=C.propFix[t]||t,i=C.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){C.propFix[this.toLowerCase()]=this})),C.fn.extend({addClass:function(e){var t,n,r,i,a,s,o,l=0;if(g(e))return this.each((function(t){C(this).addClass(e.call(this,t,yt(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(i=yt(n),r=1===n.nodeType&&" "+gt(i)+" "){for(s=0;a=t[s++];)r.indexOf(" "+a+" ")<0&&(r+=a+" ");i!==(o=gt(r))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,r,i,a,s,o,l=0;if(g(e))return this.each((function(t){C(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(i=yt(n),r=1===n.nodeType&&" "+gt(i)+" "){for(s=0;a=t[s++];)for(;r.indexOf(" "+a+" ")>-1;)r=r.replace(" "+a+" "," ");i!==(o=gt(r))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){C(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,i,a,s;if(r)for(i=0,a=C(this),s=bt(e);t=s[i++];)a.hasClass(t)?a.removeClass(t):a.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+gt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;C.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=g(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,C(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=C.map(i,(function(e){return null==e?"":e+""}))),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=C.valHooks[i.type]||C.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(xt,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:gt(C.text(e))}},select:{get:function(e){var t,n,r,i=e.options,a=e.selectedIndex,s="select-one"===e.type,o=s?null:[],l=s?a+1:i.length;for(r=a<0?l:s?a:0;r<l;r++)if(((n=i[r]).selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!O(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,r,i=e.options,a=C.makeArray(t),s=i.length;s--;)((r=i[s]).selected=C.inArray(C.valHooks.option.get(r),a)>-1)&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),C.each(["radio","checkbox"],(function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},m.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),m.focusin="onfocusin"in r;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,n,i){var a,s,o,l,u,c,d,p,h=[n||b],v=f.call(e,"type")?e.type:e,m=f.call(e,"namespace")?e.namespace.split("."):[];if(s=p=o=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!wt.test(v+C.event.triggered)&&(v.indexOf(".")>-1&&(m=v.split("."),v=m.shift(),m.sort()),u=v.indexOf(":")<0&&"on"+v,(e=e[C.expando]?e:new C.Event(v,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:C.makeArray(t,[e]),d=C.event.special[v]||{},i||!d.trigger||!1!==d.trigger.apply(n,t))){if(!i&&!d.noBubble&&!y(n)){for(l=d.delegateType||v,wt.test(l+v)||(s=s.parentNode);s;s=s.parentNode)h.push(s),o=s;o===(n.ownerDocument||b)&&h.push(o.defaultView||o.parentWindow||r)}for(a=0;(s=h[a++])&&!e.isPropagationStopped();)p=s,e.type=a>1?l:d.bindType||v,(c=(J.get(s,"events")||Object.create(null))[e.type]&&J.get(s,"handle"))&&c.apply(s,t),(c=u&&s[u])&&c.apply&&K(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=v,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),t)||!K(n)||u&&g(n[v])&&!y(n)&&((o=n[u])&&(n[u]=null),C.event.triggered=v,e.isPropagationStopped()&&p.addEventListener(v,Tt),n[v](),e.isPropagationStopped()&&p.removeEventListener(v,Tt),C.event.triggered=void 0,o&&(n[u]=o)),e.result}},simulate:function(e,t,n){var r=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(r,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each((function(){C.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}}));var _t=r.location,Ct={guid:Date.now()},St=/\?/;C.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||C.error("Invalid XML: "+(n?C.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Et=/\[\]$/,kt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Ot(e,t,n,r){var i;if(Array.isArray(t))C.each(t,(function(t,i){n||Et.test(e)?r(e,i):Ot(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==T(t))r(e,t);else for(i in t)Ot(e+"["+i+"]",t[i],n,r)}C.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,(function(){i(this.name,this.value)}));else for(n in e)Ot(n,e[n],t,i);return r.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&At.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,(function(e){return{name:t.name,value:e.replace(kt,"\r\n")}})):{name:t.name,value:n.replace(kt,"\r\n")}})).get()}});var Pt=/%20/g,Lt=/#.*$/,Dt=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,zt=/^\/\//,It={},Bt={},Rt="*/".concat("*"),Ht=b.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,a=t.toLowerCase().match(B)||[];if(g(n))for(;r=a[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var i={},a=e===Bt;function s(o){var l;return i[o]=!0,C.each(e[o]||[],(function(e,o){var u=o(t,n,r);return"string"!=typeof u||a||i[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),s(u),!1)})),l}return s(t.dataTypes[0])||!i["*"]&&s("*")}function $t(e,t){var n,r,i=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&C.extend(!0,e,r),e}Ht.href=_t.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,C.ajaxSettings),t):$t(C.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(Bt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,i,a,s,o,l,u,c,d,p,f=C.ajaxSetup({},t),h=f.context||f,v=f.context&&(h.nodeType||h.jquery)?C(h):C.event,m=C.Deferred(),g=C.Callbacks("once memory"),y=f.statusCode||{},x={},w={},T="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=jt.exec(a);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)_.always(e[_.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),S(0,t),this}};if(m.promise(_),f.url=((e||f.url||_t.href)+"").replace(zt,_t.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(B)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Ht.protocol+"//"+Ht.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=C.param(f.data,f.traditional)),qt(It,f,t,_),u)return _;for(d in(c=C.event&&f.global)&&0==C.active++&&C.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Nt.test(f.type),i=f.url.replace(Lt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Pt,"+")):(p=f.url.slice(i.length),f.data&&(f.processData||"string"==typeof f.data)&&(i+=(St.test(i)?"&":"?")+f.data,delete f.data),!1===f.cache&&(i=i.replace(Dt,"$1"),p=(St.test(i)?"&":"?")+"_="+Ct.guid+++p),f.url=i+p),f.ifModified&&(C.lastModified[i]&&_.setRequestHeader("If-Modified-Since",C.lastModified[i]),C.etag[i]&&_.setRequestHeader("If-None-Match",C.etag[i])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&_.setRequestHeader("Content-Type",f.contentType),_.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Rt+"; q=0.01":""):f.accepts["*"]),f.headers)_.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,_,f)||u))return _.abort();if(T="abort",g.add(f.complete),_.done(f.success),_.fail(f.error),n=qt(Bt,f,t,_)){if(_.readyState=1,c&&v.trigger("ajaxSend",[_,f]),u)return _;f.async&&f.timeout>0&&(o=r.setTimeout((function(){_.abort("timeout")}),f.timeout));try{u=!1,n.send(x,S)}catch(e){if(u)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,s,l){var d,p,b,x,w,T=t;u||(u=!0,o&&r.clearTimeout(o),n=void 0,a=l||"",_.readyState=e>0?4:0,d=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var r,i,a,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in o)if(o[i]&&o[i].test(r)){l.unshift(i);break}if(l[0]in n)a=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){a=i;break}s||(s=i)}a=a||s}if(a)return a!==l[0]&&l.unshift(a),n[a]}(f,_,s)),!d&&C.inArray("script",f.dataTypes)>-1&&C.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),x=function(e,t,n,r){var i,a,s,o,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(a=c.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=c.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(s=u[l+" "+a]||u["* "+a]))for(i in u)if((o=i.split(" "))[1]===a&&(s=u[l+" "+o[0]]||u["* "+o[0]])){!0===s?s=u[i]:!0!==u[i]&&(a=o[0],c.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(f,x,_,d),d?(f.ifModified&&((w=_.getResponseHeader("Last-Modified"))&&(C.lastModified[i]=w),(w=_.getResponseHeader("etag"))&&(C.etag[i]=w)),204===e||"HEAD"===f.type?T="nocontent":304===e?T="notmodified":(T=x.state,p=x.data,d=!(b=x.error))):(b=T,!e&&T||(T="error",e<0&&(e=0))),_.status=e,_.statusText=(t||T)+"",d?m.resolveWith(h,[p,T,_]):m.rejectWith(h,[_,T,b]),_.statusCode(y),y=void 0,c&&v.trigger(d?"ajaxSuccess":"ajaxError",[_,f,d?p:b]),g.fireWith(h,[_,T]),c&&(v.trigger("ajaxComplete",[_,f]),--C.active||C.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],(function(e,t){C[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:i,data:n,success:r},C.isPlainObject(e)&&e))}})),C.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),C._evalUrl=function(e,t,n){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){C.globalEval(e,t,n)}})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){C(this).wrapInner(e.call(this,t))})):this.each((function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){C(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){C(this).replaceWith(this.childNodes)})),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Gt=C.ajaxSettings.xhr();m.cors=!!Gt&&"withCredentials"in Gt,m.ajax=Gt=!!Gt,C.ajaxTransport((function(e){var t,n;if(m.cors||Gt&&!e.crossDomain)return{send:function(i,a){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)o.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=n=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?a(0,"error"):a(o.status,o.statusText):a(Wt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=t(),n=o.onerror=o.ontimeout=t("error"),void 0!==o.onabort?o.onabort=n:o.onreadystatechange=function(){4===o.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{o.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),C.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),C.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=C("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Vt,Xt=[],Yt=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||C.expando+"_"+Ct.guid++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",(function(e,t,n){var i,a,s,o=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Yt,"$1"+i):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||C.error(i+" was not called"),s[0]},e.dataTypes[0]="json",a=r[i],r[i]=function(){s=arguments},n.always((function(){void 0===a?C(r).removeProp(i):r[i]=a,e[i]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(i)),s&&g(a)&&a(s[0]),s=a=void 0})),"script"})),m.createHTMLDocument=((Vt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),a=!n&&[],(i=P.exec(e))?[t.createElement(i[1])]:(i=_e([e],t,a),a&&a.length&&C(a).remove(),C.merge([],i.childNodes)));var r,i,a},C.fn.load=function(e,t,n){var r,i,a,s=this,o=e.indexOf(" ");return o>-1&&(r=gt(e.slice(o)),e=e.slice(0,o)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&C.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){a=arguments,s.html(r?C("<div>").append(C.parseHTML(e)).find(r):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,a||[e.responseText,t,e])}))}),this},C.expr.pseudos.animated=function(e){return C.grep(C.timers,(function(t){return e===t.elem})).length},C.offset={setOffset:function(e,t,n){var r,i,a,s,o,l,u=C.css(e,"position"),c=C(e),d={};"static"===u&&(e.style.position="relative"),o=c.offset(),a=C.css(e,"top"),l=C.css(e,"left"),("absolute"===u||"fixed"===u)&&(a+l).indexOf("auto")>-1?(s=(r=c.position()).top,i=r.left):(s=parseFloat(a)||0,i=parseFloat(l)||0),g(t)&&(t=t.call(e,n,C.extend({},o))),null!=t.top&&(d.top=t.top-o.top+s),null!=t.left&&(d.left=t.left-o.left+i),"using"in t?t.using.call(e,d):c.css(d)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){C.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===C.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),i.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-C.css(r,"marginTop",!0),left:t.left-i.left-C.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||se}))}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;C.fn[e]=function(r){return G(this,(function(e,r,i){var a;if(y(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===i)return a?a[t]:e[r];a?a.scrollTo(n?a.pageXOffset:i,n?i:a.pageYOffset):e[r]=i}),e,r,arguments.length)}})),C.each(["top","left"],(function(e,t){C.cssHooks[t]=Ge(m.pixelPosition,(function(e,n){if(n)return n=We(e,t),He.test(n)?C(e).position()[t]+"px":n}))})),C.each({Height:"height",Width:"width"},(function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){C.fn[r]=function(i,a){var s=arguments.length&&(n||"boolean"!=typeof i),o=n||(!0===i||!0===a?"margin":"border");return G(this,(function(t,n,i){var a;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===i?C.css(t,n,o):C.style(t,n,i,o)}),t,s?i:void 0,s)}}))})),C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){C.fn[t]=function(e){return this.on(t,e)}})),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Ut=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;C.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||C.guid++,i},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=O,C.isFunction=g,C.isWindow=y,C.camelCase=U,C.type=T,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},C.trim=function(e){return null==e?"":(e+"").replace(Ut,"")},void 0===(n=function(){return C}.apply(t,[]))||(e.exports=n);var Kt=r.jQuery,Qt=r.$;return C.noConflict=function(e){return r.$===C&&(r.$=Qt),e&&r.jQuery===C&&(r.jQuery=Kt),C},void 0===i&&(r.jQuery=r.$=C),C}))}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";n(203),n(288);var e,t=n(755),r=n.n(t);function i(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(e=r()).fn.niceSelect=function(t){if("string"==typeof t)return"update"==t?this.each((function(){var t=e(this),r=e(this).next(".nice-select"),i=r.hasClass("open");r.length&&(r.remove(),n(t),i&&t.next().trigger("click"))})):"destroy"==t?(this.each((function(){var t=e(this),n=e(this).next(".nice-select");n.length&&(n.remove(),t.css("display",""))})),0==e(".nice-select").length&&e(document).off(".nice_select")):console.log('Method "'+t+'" does not exist.'),this;function n(t){t.after(e("<div></div>").addClass("nice-select").addClass(t.attr("class")||"").addClass(t.attr("disabled")?"disabled":"").attr("tabindex",t.attr("disabled")?null:"0").html('<span class="current"></span><ul class="list"></ul>'));var n=t.next(),r=t.find("option"),i=t.find("option:selected");n.find(".current").html(i.data("display")||i.text()),r.each((function(t){var r=e(this),i=r.data("display");n.find("ul").append(e("<li></li>").attr("data-value",r.val()).attr("data-display",i||null).addClass("option"+(r.is(":selected")?" selected":"")+(r.is(":disabled")?" disabled":"")).html(r.text()))}))}this.hide(),this.each((function(){var t=e(this);t.next().hasClass("nice-select")||n(t)})),e(document).off(".nice_select"),e(document).on("click.nice_select",".nice-select",(function(t){var n=e(this);e(".nice-select").not(n).removeClass("open"),n.toggleClass("open"),n.hasClass("open")?(n.find(".option"),n.find(".focus").removeClass("focus"),n.find(".selected").addClass("focus")):n.focus()})),e(document).on("click.nice_select",(function(t){0===e(t.target).closest(".nice-select").length&&e(".nice-select").removeClass("open").find(".option")})),e(document).on("click.nice_select",".nice-select .option:not(.disabled)",(function(t){var n=e(this),r=n.closest(".nice-select");r.find(".selected").removeClass("selected"),n.addClass("selected");var i=n.data("display")||n.text();r.find(".current").text(i),r.prev("select").val(n.data("value")).trigger("change")})),e(document).on("keydown.nice_select",".nice-select",(function(t){var n=e(this),r=e(n.find(".focus")||n.find(".list .option.selected"));if(32==t.keyCode||13==t.keyCode)return n.hasClass("open")?r.trigger("click"):n.trigger("click"),!1;if(40==t.keyCode){if(n.hasClass("open")){var i=r.nextAll(".option:not(.disabled)").first();i.length>0&&(n.find(".focus").removeClass("focus"),i.addClass("focus"))}else n.trigger("click");return!1}if(38==t.keyCode){if(n.hasClass("open")){var a=r.prevAll(".option:not(.disabled)").first();a.length>0&&(n.find(".focus").removeClass("focus"),a.addClass("focus"))}else n.trigger("click");return!1}if(27==t.keyCode)n.hasClass("open")&&n.trigger("click");else if(9==t.keyCode&&n.hasClass("open"))return!1}));var r=document.createElement("a").style;return r.cssText="pointer-events:auto","auto"!==r.pointerEvents&&e("html").addClass("no-csspointerevents"),this},r()(document).ready((function(){r()("select").niceSelect()}));var s,o,l,u,c,d,p,f,h,v,m,g,y,b={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},x={duration:.5,overwrite:!1,delay:0},w=1e8,T=1e-8,_=2*Math.PI,C=_/4,S=0,E=Math.sqrt,k=Math.cos,M=Math.sin,A=function(e){return"string"==typeof e},O=function(e){return"function"==typeof e},P=function(e){return"number"==typeof e},L=function(e){return void 0===e},D=function(e){return"object"==typeof e},j=function(e){return!1!==e},N=function(){return"undefined"!=typeof window},z=function(e){return O(e)||A(e)},I="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},B=Array.isArray,R=/(?:-?\.?\d|\.)+/gi,H=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,F=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,q=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,$=/[+-]=-?[.\d]+/,W=/[^,'"\[\]\s]+/gi,G=/[\d.+\-=]+(?:e[-+]\d*)*/i,V={},X={},Y=function(e){return(X=xe(e,V))&&on},U=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},K=function(e,t){return!t&&console.warn(e)},Q=function(e,t){return e&&(V[e]=t)&&X&&(X[e]=t)||V},J=function(){return 0},Z={},ee=[],te={},ne={},re={},ie=30,ae=[],se="",oe=function(e){var t,n,r=e[0];if(D(r)||O(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=ae.length;n--&&!ae[n].targetTest(r););t=ae[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new Pt(e[n],t)))||e.splice(n,1);return e},le=function(e){return e._gsap||oe(Ke(e))[0]._gsap},ue=function(e,t,n){return(n=e[t])&&O(n)?e[t]():L(n)&&e.getAttribute&&e.getAttribute(t)||n},ce=function(e,t){return(e=e.split(",")).forEach(t)||e},de=function(e){return Math.round(1e5*e)/1e5||0},pe=function(e){return Math.round(1e7*e)/1e7||0},fe=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},he=function(){var e,t,n=ee.length,r=ee.slice(0);for(te={},ee.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},ve=function(e,t,n,r){ee.length&&he(),e.render(t,n,r),ee.length&&he()},me=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(W).length<2?t:A(e)?e.trim():e},ge=function(e){return e},ye=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},be=function(e,t){for(var n in t)n in e||"duration"===n||"ease"===n||(e[n]=t[n])},xe=function(e,t){for(var n in t)e[n]=t[n];return e},we=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=D(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},Te=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},_e=function(e){var t=e.parent||o,n=e.keyframes?be:ye;if(j(e.inherit))for(;t;)n(e,t.vars.defaults),t=t.parent||t._dp;return e},Ce=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=t._prev,a=t._next;i?i._next=a:e[n]===t&&(e[n]=a),a?a._prev=i:e[r]===t&&(e[r]=i),t._next=t._prev=t.parent=null},Se=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},Ee=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},ke=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Me=function e(t){return!t||t._ts&&e(t.parent)},Ae=function(e){return e._repeat?Oe(e._tTime,e=e.duration()+e._rDelay)*e:0},Oe=function(e,t){var n=Math.floor(e/=t);return e&&n===e?n-1:n},Pe=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Le=function(e){return e._end=pe(e._start+(e._tDur/Math.abs(e._ts||e._rts||T)||0))},De=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=pe(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Le(e),n._dirty||Ee(n,e)),e},je=function(e,t){var n;if((t._time||t._initted&&!t._dur)&&(n=Pe(e.rawTime(),t),(!t._dur||Ve(0,t.totalDuration(),n)-t._tTime>T)&&t.render(n,!0)),Ee(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},Ne=function(e,t,n,r){return t.parent&&Se(t),t._start=pe((P(n)?n:n||e!==o?$e(e,n,t):e._time)+t._delay),t._end=pe(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),function(e,t,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var a,s=e[r];if(i)for(a=t[i];s&&s[i]>a;)s=s._prev;s?(t._next=s._next,s._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=s,t.parent=t._dp=e}(e,t,"_first","_last",e._sort?"_start":0),Re(t)||(e._recent=t),r||je(e,t),e},ze=function(e,t){return(V.ScrollTrigger||U("scrollTrigger",t))&&V.ScrollTrigger.create(t,e)},Ie=function(e,t,n,r){return Bt(e,t),e._initted?!n&&e._pt&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&p!==yt.frame?(ee.push(e),e._lazy=[t,r],1):void 0:1},Be=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},Re=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},He=function(e,t,n,r){var i=e._repeat,a=pe(t)||0,s=e._tTime/e._tDur;return s&&!r&&(e._time*=a/e._dur),e._dur=a,e._tDur=i?i<0?1e10:pe(a*(i+1)+e._rDelay*i):a,s&&!r?De(e,e._tTime=e._tDur*s):e.parent&&Le(e),n||Ee(e.parent,e),e},Fe=function(e){return e instanceof Dt?Ee(e):He(e,e._dur)},qe={_start:0,endTime:J,totalDuration:J},$e=function e(t,n,r){var i,a,s,o=t.labels,l=t._recent||qe,u=t.duration()>=w?l.endTime(!1):t._dur;return A(n)&&(isNaN(n)||n in o)?(a=n.charAt(0),s="%"===n.substr(-1),i=n.indexOf("="),"<"===a||">"===a?(i>=0&&(n=n.replace(/=/,"")),("<"===a?l._start:l.endTime(l._repeat>=0))+(parseFloat(n.substr(1))||0)*(s?(i<0?l:r).totalDuration()/100:1)):i<0?(n in o||(o[n]=u),o[n]):(a=parseFloat(n.charAt(i-1)+n.substr(i+1)),s&&r&&(a=a/100*(B(r)?r[0]:r).totalDuration()),i>1?e(t,n.substr(0,i-1),r)+a:u+a)):null==n?u:+n},We=function(e,t,n){var r,i,a=P(t[1]),s=(a?2:1)+(e<2?0:1),o=t[s];if(a&&(o.duration=t[1]),o.parent=n,e){for(r=o,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=j(i.vars.inherit)&&i.parent;o.immediateRender=j(r.immediateRender),e<2?o.runBackwards=1:o.startAt=t[s-1]}return new qt(t[0],o,t[s+1])},Ge=function(e,t){return e||0===e?t(e):t},Ve=function(e,t,n){return n<e?e:n>t?t:n},Xe=function(e){if("string"!=typeof e)return"";var t=G.exec(e);return t?e.substr(t.index+t[0].length):""},Ye=[].slice,Ue=function(e,t){return e&&D(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&D(e[0]))&&!e.nodeType&&e!==l},Ke=function(e,t,n){return!A(e)||n||!u&&bt()?B(e)?function(e,t,n){return void 0===n&&(n=[]),e.forEach((function(e){var r;return A(e)&&!t||Ue(e,1)?(r=n).push.apply(r,Ke(e)):n.push(e)}))||n}(e,n):Ue(e)?Ye.call(e,0):e?[e]:[]:Ye.call((t||c).querySelectorAll(e),0)},Qe=function(e){return e.sort((function(){return.5-Math.random()}))},Je=function(e){if(O(e))return e;var t=D(e)?e:{each:e},n=Et(t.ease),r=t.from||0,i=parseFloat(t.base)||0,a={},s=r>0&&r<1,o=isNaN(r)||s,l=t.axis,u=r,c=r;return A(r)?u=c={center:.5,edges:.5,end:1}[r]||0:!s&&o&&(u=r[0],c=r[1]),function(e,s,d){var p,f,h,v,m,g,y,b,x,T=(d||t).length,_=a[T];if(!_){if(!(x="auto"===t.grid?0:(t.grid||[1,w])[1])){for(y=-w;y<(y=d[x++].getBoundingClientRect().left)&&x<T;);x--}for(_=a[T]=[],p=o?Math.min(x,T)*u-.5:r%x,f=o?T*c/x-.5:r/x|0,y=0,b=w,g=0;g<T;g++)h=g%x-p,v=f-(g/x|0),_[g]=m=l?Math.abs("y"===l?v:h):E(h*h+v*v),m>y&&(y=m),m<b&&(b=m);"random"===r&&Qe(_),_.max=y-b,_.min=b,_.v=T=(parseFloat(t.amount)||parseFloat(t.each)*(x>T?T-1:l?"y"===l?T/x:x:Math.max(x,T/x))||0)*("edges"===r?-1:1),_.b=T<0?i-T:i,_.u=Xe(t.amount||t.each)||0,n=n&&T<0?Ct(n):n}return T=(_[e]-_.min)/_.max||0,pe(_.b+(n?n(T):T)*_.v)+_.u}},Ze=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=Math.round(parseFloat(n)/e)*e*t;return(r-r%1)/t+(P(n)?0:Xe(n))}},et=function(e,t){var n,r,i=B(e);return!i&&D(e)&&(n=i=e.radius||w,e.values?(e=Ke(e.values),(r=!P(e[0]))&&(n*=n)):e=Ze(e.increment)),Ge(t,i?O(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var i,a,s=parseFloat(r?t.x:t),o=parseFloat(r?t.y:0),l=w,u=0,c=e.length;c--;)(i=r?(i=e[c].x-s)*i+(a=e[c].y-o)*a:Math.abs(e[c]-s))<l&&(l=i,u=c);return u=!n||l<=n?e[u]:t,r||u===t||P(t)?u:u+Xe(t)}:Ze(e))},tt=function(e,t,n,r){return Ge(B(e)?!t:!0===n?!!(n=0):!r,(function(){return B(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r}))},nt=function(e,t,n){return Ge(n,(function(n){return e[~~t(n)]}))},rt=function(e){for(var t,n,r,i,a=0,s="";~(t=e.indexOf("random(",a));)r=e.indexOf(")",t),i="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(i?W:R),s+=e.substr(a,t-a)+tt(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),a=r+1;return s+e.substr(a,e.length-a)},it=function(e,t,n,r,i){var a=t-e,s=r-n;return Ge(i,(function(t){return n+((t-e)/a*s||0)}))},at=function(e,t,n){var r,i,a,s=e.labels,o=w;for(r in s)(i=s[r]-t)<0==!!n&&i&&o>(i=Math.abs(i))&&(a=r,o=i);return a},st=function(e,t,n){var r,i,a=e.vars,s=a[t];if(s)return r=a[t+"Params"],i=a.callbackScope||e,n&&ee.length&&he(),r?s.apply(i,r):s.call(i)},ot=function(e){return Se(e),e.scrollTrigger&&e.scrollTrigger.kill(!1),e.progress()<1&&st(e,"onInterrupt"),e},lt=function(e){var t=(e=!e.name&&e.default||e).name,n=O(e),r=t&&!n&&e.init?function(){this._props=[]}:e,i={init:J,render:Qt,add:zt,kill:Zt,modifier:Jt,rawVars:0},a={targetTest:0,get:0,getSetter:Xt,aliases:{},register:0};if(bt(),e!==r){if(ne[t])return;ye(r,ye(Te(e,i),a)),xe(r.prototype,xe(i,Te(e,a))),ne[r.prop=t]=r,e.targetTest&&(ae.push(r),Z[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}Q(t,r),e.register&&e.register(on,r,nn)},ut=255,ct={aqua:[0,ut,ut],lime:[0,ut,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,ut],navy:[0,0,128],white:[ut,ut,ut],olive:[128,128,0],yellow:[ut,ut,0],orange:[ut,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[ut,0,0],pink:[ut,192,203],cyan:[0,ut,ut],transparent:[ut,ut,ut,0]},dt=function(e,t,n){return(6*(e=e<0?e+1:e>1?e-1:e)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*ut+.5|0},pt=function(e,t,n){var r,i,a,s,o,l,u,c,d,p,f=e?P(e)?[e>>16,e>>8&ut,e&ut]:0:ct.black;if(!f){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),ct[e])f=ct[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),i=e.charAt(2),a=e.charAt(3),e="#"+r+r+i+i+a+a+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(f=parseInt(e.substr(1,6),16))>>16,f>>8&ut,f&ut,parseInt(e.substr(7),16)/255];f=[(e=parseInt(e.substr(1),16))>>16,e>>8&ut,e&ut]}else if("hsl"===e.substr(0,3))if(f=p=e.match(R),t){if(~e.indexOf("="))return f=e.match(H),n&&f.length<4&&(f[3]=1),f}else s=+f[0]%360/360,o=+f[1]/100,r=2*(l=+f[2]/100)-(i=l<=.5?l*(o+1):l+o-l*o),f.length>3&&(f[3]*=1),f[0]=dt(s+1/3,r,i),f[1]=dt(s,r,i),f[2]=dt(s-1/3,r,i);else f=e.match(R)||ct.transparent;f=f.map(Number)}return t&&!p&&(r=f[0]/ut,i=f[1]/ut,a=f[2]/ut,l=((u=Math.max(r,i,a))+(c=Math.min(r,i,a)))/2,u===c?s=o=0:(d=u-c,o=l>.5?d/(2-u-c):d/(u+c),s=u===r?(i-a)/d+(i<a?6:0):u===i?(a-r)/d+2:(r-i)/d+4,s*=60),f[0]=~~(s+.5),f[1]=~~(100*o+.5),f[2]=~~(100*l+.5)),n&&f.length<4&&(f[3]=1),f},ft=function(e){var t=[],n=[],r=-1;return e.split(vt).forEach((function(e){var i=e.match(F)||[];t.push.apply(t,i),n.push(r+=i.length+1)})),t.c=n,t},ht=function(e,t,n){var r,i,a,s,o="",l=(e+o).match(vt),u=t?"hsla(":"rgba(",c=0;if(!l)return e;if(l=l.map((function(e){return(e=pt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),n&&(a=ft(e),(r=n.c).join(o)!==a.c.join(o)))for(s=(i=e.replace(vt,"1").split(F)).length-1;c<s;c++)o+=i[c]+(~r.indexOf(c)?l.shift()||u+"0,0,0,0)":(a.length?a:l.length?l:n).shift());if(!i)for(s=(i=e.split(vt)).length-1;c<s;c++)o+=i[c]+l[c];return o+i[s]},vt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in ct)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),mt=/hsl[a]?\(/,gt=function(e){var t,n=e.join(" ");if(vt.lastIndex=0,vt.test(n))return t=mt.test(n),e[1]=ht(e[1],t),e[0]=ht(e[0],t,ft(e[1])),!0},yt=function(){var e,t,n,r,i,a,s=Date.now,o=500,p=33,f=s(),v=f,m=1e3/240,g=m,y=[],b=function n(l){var u,c,d,h,b=s()-v,x=!0===l;if(b>o&&(f+=b-p),((u=(d=(v+=b)-f)-g)>0||x)&&(h=++r.frame,i=d-1e3*r.time,r.time=d/=1e3,g+=u+(u>=m?4:m-u),c=1),x||(e=t(n)),c)for(a=0;a<y.length;a++)y[a](d,i,h,l)};return r={time:0,frame:0,tick:function(){b(!0)},deltaRatio:function(e){return i/(1e3/(e||60))},wake:function(){d&&(!u&&N()&&(l=u=window,c=l.document||{},V.gsap=on,(l.gsapVersions||(l.gsapVersions=[])).push(on.version),Y(X||l.GreenSockGlobals||!l.gsap&&l||{}),n=l.requestAnimationFrame),e&&r.sleep(),t=n||function(e){return setTimeout(e,g-1e3*r.time+1|0)},h=1,b(2))},sleep:function(){(n?l.cancelAnimationFrame:clearTimeout)(e),h=0,t=J},lagSmoothing:function(e,t){o=e||1e8,p=Math.min(t,o,0)},fps:function(e){m=1e3/(e||240),g=1e3*r.time+m},add:function(e){y.indexOf(e)<0&&y.push(e),bt()},remove:function(e){var t;~(t=y.indexOf(e))&&y.splice(t,1)&&a>=t&&a--},_listeners:y}}(),bt=function(){return!h&&yt.wake()},xt={},wt=/^[\d.\-M][\d.\-,\s]/,Tt=/["']/g,_t=function(e){for(var t,n,r,i={},a=e.substr(1,e.length-3).split(":"),s=a[0],o=1,l=a.length;o<l;o++)n=a[o],t=o!==l-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),i[s]=isNaN(r)?r.replace(Tt,"").trim():+r,s=n.substr(t+1).trim();return i},Ct=function(e){return function(t){return 1-e(1-t)}},St=function e(t,n){for(var r,i=t._first;i;)i instanceof Dt?e(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?e(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},Et=function(e,t){return e&&(O(e)?e:xt[e]||function(e){var t,n,r,i,a=(e+"").split("("),s=xt[a[0]];return s&&a.length>1&&s.config?s.config.apply(null,~e.indexOf("{")?[_t(a[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",n),t.substring(n,~i&&i<r?t.indexOf(")",r+1):r)).split(",").map(me)):xt._CE&&wt.test(e)?xt._CE("",e):s}(e))||t},kt=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var i,a={easeIn:t,easeOut:n,easeInOut:r};return ce(e,(function(e){for(var t in xt[e]=V[e]=a,xt[i=e.toLowerCase()]=n,a)xt[i+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=xt[e+"."+t]=a[t]})),a},Mt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},At=function e(t,n,r){var i=n>=1?n:1,a=(r||(t?.3:.45))/(n<1?n:1),s=a/_*(Math.asin(1/i)||0),o=function(e){return 1===e?1:i*Math.pow(2,-10*e)*M((e-s)*a)+1},l="out"===t?o:"in"===t?function(e){return 1-o(1-e)}:Mt(o);return a=_/a,l.config=function(n,r){return e(t,n,r)},l},Ot=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},i="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Mt(r);return i.config=function(n){return e(t,n)},i};ce("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var n=t<5?t+1:t;kt(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},(function(e){return 1-Math.pow(1-e,n)}),(function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2}))})),xt.Linear.easeNone=xt.none=xt.Linear.easeIn,kt("Elastic",At("in"),At("out"),At()),v=7.5625,g=1/(m=2.75),kt("Bounce",(function(e){return 1-y(1-e)}),y=function(e){return e<g?v*e*e:e<.7272727272727273?v*Math.pow(e-1.5/m,2)+.75:e<.9090909090909092?v*(e-=2.25/m)*e+.9375:v*Math.pow(e-2.625/m,2)+.984375}),kt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),kt("Circ",(function(e){return-(E(1-e*e)-1)})),kt("Sine",(function(e){return 1===e?1:1-k(e*C)})),kt("Back",Ot("in"),Ot("out"),Ot()),xt.SteppedEase=xt.steps=V.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),i=t?1:0;return function(e){return((r*Ve(0,.99999999,e)|0)+i)*n}}},x.ease=xt["quad.out"],ce("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return se+=e+","+e+"Params,"}));var Pt=function(e,t){this.id=S++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:ue,this.set=t?t.getSetter:Xt},Lt=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,He(this,+e.duration,1,1),this.data=e.data,h||yt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,He(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(bt(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(De(this,e),!n._dp||n.parent||je(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Ne(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===T||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),ve(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ae(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ae(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?Oe(this._tTime,n)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Pe(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,ke(this.totalTime(Ve(-this._delay,this._tDur,t),!0)),Le(this),this},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(bt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==T&&(this._tTime-=T)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Ne(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(j(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Pe(t.rawTime(e),this):this._tTime:this._tTime},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(t._ts||1),t=t._dp;return n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,Fe(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,Fe(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime($e(this,e),j(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,j(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-T))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(n){var r=O(e)?e:ge,i=function(){var e=t.then;t.then=null,O(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?i():t._prom=i}))},t.kill=function(){ot(this)},e}();ye(Lt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Dt=function(e){function t(t,n){var r;return void 0===t&&(t={}),(r=e.call(this,t)||this).labels={},r.smoothChildTiming=!!t.smoothChildTiming,r.autoRemoveChildren=!!t.autoRemoveChildren,r._sort=j(t.sortChildren),o&&Ne(t.parent||o,i(r),n),t.reversed&&r.reverse(),t.paused&&r.paused(!0),t.scrollTrigger&&ze(i(r),t.scrollTrigger),r}a(t,e);var n=t.prototype;return n.to=function(e,t,n){return We(0,arguments,this),this},n.from=function(e,t,n){return We(1,arguments,this),this},n.fromTo=function(e,t,n,r){return We(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,_e(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new qt(e,t,$e(this,n),1),this},n.call=function(e,t,n){return Ne(this,qt.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,i,a,s){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=a,n.onCompleteParams=s,n.parent=this,new qt(e,n,$e(this,i)),this},n.staggerFrom=function(e,t,n,r,i,a,s){return n.runBackwards=1,_e(n).immediateRender=j(n.immediateRender),this.staggerTo(e,t,n,r,i,a,s)},n.staggerFromTo=function(e,t,n,r,i,a,s,o){return r.startAt=n,_e(r).immediateRender=j(r.immediateRender),this.staggerTo(e,t,r,i,a,s,o)},n.render=function(e,t,n){var r,i,a,s,l,u,c,d,p,f,h,v,m=this._time,g=this._dirty?this.totalDuration():this._tDur,y=this._dur,b=e<=0?0:pe(e),x=this._zTime<0!=e<0&&(this._initted||!y);if(this!==o&&b>g&&e>=0&&(b=g),b!==this._tTime||n||x){if(m!==this._time&&y&&(b+=this._time-m,e+=this._time-m),r=b,p=this._start,u=!(d=this._ts),x&&(y||(m=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(h=this._yoyo,l=y+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*l+e,t,n);if(r=pe(b%l),b===g?(s=this._repeat,r=y):((s=~~(b/l))&&s===b/l&&(r=y,s--),r>y&&(r=y)),f=Oe(this._tTime,l),!m&&this._tTime&&f!==s&&(f=s),h&&1&s&&(r=y-r,v=1),s!==f&&!this._lock){var w=h&&1&f,_=w===(h&&1&s);if(s<f&&(w=!w),m=w?0:y,this._lock=1,this.render(m||(v?0:pe(s*l)),t,!y)._lock=0,this._tTime=b,!t&&this.parent&&st(this,"onRepeat"),this.vars.repeatRefresh&&!v&&(this.invalidate()._lock=1),m&&m!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,g=this._tDur,_&&(this._lock=2,m=w?y:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!v&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;St(this,v)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if(!r._dur&&"isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if(!r._dur&&"isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,pe(m),pe(r)),c&&(b-=r-(r=c._start))),this._tTime=b,this._time=r,this._act=!d,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,m=0),!m&&r&&!t&&(st(this,"onStart"),this._tTime!==b))return this;if(r>=m&&e>=0)for(i=this._first;i;){if(a=i._next,(i._act||r>=i._start)&&i._ts&&c!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,t,n),r!==this._time||!this._ts&&!u){c=0,a&&(b+=this._zTime=-1e-8);break}}i=a}else{i=this._last;for(var C=e<0?e:r;i;){if(a=i._prev,(i._act||C<=i._end)&&i._ts&&c!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(C-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(C-i._start)*i._ts,t,n),r!==this._time||!this._ts&&!u){c=0,a&&(b+=this._zTime=C?-1e-8:T);break}}i=a}}if(c&&!t&&(this.pause(),c.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=p,Le(this),this.render(e,t,n);this._onUpdate&&!t&&st(this,"onUpdate",!0),(b===g&&g>=this.totalDuration()||!b&&m)&&(p!==this._start&&Math.abs(d)===Math.abs(this._ts)||this._lock||((e||!y)&&(b===g&&this._ts>0||!b&&this._ts<0)&&Se(this,1),t||e<0&&!m||!b&&!m&&g||(st(this,b===g&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(b<g&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(P(t)||(t=$e(this,t,e)),!(e instanceof Lt)){if(B(e))return e.forEach((function(e){return n.add(e,t)})),this;if(A(e))return this.addLabel(e,t);if(!O(e))return this;e=qt.delayedCall(0,e)}return this!==e?Ne(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-w);for(var i=[],a=this._first;a;)a._start>=r&&(a instanceof qt?t&&i.push(a):(n&&i.push(a),e&&i.push.apply(i,a.getChildren(!0,t,n)))),a=a._next;return i},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return A(e)?this.removeLabel(e):O(e)?this.killTweensOf(e):(Ce(this,e),e===this._recent&&(this._recent=this._last),Ee(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=pe(yt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=$e(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=qt.delayedCall(0,t||J,n);return r.data="isPause",this._hasPause=1,Ne(this,r,$e(this,e))},n.removePause=function(e){var t=this._first;for(e=$e(this,e);t;)t._start===e&&"isPause"===t.data&&Se(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),i=r.length;i--;)jt!==r[i]&&r[i].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],i=Ke(e),a=this._first,s=P(t);a;)a instanceof qt?fe(a._targets,i)&&(s?(!jt||a._initted&&a._ts)&&a.globalTime(0)<=t&&a.globalTime(a.totalDuration())>t:!t||a.isActive())&&r.push(a):(n=a.getTweensOf(i,t)).length&&r.push.apply(r,n),a=a._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,i=$e(r,e),a=t,s=a.startAt,o=a.onStart,l=a.onStartParams,u=a.immediateRender,c=qt.to(r,ye({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:t.duration||Math.abs((i-(s&&"time"in s?s.time:r._time))/r.timeScale())||T,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((i-(s&&"time"in s?s.time:r._time))/r.timeScale());c._dur!==e&&He(c,e,0,1).render(c._time,!0,!0),n=1}o&&o.apply(c,l||[])}},t));return u?c.render(0):c},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,ye({startAt:{time:$e(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),at(this,$e(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),at(this,$e(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+T)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,i=this._first,a=this.labels;i;)i._start>=n&&(i._start+=e,i._end+=e),i=i._next;if(t)for(r in a)a[r]>=n&&(a[r]+=e);return Ee(this)},n.invalidate=function(){var t=this._first;for(this._lock=0;t;)t.invalidate(),t=t._next;return e.prototype.invalidate.call(this)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Ee(this)},n.totalDuration=function(e){var t,n,r,i=0,a=this,s=a._last,l=w;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-e:e));if(a._dirty){for(r=a.parent;s;)t=s._prev,s._dirty&&s.totalDuration(),(n=s._start)>l&&a._sort&&s._ts&&!a._lock?(a._lock=1,Ne(a,s,n-s._delay,1)._lock=0):l=n,n<0&&s._ts&&(i-=n,(!r&&!a._dp||r&&r.smoothChildTiming)&&(a._start+=n/a._ts,a._time-=n,a._tTime-=n),a.shiftChildren(-n,!1,-Infinity),l=0),s._end>i&&s._ts&&(i=s._end),s=t;He(a,a===o&&a._time>i?a._time:i,1,1),a._dirty=0}return a._tDur},t.updateRoot=function(e){if(o._ts&&(ve(o,Pe(e,o)),p=yt.frame),yt.frame>=ie){ie+=b.autoSleep||120;var t=o._first;if((!t||!t._ts)&&b.autoSleep&&yt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||yt.sleep()}}},t}(Lt);ye(Dt.prototype,{_lock:0,_hasPause:0,_forcing:0});var jt,Nt=function(e,t,n,r,i,a,s){var o,l,u,c,d,p,f,h,v=new nn(this._pt,e,t,0,1,Kt,null,i),m=0,g=0;for(v.b=n,v.e=r,n+="",(f=~(r+="").indexOf("random("))&&(r=rt(r)),a&&(a(h=[n,r],e,t),n=h[0],r=h[1]),l=n.match(q)||[];o=q.exec(r);)c=o[0],d=r.substring(m,o.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),c!==l[g++]&&(p=parseFloat(l[g-1])||0,v._pt={_next:v._pt,p:d||1===g?d:",",s:p,c:"="===c.charAt(1)?parseFloat(c.substr(2))*("-"===c.charAt(0)?-1:1):parseFloat(c)-p,m:u&&u<4?Math.round:0},m=q.lastIndex);return v.c=m<r.length?r.substring(m,r.length):"",v.fp=s,($.test(r)||f)&&(v.e=0),this._pt=v,v},zt=function(e,t,n,r,i,a,s,o,l){O(r)&&(r=r(i||0,e,a));var u,c=e[t],d="get"!==n?n:O(c)?l?e[t.indexOf("set")||!O(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():c,p=O(c)?l?Gt:Wt:$t;if(A(r)&&(~r.indexOf("random(")&&(r=rt(r)),"="===r.charAt(1)&&((u=parseFloat(d)+parseFloat(r.substr(2))*("-"===r.charAt(0)?-1:1)+(Xe(d)||0))||0===u)&&(r=u)),d!==r)return isNaN(d*r)||""===r?(!c&&!(t in e)&&U(t,r),Nt.call(this,e,t,d,r,p,o||b.stringFilter,l)):(u=new nn(this._pt,e,t,+d||0,r-(d||0),"boolean"==typeof c?Ut:Yt,0,p),l&&(u.fp=l),s&&u.modifier(s,this,e),this._pt=u)},It=function(e,t,n,r,i,a){var s,o,l,u;if(ne[e]&&!1!==(s=new ne[e]).init(i,s.rawVars?t[e]:function(e,t,n,r,i){if(O(e)&&(e=Rt(e,i,t,n,r)),!D(e)||e.style&&e.nodeType||B(e)||I(e))return A(e)?Rt(e,i,t,n,r):e;var a,s={};for(a in e)s[a]=Rt(e[a],i,t,n,r);return s}(t[e],r,i,a,n),n,r,a)&&(n._pt=o=new nn(n._pt,i,e,0,1,s.render,s,0,s.priority),n!==f))for(l=n._ptLookup[n._targets.indexOf(i)],u=s._props.length;u--;)l[s._props[u]]=o;return s},Bt=function e(t,n){var r,i,a,l,u,c,d,p,f,h,v,m,g,y=t.vars,b=y.ease,w=y.startAt,_=y.immediateRender,C=y.lazy,S=y.onUpdate,E=y.onUpdateParams,k=y.callbackScope,M=y.runBackwards,A=y.yoyoEase,O=y.keyframes,P=y.autoRevert,L=t._dur,D=t._startAt,N=t._targets,z=t.parent,I=z&&"nested"===z.data?z.parent._targets:N,B="auto"===t._overwrite&&!s,R=t.timeline;if(R&&(!O||!b)&&(b="none"),t._ease=Et(b,x.ease),t._yEase=A?Ct(Et(!0===A?b:A,x.ease)):0,A&&t._yoyo&&!t._repeat&&(A=t._yEase,t._yEase=t._ease,t._ease=A),t._from=!R&&!!y.runBackwards,!R){if(m=(p=N[0]?le(N[0]).harness:0)&&y[p.prop],r=Te(y,Z),D&&D.render(-1,!0).kill(),w)if(Se(t._startAt=qt.set(N,ye({data:"isStart",overwrite:!1,parent:z,immediateRender:!0,lazy:j(C),startAt:null,delay:0,onUpdate:S,onUpdateParams:E,callbackScope:k,stagger:0},w))),n<0&&!_&&!P&&t._startAt.render(-1,!0),_){if(n>0&&!P&&(t._startAt=0),L&&n<=0)return void(n&&(t._zTime=n))}else!1===P&&(t._startAt=0);else if(M&&L)if(D)!P&&(t._startAt=0);else if(n&&(_=!1),a=ye({overwrite:!1,data:"isFromStart",lazy:_&&j(C),immediateRender:_,stagger:0,parent:z},r),m&&(a[p.prop]=m),Se(t._startAt=qt.set(N,a)),n<0&&t._startAt.render(-1,!0),_){if(!n)return}else e(t._startAt,T);for(t._pt=0,C=L&&j(C)||C&&!L,i=0;i<N.length;i++){if(d=(u=N[i])._gsap||oe(N)[i]._gsap,t._ptLookup[i]=h={},te[d.id]&&ee.length&&he(),v=I===N?i:I.indexOf(u),p&&!1!==(f=new p).init(u,m||r,t,v,I)&&(t._pt=l=new nn(t._pt,u,f.name,0,1,f.render,f,0,f.priority),f._props.forEach((function(e){h[e]=l})),f.priority&&(c=1)),!p||m)for(a in r)ne[a]&&(f=It(a,r,t,v,u,I))?f.priority&&(c=1):h[a]=l=zt.call(t,u,a,"get",r[a],v,I,0,y.stringFilter);t._op&&t._op[i]&&t.kill(u,t._op[i]),B&&t._pt&&(jt=t,o.killTweensOf(u,h,t.globalTime(n)),g=!t.parent,jt=0),t._pt&&C&&(te[d.id]=1)}c&&tn(t),t._onInit&&t._onInit(t)}t._onUpdate=S,t._initted=(!t._op||t._pt)&&!g},Rt=function(e,t,n,r,i){return O(e)?e.call(t,n,r,i):A(e)&&~e.indexOf("random(")?rt(e):e},Ht=se+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",Ft=(Ht+",id,stagger,delay,duration,paused,scrollTrigger").split(","),qt=function(e){function t(t,n,r,a){var l;"number"==typeof n&&(r.duration=n,n=r,r=null);var u,c,d,p,f,h,v,m,g=(l=e.call(this,a?n:_e(n))||this).vars,y=g.duration,x=g.delay,w=g.immediateRender,T=g.stagger,_=g.overwrite,C=g.keyframes,S=g.defaults,E=g.scrollTrigger,k=g.yoyoEase,M=n.parent||o,A=(B(t)||I(t)?P(t[0]):"length"in n)?[t]:Ke(t);if(l._targets=A.length?oe(A):K("GSAP target "+t+" not found. https://greensock.com",!b.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=_,C||T||z(y)||z(x)){if(n=l.vars,(u=l.timeline=new Dt({data:"nested",defaults:S||{}})).kill(),u.parent=u._dp=i(l),u._start=0,C)_e(ye(u.vars.defaults,{ease:"none"})),T?A.forEach((function(e,t){return C.forEach((function(n,r){return u.to(e,n,r?">":t*T)}))})):C.forEach((function(e){return u.to(A,e,">")}));else{if(p=A.length,v=T?Je(T):J,D(T))for(f in T)~Ht.indexOf(f)&&(m||(m={}),m[f]=T[f]);for(c=0;c<p;c++){for(f in d={},n)Ft.indexOf(f)<0&&(d[f]=n[f]);d.stagger=0,k&&(d.yoyoEase=k),m&&xe(d,m),h=A[c],d.duration=+Rt(y,i(l),c,h,A),d.delay=(+Rt(x,i(l),c,h,A)||0)-l._delay,!T&&1===p&&d.delay&&(l._delay=x=d.delay,l._start+=x,d.delay=0),u.to(h,d,v(c,h,A))}u.duration()?y=x=0:l.timeline=0}y||l.duration(y=u.duration())}else l.timeline=0;return!0!==_||s||(jt=i(l),o.killTweensOf(A),jt=0),Ne(M,i(l),r),n.reversed&&l.reverse(),n.paused&&l.paused(!0),(w||!y&&!C&&l._start===pe(M._time)&&j(w)&&Me(i(l))&&"nested"!==M.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-x))),E&&ze(i(l),E),l}a(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,i,a,s,o,l,u,c,d,p=this._time,f=this._tDur,h=this._dur,v=e>f-T&&e>=0?f:e<T?0:e;if(h){if(v!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=e<0){if(r=v,c=this.timeline,this._repeat){if(s=h+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*s+e,t,n);if(r=pe(v%s),v===f?(a=this._repeat,r=h):((a=~~(v/s))&&a===v/s&&(r=h,a--),r>h&&(r=h)),(l=this._yoyo&&1&a)&&(d=this._yEase,r=h-r),o=Oe(this._tTime,s),r===p&&!n&&this._initted)return this;a!==o&&(c&&this._yEase&&St(c,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=n=1,this.render(pe(s*a),!0).invalidate()._lock=0))}if(!this._initted){if(Ie(this,e<0?e:r,n,t))return this._tTime=0,this;if(h!==this._dur)return this.render(e,t,n)}if(this._tTime=v,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(d||this._ease)(r/h),this._from&&(this.ratio=u=1-u),r&&!p&&!t&&(st(this,"onStart"),this._tTime!==v))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;c&&c.render(e<0?e:!r&&l?-1e-8:c._dur*u,t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(e<0&&this._startAt&&this._startAt.render(e,!0,n),st(this,"onUpdate")),this._repeat&&a!==o&&this.vars.onRepeat&&!t&&this.parent&&st(this,"onRepeat"),v!==this._tDur&&v||this._tTime!==v||(e<0&&this._startAt&&!this._onUpdate&&this._startAt.render(e,!0,!0),(e||!h)&&(v===this._tDur&&this._ts>0||!v&&this._ts<0)&&Se(this,1),t||e<0&&!p||!v&&!p||(st(this,v===f?"onComplete":"onReverseComplete",!0),this._prom&&!(v<f&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var i,a,s,o=e.ratio,l=t<0||!t&&(!e._start&&Be(e)&&(e._initted||!Re(e))||(e._ts<0||e._dp._ts<0)&&!Re(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=Ve(0,e._tDur,t),a=Oe(c,u),s=Oe(e._tTime,u),e._yoyo&&1&a&&(l=1-l),a!==s&&(o=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==o||r||e._zTime===T||!t&&e._zTime){if(!e._initted&&Ie(e,t,r,n))return;for(s=e._zTime,e._zTime=t||(n?T:0),n||(n=t&&!s),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=c,i=e._pt;i;)i.r(l,i.d),i=i._next;e._startAt&&t<0&&e._startAt.render(t,!0,!0),e._onUpdate&&!n&&st(e,"onUpdate"),c&&e._repeat&&!n&&e.parent&&st(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&Se(e,1),n||(st(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),e.prototype.invalidate.call(this)},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?ot(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,jt&&!0!==jt.vars.overwrite)._first||ot(this),this.parent&&n!==this.timeline.totalDuration()&&He(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,a,s,o,l,u,c=this._targets,d=e?Ke(e):c,p=this._ptLookup,f=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(c,d))return"all"===t&&(this._pt=0),ot(this);for(r=this._op=this._op||[],"all"!==t&&(A(t)&&(o={},ce(t,(function(e){return o[e]=1})),t=o),t=function(e,t){var n,r,i,a,s=e[0]?le(e[0]).harness:0,o=s&&s.aliases;if(!o)return t;for(r in n=xe({},t),o)if(r in n)for(i=(a=o[r].split(",")).length;i--;)n[a[i]]=n[r];return n}(c,t)),u=c.length;u--;)if(~d.indexOf(c[u]))for(o in i=p[u],"all"===t?(r[u]=t,s=i,a={}):(a=r[u]=r[u]||{},s=t),s)(l=i&&i[o])&&("kill"in l.d&&!0!==l.d.kill(o)||Ce(this,l,"_pt"),delete i[o]),"all"!==a&&(a[o]=1);return this._initted&&!this._pt&&f&&ot(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return We(1,arguments)},t.delayedCall=function(e,n,r,i){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},t.fromTo=function(e,t,n){return We(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return o.killTweensOf(e,t,n)},t}(Lt);ye(qt.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),ce("staggerTo,staggerFrom,staggerFromTo",(function(e){qt[e]=function(){var t=new Dt,n=Ye.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}}));var $t=function(e,t,n){return e[t]=n},Wt=function(e,t,n){return e[t](n)},Gt=function(e,t,n,r){return e[t](r.fp,n)},Vt=function(e,t,n){return e.setAttribute(t,n)},Xt=function(e,t){return O(e[t])?Wt:L(e[t])&&e.setAttribute?Vt:$t},Yt=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},Ut=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},Kt=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},Qt=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},Jt=function(e,t,n,r){for(var i,a=this._pt;a;)i=a._next,a.p===r&&a.modifier(e,t,n),a=i},Zt=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?Ce(this,r,"_pt"):r.dep||(t=1),r=n;return!t},en=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},tn=function(e){for(var t,n,r,i,a=e._pt;a;){for(t=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:i)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:i=a,a=t}e._pt=r},nn=function(){function e(e,t,n,r,i,a,s,o,l){this.t=t,this.s=r,this.c=i,this.p=n,this.r=a||Yt,this.d=s||this,this.set=o||$t,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=en,this.m=e,this.mt=n,this.tween=t},e}();ce(se+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return Z[e]=1})),V.TweenMax=V.TweenLite=qt,V.TimelineLite=V.TimelineMax=Dt,o=new Dt({sortChildren:!1,defaults:x,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),b.stringFilter=gt;var rn={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e){return lt(e)}))},timeline:function(e){return new Dt(e)},getTweensOf:function(e,t){return o.getTweensOf(e,t)},getProperty:function(e,t,n,r){A(e)&&(e=Ke(e)[0]);var i=le(e||{}).get,a=n?ge:me;return"native"===n&&(n=""),e?t?a((ne[t]&&ne[t].get||i)(e,t,n,r)):function(t,n,r){return a((ne[t]&&ne[t].get||i)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=Ke(e)).length>1){var r=e.map((function(e){return on.quickSetter(e,t,n)})),i=r.length;return function(e){for(var t=i;t--;)r[t](e)}}e=e[0]||{};var a=ne[t],s=le(e),o=s.harness&&(s.harness.aliases||{})[t]||t,l=a?function(t){var r=new a;f._pt=0,r.init(e,n?t+n:t,f,0,[e]),r.render(1,r),f._pt&&Qt(1,f)}:s.set(e,o);return a?l:function(t){return l(e,o,n?t+n:t,s,1)}},isTweening:function(e){return o.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Et(e.ease,x.ease)),we(x,e||{})},config:function(e){return we(b,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,i=e.defaults,a=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!ne[e]&&!V[e]&&K(t+" effect requires "+e+" plugin.")})),re[t]=function(e,t,r){return n(Ke(e),ye(t||{},i),r)},a&&(Dt.prototype[t]=function(e,n,r){return this.add(re[t](e,D(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){xt[e]=Et(t)},parseEase:function(e,t){return arguments.length?Et(e,t):xt},getById:function(e){return o.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,i=new Dt(e);for(i.smoothChildTiming=j(e.smoothChildTiming),o.remove(i),i._dp=0,i._time=i._tTime=o._time,n=o._first;n;)r=n._next,!t&&!n._dur&&n instanceof qt&&n.vars.onComplete===n._targets[0]||Ne(i,n,n._start-n._delay),n=r;return Ne(o,i,0),i},utils:{wrap:function e(t,n,r){var i=n-t;return B(t)?nt(t,e(0,t.length),n):Ge(r,(function(e){return(i+(e-t)%i)%i+t}))},wrapYoyo:function e(t,n,r){var i=n-t,a=2*i;return B(t)?nt(t,e(0,t.length-1),n):Ge(r,(function(e){return t+((e=(a+(e-t)%a)%a||0)>i?a-e:e)}))},distribute:Je,random:tt,snap:et,normalize:function(e,t,n){return it(e,t,0,1,n)},getUnit:Xe,clamp:function(e,t,n){return Ge(n,(function(n){return Ve(e,t,n)}))},splitColor:pt,toArray:Ke,selector:function(e){return e=Ke(e)[0]||K("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return Ke(t,n.querySelectorAll?n:n===e?K("Invalid scope")||c.createElement("div"):e)}},mapRange:it,pipe:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},unitize:function(e,t){return function(n){return e(parseFloat(n))+(t||Xe(n))}},interpolate:function e(t,n,r,i){var a=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!a){var s,o,l,u,c,d=A(t),p={};if(!0===r&&(i=1)&&(r=null),d)t={p:t},n={p:n};else if(B(t)&&!B(n)){for(l=[],u=t.length,c=u-2,o=1;o<u;o++)l.push(e(t[o-1],t[o]));u--,a=function(e){e*=u;var t=Math.min(c,~~e);return l[t](e-t)},r=n}else i||(t=xe(B(t)?[]:{},t));if(!l){for(s in n)zt.call(p,t,s,"get",n[s]);a=function(e){return Qt(e,p)||(d?t.p:t)}}}return Ge(r,a)},shuffle:Qe},install:Y,effects:re,ticker:yt,updateRoot:Dt.updateRoot,plugins:ne,globalTimeline:o,core:{PropTween:nn,globals:Q,Tween:qt,Timeline:Dt,Animation:Lt,getCache:le,_removeLinkedListItem:Ce,suppressOverwrites:function(e){return s=e}}};ce("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return rn[e]=qt[e]})),yt.add(Dt.updateRoot),f=rn.to({},{duration:0});var an=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},sn=function(e,t){return{name:e,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,i;if(A(n)&&(r={},ce(n,(function(e){return r[e]=1})),n=r),t){for(i in r={},n)r[i]=t(n[i]);n=r}!function(e,t){var n,r,i,a=e._targets;for(n in t)for(r=a.length;r--;)(i=e._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=an(i,n)),i&&i.modifier&&i.modifier(t[n],e,a[r],n))}(e,n)}}}},on=rn.registerPlugin({name:"attr",init:function(e,t,n,r,i){var a,s;for(a in t)(s=this.add(e,"setAttribute",(e.getAttribute(a)||0)+"",t[a],r,i,0,0,a))&&(s.op=a),this._props.push(a)}},{name:"endArray",init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n])}},sn("roundProps",Ze),sn("modifiers"),sn("snap",et))||rn;qt.version=Dt.version=on.version="3.8.0",d=1,N()&&bt(),xt.Power0,xt.Power1,xt.Power2,xt.Power3,xt.Power4,xt.Linear,xt.Quad,xt.Cubic,xt.Quart,xt.Quint,xt.Strong,xt.Elastic,xt.Back,xt.SteppedEase,xt.Bounce,xt.Sine,xt.Expo,xt.Circ;var ln,un,cn,dn,pn,fn,hn,vn={},mn=180/Math.PI,gn=Math.PI/180,yn=Math.atan2,bn=/([A-Z])/g,xn=/(?:left|right|width|margin|padding|x)/i,wn=/[\s,\(]\S/,Tn={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},_n=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Cn=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},Sn=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},En=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},kn=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},Mn=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},An=function(e,t,n){return e.style[t]=n},On=function(e,t,n){return e.style.setProperty(t,n)},Pn=function(e,t,n){return e._gsap[t]=n},Ln=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},Dn=function(e,t,n,r,i){var a=e._gsap;a.scaleX=a.scaleY=n,a.renderTransform(i,a)},jn=function(e,t,n,r,i){var a=e._gsap;a[t]=n,a.renderTransform(i,a)},Nn="transform",zn=Nn+"Origin",In=function(e,t){var n=un.createElementNS?un.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):un.createElement(e);return n.style?n:un.createElement(e)},Bn=function e(t,n,r){var i=getComputedStyle(t);return i[n]||i.getPropertyValue(n.replace(bn,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&e(t,Hn(n)||n,1)||""},Rn="O,Moz,ms,Ms,Webkit".split(","),Hn=function(e,t,n){var r=(t||pn).style,i=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);i--&&!(Rn[i]+e in r););return i<0?null:(3===i?"ms":i>=0?Rn[i]:"")+e},Fn=function(){"undefined"!=typeof window&&window.document&&(ln=window,un=ln.document,cn=un.documentElement,pn=In("div")||{style:{}},In("div"),Nn=Hn(Nn),zn=Nn+"Origin",pn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",hn=!!Hn("perspective"),dn=1)},qn=function e(t){var n,r=In("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,a=this.nextSibling,s=this.style.cssText;if(cn.appendChild(r),r.appendChild(this),this.style.display="block",t)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(a?i.insertBefore(this,a):i.appendChild(this)),cn.removeChild(r),this.style.cssText=s,n},$n=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},Wn=function(e){var t;try{t=e.getBBox()}catch(n){t=qn.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===qn||(t=qn.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+$n(e,["x","cx","x1"])||0,y:+$n(e,["y","cy","y1"])||0,width:0,height:0}},Gn=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!Wn(e))},Vn=function(e,t){if(t){var n=e.style;t in vn&&t!==zn&&(t=Nn),n.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),n.removeProperty(t.replace(bn,"-$1").toLowerCase())):n.removeAttribute(t)}},Xn=function(e,t,n,r,i,a){var s=new nn(e._pt,t,n,0,1,a?Mn:kn);return e._pt=s,s.b=r,s.e=i,e._props.push(n),s},Yn={deg:1,rad:1,turn:1},Un=function e(t,n,r,i){var a,s,o,l,u=parseFloat(r)||0,c=(r+"").trim().substr((u+"").length)||"px",d=pn.style,p=xn.test(n),f="svg"===t.tagName.toLowerCase(),h=(f?"client":"offset")+(p?"Width":"Height"),v=100,m="px"===i,g="%"===i;return i===c||!u||Yn[i]||Yn[c]?u:("px"!==c&&!m&&(u=e(t,n,r,"px")),l=t.getCTM&&Gn(t),!g&&"%"!==c||!vn[n]&&!~n.indexOf("adius")?(d[p?"width":"height"]=v+(m?c:i),s=~n.indexOf("adius")||"em"===i&&t.appendChild&&!f?t:t.parentNode,l&&(s=(t.ownerSVGElement||{}).parentNode),s&&s!==un&&s.appendChild||(s=un.body),(o=s._gsap)&&g&&o.width&&p&&o.time===yt.time?de(u/o.width*v):((g||"%"===c)&&(d.position=Bn(t,"position")),s===t&&(d.position="static"),s.appendChild(pn),a=pn[h],s.removeChild(pn),d.position="absolute",p&&g&&((o=le(s)).time=yt.time,o.width=s[h]),de(m?a*u/v:a&&u?v/a*u:0))):(a=l?t.getBBox()[p?"width":"height"]:t[h],de(g?u/a*v:u/100*a)))},Kn=function(e,t,n,r){var i;return dn||Fn(),t in Tn&&"transform"!==t&&~(t=Tn[t]).indexOf(",")&&(t=t.split(",")[0]),vn[t]&&"transform"!==t?(i=or(e,r),i="transformOrigin"!==t?i[t]:i.svg?i.origin:lr(Bn(e,zn))+" "+i.zOrigin+"px"):(!(i=e.style[t])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=er[t]&&er[t](e,t,n)||Bn(e,t)||ue(e,t)||("opacity"===t?1:0)),n&&!~(i+"").trim().indexOf(" ")?Un(e,t,i,n)+n:i},Qn=function(e,t,n,r){if(!n||"none"===n){var i=Hn(t,e,1),a=i&&Bn(e,i,1);a&&a!==n?(t=i,n=a):"borderColor"===t&&(n=Bn(e,"borderTopColor"))}var s,o,l,u,c,d,p,f,h,v,m,g,y=new nn(this._pt,e.style,t,0,1,Kt),x=0,w=0;if(y.b=n,y.e=r,n+="","auto"==(r+="")&&(e.style[t]=r,r=Bn(e,t)||r,e.style[t]=n),gt(s=[n,r]),r=s[1],l=(n=s[0]).match(F)||[],(r.match(F)||[]).length){for(;o=F.exec(r);)p=o[0],h=r.substring(x,o.index),c?c=(c+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(c=1),p!==(d=l[w++]||"")&&(u=parseFloat(d)||0,m=d.substr((u+"").length),(g="="===p.charAt(1)?+(p.charAt(0)+"1"):0)&&(p=p.substr(2)),f=parseFloat(p),v=p.substr((f+"").length),x=F.lastIndex-v.length,v||(v=v||b.units[t]||m,x===r.length&&(r+=v,y.e+=v)),m!==v&&(u=Un(e,t,d,v)||0),y._pt={_next:y._pt,p:h||1===w?h:",",s:u,c:g?g*f:f-u,m:c&&c<4||"zIndex"===t?Math.round:0});y.c=x<r.length?r.substring(x,r.length):""}else y.r="display"===t&&"none"===r?Mn:kn;return $.test(r)&&(y.e=0),this._pt=y,y},Jn={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Zn=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,i,a=t.t,s=a.style,o=t.u,l=a._gsap;if("all"===o||!0===o)s.cssText="",r=1;else for(i=(o=o.split(",")).length;--i>-1;)n=o[i],vn[n]&&(r=1,n="transformOrigin"===n?zn:Nn),Vn(a,n);r&&(Vn(a,Nn),l&&(l.svg&&a.removeAttribute("transform"),or(a,1),l.uncache=1))}},er={clearProps:function(e,t,n,r,i){if("isFromStart"!==i.data){var a=e._pt=new nn(e._pt,t,n,0,0,Zn);return a.u=r,a.pr=-10,a.tween=i,e._props.push(n),1}}},tr=[1,0,0,1,0,0],nr={},rr=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},ir=function(e){var t=Bn(e,Nn);return rr(t)?tr:t.substr(7).match(H).map(de)},ar=function(e,t){var n,r,i,a,s=e._gsap||le(e),o=e.style,l=ir(e);return s.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(l=[(i=e.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?tr:l:(l!==tr||e.offsetParent||e===cn||s.svg||(i=o.display,o.display="block",(n=e.parentNode)&&e.offsetParent||(a=1,r=e.nextSibling,cn.appendChild(e)),l=ir(e),i?o.display=i:Vn(e,"display"),a&&(r?n.insertBefore(e,r):n?n.appendChild(e):cn.removeChild(e))),t&&l.length>6?[l[0],l[1],l[4],l[5],l[12],l[13]]:l)},sr=function(e,t,n,r,i,a){var s,o,l,u=e._gsap,c=i||ar(e,!0),d=u.xOrigin||0,p=u.yOrigin||0,f=u.xOffset||0,h=u.yOffset||0,v=c[0],m=c[1],g=c[2],y=c[3],b=c[4],x=c[5],w=t.split(" "),T=parseFloat(w[0])||0,_=parseFloat(w[1])||0;n?c!==tr&&(o=v*y-m*g)&&(l=T*(-m/o)+_*(v/o)-(v*x-m*b)/o,T=T*(y/o)+_*(-g/o)+(g*x-y*b)/o,_=l):(T=(s=Wn(e)).x+(~w[0].indexOf("%")?T/100*s.width:T),_=s.y+(~(w[1]||w[0]).indexOf("%")?_/100*s.height:_)),r||!1!==r&&u.smooth?(b=T-d,x=_-p,u.xOffset=f+(b*v+x*g)-b,u.yOffset=h+(b*m+x*y)-x):u.xOffset=u.yOffset=0,u.xOrigin=T,u.yOrigin=_,u.smooth=!!r,u.origin=t,u.originIsAbsolute=!!n,e.style[zn]="0px 0px",a&&(Xn(a,u,"xOrigin",d,T),Xn(a,u,"yOrigin",p,_),Xn(a,u,"xOffset",f,u.xOffset),Xn(a,u,"yOffset",h,u.yOffset)),e.setAttribute("data-svg-origin",T+" "+_)},or=function(e,t){var n=e._gsap||new Pt(e);if("x"in n&&!t&&!n.uncache)return n;var r,i,a,s,o,l,u,c,d,p,f,h,v,m,g,y,x,w,T,_,C,S,E,k,M,A,O,P,L,D,j,N,z=e.style,I=n.scaleX<0,B="px",R="deg",H=Bn(e,zn)||"0";return r=i=a=l=u=c=d=p=f=0,s=o=1,n.svg=!(!e.getCTM||!Gn(e)),m=ar(e,n.svg),n.svg&&(k=(!n.uncache||"0px 0px"===H)&&!t&&e.getAttribute("data-svg-origin"),sr(e,k||H,!!k||n.originIsAbsolute,!1!==n.smooth,m)),h=n.xOrigin||0,v=n.yOrigin||0,m!==tr&&(w=m[0],T=m[1],_=m[2],C=m[3],r=S=m[4],i=E=m[5],6===m.length?(s=Math.sqrt(w*w+T*T),o=Math.sqrt(C*C+_*_),l=w||T?yn(T,w)*mn:0,(d=_||C?yn(_,C)*mn+l:0)&&(o*=Math.abs(Math.cos(d*gn))),n.svg&&(r-=h-(h*w+v*_),i-=v-(h*T+v*C))):(N=m[6],D=m[7],O=m[8],P=m[9],L=m[10],j=m[11],r=m[12],i=m[13],a=m[14],u=(g=yn(N,L))*mn,g&&(k=S*(y=Math.cos(-g))+O*(x=Math.sin(-g)),M=E*y+P*x,A=N*y+L*x,O=S*-x+O*y,P=E*-x+P*y,L=N*-x+L*y,j=D*-x+j*y,S=k,E=M,N=A),c=(g=yn(-_,L))*mn,g&&(y=Math.cos(-g),j=C*(x=Math.sin(-g))+j*y,w=k=w*y-O*x,T=M=T*y-P*x,_=A=_*y-L*x),l=(g=yn(T,w))*mn,g&&(k=w*(y=Math.cos(g))+T*(x=Math.sin(g)),M=S*y+E*x,T=T*y-w*x,E=E*y-S*x,w=k,S=M),u&&Math.abs(u)+Math.abs(l)>359.9&&(u=l=0,c=180-c),s=de(Math.sqrt(w*w+T*T+_*_)),o=de(Math.sqrt(E*E+N*N)),g=yn(S,E),d=Math.abs(g)>2e-4?g*mn:0,f=j?1/(j<0?-j:j):0),n.svg&&(k=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!rr(Bn(e,Nn)),k&&e.setAttribute("transform",k))),Math.abs(d)>90&&Math.abs(d)<270&&(I?(s*=-1,d+=l<=0?180:-180,l+=l<=0?180:-180):(o*=-1,d+=d<=0?180:-180)),n.x=r-((n.xPercent=r&&(n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+B,n.y=i-((n.yPercent=i&&(n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-i)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+B,n.z=a+B,n.scaleX=de(s),n.scaleY=de(o),n.rotation=de(l)+R,n.rotationX=de(u)+R,n.rotationY=de(c)+R,n.skewX=d+R,n.skewY=p+R,n.transformPerspective=f+B,(n.zOrigin=parseFloat(H.split(" ")[2])||0)&&(z[zn]=lr(H)),n.xOffset=n.yOffset=0,n.force3D=b.force3D,n.renderTransform=n.svg?vr:hn?hr:cr,n.uncache=0,n},lr=function(e){return(e=e.split(" "))[0]+" "+e[1]},ur=function(e,t,n){var r=Xe(t);return de(parseFloat(t)+parseFloat(Un(e,"x",n+"px",r)))+r},cr=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,hr(e,t)},dr="0deg",pr="0px",fr=") ",hr=function(e,t){var n=t||this,r=n.xPercent,i=n.yPercent,a=n.x,s=n.y,o=n.z,l=n.rotation,u=n.rotationY,c=n.rotationX,d=n.skewX,p=n.skewY,f=n.scaleX,h=n.scaleY,v=n.transformPerspective,m=n.force3D,g=n.target,y=n.zOrigin,b="",x="auto"===m&&e&&1!==e||!0===m;if(y&&(c!==dr||u!==dr)){var w,T=parseFloat(u)*gn,_=Math.sin(T),C=Math.cos(T);T=parseFloat(c)*gn,w=Math.cos(T),a=ur(g,a,_*w*-y),s=ur(g,s,-Math.sin(T)*-y),o=ur(g,o,C*w*-y+y)}v!==pr&&(b+="perspective("+v+fr),(r||i)&&(b+="translate("+r+"%, "+i+"%) "),(x||a!==pr||s!==pr||o!==pr)&&(b+=o!==pr||x?"translate3d("+a+", "+s+", "+o+") ":"translate("+a+", "+s+fr),l!==dr&&(b+="rotate("+l+fr),u!==dr&&(b+="rotateY("+u+fr),c!==dr&&(b+="rotateX("+c+fr),d===dr&&p===dr||(b+="skew("+d+", "+p+fr),1===f&&1===h||(b+="scale("+f+", "+h+fr),g.style[Nn]=b||"translate(0, 0)"},vr=function(e,t){var n,r,i,a,s,o=t||this,l=o.xPercent,u=o.yPercent,c=o.x,d=o.y,p=o.rotation,f=o.skewX,h=o.skewY,v=o.scaleX,m=o.scaleY,g=o.target,y=o.xOrigin,b=o.yOrigin,x=o.xOffset,w=o.yOffset,T=o.forceCSS,_=parseFloat(c),C=parseFloat(d);p=parseFloat(p),f=parseFloat(f),(h=parseFloat(h))&&(f+=h=parseFloat(h),p+=h),p||f?(p*=gn,f*=gn,n=Math.cos(p)*v,r=Math.sin(p)*v,i=Math.sin(p-f)*-m,a=Math.cos(p-f)*m,f&&(h*=gn,s=Math.tan(f-h),i*=s=Math.sqrt(1+s*s),a*=s,h&&(s=Math.tan(h),n*=s=Math.sqrt(1+s*s),r*=s)),n=de(n),r=de(r),i=de(i),a=de(a)):(n=v,a=m,r=i=0),(_&&!~(c+"").indexOf("px")||C&&!~(d+"").indexOf("px"))&&(_=Un(g,"x",c,"px"),C=Un(g,"y",d,"px")),(y||b||x||w)&&(_=de(_+y-(y*n+b*i)+x),C=de(C+b-(y*r+b*a)+w)),(l||u)&&(s=g.getBBox(),_=de(_+l/100*s.width),C=de(C+u/100*s.height)),s="matrix("+n+","+r+","+i+","+a+","+_+","+C+")",g.setAttribute("transform",s),T&&(g.style[Nn]=s)},mr=function(e,t,n,r,i,a){var s,o,l=360,u=A(i),c=parseFloat(i)*(u&&~i.indexOf("rad")?mn:1),d=a?c*a:c-r,p=r+d+"deg";return u&&("short"===(s=i.split("_")[1])&&(d%=l)!=d%180&&(d+=d<0?l:-360),"cw"===s&&d<0?d=(d+36e9)%l-~~(d/l)*l:"ccw"===s&&d>0&&(d=(d-36e9)%l-~~(d/l)*l)),e._pt=o=new nn(e._pt,t,n,r,d,Cn),o.e=p,o.u="deg",e._props.push(n),o},gr=function(e,t){for(var n in t)e[n]=t[n];return e},yr=function(e,t,n){var r,i,a,s,o,l,u,c=gr({},n._gsap),d=n.style;for(i in c.svg?(a=n.getAttribute("transform"),n.setAttribute("transform",""),d[Nn]=t,r=or(n,1),Vn(n,Nn),n.setAttribute("transform",a)):(a=getComputedStyle(n)[Nn],d[Nn]=t,r=or(n,1),d[Nn]=a),vn)(a=c[i])!==(s=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(o=Xe(a)!==(u=Xe(s))?Un(n,i,a,u):parseFloat(a),l=parseFloat(s),e._pt=new nn(e._pt,r,i,o,l-o,_n),e._pt.u=u||0,e._props.push(i));gr(r,c)};ce("padding,margin,Width,Radius",(function(e,t){var n="Top",r="Right",i="Bottom",a="Left",s=(t<3?[n,r,i,a]:[n+a,n+r,i+r,i+a]).map((function(n){return t<2?e+n:"border"+n+e}));er[t>1?"border"+e:e]=function(e,t,n,r,i){var a,o;if(arguments.length<4)return a=s.map((function(t){return Kn(e,t,n)})),5===(o=a.join(" ")).split(a[0]).length?a[0]:o;a=(r+"").split(" "),o={},s.forEach((function(e,t){return o[e]=a[t]=a[t]||a[(t-1)/2|0]})),e.init(t,o,i)}}));var br,xr,wr={name:"css",register:Fn,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,i){var a,s,o,l,u,c,d,p,f,h,v,m,g,y,x,w,T,_,C,S=this._props,E=e.style,k=n.vars.startAt;for(d in dn||Fn(),t)if("autoRound"!==d&&(s=t[d],!ne[d]||!It(d,t,n,r,e,i)))if(u=typeof s,c=er[d],"function"===u&&(u=typeof(s=s.call(n,r,e,i))),"string"===u&&~s.indexOf("random(")&&(s=rt(s)),c)c(this,e,d,s,n)&&(x=1);else if("--"===d.substr(0,2))a=(getComputedStyle(e).getPropertyValue(d)+"").trim(),s+="",vt.lastIndex=0,vt.test(a)||(p=Xe(a),f=Xe(s)),f?p!==f&&(a=Un(e,d,a,f)+f):p&&(s+=p),this.add(E,"setProperty",a,s,r,i,0,0,d),S.push(d);else if("undefined"!==u){if(k&&d in k?(a="function"==typeof k[d]?k[d].call(n,r,e,i):k[d],d in b.units&&!Xe(a)&&(a+=b.units[d]),A(a)&&~a.indexOf("random(")&&(a=rt(a)),"="===(a+"").charAt(1)&&(a=Kn(e,d))):a=Kn(e,d),l=parseFloat(a),(h="string"===u&&"="===s.charAt(1)?+(s.charAt(0)+"1"):0)&&(s=s.substr(2)),o=parseFloat(s),d in Tn&&("autoAlpha"===d&&(1===l&&"hidden"===Kn(e,"visibility")&&o&&(l=0),Xn(this,E,"visibility",l?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==d&&"transform"!==d&&~(d=Tn[d]).indexOf(",")&&(d=d.split(",")[0])),v=d in vn)if(m||((g=e._gsap).renderTransform&&!t.parseTransform||or(e,t.parseTransform),y=!1!==t.smoothOrigin&&g.smooth,(m=this._pt=new nn(this._pt,E,Nn,0,1,g.renderTransform,g,0,-1)).dep=1),"scale"===d)this._pt=new nn(this._pt,g,"scaleY",g.scaleY,(h?h*o:o-g.scaleY)||0),S.push("scaleY",d),d+="X";else{if("transformOrigin"===d){T=void 0,_=void 0,C=void 0,_=(T=(w=s).split(" "))[0],C=T[1]||"50%","top"!==_&&"bottom"!==_&&"left"!==C&&"right"!==C||(w=_,_=C,C=w),T[0]=Jn[_]||_,T[1]=Jn[C]||C,s=T.join(" "),g.svg?sr(e,s,0,y,0,this):((f=parseFloat(s.split(" ")[2])||0)!==g.zOrigin&&Xn(this,g,"zOrigin",g.zOrigin,f),Xn(this,E,d,lr(a),lr(s)));continue}if("svgOrigin"===d){sr(e,s,1,y,0,this);continue}if(d in nr){mr(this,g,d,l,s,h);continue}if("smoothOrigin"===d){Xn(this,g,"smooth",g.smooth,s);continue}if("force3D"===d){g[d]=s;continue}if("transform"===d){yr(this,s,e);continue}}else d in E||(d=Hn(d)||d);if(v||(o||0===o)&&(l||0===l)&&!wn.test(s)&&d in E)o||(o=0),(p=(a+"").substr((l+"").length))!==(f=Xe(s)||(d in b.units?b.units[d]:p))&&(l=Un(e,d,a,f)),this._pt=new nn(this._pt,v?g:E,d,l,h?h*o:o-l,v||"px"!==f&&"zIndex"!==d||!1===t.autoRound?_n:En),this._pt.u=f||0,p!==f&&"%"!==f&&(this._pt.b=a,this._pt.r=Sn);else if(d in E)Qn.call(this,e,d,a,s);else{if(!(d in e)){U(d,s);continue}this.add(e,d,a||e[d],s,r,i)}S.push(d)}x&&tn(this)},get:Kn,aliases:Tn,getSetter:function(e,t,n){var r=Tn[t];return r&&r.indexOf(",")<0&&(t=r),t in vn&&t!==zn&&(e._gsap.x||Kn(e,"x"))?n&&fn===n?"scale"===t?Ln:Pn:(fn=n||{})&&("scale"===t?Dn:jn):e.style&&!L(e.style[t])?An:~t.indexOf("-")?On:Xt(e,t)},core:{_removeProperty:Vn,_getMatrix:ar}};on.utils.checkPrefix=Hn,xr=ce("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(br="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){vn[e]=1})),ce(br,(function(e){b.units[e]="deg",nr[e]=1})),Tn[xr[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+br,ce("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");Tn[t[1]]=xr[t[0]]})),ce("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){b.units[e]="px"})),on.registerPlugin(wr);var Tr,_r,Cr,Sr,Er,kr,Mr,Ar,Or,Pr,Lr,Dr,jr,Nr,zr,Ir,Br,Rr,Hr,Fr,qr,$r,Wr,Gr,Vr,Xr,Yr,Ur,Kr=on.registerPlugin(wr)||on,Qr=(Kr.core.Tween,1),Jr=[],Zr=[],ei=Date.now,ti=ei(),ni=0,ri=1,ii=function(e){return e},ai=function(e){return Lr(e)[0]||(vi(e)?console.warn("Element not found:",e):null)},si=function(e){return Math.round(1e5*e)/1e5||0},oi=function(){return"undefined"!=typeof window},li=function(){return Tr||oi()&&(Tr=window.gsap)&&Tr.registerPlugin&&Tr},ui=function(e){return!!~Mr.indexOf(e)},ci=function(e,t){return~Jr.indexOf(e)&&Jr[Jr.indexOf(e)+1][t]},di=function(e,t){var n=t.s,r=t.sc,i=Zr.indexOf(e),a=r===ji.sc?1:2;return!~i&&(i=Zr.push(e)-1),Zr[i+a]||(Zr[i+a]=ci(e,n)||(ui(e)?r:function(t){return arguments.length?e[n]=t:e[n]}))},pi=function(e){return ci(e,"getBoundingClientRect")||(ui(e)?function(){return wa.width=Cr.innerWidth,wa.height=Cr.innerHeight,wa}:function(){return Ii(e)})},fi=function(e,t){var n=t.s,r=t.d2,i=t.d,a=t.a;return(n="scroll"+r)&&(a=ci(e,n))?a()-pi(e)()[i]:ui(e)?(kr[n]||Er[n])-(Cr["inner"+r]||Er["client"+r]||kr["client"+r]):e[n]-e["offset"+r]},hi=function(e,t){for(var n=0;n<qr.length;n+=3)(!t||~t.indexOf(qr[n+1]))&&e(qr[n],qr[n+1],qr[n+2])},vi=function(e){return"string"==typeof e},mi=function(e){return"function"==typeof e},gi=function(e){return"number"==typeof e},yi=function(e){return"object"==typeof e},bi=function(e){return mi(e)&&e()},xi=function(e,t){return function(){var n=bi(e),r=bi(t);return function(){bi(n),bi(r)}}},wi=function(e,t,n){return e&&e.progress(t?0:1)&&n&&e.pause()},Ti=function(e,t){var n=t(e);n&&n.totalTime&&(e.callbackAnimation=n)},_i=Math.abs,Ci="left",Si="right",Ei="bottom",ki="width",Mi="height",Ai="padding",Oi="margin",Pi="Width",Li="px",Di={s:"scrollLeft",p:Ci,p2:"Left",os:Si,os2:"Right",d:ki,d2:Pi,a:"x",sc:function(e){return arguments.length?Cr.scrollTo(e,ji.sc()):Cr.pageXOffset||Sr.scrollLeft||Er.scrollLeft||kr.scrollLeft||0}},ji={s:"scrollTop",p:"top",p2:"Top",os:Ei,os2:"Bottom",d:Mi,d2:"Height",a:"y",op:Di,sc:function(e){return arguments.length?Cr.scrollTo(Di.sc(),e):Cr.pageYOffset||Sr.scrollTop||Er.scrollTop||kr.scrollTop||0}},Ni=function(e){return Cr.getComputedStyle(e)},zi=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},Ii=function(e,t){var n=t&&"matrix(1, 0, 0, 1, 0, 0)"!==Ni(e)[Br]&&Tr.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),r=e.getBoundingClientRect();return n&&n.progress(0).kill(),r},Bi=function(e,t){var n=t.d2;return e["offset"+n]||e["client"+n]||0},Ri=function(e){var t,n=[],r=e.labels,i=e.duration();for(t in r)n.push(r[t]/i);return n},Hi=function(e){var t=Tr.utils.snap(e),n=Array.isArray(e)&&e.slice(0).sort((function(e,t){return e-t}));return n?function(e,r){var i;if(!r)return t(e);if(r>0){for(e-=1e-4,i=0;i<n.length;i++)if(n[i]>=e)return n[i];return n[i-1]}for(i=n.length,e+=1e-4;i--;)if(n[i]<=e)return n[i];return n[0]}:function(n,r){var i=t(n);return!r||Math.abs(i-n)<.001||i-n<0==r<0?i:t(r<0?n-e:n+e)}},Fi=function(e,t,n,r){return n.split(",").forEach((function(n){return e(t,n,r)}))},qi=function(e,t,n){return e.addEventListener(t,n,{passive:!0})},$i=function(e,t,n){return e.removeEventListener(t,n)},Wi={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},Gi={toggleActions:"play",anticipatePin:0},Vi={top:0,left:0,center:.5,bottom:1,right:1},Xi=function(e,t){if(vi(e)){var n=e.indexOf("="),r=~n?+(e.charAt(n-1)+1)*parseFloat(e.substr(n+1)):0;~n&&(e.indexOf("%")>n&&(r*=t/100),e=e.substr(0,n-1)),e=r+(e in Vi?Vi[e]*t:~e.indexOf("%")?parseFloat(e)*t/100:parseFloat(e)||0)}return e},Yi=function(e,t,n,r,i,a,s,o){var l=i.startColor,u=i.endColor,c=i.fontSize,d=i.indent,p=i.fontWeight,f=Sr.createElement("div"),h=ui(n)||"fixed"===ci(n,"pinType"),v=-1!==e.indexOf("scroller"),m=h?kr:n,g=-1!==e.indexOf("start"),y=g?l:u,b="border-color:"+y+";font-size:"+c+";color:"+y+";font-weight:"+p+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+((v||o)&&h?"fixed;":"absolute;"),(v||o||!h)&&(b+=(r===ji?Si:Ei)+":"+(a+parseFloat(d))+"px;"),s&&(b+="box-sizing:border-box;text-align:left;width:"+s.offsetWidth+"px;"),f._isStart=g,f.setAttribute("class","gsap-marker-"+e+(t?" marker-"+t:"")),f.style.cssText=b,f.innerText=t||0===t?e+"-"+t:e,m.children[0]?m.insertBefore(f,m.children[0]):m.appendChild(f),f._offset=f["offset"+r.op.d2],Ui(f,0,r,g),f},Ui=function(e,t,n,r){var i={display:"block"},a=n[r?"os2":"p2"],s=n[r?"p2":"os2"];e._isFlipped=r,i[n.a+"Percent"]=r?-100:0,i[n.a]=r?"1px":0,i["border"+a+Pi]=1,i["border"+s+Pi]=0,i[n.p]=t+"px",Tr.set(e,i)},Ki=[],Qi={},Ji=function(){return ei()-ni>20&&ha()},Zi=function(){var e=ei();ni!==e?(ha(),ni||sa("scrollStart"),ni=e):Pr||(Pr=Or(ha))},ea=function(){return!zr&&!Gr&&!Sr.fullscreenElement&&Ar.restart(!0)},ta={},na=[],ra=[],ia=function(e){var t,n=Tr.ticker.frame,r=[],i=0;if(Yr!==n||Qr){for(ua();i<ra.length;i+=4)(t=Cr.matchMedia(ra[i]).matches)!==ra[i+3]&&(ra[i+3]=t,t?r.push(i):ua(1,ra[i])||mi(ra[i+2])&&ra[i+2]());for(la(),i=0;i<r.length;i++)t=r[i],Xr=ra[t],ra[t+2]=ra[t+1](e);Xr=0,_r&&da(0,1),Yr=n,sa("matchMedia")}},aa=function e(){return $i(Oa,"scrollEnd",e)||da(!0)},sa=function(e){return ta[e]&&ta[e].map((function(e){return e()}))||na},oa=[],la=function(e){for(var t=0;t<oa.length;t+=5)e&&oa[t+4]!==e||(oa[t].style.cssText=oa[t+1],oa[t].getBBox&&oa[t].setAttribute("transform",oa[t+2]||""),oa[t+3].uncache=1)},ua=function(e,t){var n;for(Rr=0;Rr<Ki.length;Rr++)n=Ki[Rr],t&&n.media!==t||(e?n.kill(1):n.revert());t&&la(t),t||sa("revert")},ca=function(){return Zr.forEach((function(e){return"function"==typeof e&&(e.rec=0)}))},da=function(e,t){if(!ni||e){Ur=!0;var n=sa("refreshInit");$r&&Oa.sort(),t||ua(),Ki.forEach((function(e){return e.refresh()})),n.forEach((function(e){return e&&e.render&&e.render(-1)})),ca(),Ar.pause(),Ur=!1,sa("refresh")}else qi(Oa,"scrollEnd",aa)},pa=0,fa=1,ha=function(){if(!Ur){var e=Ki.length,t=ei(),n=t-ti>=50,r=e&&Ki[0].scroll();if(fa=pa>r?-1:1,pa=r,n&&(ni&&!Ir&&t-ni>200&&(ni=0,sa("scrollEnd")),jr=ti,ti=t),fa<0){for(Rr=e;Rr-- >0;)Ki[Rr]&&Ki[Rr].update(0,n);fa=1}else for(Rr=0;Rr<e;Rr++)Ki[Rr]&&Ki[Rr].update(0,n);Pr=0}},va=[Ci,"top",Ei,Si,"marginBottom","marginRight","marginTop","marginLeft","display","flexShrink","float","zIndex","grid-column-start","grid-column-end","grid-row-start","grid-row-end","grid-area","justify-self","align-self","place-self"],ma=va.concat([ki,Mi,"boxSizing","maxWidth","maxHeight","position",Oi,Ai,"paddingTop","paddingRight","paddingBottom","paddingLeft"]),ga=function(e,t,n,r){if(e.parentNode!==t){for(var i,a=va.length,s=t.style,o=e.style;a--;)s[i=va[a]]=n[i];s.position="absolute"===n.position?"absolute":"relative","inline"===n.display&&(s.display="inline-block"),o.bottom=o.right="auto",s.overflow="visible",s.boxSizing="border-box",s.width=Bi(e,Di)+Li,s.height=Bi(e,ji)+Li,s.padding=o.margin=o.top=o.left="0",ba(r),o.width=o.maxWidth=n.width,o.height=o.maxHeight=n.height,o.padding=n.padding,e.parentNode.insertBefore(t,e),t.appendChild(e)}},ya=/([A-Z])/g,ba=function(e){if(e){var t,n,r=e.t.style,i=e.length,a=0;for((e.t._gsap||Tr.core.getCache(e.t)).uncache=1;a<i;a+=2)n=e[a+1],t=e[a],n?r[t]=n:r[t]&&r.removeProperty(t.replace(ya,"-$1").toLowerCase())}},xa=function(e){for(var t=ma.length,n=e.style,r=[],i=0;i<t;i++)r.push(ma[i],n[ma[i]]);return r.t=e,r},wa={left:0,top:0},Ta=function(e,t,n,r,i,a,s,o,l,u,c,d,p){mi(e)&&(e=e(o)),vi(e)&&"max"===e.substr(0,3)&&(e=d+("="===e.charAt(4)?Xi("0"+e.substr(3),n):0));var f,h,v,m=p?p.time():0;if(p&&p.seek(0),gi(e))s&&Ui(s,n,r,!0);else{mi(t)&&(t=t(o));var g,y,b,x,w=e.split(" ");v=ai(t)||kr,(g=Ii(v)||{})&&(g.left||g.top)||"none"!==Ni(v).display||(x=v.style.display,v.style.display="block",g=Ii(v),x?v.style.display=x:v.style.removeProperty("display")),y=Xi(w[0],g[r.d]),b=Xi(w[1]||"0",n),e=g[r.p]-l[r.p]-u+y+i-b,s&&Ui(s,b,r,n-b<20||s._isStart&&b>20),n-=n-b}if(a){var T=e+n,_=a._isStart;f="scroll"+r.d2,Ui(a,T,r,_&&T>20||!_&&(c?Math.max(kr[f],Er[f]):a.parentNode[f])<=T+1),c&&(l=Ii(s),c&&(a.style[r.op.p]=l[r.op.p]-r.op.m-a._offset+Li))}return p&&v&&(f=Ii(v),p.seek(d),h=Ii(v),p._caScrollDist=f[r.p]-h[r.p],e=e/p._caScrollDist*d),p&&p.seek(m),p?e:Math.round(e)},_a=/(?:webkit|moz|length|cssText|inset)/i,Ca=function(e,t,n,r){if(e.parentNode!==t){var i,a,s=e.style;if(t===kr){for(i in e._stOrig=s.cssText,a=Ni(e))+i||_a.test(i)||!a[i]||"string"!=typeof s[i]||"0"===i||(s[i]=a[i]);s.top=n,s.left=r}else s.cssText=e._stOrig;Tr.core.getCache(e).uncache=1,t.appendChild(e)}},Sa=function(e,t){var n,r,i=di(e,t),a="_scroll"+t.p2,s=function t(s,o,l,u,c){var d=t.tween,p=o.onComplete,f={};return d&&d.kill(),n=Math.round(l),o[a]=s,o.modifiers=f,f[a]=function(e){return(e=si(i()))!==n&&e!==r&&Math.abs(e-n)>2?(d.kill(),t.tween=0):e=l+u*d.ratio+c*d.ratio*d.ratio,r=n,n=si(e)},o.onComplete=function(){t.tween=0,p&&p.call(d)},d=t.tween=Tr.to(e,o)};return e[a]=i,e.addEventListener("wheel",(function(){return s.tween&&s.tween.kill()&&(s.tween=0)}),{passive:!0}),s};Di.op=ji;var Ea,ka,Ma,Aa,Oa=function(){function e(t,n){_r||e.register(Tr)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(t,n)}return e.prototype.init=function(t,n){if(this.progress=this.start=0,this.vars&&this.kill(1),ri){var r,i,a,s,o,l,u,c,d,p,f,h,v,m,g,y,b,x,w,T,_,C,S,E,k,M,A,O,P,L,D,j,N,z,I,B,R,H,F,q,$=t=zi(vi(t)||gi(t)||t.nodeType?{trigger:t}:t,Gi),W=$.onUpdate,G=$.toggleClass,V=$.id,X=$.onToggle,Y=$.onRefresh,U=$.scrub,K=$.trigger,Q=$.pin,J=$.pinSpacing,Z=$.invalidateOnRefresh,ee=$.anticipatePin,te=$.onScrubComplete,ne=$.onSnapComplete,re=$.once,ie=$.snap,ae=$.pinReparent,se=$.pinSpacer,oe=$.containerAnimation,le=$.fastScrollEnd,ue=$.preventOverlaps,ce=t.horizontal||t.containerAnimation&&!1!==t.horizontal?Di:ji,de=!U&&0!==U,pe=ai(t.scroller||Cr),fe=Tr.core.getCache(pe),he=ui(pe),ve="fixed"===("pinType"in t?t.pinType:ci(pe,"pinType")||he&&"fixed"),me=[t.onEnter,t.onLeave,t.onEnterBack,t.onLeaveBack],ge=de&&t.toggleActions.split(" "),ye="markers"in t?t.markers:Gi.markers,be=he?0:parseFloat(Ni(pe)["border"+ce.p2+Pi])||0,xe=this,we=t.onRefreshInit&&function(){return t.onRefreshInit(xe)},Te=function(e,t,n){var r=n.d,i=n.d2,a=n.a;return(a=ci(e,"getBoundingClientRect"))?function(){return a()[r]}:function(){return(t?Cr["inner"+i]:e["client"+i])||0}}(pe,he,ce),_e=function(e,t){return!t||~Jr.indexOf(e)?pi(e):function(){return wa}}(pe,he),Ce=0,Se=di(pe,ce);if(xe.media=Xr,ee*=45,xe.scroller=pe,xe.scroll=oe?oe.time.bind(oe):Se,s=Se(),xe.vars=t,n=n||t.animation,"refreshPriority"in t&&($r=1),fe.tweenScroll=fe.tweenScroll||{top:Sa(pe,ji),left:Sa(pe,Di)},xe.tweenTo=r=fe.tweenScroll[ce.p],n&&(n.vars.lazy=!1,n._initted||!1!==n.vars.immediateRender&&!1!==t.immediateRender&&n.render(0,!0,!0),xe.animation=n.pause(),n.scrollTrigger=xe,(D=gi(U)&&U)&&(L=Tr.to(n,{ease:"power3",duration:D,onComplete:function(){return te&&te(xe)}})),O=0,V||(V=n.vars.id)),Ki.push(xe),ie&&(yi(ie)&&!ie.push||(ie={snapTo:ie}),"scrollBehavior"in kr.style&&Tr.set(he?[kr,Er]:pe,{scrollBehavior:"auto"}),a=mi(ie.snapTo)?ie.snapTo:"labels"===ie.snapTo?function(e){return function(t){return Tr.utils.snap(Ri(e),t)}}(n):"labelsDirectional"===ie.snapTo?(H=n,function(e,t){return Hi(Ri(H))(e,t.direction)}):!1!==ie.directional?function(e,t){return Hi(ie.snapTo)(e,t.direction)}:Tr.utils.snap(ie.snapTo),j=ie.duration||{min:.1,max:2},j=yi(j)?Dr(j.min,j.max):Dr(j,j),N=Tr.delayedCall(ie.delay||D/2||.1,(function(){if(Math.abs(xe.getVelocity())<10&&!Ir&&Ce!==Se()){var e=n&&!de?n.totalProgress():xe.progress,t=(e-P)/(ei()-jr)*1e3||0,i=Tr.utils.clamp(-xe.progress,1-xe.progress,_i(t/2)*t/.185),s=xe.progress+(!1===ie.inertia?0:i),o=Dr(0,1,a(s,xe)),c=Se(),d=Math.round(l+o*v),p=ie,f=p.onStart,h=p.onInterrupt,m=p.onComplete,g=r.tween;if(c<=u&&c>=l&&d!==c){if(g&&!g._initted&&g.data<=_i(d-c))return;!1===ie.inertia&&(i=o-xe.progress),r(d,{duration:j(_i(.185*Math.max(_i(s-e),_i(o-e))/t/.05||0)),ease:ie.ease||"power3",data:_i(d-c),onInterrupt:function(){return N.restart(!0)&&h&&h(xe)},onComplete:function(){Ce=Se(),O=P=n&&!de?n.totalProgress():xe.progress,ne&&ne(xe),m&&m(xe)}},c,i*v,d-c-i*v),f&&f(xe,r.tween)}}else xe.isActive&&N.restart(!0)})).pause()),V&&(Qi[V]=xe),K=xe.trigger=ai(K||Q),Q=!0===Q?K:ai(Q),vi(G)&&(G={targets:K,className:G}),Q&&(!1===J||J===Oi||(J=!(!J&&"flex"===Ni(Q.parentNode).display)&&Ai),xe.pin=Q,!1!==t.force3D&&Tr.set(Q,{force3D:!0}),(i=Tr.core.getCache(Q)).spacer?m=i.pinState:(se&&((se=ai(se))&&!se.nodeType&&(se=se.current||se.nativeElement),i.spacerIsNative=!!se,se&&(i.spacerState=xa(se))),i.spacer=b=se||Sr.createElement("div"),b.classList.add("pin-spacer"),V&&b.classList.add("pin-spacer-"+V),i.pinState=m=xa(Q)),xe.spacer=b=i.spacer,A=Ni(Q),S=A[J+ce.os2],w=Tr.getProperty(Q),T=Tr.quickSetter(Q,ce.a,Li),ga(Q,b,A),y=xa(Q)),ye&&(h=yi(ye)?zi(ye,Wi):Wi,p=Yi("scroller-start",V,pe,ce,h,0),f=Yi("scroller-end",V,pe,ce,h,0,p),x=p["offset"+ce.op.d2],c=Yi("start",V,pe,ce,h,x,0,oe),d=Yi("end",V,pe,ce,h,x,0,oe),oe&&(R=Tr.quickSetter([c,d],ce.a,Li)),ve||Jr.length&&!0===ci(pe,"fixedMarkers")||(q=Ni(F=he?kr:pe).position,F.style.position="absolute"===q||"fixed"===q?q:"relative",Tr.set([p,f],{force3D:!0}),k=Tr.quickSetter(p,ce.a,Li),M=Tr.quickSetter(f,ce.a,Li))),oe){var Ee=oe.vars.onUpdate,ke=oe.vars.onUpdateParams;oe.eventCallback("onUpdate",(function(){xe.update(0,0,1),Ee&&Ee.apply(ke||[])}))}xe.previous=function(){return Ki[Ki.indexOf(xe)-1]},xe.next=function(){return Ki[Ki.indexOf(xe)+1]},xe.revert=function(e){var t=!1!==e||!xe.enabled,r=zr;t!==xe.isReverted&&(t&&(xe.scroll.rec||(xe.scroll.rec=Se()),I=Math.max(Se(),xe.scroll.rec||0),z=xe.progress,B=n&&n.progress()),c&&[c,d,p,f].forEach((function(e){return e.style.display=t?"none":"block"})),t&&(zr=1),xe.update(t),zr=r,Q&&(t?function(e,t,n){ba(n);var r=e._gsap;if(r.spacerIsNative)ba(r.spacerState);else if(e.parentNode===t){var i=t.parentNode;i&&(i.insertBefore(e,t),i.removeChild(t))}}(Q,b,m):(!ae||!xe.isActive)&&ga(Q,b,Ni(Q),E)),xe.isReverted=t)},xe.refresh=function(r,i){if(!zr&&xe.enabled||i)if(Q&&r&&ni)qi(e,"scrollEnd",aa);else{zr=1,L&&L.pause(),Z&&n&&n.progress(0).invalidate(),xe.isReverted||xe.revert();for(var a,h,x,T,S,k,M,A,O,P,D=Te(),j=_e(),N=oe?oe.duration():fi(pe,ce),R=0,H=0,F=t.end,q=t.endTrigger||K,$=t.start||(0!==t.start&&K?Q?"0 0":"0 100%":0),W=t.pinnedContainer&&ai(t.pinnedContainer),G=K&&Math.max(0,Ki.indexOf(xe))||0,V=G;V--;)(k=Ki[V]).end||k.refresh(0,1)||(zr=1),!(M=k.pin)||M!==K&&M!==Q||k.isReverted||(P||(P=[]),P.unshift(k),k.revert());for(mi($)&&($=$(xe)),l=Ta($,K,D,ce,Se(),c,p,xe,j,be,ve,N,oe)||(Q?-.001:0),mi(F)&&(F=F(xe)),vi(F)&&!F.indexOf("+=")&&(~F.indexOf(" ")?F=(vi($)?$.split(" ")[0]:"")+F:(R=Xi(F.substr(2),D),F=vi($)?$:l+R,q=K)),u=Math.max(l,Ta(F||(q?"100% 0":N),q,D,ce,Se()+R,d,f,xe,j,be,ve,N,oe))||-.001,v=u-l||(l-=.01)&&.001,R=0,V=G;V--;)(M=(k=Ki[V]).pin)&&k.start-k._pinPush<l&&!oe&&(a=k.end-k.start,(M===K||M===W)&&!gi($)&&(R+=a),M===Q&&(H+=a));if(l+=R,u+=R,xe._pinPush=H,c&&R&&((a={})[ce.a]="+="+R,W&&(a[ce.p]="-="+Se()),Tr.set([c,d],a)),Q)a=Ni(Q),T=ce===ji,x=Se(),_=parseFloat(w(ce.a))+H,!N&&u>1&&((he?kr:pe).style["overflow-"+ce.a]="scroll"),ga(Q,b,a),y=xa(Q),h=Ii(Q,!0),A=ve&&di(pe,T?Di:ji)(),J&&((E=[J+ce.os2,v+H+Li]).t=b,(V=J===Ai?Bi(Q,ce)+v+H:0)&&E.push(ce.d,V+Li),ba(E),ve&&Se(I)),ve&&((S={top:h.top+(T?x-l:A)+Li,left:h.left+(T?A:x-l)+Li,boxSizing:"border-box",position:"fixed"}).width=S.maxWidth=Math.ceil(h.width)+Li,S.height=S.maxHeight=Math.ceil(h.height)+Li,S.margin=S.marginTop=S.marginRight=S.marginBottom=S.marginLeft="0",S.padding=a.padding,S.paddingTop=a.paddingTop,S.paddingRight=a.paddingRight,S.paddingBottom=a.paddingBottom,S.paddingLeft=a.paddingLeft,g=function(e,t,n){for(var r,i=[],a=e.length,s=n?8:0;s<a;s+=2)r=e[s],i.push(r,r in t?t[r]:e[s+1]);return i.t=e.t,i}(m,S,ae)),n?(O=n._initted,Wr(1),n.render(n.duration(),!0,!0),C=w(ce.a)-_+v+H,v!==C&&g.splice(g.length-2,2),n.render(0,!0,!0),O||n.invalidate(),Wr(0)):C=v;else if(K&&Se()&&!oe)for(h=K.parentNode;h&&h!==kr;)h._pinOffset&&(l-=h._pinOffset,u-=h._pinOffset),h=h.parentNode;P&&P.forEach((function(e){return e.revert(!1)})),xe.start=l,xe.end=u,s=o=Se(),oe||(s<I&&Se(I),xe.scroll.rec=0),xe.revert(!1),zr=0,n&&de&&n._initted&&n.progress()!==B&&n.progress(B,!0).render(n.time(),!0,!0),z!==xe.progress&&(n&&!de&&n.totalProgress(z,!0),xe.progress=z,xe.update(0,0,1)),Q&&J&&(b._pinOffset=Math.round(xe.progress*C)),Y&&Y(xe)}},xe.getVelocity=function(){return(Se()-o)/(ei()-jr)*1e3||0},xe.endAnimation=function(){wi(xe.callbackAnimation),n&&(L?L.progress(1):n.paused()?de||wi(n,xe.direction<0,1):wi(n,n.reversed()))},xe.getTrailing=function(e){var t=Ki.indexOf(xe),n=xe.direction>0?Ki.slice(0,t).reverse():Ki.slice(t+1);return vi(e)?n.filter((function(t){return t.vars.preventOverlaps===e})):n},xe.update=function(e,t,i){if(!oe||i||e){var a,c,d,f,h,m,x,w=xe.scroll(),E=e?0:(w-l)/v,A=E<0?0:E>1?1:E||0,D=xe.progress;if(t&&(o=s,s=oe?Se():w,ie&&(P=O,O=n&&!de?n.totalProgress():A)),ee&&!A&&Q&&!zr&&!Qr&&ni&&l<w+(w-o)/(ei()-jr)*ee&&(A=1e-4),A!==D&&xe.enabled){if(f=(h=(a=xe.isActive=!!A&&A<1)!=(!!D&&D<1))||!!A!=!!D,xe.direction=A>D?1:-1,xe.progress=A,f&&!zr&&(c=A&&!D?0:1===A?1:1===D?2:3,de&&(d=!h&&"none"!==ge[c+1]&&ge[c+1]||ge[c],x=n&&("complete"===d||"reset"===d||d in n))),ue&&h&&(x||U||!n)&&(mi(ue)?ue(xe):xe.getTrailing(ue).forEach((function(e){return e.endAnimation()}))),de||(!L||zr||Qr?n&&n.totalProgress(A,!!zr):(L.vars.totalProgress=A,L.invalidate().restart())),Q)if(e&&J&&(b.style[J+ce.os2]=S),ve){if(f){if(m=!e&&A>D&&u+1>w&&w+1>=fi(pe,ce),ae)if(e||!a&&!m)Ca(Q,b);else{var j=Ii(Q,!0),z=w-l;Ca(Q,kr,j.top+(ce===ji?z:0)+Li,j.left+(ce===ji?0:z)+Li)}ba(a||m?g:y),C!==v&&A<1&&a||T(_+(1!==A||m?0:C))}}else T(_+C*A);ie&&!r.tween&&!zr&&!Qr&&N.restart(!0),G&&(h||re&&A&&(A<1||!Vr))&&Lr(G.targets).forEach((function(e){return e.classList[a||re?"add":"remove"](G.className)})),W&&!de&&!e&&W(xe),f&&!zr?(de&&(x&&("complete"===d?n.pause().totalProgress(1):"reset"===d?n.restart(!0).pause():"restart"===d?n.restart(!0):n[d]()),W&&W(xe)),!h&&Vr||(X&&h&&Ti(xe,X),me[c]&&Ti(xe,me[c]),re&&(1===A?xe.kill(!1,1):me[c]=0),h||me[c=1===A?1:3]&&Ti(xe,me[c])),le&&!a&&Math.abs(xe.getVelocity())>(gi(le)?le:2500)&&(wi(xe.callbackAnimation),L?L.progress(1):wi(n,!A,1))):de&&W&&!zr&&W(xe)}if(M){var I=oe?w/oe.duration()*(oe._caScrollDist||0):w;k(I+(p._isFlipped?1:0)),M(I)}R&&R(-w/oe.duration()*(oe._caScrollDist||0))}},xe.enable=function(t,n){xe.enabled||(xe.enabled=!0,qi(pe,"resize",ea),qi(pe,"scroll",Zi),we&&qi(e,"refreshInit",we),!1!==t&&(xe.progress=z=0,s=o=Ce=Se()),!1!==n&&xe.refresh())},xe.getTween=function(e){return e&&r?r.tween:L},xe.disable=function(t,n){if(xe.enabled&&(!1!==t&&xe.revert(),xe.enabled=xe.isActive=!1,n||L&&L.pause(),I=0,i&&(i.uncache=1),we&&$i(e,"refreshInit",we),N&&(N.pause(),r.tween&&r.tween.kill()&&(r.tween=0)),!he)){for(var a=Ki.length;a--;)if(Ki[a].scroller===pe&&Ki[a]!==xe)return;$i(pe,"resize",ea),$i(pe,"scroll",Zi)}},xe.kill=function(e,t){xe.disable(e,t),L&&L.kill(),V&&delete Qi[V];var r=Ki.indexOf(xe);Ki.splice(r,1),r===Rr&&fa>0&&Rr--,r=0,Ki.forEach((function(e){return e.scroller===xe.scroller&&(r=1)})),r||(xe.scroll.rec=0),n&&(n.scrollTrigger=null,e&&n.render(-1),t||n.kill()),c&&[c,d,p,f].forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),Q&&(i&&(i.uncache=1),r=0,Ki.forEach((function(e){return e.pin===Q&&r++})),r||(i.spacer=0))},xe.enable(!1,!1),n&&n.add&&!v?Tr.delayedCall(.01,(function(){return l||u||xe.refresh()}))&&(v=.01)&&(l=u=0):xe.refresh()}else this.update=this.refresh=this.kill=ii},e.register=function(t){if(!_r&&(Tr=t||li(),oi()&&window.document&&(Cr=window,Sr=document,Er=Sr.documentElement,kr=Sr.body),Tr&&(Lr=Tr.utils.toArray,Dr=Tr.utils.clamp,Wr=Tr.core.suppressOverwrites||ii,Tr.core.globals("ScrollTrigger",e),kr))){Or=Cr.requestAnimationFrame||function(e){return setTimeout(e,16)},qi(Cr,"wheel",Zi),Mr=[Cr,Sr,Er,kr],qi(Sr,"scroll",Zi);var n,r=kr.style,i=r.borderTopStyle;r.borderTopStyle="solid",n=Ii(kr),ji.m=Math.round(n.top+ji.sc())||0,Di.m=Math.round(n.left+Di.sc())||0,i?r.borderTopStyle=i:r.removeProperty("border-top-style"),Nr=setInterval(Ji,200),Tr.delayedCall(.5,(function(){return Qr=0})),qi(Sr,"touchcancel",ii),qi(kr,"touchstart",ii),Fi(qi,Sr,"pointerdown,touchstart,mousedown",(function(){return Ir=1})),Fi(qi,Sr,"pointerup,touchend,mouseup",(function(){return Ir=0})),Br=Tr.utils.checkPrefix("transform"),ma.push(Br),_r=ei(),Ar=Tr.delayedCall(.2,da).pause(),qr=[Sr,"visibilitychange",function(){var e=Cr.innerWidth,t=Cr.innerHeight;Sr.hidden?(Hr=e,Fr=t):Hr===e&&Fr===t||ea()},Sr,"DOMContentLoaded",da,Cr,"load",function(){return ni||da()},Cr,"resize",ea],hi(qi)}return _r},e.defaults=function(e){for(var t in e)Gi[t]=e[t]},e.kill=function(){ri=0,Ki.slice(0).forEach((function(e){return e.kill(1)}))},e.config=function(e){"limitCallbacks"in e&&(Vr=!!e.limitCallbacks);var t=e.syncInterval;t&&clearInterval(Nr)||(Nr=t)&&setInterval(Ji,t),"autoRefreshEvents"in e&&(hi($i)||hi(qi,e.autoRefreshEvents||"none"),Gr=-1===(e.autoRefreshEvents+"").indexOf("resize"))},e.scrollerProxy=function(e,t){var n=ai(e),r=Zr.indexOf(n),i=ui(n);~r&&Zr.splice(r,i?6:2),i?Jr.unshift(Cr,t,kr,t,Er,t):Jr.unshift(n,t)},e.matchMedia=function(e){var t,n,r,i,a;for(n in e)r=ra.indexOf(n),i=e[n],Xr=n,"all"===n?i():(t=Cr.matchMedia(n))&&(t.matches&&(a=i()),~r?(ra[r+1]=xi(ra[r+1],i),ra[r+2]=xi(ra[r+2],a)):(r=ra.length,ra.push(n,i,a),t.addListener?t.addListener(ia):t.addEventListener("change",ia)),ra[r+3]=t.matches),Xr=0;return ra},e.clearMatchMedia=function(e){e||(ra.length=0),(e=ra.indexOf(e))>=0&&ra.splice(e,4)},e.isInViewport=function(e,t,n){var r=(vi(e)?ai(e):e).getBoundingClientRect(),i=r[n?ki:Mi]*t||0;return n?r.right-i>0&&r.left+i<Cr.innerWidth:r.bottom-i>0&&r.top+i<Cr.innerHeight},e.positionInViewport=function(e,t,n){vi(e)&&(e=ai(e));var r=e.getBoundingClientRect(),i=r[n?ki:Mi],a=null==t?i/2:t in Vi?Vi[t]*i:~t.indexOf("%")?parseFloat(t)*i/100:parseFloat(t)||0;return n?(r.left+a)/Cr.innerWidth:(r.top+a)/Cr.innerHeight},e}();function Pa(e,t){var n=0,r=100*(t=t||1);e.classList.contains("gs_reveal_fromLeft")?(n=-100,r=0):e.classList.contains("gs_reveal_fromRight")&&(n=100,r=0),e.style.transform="translate("+n+"px, "+r+"px)",e.style.opacity="0",Kr.fromTo(e,{x:n,y:r,autoAlpha:0},{duration:1.25,x:0,y:0,autoAlpha:1,ease:"expo",overwrite:"auto"})}function La(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Da(){return Da=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Da.apply(this,arguments)}Oa.version="3.8.0",Oa.saveStyles=function(e){return e?Lr(e).forEach((function(e){if(e&&e.style){var t=oa.indexOf(e);t>=0&&oa.splice(t,5),oa.push(e,e.style.cssText,e.getBBox&&e.getAttribute("transform"),Tr.core.getCache(e),Xr)}})):oa},Oa.revert=function(e,t){return ua(!e,t)},Oa.create=function(e,t){return new Oa(e,t)},Oa.refresh=function(e){return e?ea():(_r||Oa.register())&&da(!0)},Oa.update=ha,Oa.clearScrollMemory=ca,Oa.maxScroll=function(e,t){return fi(e,t?Di:ji)},Oa.getScrollFunc=function(e,t){return di(ai(e),t?Di:ji)},Oa.getById=function(e){return Qi[e]},Oa.getAll=function(){return Ki.slice(0)},Oa.isScrolling=function(){return!!ni},Oa.snapDirectional=Hi,Oa.addEventListener=function(e,t){var n=ta[e]||(ta[e]=[]);~n.indexOf(t)||n.push(t)},Oa.removeEventListener=function(e,t){var n=ta[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},Oa.batch=function(e,t){var n,r=[],i={},a=t.interval||.016,s=t.batchMax||1e9,o=function(e,t){var n=[],r=[],i=Tr.delayedCall(a,(function(){t(n,r),n=[],r=[]})).pause();return function(e){n.length||i.restart(!0),n.push(e.trigger),r.push(e),s<=n.length&&i.progress(1)}};for(n in t)i[n]="on"===n.substr(0,2)&&mi(t[n])&&"onRefreshInit"!==n?o(0,t[n]):t[n];return mi(s)&&(s=s(),qi(Oa,"refresh",(function(){return s=t.batchMax()}))),Lr(e).forEach((function(e){var t={};for(n in i)t[n]=i[n];t.trigger=e,r.push(Oa.create(t))})),r},Oa.sort=function(e){return Ki.sort(e||function(e,t){return-1e6*(e.vars.refreshPriority||0)+e.start-(t.start+-1e6*(t.vars.refreshPriority||0))})},li()&&Tr.registerPlugin(Oa),document.addEventListener("DOMContentLoaded",(function(){Kr.registerPlugin(Oa);var e=document.querySelector(".header");Oa.create({start:"top -100",end:99999,toggleClass:{className:"header--scrolled",targets:".header"}}),Oa.create({start:"top -300",end:99999,toggleClass:{className:"header--up",targets:".header"},onUpdate:function(t){-1==t.direction?e.classList.remove("header--up"):e.classList.add("header--up")}}),Kr.utils.toArray(".gs_reveal").forEach((function(e){!function(e){Kr.set(e,{autoAlpha:0})}(e),Oa.create({trigger:e,onEnter:function(){Pa(e)},onEnterBack:function(){Pa(e,-1)}})}))})),n(862),Array.from||(Array.from=(Ea=Object.prototype.toString,ka=function(e){return"function"==typeof e||"[object Function]"===Ea.call(e)},Ma=Math.pow(2,53)-1,Aa=function(e){var t=function(e){var t=Number(e);return isNaN(t)?0:0!==t&&isFinite(t)?(t>0?1:-1)*Math.floor(Math.abs(t)):t}(e);return Math.min(Math.max(t,0),Ma)},function(e){var t=this,n=Object(e);if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");var r,i=arguments.length>1?arguments[1]:void 0;if(void 0!==i){if(!ka(i))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(r=arguments[2])}for(var a,s=Aa(n.length),o=ka(t)?Object(new t(s)):new Array(s),l=0;l<s;)a=n[l],o[l]=i?void 0===r?i(a,l):i.call(r,a,l):a,l+=1;return o.length=s,o})),function(e,t){var n=(e.body||e.documentElement).style,r="",i="";""==n.WebkitAnimation&&(r="-webkit-"),""==n.MozAnimation&&(r="-moz-"),""==n.OAnimation&&(r="-o-"),""==n.WebkitTransition&&(i="-webkit-"),""==n.MozTransition&&(i="-moz-"),""==n.OTransition&&(i="-o-"),Object.defineProperty(Object.prototype,"onCSSAnimationEnd",{value:function(e){var t=function t(n){e(),n.target.removeEventListener(n.type,t)};return this.addEventListener("webkitAnimationEnd",t),this.addEventListener("mozAnimationEnd",t),this.addEventListener("oAnimationEnd",t),this.addEventListener("oanimationend",t),this.addEventListener("animationend",t),(""==r&&!("animation"in n)||"0s"==getComputedStyle(this)[r+"animation-duration"])&&e(),this},enumerable:!1,writable:!0}),Object.defineProperty(Object.prototype,"onCSSTransitionEnd",{value:function(e){var t=function t(n){e(),n.target.removeEventListener(n.type,t)};return this.addEventListener("webkitTransitionEnd",t),this.addEventListener("mozTransitionEnd",t),this.addEventListener("oTransitionEnd",t),this.addEventListener("transitionend",t),this.addEventListener("transitionend",t),(""==i&&!("transition"in n)||"0s"==getComputedStyle(this)[i+"transition-duration"])&&e(),this},enumerable:!1,writable:!0})}(document,window);var ja=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i="string"==typeof t?document.querySelector(t):t;if(null!=i){var a={headerClass:".js-badger-accordion-header",panelClass:".js-badger-accordion-panel",panelInnerClass:".js-badger-accordion-panel-inner",hiddenClass:"-ba-is-hidden",activeClass:"-ba-is-active",get hidenClass(){return this.hiddenClass},initializedClass:"badger-accordion--initialized",get initalisedClass(){return this.initializedClass},headerDataAttr:"data-badger-accordion-header-id",openMultiplePanels:!1,openHeadersOnLoad:[],addListenersOnInit:!0,headerOpenLabel:"",headerCloseLabel:"",roles:!0};this.settings=Da({},a,n),this.container=i;var s=Array.from(this.container.children),o=s.filter((function(e){return!e.classList.contains(r.settings.panelClass.substr(1))}));this.headers=o.reduce((function(e,t){var n,i=Array.from(t.children).filter((function(e){return e.classList.contains(r.settings.headerClass.substr(1))}));return(n=[]).concat.apply(n,function(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}(e).concat([i]))}),[]),this.panels=s.filter((function(e){return e.classList.contains(r.settings.panelClass.substr(1))})),this.toggleEl=void 0!==this.settings.toggleEl?Array.from(this.container.querySelectorAll(this.settings.toggleEl)):this.headers,this.states=[].map.call(this.headers,(function(){return{state:"closed"}})),this.ids=[].map.call(this.headers,(function(){return{id:Math.floor(1e6*Math.random()+1)}})),this.toggling=!1,this.container?this.init():console.log("Something is wrong with you markup...")}}var t,n;return t=e,n=[{key:"init",value:function(){this._setupAttributes(),this._initalState(),this.calculateAllPanelsHeight(),this._insertDataAttrs(),this._addListeners(),this._finishInitialization()}},{key:"_setRole",value:function(e,t){("boolean"==typeof this.settings.roles&&this.settings.roles||void 0!==this.settings.roles[e]&&!1!==this.settings.roles[e])&&t.setAttribute("role",e)}},{key:"_initalState",value:function(){var e=this.settings.openHeadersOnLoad;e.length&&this._openHeadersOnLoad(e),this._renderDom()}},{key:"_insertDataAttrs",value:function(){var e=this;this.headers.forEach((function(t,n){t.setAttribute(e.settings.headerDataAttr,n)}))}},{key:"_finishInitialization",value:function(){this.container.classList.add(this.settings.initializedClass),this._setRole("presentation",this.container)}},{key:"_addListeners",value:function(){if(this.settings.addListenersOnInit){var e=this;this.headers.forEach((function(t,n){t.addEventListener("click",(function(){e.handleClick(t,n)}))}))}}},{key:"handleClick",value:function(e,t){var n=this.settings.headerClass.substr(1);e.classList.contains(n)&&!1===this.toggling&&(this.toggling=!0,this.setState(t),this._renderDom())}},{key:"setState",value:function(e){var t=this,n=this.getState();this.settings.openMultiplePanels||n.filter((function(t,n){n!=e&&(t.state="closed")})),n.filter((function(n,r){if(r==e){var i=t.toggleState(n.state);return n.state=i}}))}},{key:"_renderDom",value:function(){var e=this;this.states.filter((function(t,n){"open"===t.state&&e.open(n,!1)})),this.states.filter((function(t,n){"closed"===t.state&&e.close(n,!1)}))}},{key:"open",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t&&this.setState(e),this.togglePanel("open",e)}},{key:"close",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];t&&this.setState(e),this.togglePanel("closed",e)}},{key:"openAll",value:function(){var e=this;this.headers.forEach((function(t,n){e.togglePanel("open",n)}))}},{key:"closeAll",value:function(){var e=this;this.headers.forEach((function(t,n){e.togglePanel("closed",n)}))}},{key:"togglePanel",value:function(e,t){var n=this;if(void 0!==e&&void 0!==t)if("closed"===e){var r=this.headers[t],i=this.panels[t];i.classList.add(this.settings.hiddenClass),i.classList.remove(this.settings.activeClass),r.classList.remove(this.settings.activeClass),r.setAttribute("aria-expanded",!1),i.onCSSTransitionEnd((function(){return n.toggling=!1}))}else if("open"===e){var a=this.headers[t],s=this.panels[t];s.classList.remove(this.settings.hiddenClass),s.classList.add(this.settings.activeClass),a.classList.add(this.settings.activeClass),a.setAttribute("aria-expanded",!0),s.onCSSTransitionEnd((function(){return n.toggling=!1}))}}},{key:"getState",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(t.length&&Array.isArray(t)){var n=t.map((function(t){return e.states[t]}));return n}return this.states}},{key:"toggleState",value:function(e){if(void 0!==e)return"closed"===e?"open":"closed"}},{key:"_openHeadersOnLoad",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(t.length&&Array.isArray(t)){var n=t.filter((function(e){return null!=e}));n.forEach((function(t){e.setState(t)}))}}},{key:"_setupAttributes",value:function(){this._setupHeaders(),this._setupPanels(),this._insertDataAttrs()}},{key:"_setPanelHeight",value:function(){this.calculateAllPanelsHeight()}},{key:"calculatePanelHeight",value:function(e){var t=e.querySelector(this.settings.panelInnerClass).offsetHeight;return e.style.maxHeight="".concat(t,"px")}},{key:"calculateAllPanelsHeight",value:function(){var e=this;this.panels.forEach((function(t){e.calculatePanelHeight(t)}))}},{key:"_setupHeaders",value:function(){var e=this;this.headers.forEach((function(t,n){t.setAttribute("id","badger-accordion-header-".concat(e.ids[n].id)),t.setAttribute("aria-controls","badger-accordion-panel-".concat(e.ids[n].id))}))}},{key:"_setupPanels",value:function(){var e=this;this.panels.forEach((function(t,n){t.setAttribute("id","badger-accordion-panel-".concat(e.ids[n].id)),t.setAttribute("aria-labelledby","badger-accordion-header-".concat(e.ids[n].id)),!0!==e.settings.roles&&!1===e.settings.roles.region||e._setRole("region",t)}))}}],n&&La(t.prototype,n),e}();const Na=ja;function za(e,t){if(e){if("string"==typeof e)return Ia(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ia(e,t):void 0}}function Ia(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ba=document.querySelectorAll(".js-badger-accordion");Array.from(Ba).forEach((function(e){var t=new Na(e);console.log(t.getState([0]))}));var Ra=document.querySelector(".js-badger-accordion"),Ha=new Na(Ra);window.accordion=Ha;var Fa,qa,$a=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=za(e))){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,o=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){o=!0,a=e},f:function(){try{s||null==n.return||n.return()}finally{if(o)throw a}}}}(function(e){if(Array.isArray(e))return Ia(e)}(qa=document.querySelectorAll(".card-product"))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(qa)||za(qa)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());try{var Wa=function(){var e=Fa.value;e.addEventListener("pointerdown",(function(){e.classList.toggle("card-product-js")}))};for($a.s();!(Fa=$a.n()).done;)Wa()}catch(e){$a.e(e)}finally{$a.f()}function Ga(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Va(e){return function(e){if(Array.isArray(e))return Xa(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return Xa(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xa(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xa(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}console.log("generics"),r()(".project-header__square").on("click",(function(e){e.preventDefault(),console.log("click"),r()("#exterior").toggleClass("slider-hidden"),r()("#planning").toggleClass("slider-hidden")}));var Ya,Ua,Ka,Qa,Ja,Za=(Ya=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],Ua=function(){function e(t){var n=t.targetModal,r=t.triggers,i=void 0===r?[]:r,a=t.onShow,s=void 0===a?function(){}:a,o=t.onClose,l=void 0===o?function(){}:o,u=t.openTrigger,c=void 0===u?"data-micromodal-trigger":u,d=t.closeTrigger,p=void 0===d?"data-micromodal-close":d,f=t.openClass,h=void 0===f?"is-open":f,v=t.disableScroll,m=void 0!==v&&v,g=t.disableFocus,y=void 0!==g&&g,b=t.awaitCloseAnimation,x=void 0!==b&&b,w=t.awaitOpenAnimation,T=void 0!==w&&w,_=t.debugMode,C=void 0!==_&&_;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modal=document.getElementById(n),this.config={debugMode:C,disableScroll:m,openTrigger:c,closeTrigger:p,openClass:h,onShow:s,onClose:l,awaitCloseAnimation:x,awaitOpenAnimation:T,disableFocus:y},i.length>0&&this.registerTriggers.apply(this,Va(i)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var t,n;return t=e,n=[{key:"registerTriggers",value:function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];n.filter(Boolean).forEach((function(t){t.addEventListener("click",(function(t){return e.showModal(t)}))}))}},{key:"showModal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var n=function t(){e.modal.removeEventListener("animationend",t,!1),e.setFocusToFirstNode()};this.modal.addEventListener("animationend",n,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t)}},{key:"closeModal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var n=this.config.openClass;this.modal.addEventListener("animationend",(function e(){t.classList.remove(n),t.removeEventListener("animationend",e,!1)}),!1)}else t.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(e){this.modal=document.getElementById(e),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){e.target.hasAttribute(this.config.closeTrigger)&&this.closeModal(e)}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(Ya);return Array.apply(void 0,Va(e))}},{key:"setFocusToFirstNode",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var n=t.filter((function(t){return!t.hasAttribute(e.config.closeTrigger)}));n.length>0&&n[0].focus(),0===n.length&&t[0].focus()}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var n=t.indexOf(document.activeElement);e.shiftKey&&0===n&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&n===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}],n&&Ga(t.prototype,n),e}(),Ka=null,Qa=function(e){if(!document.getElementById(e))return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},Ja=function(e,t){if(function(e){e.length<=0&&(console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'))}(e),!t)return!0;for(var n in t)Qa(n);return!0},{init:function(e){var t=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),n=Va(document.querySelectorAll("[".concat(t.openTrigger,"]"))),r=function(e,t){var n=[];return e.forEach((function(e){var r=e.attributes[t].value;void 0===n[r]&&(n[r]=[]),n[r].push(e)})),n}(n,t.openTrigger);if(!0!==t.debugMode||!1!==Ja(n,r))for(var i in r){var a=r[i];t.targetModal=i,t.triggers=Va(a),Ka=new Ua(t)}},show:function(e,t){var n=t||{};n.targetModal=e,!0===n.debugMode&&!1===Qa(e)||(Ka&&Ka.removeEventListeners(),(Ka=new Ua(n)).showModal())},close:function(e){e?Ka.closeModalById(e):Ka.closeModal()}});window.MicroModal=Za,Za.init({onShow:function(e){return console.info("".concat(e.id," is shown"))},onClose:function(e){return console.info("".concat(e.id," is hidden"))},openTrigger:"data-custom-open",closeTrigger:"data-custom-close",openClass:"is-open",disableScroll:!0,disableFocus:!1,awaitOpenAnimation:!0,awaitCloseAnimation:!0,debugMode:!1});var es=function(e,t){r().ajax({url:true_obj.ajaxurl,data:e,method:"POST",beforeSend:function(e){},success:function(e){var n=JSON.parse(e),i=0!=n.projects.length?n.projects.reduce((function(e,t){return e+t})):" ";"more"===t?(r()(".projects__product").append(i),ls.maxPages=n.maxPages):(r()(".projects__product").html(i),ls.maxPages=n.maxPages)}})},ts=Boolean("objsale"==r()("section[data-type]").data("type"));console.log(ts,r()("section[data-type]").data("type"));var ns=function(e){return{action:ts?"objsale":"catalog",filter:e}},rs=r()("#area"),is=r()("#bedroom"),as=r()("#bathroom"),ss=r()("#reset"),os=r()("#more2"),ls={area:"full",bedroom:"full",bathroom:"full",paged:1,maxPages:"number"==typeof os.data("param")?os.data("param"):1};function us(e){return us="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},us(e)}ss.on("click",(function(e){ls.area="full",ls.bedroom="full",ls.bathroom="full",ls.maxPages=1,ls.paged=1,r()("ul.list").each((function(e,t){var n,r=t.querySelector("li[data-display]").getAttribute("data-display");(n=t,[].slice.call(n.parentNode.children).filter((function(e){return e!==n})))[0].innerText=r,t.querySelector("li.selected").classList.remove("selected"),t.querySelector("li[data-display]").classList.add("selected")}));var t=ns(ls);es(t)})),rs.on("change",(function(e){var t=rs.val();ls.area=t;var n=ns(ls);es(n)})),is.on("change",(function(e){var t=is.val();ls.bedroom=t;var n=ns(ls);es(n)})),as.on("change",(function(e){var t=as.val();ls.bathroom=t;var n=ns(ls);es(n)})),os.on("click",(function(e){if(e.preventDefault(),!(ls.maxPages>ls.paged))return os.hide(),!0;ls.paged+=1;var t=ns(ls);es(t,"more")})),r()(".menu-item-has-children").addClass((function(){return"navigation__subnav icon-arrow-down"})),r()(".projects__filter-next").on("click",(function(e){e.preventDefault(),r()(".projects__filter-services").toggleClass("active"),r()(".projects__filter-next").toggleClass("active")}));var cs=function(e){return{action:"hello",filter:e}},ds=r()(".can-toggle"),ps=ds.find("input"),fs=r()(".projects__filter-services label"),hs=r()("#more"),vs={swithcerType:"implemented",servicesId:"all",paged:1,maxPages:"number"==typeof hs.data("param")?hs.data("param"):1};console.log("max",vs.maxPages);var ms=function(e,t){r().ajax({url:true_obj.ajaxurl,data:e,method:"POST",beforeSend:function(e){ps.prop("disabled",!0)},success:function(e){ps.prop("disabled",!1);var n=JSON.parse(e),i=0!=n.projects.length?n.projects.reduce((function(e,t){return e+t})):"";switch(r()(".projects").data("slider")&&(t="slider"),t){case"more":r()(".projects__product").append(i),vs.maxPages=n.maxPages;break;case"slider":var a=0!=n.projects.length?n.projects.map((function(e){return'<div class="swiper-slide">'.concat(e,"</div>")})):"";console.log(us(a),Boolean(a));var s=0!=a.length||Boolean(a)?a.reduce((function(e,t){return e+t})):"";r()(".projects__product-slider .swiper-wrapper").html(s+""),vs.maxPages=n.maxPages;break;default:r()(".projects__product").html(i),vs.maxPages=n.maxPages}}})},gs=function(e,t){ps.prop("checked",Boolean(e)),vs.swithcerType=String(t),vs.paged=1;var n=cs(vs);return ms(n),!1},ys=location.hash.slice(1);"implemented"===ys&&gs(!1,"implemented"),"current"===ys&&gs(!0,"current"),window.addEventListener("hashchange",(function(){var e=location.hash.slice(1);"implemented"===e&&gs(!1,"implemented"),"current"===e&&gs(!0,"current")})),ds.on("change",(function(e){e.target.checked?(vs.swithcerType="current",history.pushState(null,"current","".concat(location.pathname,"#current"))):(vs.swithcerType="implemented",history.pushState(null,"implemented","".concat(location.pathname,"#implemented"))),hs.show(),vs.paged=1;var t=cs(vs);return ms(t),!1})),fs.on("click",(function(e){var t=e.target.htmlFor,n=r()(".projects__filter-services input[id=".concat(t,"]")).val();vs.servicesId=n;var i=cs(vs);ms(i)})),hs.on("click",(function(e){if(e.preventDefault(),console.log(vs),console.log("btnMore",vs.maxPages,">",vs.paged),!(vs.maxPages>vs.paged))return hs.hide(),!0;vs.paged+=1;var t=cs(vs);ms(t,"more")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU0sVUFBeEIsVUFBc0NoQixTQUFTTSxTQUEvQyxlQUVBb3FHLEdBQVVZLGFBQWUsY0FDekJ4cUcsUUFBUUUsVUFBVSxLQUFNLGNBQXhCLFVBQTBDaEIsU0FBU00sU0FBbkQsa0JBR0QycUcsR0FBUTlyRCxPQUNSdXJELEdBQVVRLE1BQVEsRUFDbEIsSUFBTS8vRixFQUFPMC9GLEdBQVdILElBRXhCLE9BREFOLEdBQVVqL0YsSUFDSCxLQUdSKytELEdBQU9oakUsR0FBRyxTQUFTLFNBQUNwSixHQUVuQixJQUFNNnRHLEVBQVU3dEcsRUFBRVksT0FBT2t0RyxRQUVuQkMsRUFEUTlsRyxHQUFBQSxDQUFFLHVDQUFELE9BQXdDNGxHLEVBQXhDLE1BQ1V0b0YsTUFFekJxbkYsR0FBVWEsV0FBYU0sRUFFdkIsSUFBTTFnRyxFQUFPMC9GLEdBQVdILElBRXhCTixHQUFVai9GLE1BR1g4L0YsR0FBUS9qRyxHQUFHLFNBQVMsU0FBQ3BKLEdBSXBCLEdBSEFBLEVBQUVDLGlCQUNGSCxRQUFRQyxJQUFJNnNHLElBQ1o5c0csUUFBUUMsSUFBSSxVQUFXNnNHLEdBQVVDLFNBQVUsSUFBS0QsR0FBVVEsU0FDdERSLEdBQVVDLFNBQVdELEdBQVVRLE9BTWxDLE9BREFELEdBQVFydUUsUUFDRCxFQUxQOHRFLEdBQVVRLE9BQVMsRUFDbkIsSUFBTS8vRixFQUFPMC9GLEdBQVdILElBQ3hCTixHQUFVai9GLEVBQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cC1wcm8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvaGVhZGVyLmpzIiwid2VicGFjazovL3dwLXByby8uL3NyYy9hc3NldHMvanMvY29tcG9uZW50cy9sb2FkZXIuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3Nzci13aW5kb3cvc3NyLXdpbmRvdy5lc20uanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL2RvbTcvZG9tNy5lc20uanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZG9tLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL3V0aWxzLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1zdXBwb3J0LmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL3V0aWxzL2dldC1kZXZpY2UuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vdXRpbHMvZ2V0LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vbW9kdWxlcy9yZXNpemUvcmVzaXplLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2V2ZW50cy1lbWl0dGVyLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTaXplLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc09mZnNldC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc1Byb2dyZXNzLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNDbGFzc2VzLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQWN0aXZlSW5kZXguanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVDbGlja2VkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL2luZGV4LmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvTG9vcC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVOZXh0LmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVByZXYuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlUmVzZXQuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlVG9DbG9zZXN0LmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9sb29wL2luZGV4LmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9sb29wL2xvb3BDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2xvb3AvbG9vcEZpeC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbG9vcC9sb29wRGVzdHJveS5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hTdGFydC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uVG91Y2hNb3ZlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaEVuZC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uUmVzaXplLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25DbGljay5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZXZlbnRzL29uU2Nyb2xsLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9ldmVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NsYXNzZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2NsYXNzZXMvYWRkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2xhc3Nlcy9yZW1vdmVDbGFzc2VzLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY29yZS1jbGFzcy5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbW9kdWxhci5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL2luZGV4LmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvZ2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvc2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWluVHJhbnNsYXRlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvbWF4VHJhbnNsYXRlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS90cmFuc2xhdGUvdHJhbnNsYXRlVG8uanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vc2V0VHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uU3RhcnQuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvbkVuZC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvZ3JhYi1jdXJzb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3NldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3Vuc2V0R3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL2luZGV4LmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vYXBwZW5kU2xpZGUuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9wcmVwZW5kU2xpZGUuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9hZGRTbGlkZS5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3JlbW92ZVNsaWRlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vcmVtb3ZlQWxsU2xpZGVzLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZXNtL2NvbXBvbmVudHMvY29yZS9icmVha3BvaW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvc2V0QnJlYWtwb2ludC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvZ2V0QnJlYWtwb2ludC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvY2hlY2stb3ZlcmZsb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb3JlL2ltYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2xvYWRJbWFnZS5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL3ByZWxvYWRJbWFnZXMuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9lZmZlY3QtZmFkZS9lZmZlY3QtZmFkZS5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL3Njcm9sbGJhci9zY3JvbGxiYXIuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9jb250cm9sbGVyL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9lc20vY29tcG9uZW50cy9wYXJhbGxheC9wYXJhbGxheC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2VzbS9jb21wb25lbnRzL21vdXNld2hlZWwvbW91c2V3aGVlbC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvc2xpZGVyLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dwLXByby93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93cC1wcm8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dwLXByby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dwLXByby8uL3NyYy9hc3NldHMvanMvY29tcG9uZW50cy9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vbm9kZV9tb2R1bGVzL2dzYXAvZ3NhcC1jb3JlLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9nc2FwL0NTU1BsdWdpbi5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvZ3NhcC9pbmRleC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvZ3NhcC9TY3JvbGxUcmlnZ2VyLmpzIiwid2VicGFjazovL3dwLXByby8uL25vZGVfbW9kdWxlcy9iYWRnZXItYWNjb3JkaW9uL2Rpc3QvYmFkZ2VyLWFjY29yZGlvbi5lc20uanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vc3JjL2Fzc2V0cy9qcy9jb21wb25lbnRzL3Njcm9sbC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZ2VuZXJpYy5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9ub2RlX21vZHVsZXMvbWljcm9tb2RhbC9kaXN0L21pY3JvbW9kYWwuZXMuanMiLCJ3ZWJwYWNrOi8vd3AtcHJvLy4vc3JjL2Fzc2V0cy9qcy9jb21wb25lbnRzL2dlbmVyaWNzLmpzIiwid2VicGFjazovL3dwLXByby8uL3NyYy9hc3NldHMvanMvY29tcG9uZW50cy9tb2RhbC5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvY2F0YWxvZy5qcyIsIndlYnBhY2s6Ly93cC1wcm8vLi9zcmMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZmlsdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBcbiAgICAvLy8vLyBodW1idXJnZXJcbiAgICBjb25zdCBodG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpO1xuICAgIGNvbnN0IGh1bWJ1cmdlciA9IGh0bWwucXVlcnlTZWxlY3RvcignLm1lbnUtdG9nZ2xlJyk7XG4gICAgY29uc3QgbWVudSA9IGh0bWwucXVlcnlTZWxlY3RvcignLm5hdmlnYXRpb24nKTtcblxuICAgIGNvbnN0IGxpbmtzID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCcubmF2aWdhdGlvbl9fc3VibmF2Jyk7XG5cbiAgICBmb3IgKGxldCBsaW5rIG9mIGxpbmtzKSB7XG5cdFx0XHRsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0XHRsaW5rLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuXHRcdFx0fSk7XG4gICAgfVxuXG4gICAgaHVtYnVyZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0aHVtYnVyZ2VyLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpO1xuXHRcdFx0bWVudS5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcblx0XHRcdGh0bWwuY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJylcbiAgICB9KVxuXG5cblx0XHRjb25zdCBsaW5rUHJvamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBhW2hyZWYkPVwicHJvamVjdHMvXCJdYCk7XG5cdFx0Y29uc29sZS5sb2cobGlua1Byb2plY3RzKTtcblx0XHRsaW5rUHJvamVjdHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9KTtcblx0IFxuXG59KVxuXG4iLCIndXNlIHN0cmljdCc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdsb2FkZWQtaGlkaW5nJyk7XG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdsb2FkZWQnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkLWhpZGluZycpO1xuICAgIH0sIDEyMDApO1xuXG59KVxuIiwiLyoqXG4gKiBTU1IgV2luZG93IDMuMC4wXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogTm92ZW1iZXIgOSwgMjAyMFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiZcbiAgICAgICAgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc3JjKSB7XG4gICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IHt9OyB9XG4gICAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7IHNyYyA9IHt9OyB9XG4gICAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgICAgICBlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiZcbiAgICAgICAgICAgIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc3JjW2tleV0pLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbnZhciBzc3JEb2N1bWVudCA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgYmx1cjogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBub2RlTmFtZTogJycsXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0RXZlbnQ6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50TlM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgaW1wb3J0Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7XG4gICAgICAgIGhhc2g6ICcnLFxuICAgICAgICBob3N0OiAnJyxcbiAgICAgICAgaG9zdG5hbWU6ICcnLFxuICAgICAgICBocmVmOiAnJyxcbiAgICAgICAgb3JpZ2luOiAnJyxcbiAgICAgICAgcGF0aG5hbWU6ICcnLFxuICAgICAgICBwcm90b2NvbDogJycsXG4gICAgICAgIHNlYXJjaDogJycsXG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgICB2YXIgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICAgIHJldHVybiBkb2M7XG59XG5cbnZhciBzc3JXaW5kb3cgPSB7XG4gICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBnbzogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBiYWNrOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgfSxcbiAgICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBnZXRDb21wdXRlZFN0eWxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIEltYWdlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgRGF0ZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKCkgeyB9LFxuICAgIG1hdGNoTWVkaWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgICB9LFxuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gICAgdmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gICAgZXh0ZW5kKHdpbiwgc3NyV2luZG93KTtcbiAgICByZXR1cm4gd2luO1xufVxuXG5leHBvcnQgeyBleHRlbmQsIGdldERvY3VtZW50LCBnZXRXaW5kb3csIHNzckRvY3VtZW50LCBzc3JXaW5kb3cgfTtcbiIsIi8qKlxuICogRG9tNyAzLjAuMFxuICogTWluaW1hbGlzdGljIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgRE9NIG1hbmlwdWxhdGlvbiwgd2l0aCBhIGpRdWVyeS1jb21wYXRpYmxlIEFQSVxuICogaHR0cHM6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tNy5odG1sXG4gKlxuICogQ29weXJpZ2h0IDIwMjAsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IE5vdmVtYmVyIDksIDIwMjBcbiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbn1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7XG4gIH0gZWxzZSB7XG4gICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgdmFyIGEgPSBbbnVsbF07XG4gICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikge1xuICByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7XG5cbiAgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgICBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO1xuXG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpO1xuXG4gICAgICBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBXcmFwcGVyKCkge1xuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTtcbiAgfTtcblxuICByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5mdW5jdGlvbiBtYWtlUmVhY3RpdmUob2JqKSB7XG4gIHZhciBwcm90byA9IG9iai5fX3Byb3RvX187XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX3Byb3RvX18nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gcHJvdG87XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgcHJvdG8uX19wcm90b19fID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIERvbTcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BcnJheSkge1xuICBfaW5oZXJpdHNMb29zZShEb203LCBfQXJyYXkpO1xuXG4gIGZ1bmN0aW9uIERvbTcoaXRlbXMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9BcnJheS5jYWxsLmFwcGx5KF9BcnJheSwgW3RoaXNdLmNvbmNhdChpdGVtcykpIHx8IHRoaXM7XG4gICAgbWFrZVJlYWN0aXZlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gRG9tNztcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEFycmF5KSk7XG5cbmZ1bmN0aW9uIGFycmF5RmxhdChhcnIpIHtcbiAgaWYgKGFyciA9PT0gdm9pZCAwKSB7XG4gICAgYXJyID0gW107XG4gIH1cblxuICB2YXIgcmVzID0gW107XG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBhcnJheUZsYXQoZWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnB1c2goZWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBhcnJheVVuaXF1ZShhcnIpIHtcbiAgdmFyIHVuaXF1ZUFycmF5ID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgdW5pcXVlQXJyYXkucHVzaChhcnJbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHVuaXF1ZUFycmF5O1xufVxuZnVuY3Rpb24gdG9DYW1lbENhc2Uoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tKC4pL2csIGZ1bmN0aW9uIChtYXRjaCwgZ3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXAudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHFzYShzZWxlY3RvciwgY29udGV4dCkge1xuICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBbc2VsZWN0b3JdO1xuICB9XG5cbiAgdmFyIGEgPSBbXTtcbiAgdmFyIHJlcyA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBhLnB1c2gocmVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiAkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGFyciA9IFtdO1xuXG4gIGlmICghY29udGV4dCAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBEb203KGFycik7XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIHZhciBodG1sID0gc2VsZWN0b3IudHJpbSgpO1xuXG4gICAgaWYgKGh0bWwuaW5kZXhPZignPCcpID49IDAgJiYgaHRtbC5pbmRleE9mKCc+JykgPj0gMCkge1xuICAgICAgdmFyIHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8bGknKSA9PT0gMCkgdG9DcmVhdGUgPSAndWwnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRyJykgPT09IDApIHRvQ3JlYXRlID0gJ3Rib2R5JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0ZCcpID09PSAwIHx8IGh0bWwuaW5kZXhPZignPHRoJykgPT09IDApIHRvQ3JlYXRlID0gJ3RyJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0Ym9keScpID09PSAwKSB0b0NyZWF0ZSA9ICd0YWJsZSc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8b3B0aW9uJykgPT09IDApIHRvQ3JlYXRlID0gJ3NlbGVjdCc7XG4gICAgICB2YXIgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgdGVtcFBhcmVudC5pbm5lckhUTUwgPSBodG1sO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnIucHVzaCh0ZW1wUGFyZW50LmNoaWxkTm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcnIgPSBxc2Eoc2VsZWN0b3IudHJpbSgpLCBjb250ZXh0IHx8IGRvY3VtZW50KTtcbiAgICB9IC8vIGFyciA9IHFzYShzZWxlY3RvciwgZG9jdW1lbnQpO1xuXG4gIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbmRvdyB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RvcikpIHtcbiAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSByZXR1cm4gc2VsZWN0b3I7XG4gICAgYXJyID0gc2VsZWN0b3I7XG4gIH1cblxuICByZXR1cm4gbmV3IERvbTcoYXJyYXlVbmlxdWUoYXJyKSk7XG59XG5cbiQuZm4gPSBEb203LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gYWRkQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfZWwkY2xhc3NMaXN0O1xuXG4gICAgKF9lbCRjbGFzc0xpc3QgPSBlbC5jbGFzc0xpc3QpLmFkZC5hcHBseShfZWwkY2xhc3NMaXN0LCBjbGFzc05hbWVzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgY2xhc3Nlc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgX2VsJGNsYXNzTGlzdDI7XG5cbiAgICAoX2VsJGNsYXNzTGlzdDIgPSBlbC5jbGFzc0xpc3QpLnJlbW92ZS5hcHBseShfZWwkY2xhc3NMaXN0MiwgY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGNsYXNzZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgY2xhc3NOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhc0NsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBjbGFzc2VzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKHRoaXMsIGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBjbGFzc05hbWVzLmZpbHRlcihmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgfSkubGVuZ3RoID4gMDtcbiAgfSkubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBhdHRyXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdLmdldEF0dHJpYnV0ZShhdHRycyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSAvLyBTZXQgYXR0cnNcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAvLyBTdHJpbmdcbiAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdFxuICAgICAgZm9yICh2YXIgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyKGF0dHIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJvcChwcm9wcywgdmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIC8vIEdldCBwcm9wXG4gICAgaWYgKHRoaXNbMF0pIHJldHVybiB0aGlzWzBdW3Byb3BzXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTZXQgcHJvcHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIC8vIFN0cmluZ1xuICAgICAgICB0aGlzW2ldW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT2JqZWN0XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXVtwcm9wTmFtZV0gPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXRhKGtleSwgdmFsdWUpIHtcbiAgdmFyIGVsO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7IC8vIEdldCB2YWx1ZVxuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYga2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuXG4gICAgdmFyIGRhdGFLZXkgPSBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLVwiICsga2V5KTtcblxuICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICByZXR1cm4gZGF0YUtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCB2YWx1ZVxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWwgPSB0aGlzW2ldO1xuICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9O1xuICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURhdGEoa2V5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0pIHtcbiAgICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IG51bGw7XG4gICAgICBkZWxldGUgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRhc2V0KCkge1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICB2YXIgZGF0YXNldCA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKGVsLmRhdGFzZXQpIHtcbiAgICBmb3IgKHZhciBkYXRhS2V5IGluIGVsLmRhdGFzZXQpIHtcbiAgICAgIGRhdGFzZXRbZGF0YUtleV0gPSBlbC5kYXRhc2V0W2RhdGFLZXldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBfYXR0ciA9IGVsLmF0dHJpYnV0ZXNbaV07XG5cbiAgICAgIGlmIChfYXR0ci5uYW1lLmluZGV4T2YoJ2RhdGEtJykgPj0gMCkge1xuICAgICAgICBkYXRhc2V0W3RvQ2FtZWxDYXNlKF9hdHRyLm5hbWUuc3BsaXQoJ2RhdGEtJylbMV0pXSA9IF9hdHRyLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ2ZhbHNlJykgZGF0YXNldFtrZXldID0gZmFsc2U7ZWxzZSBpZiAoZGF0YXNldFtrZXldID09PSAndHJ1ZScpIGRhdGFzZXRba2V5XSA9IHRydWU7ZWxzZSBpZiAocGFyc2VGbG9hdChkYXRhc2V0W2tleV0pID09PSBkYXRhc2V0W2tleV0gKiAxKSBkYXRhc2V0W2tleV0gKj0gMTtcbiAgfVxuXG4gIHJldHVybiBkYXRhc2V0O1xufVxuXG5mdW5jdGlvbiB2YWwodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBnZXQgdmFsdWVcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZWwubXVsdGlwbGUgJiYgZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZWwuc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZWwudmFsdWU7XG4gIH0gLy8gc2V0IHZhbHVlXG5cblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdGhpcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICB2YXIgX2VsID0gdGhpc1tfaV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgX2VsLm11bHRpcGxlICYmIF9lbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnc2VsZWN0Jykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfZWwub3B0aW9ucy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBfZWwub3B0aW9uc1tqXS5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2YoX2VsLm9wdGlvbnNbal0udmFsdWUpID49IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIF9lbC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB2YWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy52YWwodmFsdWUpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gIT09ICdzdHJpbmcnID8gZHVyYXRpb24gKyBcIm1zXCIgOiBkdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvbigpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUxpdmVFdmVudChlKSB7XG4gICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgdmFyIGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBldmVudERhdGEpO2Vsc2Uge1xuICAgICAgdmFyIF9wYXJlbnRzID0gJCh0YXJnZXQpLnBhcmVudHMoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG5cbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgX3BhcmVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgaWYgKCQoX3BhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkoX3BhcmVudHNba10sIGV2ZW50RGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgIHZhciBldmVudERhdGEgPSBlICYmIGUudGFyZ2V0ID8gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXSA6IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnREYXRhKTtcbiAgfVxuXG4gIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcbiAgdmFyIGo7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmICghdGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnMpIGVsLmRvbTdMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgICAgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVFdmVudCwgY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpdmUgZXZlbnRzXG4gICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBfZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIGVsLmRvbTdMaXZlTGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XSkgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XSA9IFtdO1xuXG4gICAgICAgIGVsLmRvbTdMaXZlTGlzdGVuZXJzW19ldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUxpdmVFdmVudFxuICAgICAgICB9KTtcblxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKF9ldmVudCwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb2ZmKCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhcmdzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICB2YXIgZXZlbnRUeXBlID0gYXJnc1swXSxcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG4gIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgdmFyIGVsID0gdGhpc1tqXTtcbiAgICAgIHZhciBoYW5kbGVycyA9IHZvaWQgMDtcblxuICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpc3RlbmVyc1tldmVudF07XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gaGFuZGxlcnNba107XG5cbiAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb25jZSgpIHtcbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9IGFyZ3NbMF0sXG4gICAgICB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV0sXG4gICAgICBsaXN0ZW5lciA9IGFyZ3NbMl0sXG4gICAgICBjYXB0dXJlID0gYXJnc1szXTtcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBldmVudE5hbWUgPSBhcmdzWzBdO1xuICAgIGxpc3RlbmVyID0gYXJnc1sxXTtcbiAgICBjYXB0dXJlID0gYXJnc1syXTtcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xuICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgZXZlbnRBcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgICBldmVudEFyZ3NbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudEFyZ3MpO1xuICAgIGRvbS5vZmYoZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xuXG4gICAgaWYgKG9uY2VIYW5kbGVyLmRvbTdwcm94eSkge1xuICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmRvbTdwcm94eTtcbiAgICB9XG4gIH1cblxuICBvbmNlSGFuZGxlci5kb203cHJveHkgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGRvbS5vbihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjkpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHtcbiAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gIH1cblxuICB2YXIgZXZlbnRzID0gYXJnc1swXS5zcGxpdCgnICcpO1xuICB2YXIgZXZlbnREYXRhID0gYXJnc1sxXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgdmFyIGVsID0gdGhpc1tqXTtcblxuICAgICAgaWYgKHdpbmRvdy5DdXN0b21FdmVudCkge1xuICAgICAgICB2YXIgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgIGRldGFpbDogZXZlbnREYXRhLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChkYXRhLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YUluZGV4ID4gMDtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IFtdO1xuICAgICAgICBkZWxldGUgZWwuZG9tN0V2ZW50RGF0YTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChjYWxsYmFjaykge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBkb20ub24oJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkVuZChjYWxsYmFjaykge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbignYW5pbWF0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB3aWR0aCgpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ3dpZHRoJykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgdmFyIF9zdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoX3N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSkgKyBwYXJzZUZsb2F0KF9zdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGg7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0KCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ2hlaWdodCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICB2YXIgX3N0eWxlczIgPSB0aGlzLnN0eWxlcygpO1xuXG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQgKyBwYXJzZUZsb2F0KF9zdHlsZXMyLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KF9zdHlsZXMyLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgdmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICB2YXIgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgdmFyIGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICAgIHZhciBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgdmFyIHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoaWRlKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2hvdygpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgLy8gU3RpbGwgbm90IHZpc2libGVcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzdHlsZXMoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBjc3MocHJvcHMsIHZhbHVlKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAodHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gLmNzcygnd2lkdGgnKVxuICAgICAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gLmNzcyh7IHdpZHRoOiAnMTAwcHgnIH0pXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmb3IgKHZhciBfcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV0uc3R5bGVbX3Byb3BdID0gcHJvcHNbX3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyAuY3NzKCd3aWR0aCcsICcxMDBweCcpXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcHNdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaW5kZXgpIHtcbiAgICBjYWxsYmFjay5hcHBseShlbCwgW2VsLCBpbmRleF0pO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0ID0gYXJyYXlGaWx0ZXIodGhpcywgY2FsbGJhY2spO1xuICByZXR1cm4gJChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgaWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRleHQodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIHZhciBjb21wYXJlV2l0aDtcbiAgdmFyIGk7XG4gIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGVsLm1hdGNoZXMpIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29tcGFyZVdpdGggPSAkKHNlbGVjdG9yKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykge1xuICAgIHJldHVybiBlbCA9PT0gd2luZG93O1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIHZhciBjaGlsZCA9IHRoaXNbMF07XG4gIHZhciBpO1xuXG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcztcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gIGlmIChpbmRleCA+IGxlbmd0aCAtIDEpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgdmFyIHJldHVybkluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgaWYgKHJldHVybkluZGV4IDwgMCkgcmV0dXJuICQoW10pO1xuICAgIHJldHVybiAkKFt0aGlzW3JldHVybkluZGV4XV0pO1xuICB9XG5cbiAgcmV0dXJuICQoW3RoaXNbaW5kZXhdXSk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZCgpIHtcbiAgdmFyIG5ld0NoaWxkO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIGZvciAodmFyIGsgPSAwOyBrIDwgYXJndW1lbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgbmV3Q2hpbGQgPSBrIDwgMCB8fCBhcmd1bWVudHMubGVuZ3RoIDw9IGsgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNba107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kKG5ld0NoaWxkKSB7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBpO1xuICB2YXIgajtcblxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgZm9yIChqID0gdGVtcERpdi5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgaiAtPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkucHJlcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShzZWxlY3Rvcikge1xuICB2YXIgYmVmb3JlID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGJlZm9yZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGJlZm9yZVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBiZWZvcmVbMF0pO1xuICAgIH0gZWxzZSBpZiAoYmVmb3JlLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmVmb3JlLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGJlZm9yZVtqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYmVmb3JlW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIoc2VsZWN0b3IpIHtcbiAgdmFyIGFmdGVyID0gJChzZWxlY3Rvcik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFmdGVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYWZ0ZXJbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYWZ0ZXJbMF0ubmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSBpZiAoYWZ0ZXIubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhZnRlci5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhZnRlcltqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYWZ0ZXJbal0ubmV4dFNpYmxpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuICQoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIHJldHVybiAkKFtdKTtcbn1cblxuZnVuY3Rpb24gbmV4dEFsbChzZWxlY3Rvcikge1xuICB2YXIgbmV4dEVscyA9IFtdO1xuICB2YXIgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIHZhciBfbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChfbmV4dCkuaXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2goX25leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2goX25leHQpO1xuXG4gICAgZWwgPSBfbmV4dDtcbiAgfVxuXG4gIHJldHVybiAkKG5leHRFbHMpO1xufVxuXG5mdW5jdGlvbiBwcmV2KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgcmV0dXJuICQoW10pO1xufVxuXG5mdW5jdGlvbiBwcmV2QWxsKHNlbGVjdG9yKSB7XG4gIHZhciBwcmV2RWxzID0gW107XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiAkKFtdKTtcblxuICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIHZhciBfcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQoX3ByZXYpLmlzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKF9wcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKF9wcmV2KTtcblxuICAgIGVsID0gX3ByZXY7XG4gIH1cblxuICByZXR1cm4gJChwcmV2RWxzKTtcbn1cblxuZnVuY3Rpb24gc2libGluZ3Moc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHRoaXMubmV4dEFsbChzZWxlY3RvcikuYWRkKHRoaXMucHJldkFsbChzZWxlY3RvcikpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnQoc2VsZWN0b3IpIHtcbiAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJCh0aGlzW2ldLnBhcmVudE5vZGUpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICB2YXIgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIF9wYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHdoaWxlIChfcGFyZW50KSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQoX3BhcmVudCkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2goX3BhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2goX3BhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIF9wYXJlbnQgPSBfcGFyZW50LnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQocGFyZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgdmFyIGNsb3Nlc3QgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICBpZiAoIWNsb3Nlc3QuaXMoc2VsZWN0b3IpKSB7XG4gICAgY2xvc2VzdCA9IGNsb3Nlc3QucGFyZW50cyhzZWxlY3RvcikuZXEoMCk7XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdDtcbn1cblxuZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICB2YXIgZm91bmRFbGVtZW50cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZvdW5kLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBmb3VuZEVsZW1lbnRzLnB1c2goZm91bmRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGZvdW5kRWxlbWVudHMpO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvcikge1xuICB2YXIgY2hpbGRyZW4gPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZHJlbjtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgaWYgKCFzZWxlY3RvciB8fCAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gYWRkKCkge1xuICB2YXIgZG9tID0gdGhpcztcbiAgdmFyIGk7XG4gIHZhciBqO1xuXG4gIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGVscyA9IG5ldyBBcnJheShfbGVuMTApLCBfa2V5MTAgPSAwOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgZWxzW19rZXkxMF0gPSBhcmd1bWVudHNbX2tleTEwXTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgdG9BZGQgPSAkKGVsc1tpXSk7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgdG9BZGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGRvbS5wdXNoKHRvQWRkW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9tO1xufVxuXG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlbC5jaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwuY2hpbGROb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2Nyb2xsVG8oKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGxlZnQgPSBhcmdzWzBdLFxuICAgICAgdG9wID0gYXJnc1sxXSxcbiAgICAgIGR1cmF0aW9uID0gYXJnc1syXSxcbiAgICAgIGVhc2luZyA9IGFyZ3NbM10sXG4gICAgICBjYWxsYmFjayA9IGFyZ3NbNF07XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGVhc2luZztcbiAgICBsZWZ0ID0gYXJnc1swXTtcbiAgICB0b3AgPSBhcmdzWzFdO1xuICAgIGR1cmF0aW9uID0gYXJnc1syXTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbM107XG4gICAgZWFzaW5nID0gYXJnc1s0XTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykgZWFzaW5nID0gJ3N3aW5nJztcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHZhciBlbCA9IHRoaXM7XG4gICAgdmFyIGN1cnJlbnRUb3A7XG4gICAgdmFyIGN1cnJlbnRMZWZ0O1xuICAgIHZhciBtYXhUb3A7XG4gICAgdmFyIG1heExlZnQ7XG4gICAgdmFyIG5ld1RvcDtcbiAgICB2YXIgbmV3TGVmdDtcbiAgICB2YXIgc2Nyb2xsVG9wOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB2YXIgc2Nyb2xsTGVmdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgdmFyIGFuaW1hdGVUb3AgPSB0b3AgPiAwIHx8IHRvcCA9PT0gMDtcbiAgICB2YXIgYW5pbWF0ZUxlZnQgPSBsZWZ0ID4gMCB8fCBsZWZ0ID09PSAwO1xuXG4gICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlYXNpbmcgPSAnc3dpbmcnO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBjdXJyZW50VG9wID0gZWwuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IHRvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIGN1cnJlbnRMZWZ0ID0gZWwuc2Nyb2xsTGVmdDtcblxuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWR1cmF0aW9uKSByZXR1cm47XG5cbiAgICBpZiAoYW5pbWF0ZVRvcCkge1xuICAgICAgbWF4VG9wID0gZWwuc2Nyb2xsSGVpZ2h0IC0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3VG9wID0gTWF0aC5tYXgoTWF0aC5taW4odG9wLCBtYXhUb3ApLCAwKTtcbiAgICB9XG5cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIG1heExlZnQgPSBlbC5zY3JvbGxXaWR0aCAtIGVsLm9mZnNldFdpZHRoO1xuICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIG1heExlZnQpLCAwKTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnRUaW1lID0gbnVsbDtcbiAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPT09IGN1cnJlbnRUb3ApIGFuaW1hdGVUb3AgPSBmYWxzZTtcbiAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA9PT0gY3VycmVudExlZnQpIGFuaW1hdGVMZWZ0ID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiByZW5kZXIodGltZSkge1xuICAgICAgaWYgKHRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgIHZhciBlYXNlUHJvZ3Jlc3MgPSBlYXNpbmcgPT09ICdsaW5lYXInID8gcHJvZ3Jlc3MgOiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIHZhciBkb25lO1xuICAgICAgaWYgKGFuaW1hdGVUb3ApIHNjcm9sbFRvcCA9IGN1cnJlbnRUb3AgKyBlYXNlUHJvZ3Jlc3MgKiAobmV3VG9wIC0gY3VycmVudFRvcCk7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIHNjcm9sbExlZnQgPSBjdXJyZW50TGVmdCArIGVhc2VQcm9ncmVzcyAqIChuZXdMZWZ0IC0gY3VycmVudExlZnQpO1xuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPiBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA+PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wIDwgY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPD0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID4gY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA+PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPCBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0IDw9IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVUb3ApIGVsLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgZWwuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgfVxuXG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICB9KTtcbn0gLy8gc2Nyb2xsVG9wKHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIHtcblxuXG5mdW5jdGlvbiBzY3JvbGxUb3AoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciB0b3AgPSBhcmdzWzBdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzFdLFxuICAgICAgZWFzaW5nID0gYXJnc1syXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1szXTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRvcCA9IGFyZ3NbMF07XG4gICAgZHVyYXRpb24gPSBhcmdzWzFdO1xuICAgIGNhbGxiYWNrID0gYXJnc1syXTtcbiAgICBlYXNpbmcgPSBhcmdzWzNdO1xuICB9XG5cbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbFRvcDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8odW5kZWZpbmVkLCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsTGVmdCgpIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgdmFyIGxlZnQgPSBhcmdzWzBdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzFdLFxuICAgICAgZWFzaW5nID0gYXJnc1syXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1szXTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxlZnQgPSBhcmdzWzBdO1xuICAgIGR1cmF0aW9uID0gYXJnc1sxXTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbMl07XG4gICAgZWFzaW5nID0gYXJnc1szXTtcbiAgfVxuXG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8obGVmdCwgdW5kZWZpbmVkLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGUoaW5pdGlhbFByb3BzLCBpbml0aWFsUGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGVscyA9IHRoaXM7XG4gIHZhciBhID0ge1xuICAgIHByb3BzOiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsUHJvcHMpLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgZWFzaW5nOiAnc3dpbmcnIC8vIG9yICdsaW5lYXInXG5cbiAgICAgIC8qIENhbGxiYWNrc1xuICAgICAgYmVnaW4oZWxlbWVudHMpXG4gICAgICBjb21wbGV0ZShlbGVtZW50cylcbiAgICAgIHByb2dyZXNzKGVsZW1lbnRzLCBjb21wbGV0ZSwgcmVtYWluaW5nLCBzdGFydCwgdHdlZW5WYWx1ZSlcbiAgICAgICovXG5cbiAgICB9LCBpbml0aWFsUGFyYW1zKSxcbiAgICBlbGVtZW50czogZWxzLFxuICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgcXVlOiBbXSxcbiAgICBlYXNpbmdQcm9ncmVzczogZnVuY3Rpb24gZWFzaW5nUHJvZ3Jlc3MoZWFzaW5nLCBwcm9ncmVzcykge1xuICAgICAgaWYgKGVhc2luZyA9PT0gJ3N3aW5nJykge1xuICAgICAgICByZXR1cm4gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfSxcbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgaWYgKGEuZnJhbWVJZCkge1xuICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYS5mcmFtZUlkKTtcbiAgICAgIH1cblxuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgYS5xdWUgPSBbXTtcbiAgICB9LFxuICAgIGRvbmU6IGZ1bmN0aW9uIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcblxuICAgICAgaWYgKGEucXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHF1ZSA9IGEucXVlLnNoaWZ0KCk7XG4gICAgICAgIGEuYW5pbWF0ZShxdWVbMF0sIHF1ZVsxXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHByb3BzLCBwYXJhbXMpIHtcbiAgICAgIGlmIChhLmFuaW1hdGluZykge1xuICAgICAgICBhLnF1ZS5wdXNoKFtwcm9wcywgcGFyYW1zXSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxlbWVudHMgPSBbXTsgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuXG4gICAgICBhLmVsZW1lbnRzLmVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgICAgICB2YXIgaW5pdGlhbEZ1bGxWYWx1ZTtcbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZTtcbiAgICAgICAgdmFyIHVuaXQ7XG4gICAgICAgIHZhciBmaW5hbFZhbHVlO1xuICAgICAgICB2YXIgZmluYWxGdWxsVmFsdWU7XG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLnJlcGxhY2UoJywnLCAnLicpO1xuICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IHBhcnNlRmxvYXQoaW5pdGlhbEZ1bGxWYWx1ZSk7XG4gICAgICAgICAgdW5pdCA9IGluaXRpYWxGdWxsVmFsdWUucmVwbGFjZShpbml0aWFsVmFsdWUsICcnKTtcbiAgICAgICAgICBmaW5hbFZhbHVlID0gcGFyc2VGbG9hdChwcm9wc1twcm9wXSk7XG4gICAgICAgICAgZmluYWxGdWxsVmFsdWUgPSBwcm9wc1twcm9wXSArIHVuaXQ7XG4gICAgICAgICAgZWxlbWVudHNbaW5kZXhdW3Byb3BdID0ge1xuICAgICAgICAgICAgaW5pdGlhbEZ1bGxWYWx1ZTogaW5pdGlhbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxWYWx1ZTogaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgdW5pdDogdW5pdCxcbiAgICAgICAgICAgIGZpbmFsVmFsdWU6IGZpbmFsVmFsdWUsXG4gICAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZTogZmluYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBjdXJyZW50VmFsdWU6IGluaXRpYWxWYWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbnVsbDtcbiAgICAgIHZhciB0aW1lO1xuICAgICAgdmFyIGVsZW1lbnRzRG9uZSA9IDA7XG4gICAgICB2YXIgcHJvcHNEb25lID0gMDtcbiAgICAgIHZhciBkb25lO1xuICAgICAgdmFyIGJlZ2FuID0gZmFsc2U7XG4gICAgICBhLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgcHJvZ3Jlc3M7XG4gICAgICAgIHZhciBlYXNlUHJvZ3Jlc3M7IC8vIGxldCBlbDtcblxuICAgICAgICBpZiAoIWJlZ2FuKSB7XG4gICAgICAgICAgYmVnYW4gPSB0cnVlO1xuICAgICAgICAgIGlmIChwYXJhbXMuYmVnaW4pIHBhcmFtcy5iZWdpbihlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgcGFyYW1zLnByb2dyZXNzKGVscywgTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCksIHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUgPCAwID8gMCA6IHN0YXJ0VGltZSArIHBhcmFtcy5kdXJhdGlvbiAtIHRpbWUsIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGVsID0gZWxlbWVudDtcbiAgICAgICAgICBpZiAoZG9uZSB8fCBlbC5kb25lKSByZXR1cm47XG4gICAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCk7XG4gICAgICAgICAgICBlYXNlUHJvZ3Jlc3MgPSBhLmVhc2luZ1Byb2dyZXNzKHBhcmFtcy5lYXNpbmcsIHByb2dyZXNzKTtcbiAgICAgICAgICAgIHZhciBfZWwkcHJvcCA9IGVsW3Byb3BdLFxuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IF9lbCRwcm9wLmluaXRpYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICBmaW5hbFZhbHVlID0gX2VsJHByb3AuZmluYWxWYWx1ZSxcbiAgICAgICAgICAgICAgICB1bml0ID0gX2VsJHByb3AudW5pdDtcbiAgICAgICAgICAgIGVsW3Byb3BdLmN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZSArIGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBlbFtwcm9wXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChmaW5hbFZhbHVlID4gaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA+PSBmaW5hbFZhbHVlIHx8IGZpbmFsVmFsdWUgPCBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlIDw9IGZpbmFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gZmluYWxWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgICAgIHByb3BzRG9uZSArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChwcm9wc0RvbmUgPT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlbGVtZW50c0RvbmUgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIGEuZG9uZShwYXJhbXMuY29tcGxldGUpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGN1cnJlbnRWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOyAvLyBUaGVuIGNhbGxcblxuICAgICAgICBhLmZyYW1lSWQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICB9XG5cbiAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfTtcblxuICBpZiAoYS5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxzO1xuICB9XG5cbiAgdmFyIGFuaW1hdGVJbnN0YW5jZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEuZWxlbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBhbmltYXRlSW5zdGFuY2UgPSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgfSBlbHNlIGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoIWFuaW1hdGVJbnN0YW5jZSkge1xuICAgIGFuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoaW5pdGlhbFByb3BzID09PSAnc3RvcCcpIHtcbiAgICBhbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5hbmltYXRlKGEucHJvcHMsIGEucGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBlbHM7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIHZhciBlbHMgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBub1RyaWdnZXIgPSAncmVzaXplIHNjcm9sbCcuc3BsaXQoJyAnKTtcblxuZnVuY3Rpb24gc2hvcnRjdXQobmFtZSkge1xuICBmdW5jdGlvbiBldmVudEhhbmRsZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAobm9UcmlnZ2VyLmluZGV4T2YobmFtZSkgPCAwKSB7XG4gICAgICAgICAgaWYgKG5hbWUgaW4gdGhpc1tpXSkgdGhpc1tpXVtuYW1lXSgpO2Vsc2Uge1xuICAgICAgICAgICAgJCh0aGlzW2ldKS50cmlnZ2VyKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vbi5hcHBseSh0aGlzLCBbbmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgfVxuXG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbnZhciBjbGljayA9IHNob3J0Y3V0KCdjbGljaycpO1xudmFyIGJsdXIgPSBzaG9ydGN1dCgnYmx1cicpO1xudmFyIGZvY3VzID0gc2hvcnRjdXQoJ2ZvY3VzJyk7XG52YXIgZm9jdXNpbiA9IHNob3J0Y3V0KCdmb2N1c2luJyk7XG52YXIgZm9jdXNvdXQgPSBzaG9ydGN1dCgnZm9jdXNvdXQnKTtcbnZhciBrZXl1cCA9IHNob3J0Y3V0KCdrZXl1cCcpO1xudmFyIGtleWRvd24gPSBzaG9ydGN1dCgna2V5ZG93bicpO1xudmFyIGtleXByZXNzID0gc2hvcnRjdXQoJ2tleXByZXNzJyk7XG52YXIgc3VibWl0ID0gc2hvcnRjdXQoJ3N1Ym1pdCcpO1xudmFyIGNoYW5nZSA9IHNob3J0Y3V0KCdjaGFuZ2UnKTtcbnZhciBtb3VzZWRvd24gPSBzaG9ydGN1dCgnbW91c2Vkb3duJyk7XG52YXIgbW91c2Vtb3ZlID0gc2hvcnRjdXQoJ21vdXNlbW92ZScpO1xudmFyIG1vdXNldXAgPSBzaG9ydGN1dCgnbW91c2V1cCcpO1xudmFyIG1vdXNlZW50ZXIgPSBzaG9ydGN1dCgnbW91c2VlbnRlcicpO1xudmFyIG1vdXNlbGVhdmUgPSBzaG9ydGN1dCgnbW91c2VsZWF2ZScpO1xudmFyIG1vdXNlb3V0ID0gc2hvcnRjdXQoJ21vdXNlb3V0Jyk7XG52YXIgbW91c2VvdmVyID0gc2hvcnRjdXQoJ21vdXNlb3ZlcicpO1xudmFyIHRvdWNoc3RhcnQgPSBzaG9ydGN1dCgndG91Y2hzdGFydCcpO1xudmFyIHRvdWNoZW5kID0gc2hvcnRjdXQoJ3RvdWNoZW5kJyk7XG52YXIgdG91Y2htb3ZlID0gc2hvcnRjdXQoJ3RvdWNobW92ZScpO1xudmFyIHJlc2l6ZSA9IHNob3J0Y3V0KCdyZXNpemUnKTtcbnZhciBzY3JvbGwgPSBzaG9ydGN1dCgnc2Nyb2xsJyk7XG5cbmV4cG9ydCBkZWZhdWx0ICQ7XG5leHBvcnQgeyAkLCBhZGQsIGFkZENsYXNzLCBhbmltYXRlLCBhbmltYXRpb25FbmQsIGFwcGVuZCwgYXBwZW5kVG8sIGF0dHIsIGJsdXIsIGNoYW5nZSwgY2hpbGRyZW4sIGNsaWNrLCBjbG9zZXN0LCBjc3MsIGRhdGEsIGRhdGFzZXQsIGRldGFjaCwgZWFjaCwgZW1wdHksIGVxLCBmaWx0ZXIsIGZpbmQsIGZvY3VzLCBmb2N1c2luLCBmb2N1c291dCwgaGFzQ2xhc3MsIGhlaWdodCwgaGlkZSwgaHRtbCwgaW5kZXgsIGluc2VydEFmdGVyLCBpbnNlcnRCZWZvcmUsIGlzLCBrZXlkb3duLCBrZXlwcmVzcywga2V5dXAsIG1vdXNlZG93biwgbW91c2VlbnRlciwgbW91c2VsZWF2ZSwgbW91c2Vtb3ZlLCBtb3VzZW91dCwgbW91c2VvdmVyLCBtb3VzZXVwLCBuZXh0LCBuZXh0QWxsLCBvZmYsIG9mZnNldCwgb24sIG9uY2UsIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoLCBwYXJlbnQsIHBhcmVudHMsIHByZXBlbmQsIHByZXBlbmRUbywgcHJldiwgcHJldkFsbCwgcHJvcCwgcmVtb3ZlLCByZW1vdmVBdHRyLCByZW1vdmVDbGFzcywgcmVtb3ZlRGF0YSwgcmVzaXplLCBzY3JvbGwsIHNjcm9sbExlZnQsIHNjcm9sbFRvLCBzY3JvbGxUb3AsIHNob3csIHNpYmxpbmdzLCBzdG9wLCBzdHlsZXMsIHN1Ym1pdCwgdGV4dCwgdG9nZ2xlQ2xhc3MsIHRvdWNoZW5kLCB0b3VjaG1vdmUsIHRvdWNoc3RhcnQsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgdHJhbnNpdGlvbkVuZCwgdHJpZ2dlciwgdmFsLCB2YWx1ZSwgd2lkdGggfTtcbiIsImltcG9ydCB7ICQsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgaGFzQ2xhc3MsIHRvZ2dsZUNsYXNzLCBhdHRyLCByZW1vdmVBdHRyLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIG9uLCBvZmYsIHRyaWdnZXIsIHRyYW5zaXRpb25FbmQsIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCBzdHlsZXMsIG9mZnNldCwgY3NzLCBlYWNoLCBodG1sLCB0ZXh0LCBpcywgaW5kZXgsIGVxLCBhcHBlbmQsIHByZXBlbmQsIG5leHQsIG5leHRBbGwsIHByZXYsIHByZXZBbGwsIHBhcmVudCwgcGFyZW50cywgY2xvc2VzdCwgZmluZCwgY2hpbGRyZW4sIGZpbHRlciwgcmVtb3ZlIH0gZnJvbSAnZG9tNyc7XG52YXIgTWV0aG9kcyA9IHtcbiAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICByZW1vdmVDbGFzczogcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICBhdHRyOiBhdHRyLFxuICByZW1vdmVBdHRyOiByZW1vdmVBdHRyLFxuICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgb246IG9uLFxuICBvZmY6IG9mZixcbiAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCxcbiAgb3V0ZXJXaWR0aDogb3V0ZXJXaWR0aCxcbiAgb3V0ZXJIZWlnaHQ6IG91dGVySGVpZ2h0LFxuICBzdHlsZXM6IHN0eWxlcyxcbiAgb2Zmc2V0OiBvZmZzZXQsXG4gIGNzczogY3NzLFxuICBlYWNoOiBlYWNoLFxuICBodG1sOiBodG1sLFxuICB0ZXh0OiB0ZXh0LFxuICBpczogaXMsXG4gIGluZGV4OiBpbmRleCxcbiAgZXE6IGVxLFxuICBhcHBlbmQ6IGFwcGVuZCxcbiAgcHJlcGVuZDogcHJlcGVuZCxcbiAgbmV4dDogbmV4dCxcbiAgbmV4dEFsbDogbmV4dEFsbCxcbiAgcHJldjogcHJldixcbiAgcHJldkFsbDogcHJldkFsbCxcbiAgcGFyZW50OiBwYXJlbnQsXG4gIHBhcmVudHM6IHBhcmVudHMsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIGZpbmQ6IGZpbmQsXG4gIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgZmlsdGVyOiBmaWx0ZXIsXG4gIHJlbW92ZTogcmVtb3ZlXG59O1xuT2JqZWN0LmtleXMoTWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoJC5mbiwgbWV0aG9kTmFtZSwge1xuICAgIHZhbHVlOiBNZXRob2RzW21ldGhvZE5hbWVdLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pO1xufSk7XG5leHBvcnQgZGVmYXVsdCAkOyIsImltcG9ydCB7IGdldERvY3VtZW50LCBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIHZhciBvYmplY3QgPSBvYmo7XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7Ly8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHsvLyBzb21ldGhpbmcgZ290IHdyb25nXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgZGVsYXkgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cblxuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBzdHlsZTtcblxuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgfVxuXG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cblxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5zdHlsZTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG5cbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgbWF0cml4O1xuICB2YXIgY3VyVHJhbnNmb3JtO1xuICB2YXIgdHJhbnNmb3JtTWF0cml4O1xuICB2YXIgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcblxuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gYS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgIH0pLmpvaW4oJywgJyk7XG4gICAgfSAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG5cblxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTsgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTsgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuXG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyOyAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pOyAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG5cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnO1xufVxuXG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICB2YXIgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgdmFyIG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tpXTtcblxuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICB2YXIga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMDtcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKHZhciBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIHZhciBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcblxuICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG5cbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0bztcbn1cblxuZnVuY3Rpb24gYmluZE1vZHVsZU1ldGhvZHMoaW5zdGFuY2UsIG9iaikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChpc09iamVjdChvYmpba2V5XSkpIHtcbiAgICAgIE9iamVjdC5rZXlzKG9ialtrZXldKS5mb3JFYWNoKGZ1bmN0aW9uIChzdWJLZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmpba2V5XVtzdWJLZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb2JqW2tleV1bc3ViS2V5XSA9IG9ialtrZXldW3N1YktleV0uYmluZChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGluc3RhbmNlW2tleV0gPSBvYmpba2V5XTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb1NlbGVjdG9yKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuXG4gIHJldHVybiBcIi5cIiArIGNsYXNzZXMudHJpbSgpLnJlcGxhY2UoLyhbXFwuOiFcXC9dKS9nLCAnXFxcXCQxJykgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAucmVwbGFjZSgvIC9nLCAnLicpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKCRjb250YWluZXIsIHBhcmFtcywgY3JlYXRlRWxlbWVudHMsIGNoZWNrUHJvcHMpIHtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcblxuICBpZiAoY3JlYXRlRWxlbWVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhjaGVja1Byb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjaGVja1Byb3BzW2tleV07XG4gICAgICAgICRjb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgeyBkZWxldGVQcm9wcywgbmV4dFRpY2ssIG5vdywgZ2V0VHJhbnNsYXRlLCBpc09iamVjdCwgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcywgZ2V0Q29tcHV0ZWRTdHlsZSwgY2xhc3Nlc1RvU2VsZWN0b3IsIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG52YXIgc3VwcG9ydDtcblxuZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpLFxuICAgIHBvaW50ZXJFdmVudHM6ICEhd2luZG93LlBvaW50ZXJFdmVudCAmJiAnbWF4VG91Y2hQb2ludHMnIGluIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+PSAwLFxuICAgIG9ic2VydmVyOiBmdW5jdGlvbiBjaGVja09ic2VydmVyKCkge1xuICAgICAgcmV0dXJuICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cgfHwgJ1dlYmtpdE11dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdztcbiAgICB9KCksXG4gICAgcGFzc2l2ZUxpc3RlbmVyOiBmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkgey8vIE5vIHN1cHBvcnRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9KCksXG4gICAgZ2VzdHVyZXM6IGZ1bmN0aW9uIGNoZWNrR2VzdHVyZXMoKSB7XG4gICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgfSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmV4cG9ydCB7IGdldFN1cHBvcnQgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuL2dldC1zdXBwb3J0JztcbnZhciBkZXZpY2U7XG5cbmZ1bmN0aW9uIGNhbGNEZXZpY2UoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIHVzZXJBZ2VudCA9IF9yZWYudXNlckFnZW50O1xuXG4gIHZhciBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIHZhciB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgdmFyIGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIHZhciBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIHZhciBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgdmFyIGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICB2YXIgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gIHZhciBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgdmFyIGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICB2YXIgd2luZG93cyA9IHBsYXRmb3JtID09PSAnV2luMzInO1xuICB2YXIgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJzsgLy8gaVBhZE9zIDEzIGZpeFxuXG4gIHZhciBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuXG4gIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2Yoc2NyZWVuV2lkdGggKyBcInhcIiArIHNjcmVlbkhlaWdodCkgPj0gMCkge1xuICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICBtYWNvcyA9IGZhbHNlO1xuICB9IC8vIEFuZHJvaWRcblxuXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgZGV2aWNlLm9zID0gJ2lvcyc7XG4gICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gIH0gLy8gRXhwb3J0IG9iamVjdFxuXG5cbiAgcmV0dXJuIGRldmljZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHtcbiAgICBvdmVycmlkZXMgPSB7fTtcbiAgfVxuXG4gIGlmICghZGV2aWNlKSB7XG4gICAgZGV2aWNlID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRldmljZTtcbn1cblxuZXhwb3J0IHsgZ2V0RGV2aWNlIH07IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG52YXIgYnJvd3NlcjtcblxuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0VkZ2U6ICEhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0VkZ2UvZyksXG4gICAgaXNTYWZhcmk6IGlzU2FmYXJpKCksXG4gICAgaXNXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG5cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmV4cG9ydCB7IGdldEJyb3dzZXIgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxudmFyIHN1cHBvcnRzUmVzaXplT2JzZXJ2ZXIgPSBmdW5jdGlvbiBzdXBwb3J0c1Jlc2l6ZU9ic2VydmVyKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3Jlc2l6ZScsXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHJlc2l6ZToge1xuICAgICAgICBvYnNlcnZlcjogbnVsbCxcbiAgICAgICAgY3JlYXRlT2JzZXJ2ZXI6IGZ1bmN0aW9uIGNyZWF0ZU9ic2VydmVyKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci5yZXNpemUub2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHN3aXBlci53aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBzd2lwZXIuaGVpZ2h0O1xuICAgICAgICAgICAgdmFyIG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICAgIHZhciBjb250ZW50Qm94U2l6ZSA9IF9yZWYuY29udGVudEJveFNpemUsXG4gICAgICAgICAgICAgICAgICBjb250ZW50UmVjdCA9IF9yZWYuY29udGVudFJlY3QsXG4gICAgICAgICAgICAgICAgICB0YXJnZXQgPSBfcmVmLnRhcmdldDtcbiAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IHN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgICAgICAgICBuZXdXaWR0aCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3Qud2lkdGggOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmlubGluZVNpemU7XG4gICAgICAgICAgICAgIG5ld0hlaWdodCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3QuaGVpZ2h0IDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5ibG9ja1NpemU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgICAgICBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzd2lwZXIucmVzaXplLm9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlT2JzZXJ2ZXI6IGZ1bmN0aW9uIHJlbW92ZU9ic2VydmVyKCkge1xuICAgICAgICAgIGlmIChzd2lwZXIucmVzaXplLm9ic2VydmVyICYmIHN3aXBlci5yZXNpemUub2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgICAgICAgc3dpcGVyLnJlc2l6ZS5vYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgICAgICAgIHN3aXBlci5yZXNpemUub2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplSGFuZGxlcjogZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3Jlc2l6ZScpO1xuICAgICAgICB9LFxuICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXI6IGZ1bmN0aW9uIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnJlc2l6ZU9ic2VydmVyICYmIHN1cHBvcnRzUmVzaXplT2JzZXJ2ZXIoKSkge1xuICAgICAgICBzd2lwZXIucmVzaXplLmNyZWF0ZU9ic2VydmVyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRW1pdCByZXNpemVcblxuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTsgLy8gRW1pdCBvcmllbnRhdGlvbmNoYW5nZVxuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgICAgc3dpcGVyLnJlc2l6ZS5yZW1vdmVPYnNlcnZlcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgT2JzZXJ2ZXIgPSB7XG4gIGF0dGFjaDogZnVuY3Rpb24gYXR0YWNoKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5vYnNlcnZlciB8fCAhc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIHZhciBjb250YWluZXJQYXJlbnRzID0gc3dpcGVyLiRlbC5wYXJlbnRzKCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH0gLy8gT2JzZXJ2ZSBjb250YWluZXJcblxuXG4gICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJGVsWzBdLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTsgLy8gT2JzZXJ2ZSB3cmFwcGVyXG5cbiAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kd3JhcHBlckVsWzBdLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzID0gW107XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdvYnNlcnZlcicsXG4gIHBhcmFtczoge1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgb2JzZXJ2ZXI6IF9leHRlbmRzKHt9LCBPYnNlcnZlciwge1xuICAgICAgICBvYnNlcnZlcnM6IFtdXG4gICAgICB9KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuaW5pdCgpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5vYnNlcnZlci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59OyIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIG9uOiBmdW5jdGlvbiBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZTogZnVuY3Rpb24gb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG5cbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuXG4gICAgICBpZiAob25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG5cbiAgICBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICB9LFxuICBvbkFueTogZnVuY3Rpb24gb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICB2YXIgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG5cbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueTogZnVuY3Rpb24gb2ZmQW55KGhhbmRsZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmY6IGZ1bmN0aW9uIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyLCBpbmRleCkge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgZW1pdDogZnVuY3Rpb24gZW1pdCgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgY29udGV4dDtcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuXG4gICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpO1xuICAgIHZhciBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlcikge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnRdLmNvbmNhdChkYXRhKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG59OyIsImltcG9ydCB1cGRhdGVTaXplIGZyb20gJy4vdXBkYXRlU2l6ZSc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzIGZyb20gJy4vdXBkYXRlU2xpZGVzJztcbmltcG9ydCB1cGRhdGVBdXRvSGVpZ2h0IGZyb20gJy4vdXBkYXRlQXV0b0hlaWdodCc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzT2Zmc2V0IGZyb20gJy4vdXBkYXRlU2xpZGVzT2Zmc2V0JztcbmltcG9ydCB1cGRhdGVTbGlkZXNQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVNsaWRlc1Byb2dyZXNzJztcbmltcG9ydCB1cGRhdGVQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVByb2dyZXNzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNDbGFzc2VzIGZyb20gJy4vdXBkYXRlU2xpZGVzQ2xhc3Nlcyc7XG5pbXBvcnQgdXBkYXRlQWN0aXZlSW5kZXggZnJvbSAnLi91cGRhdGVBY3RpdmVJbmRleCc7XG5pbXBvcnQgdXBkYXRlQ2xpY2tlZFNsaWRlIGZyb20gJy4vdXBkYXRlQ2xpY2tlZFNsaWRlJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlU2l6ZTogdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzOiB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQ6IHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldDogdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzczogdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzOiB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlczogdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXg6IHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGU6IHVwZGF0ZUNsaWNrZWRTbGlkZVxufTsiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHdpZHRoO1xuICB2YXIgaGVpZ2h0O1xuICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcblxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSAkZWxbMF0uY2xpZW50V2lkdGg7XG4gIH1cblxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFN1YnRyYWN0IHBhZGRpbmdzXG5cblxuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JykgfHwgMCwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1yaWdodCcpIHx8IDAsIDEwKTtcbiAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTih3aWR0aCkpIHdpZHRoID0gMDtcbiAgaWYgKE51bWJlci5pc05hTihoZWlnaHQpKSBoZWlnaHQgPSAwO1xuICBleHRlbmQoc3dpcGVyLCB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfSAvLyBwcmV0dGllci1pZ25vcmVcblxuXG4gICAgcmV0dXJuIHtcbiAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLFxuICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsXG4gICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLFxuICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsXG4gICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJ1xuICAgIH1bcHJvcGVydHldO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUuZ2V0UHJvcGVydHlWYWx1ZShnZXREaXJlY3Rpb25MYWJlbChsYWJlbCkpIHx8IDApO1xuICB9XG5cbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBzd2lwZXJTaXplID0gc3dpcGVyLnNpemUsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgd3JvbmdSVEwgPSBzd2lwZXIud3JvbmdSVEw7XG4gIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICB2YXIgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIHZhciBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgdmFyIHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICB2YXIgc25hcEdyaWQgPSBbXTtcbiAgdmFyIHNsaWRlc0dyaWQgPSBbXTtcbiAgdmFyIHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICB2YXIgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcblxuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgdmFyIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuXG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cblxuICB2YXIgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIHZhciBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGggPSBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGg7XG4gIHZhciBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICB2YXIgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gIHZhciBwcmV2U2xpZGVTaXplID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcblxuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyU2l6ZTtcbiAgfVxuXG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47IC8vIHJlc2V0IG1hcmdpbnNcblxuICBpZiAocnRsKSBzbGlkZXMuY3NzKHtcbiAgICBtYXJnaW5MZWZ0OiAnJyxcbiAgICBtYXJnaW5Cb3R0b206ICcnLFxuICAgIG1hcmdpblRvcDogJydcbiAgfSk7ZWxzZSBzbGlkZXMuY3NzKHtcbiAgICBtYXJnaW5SaWdodDogJycsXG4gICAgbWFyZ2luQm90dG9tOiAnJyxcbiAgICBtYXJnaW5Ub3A6ICcnXG4gIH0pO1xuICB2YXIgc2xpZGVzTnVtYmVyRXZlblRvUm93cztcblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSA9PT0gc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXNMZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHBhcmFtcy5zbGlkZXNQZXJWaWV3ICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbik7XG4gICAgfVxuICB9IC8vIENhbGMgc2xpZGVzXG5cblxuICB2YXIgc2xpZGVTaXplO1xuICB2YXIgc2xpZGVzUGVyQ29sdW1uID0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgdmFyIHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gIHZhciBudW1GdWxsQ29sdW1ucyA9IE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbik7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgdmFyIHNsaWRlID0gc2xpZGVzLmVxKGkpO1xuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAvLyBTZXQgc2xpZGVzIG9yZGVyXG4gICAgICB2YXIgbmV3U2xpZGVPcmRlckluZGV4ID0gdm9pZCAwO1xuICAgICAgdmFyIGNvbHVtbiA9IHZvaWQgMDtcbiAgICAgIHZhciByb3cgPSB2b2lkIDA7XG5cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ3JvdycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgICB2YXIgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSk7XG4gICAgICAgIHZhciBzbGlkZUluZGV4SW5Hcm91cCA9IGkgLSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uICogcGFyYW1zLnNsaWRlc1Blckdyb3VwICogZ3JvdXBJbmRleDtcbiAgICAgICAgdmFyIGNvbHVtbnNJbkdyb3VwID0gZ3JvdXBJbmRleCA9PT0gMCA/IHBhcmFtcy5zbGlkZXNQZXJHcm91cCA6IE1hdGgubWluKE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gZ3JvdXBJbmRleCAqIHNsaWRlc1BlckNvbHVtbiAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cCkgLyBzbGlkZXNQZXJDb2x1bW4pLCBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgICByb3cgPSBNYXRoLmZsb29yKHNsaWRlSW5kZXhJbkdyb3VwIC8gY29sdW1uc0luR3JvdXApO1xuICAgICAgICBjb2x1bW4gPSBzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwICsgZ3JvdXBJbmRleCAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgcm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHNsaWRlc1BlckNvbHVtbjtcbiAgICAgICAgc2xpZGUuY3NzKHtcbiAgICAgICAgICAnLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAnLW1vei1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAnLW1zLWZsZXgtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgb3JkZXI6IG5ld1NsaWRlT3JkZXJJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgIHJvdyA9IGkgLSBjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW47XG5cbiAgICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSBzbGlkZXNQZXJDb2x1bW4gLSAxKSB7XG4gICAgICAgICAgcm93ICs9IDE7XG5cbiAgICAgICAgICBpZiAocm93ID49IHNsaWRlc1BlckNvbHVtbikge1xuICAgICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICAgIGNvbHVtbiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTtcbiAgICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHNsaWRlc1BlclJvdztcbiAgICAgIH1cblxuICAgICAgc2xpZGUuY3NzKGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW4tdG9wJyksIHJvdyAhPT0gMCA/IHBhcmFtcy5zcGFjZUJldHdlZW4gJiYgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIiA6ICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2xpZGUuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICB2YXIgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdKTtcbiAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgdmFyIGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG5cbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZS5vdXRlcldpZHRoKHRydWUpIDogc2xpZGUub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgdmFyIHdpZHRoID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3dpZHRoJyk7XG4gICAgICAgIHZhciBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgdmFyIHBhZGRpbmdSaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIHZhciBtYXJnaW5MZWZ0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ21hcmdpbi1sZWZ0Jyk7XG4gICAgICAgIHZhciBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgdmFyIGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcblxuICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9zbGlkZSQgPSBzbGlkZVswXSxcbiAgICAgICAgICAgICAgY2xpZW50V2lkdGggPSBfc2xpZGUkLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICBvZmZzZXRXaWR0aCA9IF9zbGlkZSQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcblxuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gc2xpZGVTaXplICsgXCJweFwiO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuXG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIGluZGV4ICs9IDE7XG4gIH1cblxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIHZhciBuZXdTbGlkZXNHcmlkO1xuXG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgd2lkdGg6IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCJcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICB2YXIgXyR3cmFwcGVyRWwkY3NzO1xuXG4gICAgJHdyYXBwZXJFbC5jc3MoKF8kd3JhcHBlckVsJGNzcyA9IHt9LCBfJHdyYXBwZXJFbCRjc3NbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbiArIFwicHhcIiwgXyR3cmFwcGVyRWwkY3NzKSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICB2YXIgXyR3cmFwcGVyRWwkY3NzMjtcblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IChzbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5jZWlsKHN3aXBlci52aXJ0dWFsU2l6ZSAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIC0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAkd3JhcHBlckVsLmNzcygoXyR3cmFwcGVyRWwkY3NzMiA9IHt9LCBfJHdyYXBwZXJFbCRjc3MyW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4gKyBcInB4XCIsIF8kd3JhcHBlckVsJGNzczIpKTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcblxuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNuYXBHcmlkLmxlbmd0aDsgX2kgKz0gMSkge1xuICAgICAgICB2YXIgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtfaV07XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgICBpZiAoc25hcEdyaWRbX2ldIDwgc3dpcGVyLnZpcnR1YWxTaXplICsgc25hcEdyaWRbMF0pIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG5cbiAgICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcblxuXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc25hcEdyaWQubGVuZ3RoOyBfaTIgKz0gMSkge1xuICAgICAgdmFyIF9zbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW19pMl07XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgX3NsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihfc2xpZGVzR3JpZEl0ZW0pO1xuXG4gICAgICBpZiAoc25hcEdyaWRbX2kyXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChfc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcblxuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgdmFyIF9zbGlkZXMkZmlsdGVyJGNzcztcblxuICAgIHZhciBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpblJpZ2h0Jyk7XG4gICAgc2xpZGVzLmZpbHRlcihmdW5jdGlvbiAoXywgc2xpZGVJbmRleCkge1xuICAgICAgaWYgKCFwYXJhbXMuY3NzTW9kZSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmNzcygoX3NsaWRlcyRmaWx0ZXIkY3NzID0ge30sIF9zbGlkZXMkZmlsdGVyJGNzc1trZXldID0gc3BhY2VCZXR3ZWVuICsgXCJweFwiLCBfc2xpZGVzJGZpbHRlciRjc3MpKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgdmFyIGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZVNpemVWYWx1ZSkge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICB2YXIgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICBpZiAoc25hcCA8IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIHZhciBfYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlU2l6ZVZhbHVlKSB7XG4gICAgICBfYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIF9hbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG5cbiAgICBpZiAoX2FsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICB2YXIgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBfYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCwgc25hcEluZGV4KSB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXAsIHNuYXBJbmRleCkge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHNsaWRlczogc2xpZGVzLFxuICAgIHNuYXBHcmlkOiBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkOiBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZDogc2xpZGVzU2l6ZXNHcmlkXG4gIH0pO1xuXG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cblxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cblxuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQoc3BlZWQpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICB2YXIgbmV3SGVpZ2h0ID0gMDtcbiAgdmFyIGk7XG5cbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuXG4gIHZhciBnZXRTbGlkZUJ5SW5kZXggPSBmdW5jdGlvbiBnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpIHtcbiAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlcy5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA9PT0gaW5kZXg7XG4gICAgICB9KVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlcy5lcShpbmRleClbMF07XG4gIH07IC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG5cblxuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggJiYgIWlzVmlydHVhbCkgYnJlYWs7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChpbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoc3dpcGVyLmFjdGl2ZUluZGV4KSk7XG4gIH0gLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG5cblxuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH0gLy8gVXBkYXRlIEhlaWdodFxuXG5cbiAgaWYgKG5ld0hlaWdodCkgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdoZWlnaHQnLCBuZXdIZWlnaHQgKyBcInB4XCIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDA7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIHZhciBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7IC8vIFZpc2libGUgU2xpZGVzXG5cbiAgc2xpZGVzLnJlbW92ZUNsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIHZhciBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcblxuICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5IHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgdmFyIHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCk7XG4gICAgICB2YXIgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIHZhciBpc1Zpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxIHx8IHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUgfHwgc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplO1xuXG4gICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gIH1cblxuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICQoc3dpcGVyLnZpc2libGVTbGlkZXMpO1xufSIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuXG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICB2YXIgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIHZhciBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcyxcbiAgICAgIGlzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nLFxuICAgICAgaXNFbmQgPSBzd2lwZXIuaXNFbmQ7XG4gIHZhciB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgdmFyIHdhc0VuZCA9IGlzRW5kO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBwcm9ncmVzcyA+PSAxO1xuICB9XG5cbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZzogaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQ6IGlzRW5kXG4gIH0pO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG5cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cblxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4LFxuICAgICAgcmVhbEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyArIFwiIFwiICsgcGFyYW1zLnNsaWRlTmV4dENsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzICsgXCIgXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gIHZhciBhY3RpdmVTbGlkZTtcblxuICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBhY3RpdmVJbmRleCArIFwiXFxcIl1cIik7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuICB9IC8vIEFjdGl2ZSBjbGFzc2VzXG5cblxuICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIi5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICB9IC8vIE5leHQgU2xpZGVcblxuXG4gIHZhciBuZXh0U2xpZGUgPSBhY3RpdmVTbGlkZS5uZXh0QWxsKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wICYmIG5leHRTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZXEoMCk7XG4gICAgbmV4dFNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gIH0gLy8gUHJldiBTbGlkZVxuXG5cbiAgdmFyIHByZXZTbGlkZSA9IGFjdGl2ZVNsaWRlLnByZXZBbGwoXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcykuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3AgJiYgcHJldlNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHByZXZTbGlkZSA9IHNsaWRlcy5lcSgtMSk7XG4gICAgcHJldlNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICBpZiAobmV4dFNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCI6bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MgKyBcIi5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgbmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKyBcIlxcXCJdXCIpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiOm5vdCguXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSArIFwiXFxcIl1cIikuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICsgXCJcXFwiXVwiKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufSIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4KG5ld0FjdGl2ZUluZGV4KSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgdmFyIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBwcmV2aW91c1JlYWxJbmRleCA9IHN3aXBlci5yZWFsSW5kZXgsXG4gICAgICBwcmV2aW91c1NuYXBJbmRleCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gIHZhciBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICB2YXIgc25hcEluZGV4O1xuXG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9IC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG5cblxuICAgIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBza2lwID0gTWF0aC5taW4ocGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgYWN0aXZlSW5kZXgpO1xuICAgIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChhY3RpdmVJbmRleCAtIHNraXApIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgfVxuXG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuXG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSAvLyBHZXQgcmVhbCBpbmRleFxuXG5cbiAgdmFyIHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5zbGlkZXMuZXEoYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgfHwgYWN0aXZlSW5kZXgsIDEwKTtcbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHNuYXBJbmRleDogc25hcEluZGV4LFxuICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXg6IHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXg6IGFjdGl2ZUluZGV4XG4gIH0pO1xuICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuXG4gIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59IiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgdmFyIHNsaWRlID0gJChlLnRhcmdldCkuY2xvc2VzdChcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKVswXTtcbiAgdmFyIHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgdmFyIHNsaWRlSW5kZXg7XG5cbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcblxuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KCQoc2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn0iLCJpbXBvcnQgc2xpZGVUbyBmcm9tICcuL3NsaWRlVG8nO1xuaW1wb3J0IHNsaWRlVG9Mb29wIGZyb20gJy4vc2xpZGVUb0xvb3AnO1xuaW1wb3J0IHNsaWRlTmV4dCBmcm9tICcuL3NsaWRlTmV4dCc7XG5pbXBvcnQgc2xpZGVQcmV2IGZyb20gJy4vc2xpZGVQcmV2JztcbmltcG9ydCBzbGlkZVJlc2V0IGZyb20gJy4vc2xpZGVSZXNldCc7XG5pbXBvcnQgc2xpZGVUb0Nsb3Nlc3QgZnJvbSAnLi9zbGlkZVRvQ2xvc2VzdCc7XG5pbXBvcnQgc2xpZGVUb0NsaWNrZWRTbGlkZSBmcm9tICcuL3NsaWRlVG9DbGlja2VkU2xpZGUnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzbGlkZVRvOiBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcDogc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dDogc2xpZGVOZXh0LFxuICBzbGlkZVByZXY6IHNsaWRlUHJldixcbiAgc2xpZGVSZXNldDogc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3Q6IHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCBpbml0aWFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInICYmIHR5cGVvZiBpbmRleCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgJ2luZGV4JyBhcmd1bWVudCBjYW5ub3QgaGF2ZSB0eXBlIG90aGVyIHRoYW4gJ251bWJlcicgb3IgJ3N0cmluZycuIFtcIiArIHR5cGVvZiBpbmRleCArIFwiXSBnaXZlbi5cIik7XG4gIH1cblxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIC8qKlxuICAgICAqIFRoZSBgaW5kZXhgIGFyZ3VtZW50IGNvbnZlcnRlZCBmcm9tIGBzdHJpbmdgIHRvIGBudW1iZXJgLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdmFyIGluZGV4QXNOdW1iZXIgPSBwYXJzZUludChpbmRleCwgMTApO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYGluZGV4YCBhcmd1bWVudCBpcyBhIHZhbGlkIGBudW1iZXJgXG4gICAgICogYWZ0ZXIgYmVpbmcgY29udmVydGVkIGZyb20gdGhlIGBzdHJpbmdgIHR5cGUuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG5cbiAgICB2YXIgaXNWYWxpZE51bWJlciA9IGlzRmluaXRlKGluZGV4QXNOdW1iZXIpO1xuXG4gICAgaWYgKCFpc1ZhbGlkTnVtYmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcGFzc2VkLWluICdpbmRleCcgKHN0cmluZykgY291bGRuJ3QgYmUgY29udmVydGVkIHRvICdudW1iZXInLiBbXCIgKyBpbmRleCArIFwiXSBnaXZlbi5cIik7XG4gICAgfSAvLyBLbm93aW5nIHRoYXQgdGhlIGNvbnZlcnRlZCBgaW5kZXhgIGlzIGEgdmFsaWQgbnVtYmVyLFxuICAgIC8vIHdlIGNhbiB1cGRhdGUgdGhlIG9yaWdpbmFsIGFyZ3VtZW50J3MgdmFsdWUuXG5cblxuICAgIGluZGV4ID0gaW5kZXhBc051bWJlcjtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4LFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICB2YXIgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcblxuICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICB2YXIgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpOyAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuXG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSAtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApO1xuICAgICAgdmFyIG5vcm1hbGl6ZWRHaXJkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgIHZhciBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcblxuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdpcmQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCAtIChub3JtYWxpemVkR3JpZE5leHQgLSBub3JtYWxpemVkR2lyZCkgLyAyKSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR2lyZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0KSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdpcmQpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JzsgLy8gVXBkYXRlIEluZGV4XG5cbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpOyAvLyBVcGRhdGUgSGVpZ2h0XG5cbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICB2YXIgdCA9IC10cmFuc2xhdGU7XG5cbiAgICBpZiAocnRsKSB7XG4gICAgICB0ID0gd3JhcHBlckVsLnNjcm9sbFdpZHRoIC0gd3JhcHBlckVsLm9mZnNldFdpZHRoIC0gdDtcbiAgICB9XG5cbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh3cmFwcGVyRWwuc2Nyb2xsVG8pIHtcbiAgICAgICAgdmFyIF93cmFwcGVyRWwkc2Nyb2xsVG87XG5cbiAgICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKChfd3JhcHBlckVsJHNjcm9sbFRvID0ge30sIF93cmFwcGVyRWwkc2Nyb2xsVG9baXNIID8gJ2xlZnQnIDogJ3RvcCddID0gdCwgX3dyYXBwZXJFbCRzY3JvbGxUby5iZWhhdmlvciA9ICdzbW9vdGgnLCBfd3JhcHBlckVsJHNjcm9sbFRvKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcblxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuXG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIG5ld0luZGV4ID0gaW5kZXg7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIG5ld0luZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlTmV4dChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgYW5pbWF0aW5nID0gc3dpcGVyLmFuaW1hdGluZyxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICB2YXIgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmcsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZCxcbiAgICAgIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgIHJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgfVxuXG4gIHZhciB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuXG4gIHZhciBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIHZhciBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiBub3JtYWxpemUodmFsKTtcbiAgfSk7XG4gIHZhciBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG5cbiAgaWYgKHR5cGVvZiBwcmV2U25hcCA9PT0gJ3VuZGVmaW5lZCcgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzbmFwR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwKSB7XG4gICAgICBpZiAoIXByZXZTbmFwICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkgcHJldlNuYXAgPSBzbmFwO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHByZXZJbmRleDtcblxuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVJlc2V0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuXG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cblxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyZXNob2xkID0gMC41O1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgdmFyIHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpO1xuICB2YXIgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgaWYgKHRyYW5zbGF0ZSA+PSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XSkge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlXG4gICAgLy8gaXMgYmV0d2VlbiB0aGUgY3VycmVudCBpbmRleCBhbmQgdGhlIG9uZSBhZnRlciBpdC5cbiAgICB2YXIgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICB2YXIgbmV4dFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4ICsgMV07XG5cbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIHZhciBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICB2YXIgX2N1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG5cbiAgICBpZiAodHJhbnNsYXRlIC0gcHJldlNuYXAgPD0gKF9jdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cblxuICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMSk7XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBuZXh0VGljayB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgdmFyIHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgdmFyIHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIHZhciByZWFsSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHJldHVybjtcbiAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcblxuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXTpub3QoLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MgKyBcIilcIikuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzICsgXCIpXCIpLmVxKDApLmluZGV4KCk7XG4gICAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufSIsImltcG9ydCBsb29wQ3JlYXRlIGZyb20gJy4vbG9vcENyZWF0ZSc7XG5pbXBvcnQgbG9vcEZpeCBmcm9tICcuL2xvb3BGaXgnO1xuaW1wb3J0IGxvb3BEZXN0cm95IGZyb20gJy4vbG9vcERlc3Ryb3knO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb29wQ3JlYXRlOiBsb29wQ3JlYXRlLFxuICBsb29wRml4OiBsb29wRml4LFxuICBsb29wRGVzdHJveTogbG9vcERlc3Ryb3lcbn07IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wQ3JlYXRlKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7IC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlc1xuXG4gICR3cmFwcGVyRWwuY2hpbGRyZW4oXCIuXCIgKyBwYXJhbXMuc2xpZGVDbGFzcyArIFwiLlwiICsgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpLnJlbW92ZSgpO1xuICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzKTtcblxuICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICB2YXIgYmxhbmtTbGlkZXNOdW0gPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgLSBzbGlkZXMubGVuZ3RoICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICB2YXIgYmxhbmtOb2RlID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpO1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuXG4gICAgICBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5sb29wZWRTbGlkZXMgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuXG4gIGlmIChzd2lwZXIubG9vcGVkU2xpZGVzID4gc2xpZGVzLmxlbmd0aCkge1xuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICB9XG5cbiAgdmFyIHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgdmFyIGFwcGVuZFNsaWRlcyA9IFtdO1xuICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgdmFyIHNsaWRlID0gJChlbCk7XG5cbiAgICBpZiAoaW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICBhcHBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgc2xpZGVzLmxlbmd0aCAmJiBpbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcykge1xuICAgICAgcHJlcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICB9XG5cbiAgICBzbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFwcGVuZFNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tfaV0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kyID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBfaTIgPj0gMDsgX2kyIC09IDEpIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW19pMl0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcEZpeCgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICBsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzLFxuICAgICAgYWxsb3dTbGlkZVByZXYgPSBzd2lwZXIuYWxsb3dTbGlkZVByZXYsXG4gICAgICBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgdmFyIG5ld0luZGV4O1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICB2YXIgc25hcFRyYW5zbGF0ZSA9IC1zbmFwR3JpZFthY3RpdmVJbmRleF07XG4gIHZhciBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTsgLy8gRml4IEZvciBOZWdhdGl2ZSBPdmVyc2xpZGluZ1xuXG4gIGlmIChhY3RpdmVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgIG5ld0luZGV4ID0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcyAqIDMgKyBhY3RpdmVJbmRleDtcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgdmFyIHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYWN0aXZlSW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcykge1xuICAgIC8vIEZpeCBGb3IgUG9zaXRpdmUgT3ZlcnNsaWRpbmdcbiAgICBuZXdJbmRleCA9IC1zbGlkZXMubGVuZ3RoICsgYWN0aXZlSW5kZXggKyBsb29wZWRTbGlkZXM7XG4gICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuXG4gICAgdmFyIF9zbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuXG4gICAgaWYgKF9zbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWwsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihcIi5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcyArIFwiLC5cIiArIHBhcmFtcy5zbGlkZUNsYXNzICsgXCIuXCIgKyBwYXJhbXMuc2xpZGVCbGFua0NsYXNzKS5yZW1vdmUoKTtcbiAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgbm93IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnOyAvLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcblxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gX19jbG9zZXN0RnJvbShlbCkge1xuICAgIGlmICghZWwgfHwgZWwgPT09IGdldERvY3VtZW50KCkgfHwgZWwgPT09IGdldFdpbmRvdygpKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoZWwuYXNzaWduZWRTbG90KSBlbCA9IGVsLmFzc2lnbmVkU2xvdDtcbiAgICB2YXIgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG5cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzLFxuICAgICAgZW5hYmxlZCA9IHN3aXBlci5lbmFibGVkO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcblxuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgdmFyICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuXG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghJHRhcmdldEVsLmNsb3Nlc3Qoc3dpcGVyLndyYXBwZXJFbCkubGVuZ3RoKSByZXR1cm47XG4gIH1cblxuICBkYXRhLmlzVG91Y2hFdmVudCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHJldHVybjtcbiAgaWYgKGRhdGEuaXNUb3VjaGVkICYmIGRhdGEuaXNNb3ZlZCkgcmV0dXJuOyAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbnRcblxuICB2YXIgc3dpcGluZ0NsYXNzSGFzVmFsdWUgPSAhIXBhcmFtcy5ub1N3aXBpbmdDbGFzcyAmJiBwYXJhbXMubm9Td2lwaW5nQ2xhc3MgIT09ICcnO1xuXG4gIGlmIChzd2lwaW5nQ2xhc3NIYXNWYWx1ZSAmJiBlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290ICYmIGV2ZW50LnBhdGggJiYgZXZlbnQucGF0aFswXSkge1xuICAgICR0YXJnZXRFbCA9ICQoZXZlbnQucGF0aFswXSk7XG4gIH1cblxuICB2YXIgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBcIi5cIiArIHBhcmFtcy5ub1N3aXBpbmdDbGFzcztcbiAgdmFyIGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7IC8vIHVzZSBjbG9zZXN0RWxlbWVudCBmb3Igc2hhZG93IHJvb3QgZWxlbWVudCB0byBnZXQgdGhlIGFjdHVhbCBjbG9zZXN0IGZvciBuZXN0ZWQgc2hhZG93IHJvb3QgZWxlbWVudFxuXG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCBlLnRhcmdldCkgOiAkdGFyZ2V0RWwuY2xvc2VzdChub1N3aXBpbmdTZWxlY3RvcilbMF0pKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuO1xuICB9XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgdmFyIHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIHZhciBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZOyAvLyBEbyBOT1Qgc3RhcnQgaWYgaU9TIGVkZ2Ugc3dpcGUgaXMgZGV0ZWN0ZWQuIE90aGVyd2lzZSBpT1MgYXBwIGNhbm5vdCBzd2lwZS10by1nby1iYWNrIGFueW1vcmVcblxuICB2YXIgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICB2YXIgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuXG4gIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5pbm5lcldpZHRoIC0gZWRnZVN3aXBlVGhyZXNob2xkKSkge1xuICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gPT09ICdwcmV2ZW50Jykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGV4dGVuZChkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcblxuICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICB2YXIgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgIGlmICgkdGFyZ2V0RWwuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09ICR0YXJnZXRFbFswXSkge1xuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG5cbiAgICBpZiAoKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkgJiYgISR0YXJnZXRFbFswXS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIGVuYWJsZWQgPSBzd2lwZXIuZW5hYmxlZDtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHZhciBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG5cbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBlLnR5cGUgIT09ICd0b3VjaG1vdmUnKSByZXR1cm47XG4gIHZhciB0YXJnZXRUb3VjaCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzICYmIChlLnRhcmdldFRvdWNoZXNbMF0gfHwgZS5jaGFuZ2VkVG91Y2hlc1swXSk7XG4gIHZhciBwYWdlWCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWCA6IGUucGFnZVg7XG4gIHZhciBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWSA6IGUucGFnZVk7XG5cbiAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gcGFnZVk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICAvLyBpc01vdmVkID0gdHJ1ZTtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuXG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBleHRlbmQodG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cblxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICB2YXIgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIHZhciBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydChNYXRoLnBvdyhkaWZmWCwgMikgKyBNYXRoLnBvdyhkaWZmWSwgMikpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcblxuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHRvdWNoQW5nbGU7XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRhdGEuc3RhcnRNb3ZpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcblxuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cblxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG5cbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwudHJpZ2dlcignd2Via2l0VHJhbnNpdGlvbkVuZCB0cmFuc2l0aW9uZW5kJyk7XG4gICAgfVxuXG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7IC8vIEdyYWIgQ3Vyc29yXG5cbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpO1xuICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICB2YXIgZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGRpZmZYIDogZGlmZlk7XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB2YXIgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIHZhciByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuXG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cblxuICBpZiAoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArIE1hdGgucG93KC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZiwgcmVzaXN0YW5jZVJhdGlvKTtcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gTWF0aC5wb3coc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYsIHJlc2lzdGFuY2VSYXRpbyk7XG4gIH1cblxuICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICB9IC8vIERpcmVjdGlvbnMgbG9ja3NcblxuXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAhc3dpcGVyLmFsbG93U2xpZGVOZXh0KSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfSAvLyBUaHJlc2hvbGRcblxuXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47IC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAvLyBWZWxvY2l0eVxuICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICB0aW1lOiBkYXRhLnRvdWNoU3RhcnRUaW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnY3VycmVudFgnIDogJ2N1cnJlbnRZJ10sXG4gICAgICB0aW1lOiBub3coKVxuICAgIH0pO1xuICB9IC8vIFVwZGF0ZSBwcm9ncmVzc1xuXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7IC8vIFVwZGF0ZSB0cmFuc2xhdGVcblxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59IiwiaW1wb3J0IHsgbm93LCBuZXh0VGljayB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB0b3VjaGVzID0gc3dpcGVyLnRvdWNoZXMsXG4gICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICB2YXIgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuXG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hFbmQnLCBlKTtcbiAgfVxuXG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuXG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuXG4gICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfSAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcblxuXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9IC8vIFRpbWUgZGlmZlxuXG5cbiAgdmFyIHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICB2YXIgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lOyAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcblxuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKGUpO1xuICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcblxuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cblxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBub3coKTtcbiAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgdmFyIGN1cnJlbnRQb3M7XG5cbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFBvcyA+IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA8IHNuYXBHcmlkLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW0pIHtcbiAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgbGFzdE1vdmVFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgdmFyIHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IGxhc3RNb3ZlRXZlbnQucG9zaXRpb24gLSB2ZWxvY2l0eUV2ZW50LnBvc2l0aW9uO1xuICAgICAgICB2YXIgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcblxuICAgICAgICBpZiAoTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSA8IHBhcmFtcy5mcmVlTW9kZU1pbmltdW1WZWxvY2l0eSkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH0gLy8gdGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYSBmaW5nZXIgdGhlbiByZWxlYXNlZC5cbiAgICAgICAgLy8gVGhlcmUgd291bGQgYmUgbm8gZXZlbnRzIHdpdGggZGlzdGFuY2UgemVybywgc28gdGhlIGxhc3QgZXZlbnQgaXMgc3RhbGUuXG5cblxuICAgICAgICBpZiAodGltZSA+IDE1MCB8fCBub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSA+IDMwMCkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci52ZWxvY2l0eSAqPSBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW87XG4gICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW87XG4gICAgICB2YXIgbW9tZW50dW1EaXN0YW5jZSA9IHN3aXBlci52ZWxvY2l0eSAqIG1vbWVudHVtRHVyYXRpb247XG4gICAgICB2YXIgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgdmFyIGRvQm91bmNlID0gZmFsc2U7XG4gICAgICB2YXIgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIHZhciBib3VuY2VBbW91bnQgPSBNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpICogMjAgKiBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvO1xuICAgICAgdmFyIG5lZWRzTG9vcEZpeDtcblxuICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gLSBzd2lwZXIubWluVHJhbnNsYXRlKCkgPiBib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgdmFyIG5leHRTbGlkZTtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNuYXBHcmlkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBqO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZV0gLSBuZXdQb3NpdGlvbikgPCBNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXSAtIG5ld1Bvc2l0aW9uKSB8fCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZSAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkc0xvb3BGaXgpIHtcbiAgICAgICAgc3dpcGVyLm9uY2UoJ3RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIEZpeCBkdXJhdGlvblxuXG5cbiAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygoLW5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgLy8gSWYgZnJlZU1vZGVTdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHlcbiAgICAgICAgICAvLyBldmVudCwgdGhlbiBkdXJhdGlvbnMgY2FuIGJlIDIwKyBzZWNvbmRzIHRvIHNsaWRlIG9uZSAob3IgemVybyEpIHNsaWRlcy5cbiAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZVxuICAgICAgICAgIC8vIG5pY2Ugc2lkZSBlZmZlY3Qgb2YgbWF0Y2hpbmcgc2xpZGUgc3BlZWQgaWYgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYmVmb3JlXG4gICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuXG4gICAgICAgICAgdmFyIG1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKChydGwgPyAtbmV3UG9zaXRpb24gOiBuZXdQb3NpdGlvbikgLSBzd2lwZXIudHJhbnNsYXRlKTtcbiAgICAgICAgICB2YXIgY3VycmVudFNsaWRlU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4XTtcblxuICAgICAgICAgIGlmIChtb3ZlRGlzdGFuY2UgPCBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW92ZURpc3RhbmNlIDwgMiAqIGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAxLjU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAyLjU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci52ZWxvY2l0eSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcblxuICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScpO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmZyZWVNb2RlTW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9IC8vIEZpbmQgY3VycmVudCBzbGlkZVxuXG5cbiAgdmFyIHN0b3BJbmRleCA9IDA7XG4gIHZhciBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgdmFyIF9pbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuXG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBfaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIF9pbmNyZW1lbnRdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcblxuXG4gIHZhciByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgdmFyIGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO2Vsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG5cbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47IC8vIEJyZWFrcG9pbnRzXG5cbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH0gLy8gU2F2ZSBsb2Nrc1xuXG5cbiAgdmFyIGFsbG93U2xpZGVOZXh0ID0gc3dpcGVyLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXYgPSBzd2lwZXIuYWxsb3dTbGlkZVByZXYsXG4gICAgICBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDsgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcblxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgfSAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG5cblxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG5cbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuXG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbCxcbiAgICAgIHJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUsXG4gICAgICBlbmFibGVkID0gc3dpcGVyLmVuYWJsZWQ7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuXG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICBpZiAocnRsVHJhbnNsYXRlKSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gd3JhcHBlckVsLnNjcm9sbFdpZHRoIC0gd3JhcHBlckVsLm9mZnNldFdpZHRoIC0gd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAtMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB2YXIgbmV3UHJvZ3Jlc3M7XG4gIHZhciB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcblxuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuXG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgb25Ub3VjaFN0YXJ0IGZyb20gJy4vb25Ub3VjaFN0YXJ0JztcbmltcG9ydCBvblRvdWNoTW92ZSBmcm9tICcuL29uVG91Y2hNb3ZlJztcbmltcG9ydCBvblRvdWNoRW5kIGZyb20gJy4vb25Ub3VjaEVuZCc7XG5pbXBvcnQgb25SZXNpemUgZnJvbSAnLi9vblJlc2l6ZSc7XG5pbXBvcnQgb25DbGljayBmcm9tICcuL29uQ2xpY2snO1xuaW1wb3J0IG9uU2Nyb2xsIGZyb20gJy4vb25TY3JvbGwnO1xudmFyIGR1bW15RXZlbnRBdHRhY2hlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBkdW1teUV2ZW50TGlzdGVuZXIoKSB7fVxuXG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoRXZlbnRzID0gc3dpcGVyLnRvdWNoRXZlbnRzLFxuICAgICAgZWwgPSBzd2lwZXIuZWwsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cblxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDsgLy8gVG91Y2ggRXZlbnRzXG5cbiAgaWYgKCFzdXBwb3J0LnRvdWNoICYmIHN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSA6IGZhbHNlO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgIGNhcHR1cmU6IGNhcHR1cmVcbiAgICAgIH0gOiBjYXB0dXJlKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIGlmICghZHVtbXlFdmVudEF0dGFjaGVkKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBkdW1teUV2ZW50TGlzdGVuZXIpO1xuICAgICAgICBkdW1teUV2ZW50QXR0YWNoZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhZGV2aWNlLmlvcyAmJiAhZGV2aWNlLmFuZHJvaWQgfHwgcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIXN1cHBvcnQudG91Y2ggJiYgZGV2aWNlLmlvcykge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfSAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuXG5cbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9IC8vIFJlc2l6ZSBoYW5kbGVyXG5cblxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyLm9uKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLm9uKCdvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHRvdWNoRXZlbnRzID0gc3dpcGVyLnRvdWNoRXZlbnRzLFxuICAgICAgZWwgPSBzd2lwZXIuZWwsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgdmFyIGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7IC8vIFRvdWNoIEV2ZW50c1xuXG4gIGlmICghc3VwcG9ydC50b3VjaCAmJiBzdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdXBwb3J0LnRvdWNoKSB7XG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICdvblRvdWNoU3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgICBjYXB0dXJlOiBmYWxzZVxuICAgICAgfSA6IGZhbHNlO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcblxuICAgICAgaWYgKHRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFkZXZpY2UuaW9zICYmICFkZXZpY2UuYW5kcm9pZCB8fCBwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhc3VwcG9ydC50b3VjaCAmJiBkZXZpY2UuaW9zKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9IC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG5cblxuICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH0gLy8gUmVzaXplIGhhbmRsZXJcblxuXG4gIHN3aXBlci5vZmYoZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhdHRhY2hFdmVudHM6IGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzOiBkZXRhY2hFdmVudHNcbn07IiwiaW1wb3J0IGFkZENsYXNzZXMgZnJvbSAnLi9hZGRDbGFzc2VzJztcbmltcG9ydCByZW1vdmVDbGFzc2VzIGZyb20gJy4vcmVtb3ZlQ2xhc3Nlcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGFkZENsYXNzZXM6IGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXM6IHJlbW92ZUNsYXNzZXNcbn07IiwiZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZW50cmllcywgcHJlZml4KSB7XG4gIHZhciByZXN1bHRDbGFzc2VzID0gW107XG4gIGVudHJpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZXMpIHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIHJ0bCA9IHN3aXBlci5ydGwsXG4gICAgICAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgZGV2aWNlID0gc3dpcGVyLmRldmljZSxcbiAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDsgLy8gcHJldHRpZXItaWdub3JlXG5cbiAgdmFyIHN1ZmZpeGVzID0gcHJlcGFyZUNsYXNzZXMoWydpbml0aWFsaXplZCcsIHBhcmFtcy5kaXJlY3Rpb24sIHtcbiAgICAncG9pbnRlci1ldmVudHMnOiBzdXBwb3J0LnBvaW50ZXJFdmVudHMgJiYgIXN1cHBvcnQudG91Y2hcbiAgfSwge1xuICAgICdmcmVlLW1vZGUnOiBwYXJhbXMuZnJlZU1vZGVcbiAgfSwge1xuICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHRcbiAgfSwge1xuICAgICdydGwnOiBydGxcbiAgfSwge1xuICAgICdtdWx0aXJvdyc6IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxXG4gIH0sIHtcbiAgICAnbXVsdGlyb3ctY29sdW1uJzogcGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nXG4gIH0sIHtcbiAgICAnYW5kcm9pZCc6IGRldmljZS5hbmRyb2lkXG4gIH0sIHtcbiAgICAnaW9zJzogZGV2aWNlLmlvc1xuICB9LCB7XG4gICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGVcbiAgfV0sIHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKTtcbiAgY2xhc3NOYW1lcy5wdXNoLmFwcGx5KGNsYXNzTmFtZXMsIHN1ZmZpeGVzKTtcbiAgJGVsLmFkZENsYXNzKFtdLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICRlbCA9IHN3aXBlci4kZWwsXG4gICAgICBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXM7XG4gICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgaW5pdDogdHJ1ZSxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnY29udGFpbmVyJyxcbiAgaW5pdGlhbFNsaWRlOiAwLFxuICBzcGVlZDogMzAwLFxuICBjc3NNb2RlOiBmYWxzZSxcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXG4gIHJlc2l6ZU9ic2VydmVyOiBmYWxzZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBlbmFibGVkOiB0cnVlLFxuICBmb2N1c2FibGVFbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBGcmVlIG1vZGVcbiAgZnJlZU1vZGU6IGZhbHNlLFxuICBmcmVlTW9kZU1vbWVudHVtOiB0cnVlLFxuICBmcmVlTW9kZU1vbWVudHVtUmF0aW86IDEsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2U6IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gIGZyZWVNb2RlU3RpY2t5OiBmYWxzZSxcbiAgZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHk6IDAuMDIsXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG4gIC8vIFNldCB3cmFwcGVyIHdpZHRoXG4gIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLFxuICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICBzbGlkZXNQZXJDb2x1bW5GaWxsOiAnY29sdW1uJyxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IGZhbHNlLFxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcbiAgLy8gVG91Y2hlc1xuICB0b3VjaFJhdGlvOiAxLFxuICB0b3VjaEFuZ2xlOiA0NSxcbiAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgc2hvcnRTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgZm9sbG93RmluZ2VyOiB0cnVlLFxuICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgdGhyZXNob2xkOiAwLFxuICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuICAvLyBSZXNpc3RhbmNlXG4gIHJlc2lzdGFuY2U6IHRydWUsXG4gIHJlc2lzdGFuY2VSYXRpbzogMC44NSxcbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogZmFsc2UsXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcbiAgLy8gQ2xpY2tzXG4gIHByZXZlbnRDbGlja3M6IHRydWUsXG4gIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gIC8vIEltYWdlc1xuICBwcmVsb2FkSW1hZ2VzOiB0cnVlLFxuICB1cGRhdGVPbkltYWdlc1JlYWR5OiB0cnVlLFxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcGVkU2xpZGVzOiBudWxsLFxuICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcbiAgbG9vcFByZXZlbnRzU2xpZGU6IHRydWUsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIC8vIE5TXG4gIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRHVwbGljYXRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlRHVwbGljYXRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1uZXh0JyxcbiAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gIHNsaWRlRHVwbGljYXRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5vdywgZGVsZXRlUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0IH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2V0LXN1cHBvcnQnO1xuaW1wb3J0IHsgZ2V0RGV2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2V0LWRldmljZSc7XG5pbXBvcnQgeyBnZXRCcm93c2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2V0LWJyb3dzZXInO1xuaW1wb3J0IFJlc2l6ZSBmcm9tICcuLi8uLi9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUnO1xuaW1wb3J0IE9ic2VydmVyIGZyb20gJy4uLy4uL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXInO1xuaW1wb3J0IG1vZHVsYXIgZnJvbSAnLi9tb2R1bGFyJztcbmltcG9ydCBldmVudHNFbWl0dGVyIGZyb20gJy4vZXZlbnRzLWVtaXR0ZXInO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICcuL3VwZGF0ZS9pbmRleCc7XG5pbXBvcnQgdHJhbnNsYXRlIGZyb20gJy4vdHJhbnNsYXRlL2luZGV4JztcbmltcG9ydCB0cmFuc2l0aW9uIGZyb20gJy4vdHJhbnNpdGlvbi9pbmRleCc7XG5pbXBvcnQgc2xpZGUgZnJvbSAnLi9zbGlkZS9pbmRleCc7XG5pbXBvcnQgbG9vcCBmcm9tICcuL2xvb3AvaW5kZXgnO1xuaW1wb3J0IGdyYWJDdXJzb3IgZnJvbSAnLi9ncmFiLWN1cnNvci9pbmRleCc7XG5pbXBvcnQgbWFuaXB1bGF0aW9uIGZyb20gJy4vbWFuaXB1bGF0aW9uL2luZGV4JztcbmltcG9ydCBldmVudHMgZnJvbSAnLi9ldmVudHMvaW5kZXgnO1xuaW1wb3J0IGJyZWFrcG9pbnRzIGZyb20gJy4vYnJlYWtwb2ludHMvaW5kZXgnO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9jbGFzc2VzL2luZGV4JztcbmltcG9ydCBpbWFnZXMgZnJvbSAnLi9pbWFnZXMvaW5kZXgnO1xuaW1wb3J0IGNoZWNrT3ZlcmZsb3cgZnJvbSAnLi9jaGVjay1vdmVyZmxvdy9pbmRleCc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cyc7XG52YXIgcHJvdG90eXBlcyA9IHtcbiAgbW9kdWxhcjogbW9kdWxhcixcbiAgZXZlbnRzRW1pdHRlcjogZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlOiB1cGRhdGUsXG4gIHRyYW5zbGF0ZTogdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICBzbGlkZTogc2xpZGUsXG4gIGxvb3A6IGxvb3AsXG4gIGdyYWJDdXJzb3I6IGdyYWJDdXJzb3IsXG4gIG1hbmlwdWxhdGlvbjogbWFuaXB1bGF0aW9uLFxuICBldmVudHM6IGV2ZW50cyxcbiAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93OiBjaGVja092ZXJmbG93LFxuICBjbGFzc2VzOiBjbGFzc2VzLFxuICBpbWFnZXM6IGltYWdlc1xufTtcbnZhciBleHRlbmRlZERlZmF1bHRzID0ge307XG5cbnZhciBTd2lwZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTd2lwZXIoKSB7XG4gICAgdmFyIGVsO1xuICAgIHZhciBwYXJhbXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3NbMF0pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCcpIHtcbiAgICAgIHBhcmFtcyA9IGFyZ3NbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsID0gYXJnc1swXTtcbiAgICAgIHBhcmFtcyA9IGFyZ3NbMV07XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG5cbiAgICBpZiAocGFyYW1zLmVsICYmICQocGFyYW1zLmVsKS5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgc3dpcGVycyA9IFtdO1xuICAgICAgJChwYXJhbXMuZWwpLmVhY2goZnVuY3Rpb24gKGNvbnRhaW5lckVsKSB7XG4gICAgICAgIHZhciBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH0gLy8gU3dpcGVyIEluc3RhbmNlXG5cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5tb2R1bGVzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgc3dpcGVyLm1vZHVsZXMgPSB7fTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgdmFyIG1vZHVsZSA9IHN3aXBlci5tb2R1bGVzW21vZHVsZU5hbWVdO1xuXG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICB2YXIgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMobW9kdWxlLnBhcmFtcylbMF07XG4gICAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGUucGFyYW1zW21vZHVsZVBhcmFtTmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHJldHVybjtcblxuICAgICAgICBpZiAoWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgICAgIGF1dG86IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCEobW9kdWxlUGFyYW1OYW1lIGluIHBhcmFtcyAmJiAnZW5hYmxlZCcgaW4gbW9kdWxlUGFyYW1zKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkpIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7IC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG5cbiAgICB2YXIgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cyk7XG4gICAgc3dpcGVyLnVzZVBhcmFtcyhzd2lwZXJQYXJhbXMpOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG5cbiAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpOyAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgc3dpcGVyLm9uKGV2ZW50TmFtZSwgc3dpcGVyLnBhcmFtcy5vbltldmVudE5hbWVdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9IC8vIFNhdmUgRG9tIGxpYlxuXG5cbiAgICBzd2lwZXIuJCA9ICQ7IC8vIEV4dGVuZCBTd2lwZXJcblxuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsOiBlbCxcbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgICAgLy8gU2xpZGVzXG4gICAgICBzbGlkZXM6ICQoKSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWw6IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbDogZnVuY3Rpb24gaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnO1xuICAgICAgfSxcbiAgICAgIC8vIEluZGV4ZXNcbiAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgcmVhbEluZGV4OiAwLFxuICAgICAgLy9cbiAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgaXNFbmQ6IGZhbHNlLFxuICAgICAgLy8gUHJvcHNcbiAgICAgIHRyYW5zbGF0ZTogMCxcbiAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAvLyBMb2Nrc1xuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgdG91Y2hFdmVudHM6IGZ1bmN0aW9uIHRvdWNoRXZlbnRzKCkge1xuICAgICAgICB2YXIgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ107XG4gICAgICAgIHZhciBkZXNrdG9wID0gWydtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnXTtcblxuICAgICAgICBpZiAoc3dpcGVyLnN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7XG4gICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgIGVuZDogdG91Y2hbMl0sXG4gICAgICAgICAgY2FuY2VsOiB0b3VjaFszXVxuICAgICAgICB9O1xuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgZW5kOiBkZXNrdG9wWzJdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgfSgpLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiB7XG4gICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCxcbiAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaFxuICAgICAgICBmb2N1c2FibGVFbGVtZW50czogc3dpcGVyLnBhcmFtcy5mb2N1c2FibGVFbGVtZW50cyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgdG91Y2hlczoge1xuICAgICAgICBzdGFydFg6IDAsXG4gICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgIGN1cnJlbnRZOiAwLFxuICAgICAgICBkaWZmOiAwXG4gICAgICB9LFxuICAgICAgLy8gSW1hZ2VzXG4gICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgaW1hZ2VzTG9hZGVkOiAwXG4gICAgfSk7IC8vIEluc3RhbGwgTW9kdWxlc1xuXG4gICAgc3dpcGVyLnVzZU1vZHVsZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpOyAvLyBJbml0XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICBzd2lwZXIuaW5pdCgpO1xuICAgIH0gLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuXG5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXBlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgfTtcblxuICBfcHJvdG8uZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gZmFsc2U7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2Rpc2FibGUnKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0UHJvZ3Jlc3MgPSBmdW5jdGlvbiBzZXRQcm9ncmVzcyhwcm9ncmVzcywgc3BlZWQpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgdmFyIG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICB2YXIgbWF4ID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgIHZhciBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfTtcblxuICBfcHJvdG8uZW1pdENvbnRhaW5lckNsYXNzZXMgPSBmdW5jdGlvbiBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICB2YXIgY2xhc3NlcyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXItY29udGFpbmVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbGFzc2VzLmpvaW4oJyAnKSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uIGdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07XG5cbiAgX3Byb3RvLmVtaXRTbGlkZXNDbGFzc2VzID0gZnVuY3Rpb24gZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgdmFyIHVwZGF0ZXMgPSBbXTtcbiAgICBzd2lwZXIuc2xpZGVzLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwpIHtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gc3dpcGVyLmdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKTtcbiAgICAgIHVwZGF0ZXMucHVzaCh7XG4gICAgICAgIHNsaWRlRWw6IHNsaWRlRWwsXG4gICAgICAgIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXNcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzJywgc2xpZGVFbCwgY2xhc3NOYW1lcyk7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzZXMnLCB1cGRhdGVzKTtcbiAgfTtcblxuICBfcHJvdG8uc2xpZGVzUGVyVmlld0R5bmFtaWMgPSBmdW5jdGlvbiBzbGlkZXNQZXJWaWV3RHluYW1pYygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgc2xpZGVzID0gc3dpcGVyLnNsaWRlcyxcbiAgICAgICAgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgICBzd2lwZXJTaXplID0gc3dpcGVyLnNpemUsXG4gICAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBzcHYgPSAxO1xuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgdmFyIHNsaWRlU2l6ZSA9IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgdmFyIGJyZWFrTG9vcDtcblxuICAgICAgZm9yICh2YXIgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfaSA9IGFjdGl2ZUluZGV4IC0gMTsgX2kgPj0gMDsgX2kgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW19pXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tfaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pMiA9IGFjdGl2ZUluZGV4ICsgMTsgX2kyIDwgc2xpZGVzLmxlbmd0aDsgX2kyICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc0dyaWRbX2kyXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwdjtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQsXG4gICAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7IC8vIEJyZWFrcG9pbnRzXG5cbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIHZhciBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNsYXRlZDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH07XG5cbiAgX3Byb3RvLmNoYW5nZURpcmVjdGlvbiA9IGZ1bmN0aW9uIGNoYW5nZURpcmVjdGlvbihuZXdEaXJlY3Rpb24sIG5lZWRVcGRhdGUpIHtcbiAgICBpZiAobmVlZFVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuXG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG5cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG5cbiAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKFwiXCIgKyBzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBjdXJyZW50RGlyZWN0aW9uKS5hZGRDbGFzcyhcIlwiICsgc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgbmV3RGlyZWN0aW9uKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9IG5ld0RpcmVjdGlvbjtcbiAgICBzd2lwZXIuc2xpZGVzLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwpIHtcbiAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9O1xuXG4gIF9wcm90by5tb3VudCA9IGZ1bmN0aW9uIG1vdW50KGVsKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5tb3VudGVkKSByZXR1cm4gdHJ1ZTsgLy8gRmluZCBlbFxuXG4gICAgdmFyICRlbCA9ICQoZWwgfHwgc3dpcGVyLnBhcmFtcy5lbCk7XG4gICAgZWwgPSAkZWxbMF07XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuXG4gICAgdmFyIGdldFdyYXBwZXJTZWxlY3RvciA9IGZ1bmN0aW9uIGdldFdyYXBwZXJTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBcIi5cIiArIChzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpO1xuICAgIH07XG5cbiAgICB2YXIgZ2V0V3JhcHBlciA9IGZ1bmN0aW9uIGdldFdyYXBwZXIoKSB7XG4gICAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIHJlcyA9ICQoZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGdldFdyYXBwZXJTZWxlY3RvcigpKSk7IC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG5cbiAgICAgICAgcmVzLmNoaWxkcmVuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICByZXR1cm4gJGVsLmNoaWxkcmVuKG9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkZWwuY2hpbGRyZW4oZ2V0V3JhcHBlclNlbGVjdG9yKCkpO1xuICAgIH07IC8vIEZpbmQgV3JhcHBlclxuXG5cbiAgICB2YXIgJHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcblxuICAgIGlmICgkd3JhcHBlckVsLmxlbmd0aCA9PT0gMCAmJiBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICR3cmFwcGVyRWwgPSAkKHdyYXBwZXIpO1xuICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcztcbiAgICAgICRlbC5hcHBlbmQod3JhcHBlcik7XG4gICAgICAkZWwuY2hpbGRyZW4oXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpLmVhY2goZnVuY3Rpb24gKHNsaWRlRWwpIHtcbiAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICAkZWw6ICRlbCxcbiAgICAgIGVsOiBlbCxcbiAgICAgICR3cmFwcGVyRWw6ICR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6ICR3cmFwcGVyRWwuY3NzKCdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uaW5pdCA9IGZ1bmN0aW9uIGluaXQoZWwpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm4gc3dpcGVyO1xuICAgIHZhciBtb3VudGVkID0gc3dpcGVyLm1vdW50KGVsKTtcbiAgICBpZiAobW91bnRlZCA9PT0gZmFsc2UpIHJldHVybiBzd2lwZXI7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTsgLy8gU2V0IGJyZWFrcG9pbnRcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH0gLy8gQWRkIENsYXNzZXNcblxuXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTsgLy8gQ3JlYXRlIGxvb3BcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfSAvLyBVcGRhdGUgc2l6ZVxuXG5cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpOyAvLyBVcGRhdGUgc2xpZGVzXG5cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH0gLy8gU2V0IEdyYWIgQ3Vyc29yXG5cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgc3dpcGVyLnByZWxvYWRJbWFnZXMoKTtcbiAgICB9IC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcblxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IC8vIEF0dGFjaCBldmVudHNcblxuXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7IC8vIEVtaXRcblxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNsZWFuU3R5bGVzID09PSB2b2lkIDApIHtcbiAgICAgIGNsZWFuU3R5bGVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICAgJGVsID0gc3dpcGVyLiRlbCxcbiAgICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuXG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpOyAvLyBJbml0IEZsYWdcblxuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlOyAvLyBEZXRhY2ggZXZlbnRzXG5cbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7IC8vIERlc3Ryb3kgbG9vcFxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9IC8vIENsZWFudXAgc3R5bGVzXG5cblxuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgICRlbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgJHdyYXBwZXJFbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLnJlbW92ZUNsYXNzKFtwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzc10uam9pbignICcpKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTsgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG5cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgU3dpcGVyLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24gZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9O1xuXG4gIFN3aXBlci5pbnN0YWxsTW9kdWxlID0gZnVuY3Rpb24gaW5zdGFsbE1vZHVsZShtb2R1bGUpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUubW9kdWxlcykgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzID0ge307XG4gICAgdmFyIG5hbWUgPSBtb2R1bGUubmFtZSB8fCBPYmplY3Qua2V5cyhTd2lwZXIucHJvdG90eXBlLm1vZHVsZXMpLmxlbmd0aCArIFwiX1wiICsgbm93KCk7XG4gICAgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICB9O1xuXG4gIFN3aXBlci51c2UgPSBmdW5jdGlvbiB1c2UobW9kdWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH1cblxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3dpcGVyLCBudWxsLCBbe1xuICAgIGtleTogXCJleHRlbmRlZERlZmF1bHRzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVmYXVsdHNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3dpcGVyO1xufSgpO1xuXG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm90b3R5cGVHcm91cCkge1xuICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaChmdW5jdGlvbiAocHJvdG9NZXRob2QpIHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcbmV4cG9ydCBkZWZhdWx0IFN3aXBlcjsiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHVzZVBhcmFtczogZnVuY3Rpb24gdXNlUGFyYW1zKGluc3RhbmNlUGFyYW1zKSB7XG4gICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTsgLy8gRXh0ZW5kIHBhcmFtc1xuXG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICBleHRlbmQoaW5zdGFuY2VQYXJhbXMsIG1vZHVsZS5wYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICB1c2VNb2R1bGVzOiBmdW5jdGlvbiB1c2VNb2R1bGVzKG1vZHVsZXNQYXJhbXMpIHtcbiAgICBpZiAobW9kdWxlc1BhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb2R1bGVzUGFyYW1zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGVzUGFyYW1zW21vZHVsZU5hbWVdIHx8IHt9OyAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzXG5cbiAgICAgIGlmIChtb2R1bGUub24gJiYgaW5zdGFuY2Uub24pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVFdmVudE5hbWUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5vbihtb2R1bGVFdmVudE5hbWUsIG1vZHVsZS5vblttb2R1bGVFdmVudE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9IC8vIE1vZHVsZSBjcmVhdGUgY2FsbGJhY2tcblxuXG4gICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICBtb2R1bGUuY3JlYXRlLmJpbmQoaW5zdGFuY2UpKG1vZHVsZVBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07IiwiaW1wb3J0IGdldFRyYW5zbGF0ZSBmcm9tICcuL2dldFRyYW5zbGF0ZSc7XG5pbXBvcnQgc2V0VHJhbnNsYXRlIGZyb20gJy4vc2V0VHJhbnNsYXRlJztcbmltcG9ydCBtaW5UcmFuc2xhdGUgZnJvbSAnLi9taW5UcmFuc2xhdGUnO1xuaW1wb3J0IG1heFRyYW5zbGF0ZSBmcm9tICcuL21heFRyYW5zbGF0ZSc7XG5pbXBvcnQgdHJhbnNsYXRlVG8gZnJvbSAnLi90cmFuc2xhdGVUbyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldFRyYW5zbGF0ZTogZ2V0VHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGU6IHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlOiBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZTogbWF4VHJhbnNsYXRlLFxuICB0cmFuc2xhdGVUbzogdHJhbnNsYXRlVG9cbn07IiwiaW1wb3J0IHsgZ2V0VHJhbnNsYXRlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMpIHtcbiAgaWYgKGF4aXMgPT09IHZvaWQgMCkge1xuICAgIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSxcbiAgICAgIHRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGUsXG4gICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG5cbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWwsXG4gICAgICBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcztcbiAgdmFyIHggPSAwO1xuICB2YXIgeSA9IDA7XG4gIHZhciB6ID0gMDtcblxuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAkd3JhcHBlckVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgsIFwiICsgeiArIFwicHgpXCIpO1xuICB9XG5cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5OyAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIHVwZGF0ZSBwcm9ncmVzc1xuXG4gIHZhciBuZXdQcm9ncmVzcztcbiAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuXG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cblxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zbGF0ZVRvKHRyYW5zbGF0ZSwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgdHJhbnNsYXRlQm91bmRzLCBpbnRlcm5hbCkge1xuICBpZiAodHJhbnNsYXRlID09PSB2b2lkIDApIHtcbiAgICB0cmFuc2xhdGUgPSAwO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0cmFuc2xhdGVCb3VuZHMgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZUJvdW5kcyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICB2YXIgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICB2YXIgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTsgLy8gVXBkYXRlIHByb2dyZXNzXG5cbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgdmFyIGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcblxuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHdyYXBwZXJFbC5zY3JvbGxUbykge1xuICAgICAgICB2YXIgX3dyYXBwZXJFbCRzY3JvbGxUbztcblxuICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oKF93cmFwcGVyRWwkc2Nyb2xsVG8gPSB7fSwgX3dyYXBwZXJFbCRzY3JvbGxUb1tpc0ggPyAnbGVmdCcgOiAndG9wJ10gPSAtbmV3VHJhbnNsYXRlLCBfd3JhcHBlckVsJHNjcm9sbFRvLmJlaGF2aW9yID0gJ3Ntb290aCcsIF93cmFwcGVyRWwkc2Nyb2xsVG8pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcblxuICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHNldFRyYW5zaXRpb24gZnJvbSAnLi9zZXRUcmFuc2l0aW9uJztcbmltcG9ydCB0cmFuc2l0aW9uU3RhcnQgZnJvbSAnLi90cmFuc2l0aW9uU3RhcnQnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnLi90cmFuc2l0aW9uRW5kJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0VHJhbnNpdGlvbjogc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0OiB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmRcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cblxuICB2YXIgZGlyID0gZGlyZWN0aW9uO1xuXG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uU3RhcnQnKTtcblxuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25TdGFydCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCxcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICB2YXIgZGlyID0gZGlyZWN0aW9uO1xuXG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVJlc2V0VHJhbnNpdGlvbkVuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZVRyYW5zaXRpb25FbmQnKTtcblxuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgc2V0R3JhYkN1cnNvciBmcm9tICcuL3NldEdyYWJDdXJzb3InO1xuaW1wb3J0IHVuc2V0R3JhYkN1cnNvciBmcm9tICcuL3Vuc2V0R3JhYkN1cnNvcic7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNldEdyYWJDdXJzb3I6IHNldEdyYWJDdXJzb3IsXG4gIHVuc2V0R3JhYkN1cnNvcjogdW5zZXRHcmFiQ3Vyc29yXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCBzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICB2YXIgZWwgPSBzd2lwZXIuZWw7XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy13ZWJraXQtZ3JhYmJpbmcnIDogJy13ZWJraXQtZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctbW96LWdyYWJiaW4nIDogJy1tb3otZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcblxuICBpZiAoc3dpcGVyLnN1cHBvcnQudG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2lwZXIuZWwuc3R5bGUuY3Vyc29yID0gJyc7XG59IiwiaW1wb3J0IGFwcGVuZFNsaWRlIGZyb20gJy4vYXBwZW5kU2xpZGUnO1xuaW1wb3J0IHByZXBlbmRTbGlkZSBmcm9tICcuL3ByZXBlbmRTbGlkZSc7XG5pbXBvcnQgYWRkU2xpZGUgZnJvbSAnLi9hZGRTbGlkZSc7XG5pbXBvcnQgcmVtb3ZlU2xpZGUgZnJvbSAnLi9yZW1vdmVTbGlkZSc7XG5pbXBvcnQgcmVtb3ZlQWxsU2xpZGVzIGZyb20gJy4vcmVtb3ZlQWxsU2xpZGVzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXBwZW5kU2xpZGU6IGFwcGVuZFNsaWRlLFxuICBwcmVwZW5kU2xpZGU6IHByZXBlbmRTbGlkZSxcbiAgYWRkU2xpZGU6IGFkZFNsaWRlLFxuICByZW1vdmVTbGlkZTogcmVtb3ZlU2xpZGUsXG4gIHJlbW92ZUFsbFNsaWRlczogcmVtb3ZlQWxsU2xpZGVzXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZFNsaWRlKHNsaWRlcykge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cblxuICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTbGlkZShpbmRleCwgc2xpZGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsLFxuICAgICAgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB9XG5cbiAgdmFyIGJhc2VMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcblxuICBpZiAoaW5kZXggPD0gMCkge1xuICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5kZXggPj0gYmFzZUxlbmd0aCkge1xuICAgIHN3aXBlci5hcHBlbmRTbGlkZShzbGlkZXMpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgdmFyIHNsaWRlc0J1ZmZlciA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSBiYXNlTGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaSAtPSAxKSB7XG4gICAgdmFyIGN1cnJlbnRTbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgIHNsaWRlc0J1ZmZlci51bnNoaWZ0KGN1cnJlbnRTbGlkZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHNsaWRlcy5sZW5ndGg7IF9pICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbX2ldKSAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbX2ldKTtcbiAgICB9XG5cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgX2kyICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNCdWZmZXJbX2kyXSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG5cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcyxcbiAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbCxcbiAgICAgIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKFwiLlwiICsgcGFyYW1zLnNsaWRlQ2xhc3MpO1xuICB9XG5cbiAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gIHZhciBpbmRleFRvUmVtb3ZlO1xuXG4gIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzSW5kZXhlcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXNbaV07XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTtcbiAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIG5ld0FjdGl2ZUluZGV4IC09IDE7XG4gICAgfVxuXG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcygpIHtcbiAgdmFyIHN3aXBlciA9IHRoaXM7XG4gIHZhciBzbGlkZXNJbmRleGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICB9XG5cbiAgc3dpcGVyLnJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpO1xufSIsImltcG9ydCBzZXRCcmVha3BvaW50IGZyb20gJy4vc2V0QnJlYWtwb2ludCc7XG5pbXBvcnQgZ2V0QnJlYWtwb2ludCBmcm9tICcuL2dldEJyZWFrcG9pbnQnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRCcmVha3BvaW50OiBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50OiBnZXRCcmVha3BvaW50XG59OyIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXgsXG4gICAgICBpbml0aWFsaXplZCA9IHN3aXBlci5pbml0aWFsaXplZCxcbiAgICAgIF9zd2lwZXIkbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlcyxcbiAgICAgIGxvb3BlZFNsaWRlcyA9IF9zd2lwZXIkbG9vcGVkU2xpZGVzID09PSB2b2lkIDAgPyAwIDogX3N3aXBlciRsb29wZWRTbGlkZXMsXG4gICAgICBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLFxuICAgICAgJGVsID0gc3dpcGVyLiRlbDtcbiAgdmFyIGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjsgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcblxuICB2YXIgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzQmFzZSwgc3dpcGVyLmVsKTtcbiAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuO1xuICB2YXIgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGJyZWFrcG9pbnRPbmx5UGFyYW1zKSB7XG4gICAgWydzbGlkZXNQZXJWaWV3JywgJ3NwYWNlQmV0d2VlbicsICdzbGlkZXNQZXJHcm91cCcsICdzbGlkZXNQZXJHcm91cFNraXAnLCAnc2xpZGVzUGVyQ29sdW1uJ10uZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBwYXJhbVZhbHVlID0gYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dO1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbVZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuXG4gICAgICBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3JyAmJiAocGFyYW1WYWx1ZSA9PT0gJ0FVVE8nIHx8IHBhcmFtVmFsdWUgPT09ICdhdXRvJykpIHtcbiAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnKSB7XG4gICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlRmxvYXQocGFyYW1WYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUludChwYXJhbVZhbHVlLCAxMCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgdmFyIHdhc011bHRpUm93ID0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gIHZhciBpc011bHRpUm93ID0gYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxO1xuICB2YXIgd2FzRW5hYmxlZCA9IHBhcmFtcy5lbmFibGVkO1xuXG4gIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3cgXCIgKyBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIFwibXVsdGlyb3ctY29sdW1uXCIpO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvd1wiKTtcblxuICAgIGlmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgJiYgYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsICYmIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJtdWx0aXJvdy1jb2x1bW5cIik7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH1cblxuICB2YXIgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICB2YXIgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcblxuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgdmFyIGlzRW5hYmxlZCA9IHN3aXBlci5wYXJhbXMuZW5hYmxlZDtcbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuXG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuXG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuXG4gIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UsIGNvbnRhaW5lckVsKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gJ3dpbmRvdyc7XG4gIH1cblxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgY3VycmVudEhlaWdodCA9IGJhc2UgPT09ICd3aW5kb3cnID8gd2luZG93LmlubmVySGVpZ2h0IDogY29udGFpbmVyRWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICBpZiAodHlwZW9mIHBvaW50ID09PSAnc3RyaW5nJyAmJiBwb2ludC5pbmRleE9mKCdAJykgPT09IDApIHtcbiAgICAgIHZhciBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIHZhciB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcG9pbnQ6IHBvaW50XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICBwb2ludDogcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApO1xuICB9KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBfcG9pbnRzJGkgPSBwb2ludHNbaV0sXG4gICAgICAgIHBvaW50ID0gX3BvaW50cyRpLnBvaW50LFxuICAgICAgICB2YWx1ZSA9IF9wb2ludHMkaS52YWx1ZTtcblxuICAgIGlmIChiYXNlID09PSAnd2luZG93Jykge1xuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKFwiKG1pbi13aWR0aDogXCIgKyB2YWx1ZSArIFwicHgpXCIpLm1hdGNoZXMpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gY29udGFpbmVyRWwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn0iLCJmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICB2YXIgc3dpcGVyID0gdGhpcztcbiAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIHZhciB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG4gIHZhciBsYXN0U2xpZGVQb3NpdGlvbiA9IHN3aXBlci5zbGlkZXMubGVuZ3RoID4gMCAmJiBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICsgcGFyYW1zLnNwYWNlQmV0d2VlbiAqIChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpICsgc3dpcGVyLnNsaWRlc1swXS5vZmZzZXRXaWR0aCAqIHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gIGlmIChwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICYmIHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlciAmJiBsYXN0U2xpZGVQb3NpdGlvbikge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IGxhc3RTbGlkZVBvc2l0aW9uIDw9IHN3aXBlci5zaXplO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5pc0xvY2tlZCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggPT09IDE7XG4gIH1cblxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkOyAvLyBldmVudHNcblxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHN3aXBlci5lbWl0KHN3aXBlci5pc0xvY2tlZCA/ICdsb2NrJyA6ICd1bmxvY2snKTtcblxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uKSBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3dcbn07IiwiaW1wb3J0IGxvYWRJbWFnZSBmcm9tICcuL2xvYWRJbWFnZSc7XG5pbXBvcnQgcHJlbG9hZEltYWdlcyBmcm9tICcuL3ByZWxvYWRJbWFnZXMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb2FkSW1hZ2U6IGxvYWRJbWFnZSxcbiAgcHJlbG9hZEltYWdlczogcHJlbG9hZEltYWdlc1xufTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2FkSW1hZ2UoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBpbWFnZTtcblxuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfVxuXG4gIHZhciBpc1BpY3R1cmUgPSAkKGltYWdlRWwpLnBhcmVudCgncGljdHVyZScpWzBdO1xuXG4gIGlmICghaXNQaWN0dXJlICYmICghaW1hZ2VFbC5jb21wbGV0ZSB8fCAhY2hlY2tGb3JDb21wbGV0ZSkpIHtcbiAgICBpZiAoc3JjKSB7XG4gICAgICBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgICBpbWFnZS5vbmVycm9yID0gb25SZWFkeTtcblxuICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgIGltYWdlLnNpemVzID0gc2l6ZXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3Jjc2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb25SZWFkeSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpbWFnZSBhbHJlYWR5IGxvYWRlZC4uLlxuICAgIG9uUmVhZHkoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZWxvYWRJbWFnZXMoKSB7XG4gIHZhciBzd2lwZXIgPSB0aGlzO1xuICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcblxuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIgPT09IG51bGwgfHwgIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgIT09IHVuZGVmaW5lZCkgc3dpcGVyLmltYWdlc0xvYWRlZCArPSAxO1xuXG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07XG4gICAgc3dpcGVyLmxvYWRJbWFnZShpbWFnZUVsLCBpbWFnZUVsLmN1cnJlbnRTcmMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpLCBpbWFnZUVsLnNyY3NldCB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3Jjc2V0JyksIGltYWdlRWwuc2l6ZXMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NpemVzJyksIHRydWUsIG9uUmVhZHkpO1xuICB9XG59IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBGYWRlID0ge1xuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgdmFyIG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgdmFyIHR4ID0gLW9mZnNldDtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIHR5ID0gMDtcblxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGVPcGFjaXR5ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZSA/IE1hdGgubWF4KDEgLSBNYXRoLmFicygkc2xpZGVFbFswXS5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgJHNsaWRlRWwuY3NzKHtcbiAgICAgICAgb3BhY2l0eTogc2xpZGVPcGFjaXR5XG4gICAgICB9KS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIDBweClcIik7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXMsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICBzbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgIHNsaWRlcy50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2VmZmVjdC1mYWRlJyxcbiAgcGFyYW1zOiB7XG4gICAgZmFkZUVmZmVjdDoge1xuICAgICAgY3Jvc3NGYWRlOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBmYWRlRWZmZWN0OiBfZXh0ZW5kcyh7fSwgRmFkZSlcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgXCJmYWRlXCIpO1xuICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuZmFkZUVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMsIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG52YXIgTmF2aWdhdGlvbiA9IHtcbiAgdG9nZ2xlRWw6IGZ1bmN0aW9uIHRvZ2dsZUVsKCRlbCwgZGlzYWJsZWQpIHtcbiAgICAkZWxbZGlzYWJsZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10odGhpcy5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICBpZiAoJGVsWzBdICYmICRlbFswXS50YWdOYW1lID09PSAnQlVUVE9OJykgJGVsWzBdLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIHZhciB0b2dnbGVFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLnRvZ2dsZUVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICB2YXIgX3N3aXBlciRuYXZpZ2F0aW9uID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICRuZXh0RWwgPSBfc3dpcGVyJG5hdmlnYXRpb24uJG5leHRFbCxcbiAgICAgICAgJHByZXZFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbi4kcHJldkVsO1xuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgIHRvZ2dsZUVsKCRwcmV2RWwsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9nZ2xlRWwoJHByZXZFbCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgICRwcmV2RWxbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICB0b2dnbGVFbCgkbmV4dEVsLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvZ2dsZUVsKCRuZXh0RWwsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAkbmV4dEVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG9uUHJldkNsaWNrOiBmdW5jdGlvbiBvblByZXZDbGljayhlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgfSxcbiAgb25OZXh0Q2xpY2s6IGZ1bmN0aW9uIG9uTmV4dENsaWNrKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIuJGVsLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMsIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIHZhciAkbmV4dEVsO1xuICAgIHZhciAkcHJldkVsO1xuXG4gICAgaWYgKHBhcmFtcy5uZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSAkKHBhcmFtcy5uZXh0RWwpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLm5leHRFbCA9PT0gJ3N0cmluZycgJiYgJG5leHRFbC5sZW5ndGggPiAxICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgJG5leHRFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnByZXZFbCkge1xuICAgICAgJHByZXZFbCA9ICQocGFyYW1zLnByZXZFbCk7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJyAmJiAkcHJldkVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAkcHJldkVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgJG5leHRFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgfVxuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkcHJldkVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICB9XG5cbiAgICBleHRlbmQoc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgICRuZXh0RWw6ICRuZXh0RWwsXG4gICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICRwcmV2RWw6ICRwcmV2RWwsXG4gICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXVxuICAgIH0pO1xuXG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgaWYgKCRuZXh0RWwpICRuZXh0RWwuYWRkQ2xhc3MocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICBpZiAoJHByZXZFbCkgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbjIgPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjIuJG5leHRFbCxcbiAgICAgICAgJHByZXZFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjIuJHByZXZFbDtcblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAkbmV4dEVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnbmF2aWdhdGlvbicsXG4gIHBhcmFtczoge1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBuYXZpZ2F0aW9uOiBfZXh0ZW5kcyh7fSwgTmF2aWdhdGlvbilcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICB0b0VkZ2U6IGZ1bmN0aW9uIHRvRWRnZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIGZyb21FZGdlKHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgJ2VuYWJsZSBkaXNhYmxlJzogZnVuY3Rpb24gZW5hYmxlRGlzYWJsZShzd2lwZXIpIHtcbiAgICAgIHZhciBfc3dpcGVyJG5hdmlnYXRpb24zID0gc3dpcGVyLm5hdmlnYXRpb24sXG4gICAgICAgICAgJG5leHRFbCA9IF9zd2lwZXIkbmF2aWdhdGlvbjMuJG5leHRFbCxcbiAgICAgICAgICAkcHJldkVsID0gX3N3aXBlciRuYXZpZ2F0aW9uMy4kcHJldkVsO1xuXG4gICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAkbmV4dEVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAkcHJldkVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgdmFyIF9zd2lwZXIkbmF2aWdhdGlvbjQgPSBzd2lwZXIubmF2aWdhdGlvbixcbiAgICAgICAgICAkbmV4dEVsID0gX3N3aXBlciRuYXZpZ2F0aW9uNC4kbmV4dEVsLFxuICAgICAgICAgICRwcmV2RWwgPSBfc3dpcGVyJG5hdmlnYXRpb240LiRwcmV2RWw7XG4gICAgICB2YXIgdGFyZ2V0RWwgPSBlLnRhcmdldDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhJCh0YXJnZXRFbCkuaXMoJHByZXZFbCkgJiYgISQodGFyZ2V0RWwpLmlzKCRuZXh0RWwpKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiAoc3dpcGVyLnBhZ2luYXRpb24uZWwgPT09IHRhcmdldEVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKHRhcmdldEVsKSkpIHJldHVybjtcbiAgICAgICAgdmFyIGlzSGlkZGVuO1xuXG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoJHByZXZFbCkge1xuICAgICAgICAgIGlzSGlkZGVuID0gJHByZXZFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ25hdmlnYXRpb25TaG93Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ25hdmlnYXRpb25IaWRlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgICRuZXh0RWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgJHByZXZFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzLCBjbGFzc2VzVG9TZWxlY3RvciwgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBQYWdpbmF0aW9uID0ge1xuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBSZW5kZXIgfHwgVXBkYXRlIFBhZ2luYXRpb24gYnVsbGV0cy9pdGVtc1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsOyAvLyBDdXJyZW50L1RvdGFsXG5cbiAgICB2YXIgY3VycmVudDtcbiAgICB2YXIgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoKHN3aXBlci5hY3RpdmVJbmRleCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG5cbiAgICAgIGlmIChjdXJyZW50ID4gc2xpZGVzTGVuZ3RoIC0gMSAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSB7XG4gICAgICAgIGN1cnJlbnQgLT0gc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50ID4gdG90YWwgLSAxKSBjdXJyZW50IC09IHRvdGFsO1xuICAgICAgaWYgKGN1cnJlbnQgPCAwICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvblR5cGUgIT09ICdidWxsZXRzJykgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9IC8vIFR5cGVzXG5cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICB2YXIgZmlyc3RJbmRleDtcbiAgICAgIHZhciBsYXN0SW5kZXg7XG4gICAgICB2YXIgbWlkSW5kZXg7XG5cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSA9IGJ1bGxldHMuZXEoMClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ291dGVyV2lkdGgnIDogJ291dGVySGVpZ2h0J10odHJ1ZSk7XG4gICAgICAgICRlbC5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KSArIFwicHhcIik7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIHN3aXBlci5wcmV2aW91c0luZGV4O1xuXG4gICAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA+IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZmlyc3RJbmRleCA9IGN1cnJlbnQgLSBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXg7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cblxuICAgICAgYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIiBcIiArIHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHQgXCIgKyBwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2IFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2IFwiICsgcGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcblxuICAgICAgaWYgKCRlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGJ1bGxldHMuZWFjaChmdW5jdGlvbiAoYnVsbGV0KSB7XG4gICAgICAgICAgdmFyICRidWxsZXQgPSAkKGJ1bGxldCk7XG4gICAgICAgICAgdmFyIGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuXG4gICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbWFpblwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXZcIikucHJldigpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLXByZXYtcHJldlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldC5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dFwiKS5uZXh0KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItbmV4dC1uZXh0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgJGJ1bGxldCA9IGJ1bGxldHMuZXEoY3VycmVudCk7XG4gICAgICAgIHZhciBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcbiAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICB2YXIgJGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShmaXJzdEluZGV4KTtcbiAgICAgICAgICB2YXIgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgYnVsbGV0cy5lcShpKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBidWxsZXRzLmxlbmd0aCAtIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgYnVsbGV0cy5lcShidWxsZXRzLmxlbmd0aCAtIF9pKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1tYWluXCIpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnVsbGV0cy5lcShidWxsZXRzLmxlbmd0aCAtIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJGZpcnN0RGlzcGxheWVkQnVsbGV0LnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2XCIpLnByZXYoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1wcmV2LXByZXZcIik7XG4gICAgICAgICAgICAgICRsYXN0RGlzcGxheWVkQnVsbGV0Lm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0XCIpLm5leHQoKS5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MgKyBcIi1uZXh0LW5leHRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldC5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldlwiKS5wcmV2KCkuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzICsgXCItcHJldi1wcmV2XCIpO1xuICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXQubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHRcIikubmV4dCgpLmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyArIFwiLW5leHQtbmV4dFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICB2YXIgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICB2YXIgYnVsbGV0c09mZnNldCA9IChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGggLSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplKSAvIDIgLSBtaWRJbmRleCAqIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemU7XG4gICAgICAgIHZhciBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBidWxsZXRzT2Zmc2V0ICsgXCJweFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICRlbC5maW5kKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5jdXJyZW50Q2xhc3MpKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpKTtcbiAgICAgICRlbC5maW5kKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy50b3RhbENsYXNzKSkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCkpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgdmFyIHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuXG4gICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWw7XG4gICAgICB2YXIgc2NhbGVYID0gMTtcbiAgICAgIHZhciBzY2FsZVkgPSAxO1xuXG4gICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgfVxuXG4gICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKFwiICsgc2NhbGVYICsgXCIpIHNjYWxlWShcIiArIHNjYWxlWSArIFwiKVwiKS50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgJGVsLmh0bWwocGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCkpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCAkZWxbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsICRlbFswXSk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgJGVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICB2YXIgcGFnaW5hdGlvbkhUTUwgPSAnJztcblxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICB2YXIgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgbnVtYmVyT2ZCdWxsZXRzID4gc2xpZGVzTGVuZ3RoKSB7XG4gICAgICAgIG51bWJlck9mQnVsbGV0cyA9IHNsaWRlc0xlbmd0aDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gXCI8XCIgKyBwYXJhbXMuYnVsbGV0RWxlbWVudCArIFwiIGNsYXNzPVxcXCJcIiArIHBhcmFtcy5idWxsZXRDbGFzcyArIFwiXFxcIj48L1wiICsgcGFyYW1zLmJ1bGxldEVsZW1lbnQgKyBcIj5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLmN1cnJlbnRDbGFzcyArIFwiXFxcIj48L3NwYW4+XCIgKyAnIC8gJyArIChcIjxzcGFuIGNsYXNzPVxcXCJcIiArIHBhcmFtcy50b3RhbENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIik7XG4gICAgICB9XG5cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzICsgXCJcXFwiPjwvc3Bhbj5cIjtcbiAgICAgIH1cblxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3dpcGVyLnBhZ2luYXRpb24uJGVsWzBdKTtcbiAgICB9XG4gIH0sXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIuJGVsLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMsIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIHZhciAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmICRlbC5sZW5ndGggPiAxKSB7XG4gICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNsaWNrYWJsZUNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhcIlwiICsgcGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSArIFwiLWR5bmFtaWNcIik7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuXG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHtcbiAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInICYmIHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vbignY2xpY2snLCBjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpLCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmluZGV4KCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSBpbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBleHRlbmQoc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgICRlbDogJGVsLFxuICAgICAgZWw6ICRlbFswXVxuICAgIH0pO1xuXG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vZmYoJ2NsaWNrJywgY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSk7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncGFnaW5hdGlvbicsXG4gIHBhcmFtczoge1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogZnVuY3Rpb24gZm9ybWF0RnJhY3Rpb25DdXJyZW50KG51bWJlcikge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgfSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IGZ1bmN0aW9uIGZvcm1hdEZyYWN0aW9uVG90YWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9LFxuICAgICAgYnVsbGV0Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQnLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlJyxcbiAgICAgIG1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi0nLFxuICAgICAgLy8gTkVXXG4gICAgICBjdXJyZW50Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1jdXJyZW50JyxcbiAgICAgIHRvdGFsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi10b3RhbCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWhpZGRlbicsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLWZpbGwnLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItb3Bwb3NpdGUnLFxuICAgICAgY2xpY2thYmxlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1jbGlja2FibGUnLFxuICAgICAgLy8gTkVXXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1sb2NrJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBwYWdpbmF0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleDogMFxuICAgICAgfSwgUGFnaW5hdGlvbilcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uaW5pdCgpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIGFjdGl2ZUluZGV4Q2hhbmdlOiBmdW5jdGlvbiBhY3RpdmVJbmRleENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBJbmRleENoYW5nZTogZnVuY3Rpb24gc25hcEluZGV4Q2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZXNMZW5ndGhDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlc0xlbmd0aENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc25hcEdyaWRMZW5ndGhDaGFuZ2U6IGZ1bmN0aW9uIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgICdlbmFibGUgZGlzYWJsZSc6IGZ1bmN0aW9uIGVuYWJsZURpc2FibGUoc3dpcGVyKSB7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuXG4gICAgICBpZiAoJGVsKSB7XG4gICAgICAgICRlbFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmVDbGFzcycgOiAnYWRkQ2xhc3MnXShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhzd2lwZXIsIGUpIHtcbiAgICAgIHZhciB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID4gMCAmJiAhJCh0YXJnZXRFbCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgKHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKSkgcmV0dXJuO1xuICAgICAgICB2YXIgaXNIaWRkZW4gPSBzd2lwZXIucGFnaW5hdGlvbi4kZWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcblxuICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvbkhpZGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGV4dGVuZCwgbmV4dFRpY2ssIGJpbmRNb2R1bGVNZXRob2RzLCBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIFNjcm9sbGJhciA9IHtcbiAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlLFxuICAgICAgICBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcztcbiAgICB2YXIgZHJhZ1NpemUgPSBzY3JvbGxiYXIuZHJhZ1NpemUsXG4gICAgICAgIHRyYWNrU2l6ZSA9IHNjcm9sbGJhci50cmFja1NpemUsXG4gICAgICAgICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbCxcbiAgICAgICAgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgdmFyIG5ld1NpemUgPSBkcmFnU2l6ZTtcbiAgICB2YXIgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuXG4gICAgaWYgKHJ0bCkge1xuICAgICAgbmV3UG9zID0gLW5ld1BvcztcblxuICAgICAgaWYgKG5ld1BvcyA+IDApIHtcbiAgICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplIC0gbmV3UG9zO1xuICAgICAgICBuZXdQb3MgPSAwO1xuICAgICAgfSBlbHNlIGlmICgtbmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgICAgbmV3U2l6ZSA9IHRyYWNrU2l6ZSArIG5ld1BvcztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5ld1BvcyA8IDApIHtcbiAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSArIG5ld1BvcztcbiAgICAgIG5ld1BvcyA9IDA7XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgbmV3U2l6ZSA9IHRyYWNrU2l6ZSAtIG5ld1BvcztcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZHJhZ0VsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgbmV3UG9zICsgXCJweCwgMCwgMClcIik7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gbmV3U2l6ZSArIFwicHhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgbmV3UG9zICsgXCJweCwgMClcIik7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IG5ld1NpemUgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0KTtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci4kZHJhZ0VsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9LFxuICB1cGRhdGVTaXplOiBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICB2YXIgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsLFxuICAgICAgICAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSAnJztcbiAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgIHZhciB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkZWxbMF0ub2Zmc2V0V2lkdGggOiAkZWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyBzd2lwZXIudmlydHVhbFNpemU7XG4gICAgdmFyIG1vdmVEaXZpZGVyID0gZGl2aWRlciAqICh0cmFja1NpemUgLyBzd2lwZXIuc2l6ZSk7XG4gICAgdmFyIGRyYWdTaXplO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplID09PSAnYXV0bycpIHtcbiAgICAgIGRyYWdTaXplID0gdHJhY2tTaXplICogZGl2aWRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ1NpemUgPSBwYXJzZUludChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwgMTApO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBkcmFnU2l6ZSArIFwicHhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBkcmFnU2l6ZSArIFwicHhcIjtcbiAgICB9XG5cbiAgICBpZiAoZGl2aWRlciA+PSAxKSB7XG4gICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2Uge1xuICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgIH1cblxuICAgIGV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgIHRyYWNrU2l6ZTogdHJhY2tTaXplLFxuICAgICAgZGl2aWRlcjogZGl2aWRlcixcbiAgICAgIG1vdmVEaXZpZGVyOiBtb3ZlRGl2aWRlcixcbiAgICAgIGRyYWdTaXplOiBkcmFnU2l6ZVxuICAgIH0pO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc2Nyb2xsYmFyLiRlbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0sXG4gIGdldFBvaW50ZXJQb3NpdGlvbjogZnVuY3Rpb24gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFggOiBlLmNsaWVudFg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSA6IGUuY2xpZW50WTtcbiAgfSxcbiAgc2V0RHJhZ1Bvc2l0aW9uOiBmdW5jdGlvbiBzZXREcmFnUG9zaXRpb24oZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsLFxuICAgICAgICBkcmFnU2l6ZSA9IHNjcm9sbGJhci5kcmFnU2l6ZSxcbiAgICAgICAgdHJhY2tTaXplID0gc2Nyb2xsYmFyLnRyYWNrU2l6ZSxcbiAgICAgICAgZHJhZ1N0YXJ0UG9zID0gc2Nyb2xsYmFyLmRyYWdTdGFydFBvcztcbiAgICB2YXIgcG9zaXRpb25SYXRpbztcbiAgICBwb3NpdGlvblJhdGlvID0gKHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSAkZWwub2Zmc2V0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApO1xuXG4gICAgaWYgKHJ0bCkge1xuICAgICAgcG9zaXRpb25SYXRpbyA9IDEgLSBwb3NpdGlvblJhdGlvO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogcG9zaXRpb25SYXRpbztcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocG9zaXRpb24pO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH0sXG4gIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBvbkRyYWdTdGFydChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWwsXG4gICAgICAgICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnU3RhcnRQb3MgPSBlLnRhcmdldCA9PT0gJGRyYWdFbFswXSB8fCBlLnRhcmdldCA9PT0gJGRyYWdFbCA/IHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gOiBudWxsO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigxMDApO1xuICAgICRkcmFnRWwudHJhbnNpdGlvbigxMDApO1xuICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICRlbC50cmFuc2l0aW9uKDApO1xuXG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMSk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJ25vbmUnKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ1N0YXJ0JywgZSk7XG4gIH0sXG4gIG9uRHJhZ01vdmU6IGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWwsXG4gICAgICAgICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcbiAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTtcbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdNb3ZlJywgZSk7XG4gIH0sXG4gIG9uRHJhZ0VuZDogZnVuY3Rpb24gb25EcmFnRW5kKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXIsXG4gICAgICAgICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICBpZiAoIXN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQgPSBmYWxzZTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICcnKTtcbiAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbignJyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0ID0gbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ0VuZCcsIGUpO1xuXG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICB9XG4gIH0sXG4gIGVuYWJsZURyYWdnYWJsZTogZnVuY3Rpb24gZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICB0b3VjaEV2ZW50c1RvdWNoID0gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCA9IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AsXG4gICAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICB2YXIgdGFyZ2V0ID0gJGVsWzBdO1xuICAgIHZhciBhY3RpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybjtcblxuICAgIGlmICghc3VwcG9ydC50b3VjaCkge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2gubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfVxuICB9LFxuICBkaXNhYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICB0b3VjaEV2ZW50c1RvdWNoID0gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCA9IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AsXG4gICAgICAgIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMsXG4gICAgICAgIHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICB2YXIgdGFyZ2V0ID0gJGVsWzBdO1xuICAgIHZhciBhY3RpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybjtcblxuICAgIGlmICghc3VwcG9ydC50b3VjaCkge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2gubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfVxuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyLFxuICAgICAgICAkc3dpcGVyRWwgPSBzd2lwZXIuJGVsO1xuICAgIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCgkc3dpcGVyRWwsIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLCBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzLCB7XG4gICAgICBlbDogJ3N3aXBlci1zY3JvbGxiYXInXG4gICAgfSk7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgdmFyICRlbCA9ICQocGFyYW1zLmVsKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmICRlbC5sZW5ndGggPiAxICYmICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAkZWwgPSAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpO1xuICAgIH1cblxuICAgIHZhciAkZHJhZ0VsID0gJGVsLmZpbmQoXCIuXCIgKyBzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3MpO1xuXG4gICAgaWYgKCRkcmFnRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAkZHJhZ0VsID0gJChcIjxkaXYgY2xhc3M9XFxcIlwiICsgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzICsgXCJcXFwiPjwvZGl2PlwiKTtcbiAgICAgICRlbC5hcHBlbmQoJGRyYWdFbCk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgJGVsOiAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgICAgJGRyYWdFbDogJGRyYWdFbCxcbiAgICAgIGRyYWdFbDogJGRyYWdFbFswXVxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgIHNjcm9sbGJhci5lbmFibGVEcmFnZ2FibGUoKTtcbiAgICB9XG5cbiAgICBpZiAoJGVsKSB7XG4gICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlKCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdzY3JvbGxiYXInLFxuICBwYXJhbXM6IHtcbiAgICBzY3JvbGxiYXI6IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgZHJhZ1NpemU6ICdhdXRvJyxcbiAgICAgIGhpZGU6IGZhbHNlLFxuICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgIHNuYXBPblJlbGVhc2U6IHRydWUsXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWxvY2snLFxuICAgICAgZHJhZ0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1kcmFnJ1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBzY3JvbGxiYXI6IF9leHRlbmRzKHtcbiAgICAgICAgaXNUb3VjaGVkOiBmYWxzZSxcbiAgICAgICAgdGltZW91dDogbnVsbCxcbiAgICAgICAgZHJhZ1RpbWVvdXQ6IG51bGxcbiAgICAgIH0sIFNjcm9sbGJhcilcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5pbml0KCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gICAgJ2VuYWJsZSBkaXNhYmxlJzogZnVuY3Rpb24gZW5hYmxlRGlzYWJsZShzd2lwZXIpIHtcbiAgICAgIHZhciAkZWwgPSBzd2lwZXIuc2Nyb2xsYmFyLiRlbDtcblxuICAgICAgaWYgKCRlbCkge1xuICAgICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbn07IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuLyogZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCI+PlwiXSB9XSAqL1xuaW1wb3J0IHsgbmV4dFRpY2ssIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xudmFyIENvbnRyb2xsZXIgPSB7XG4gIExpbmVhclNwbGluZTogZnVuY3Rpb24gTGluZWFyU3BsaW5lKHgsIHkpIHtcbiAgICB2YXIgYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgdmFyIG1heEluZGV4O1xuICAgICAgdmFyIG1pbkluZGV4O1xuICAgICAgdmFyIGd1ZXNzO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgdmFsKSB7XG4gICAgICAgIG1pbkluZGV4ID0gLTE7XG4gICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkge1xuICAgICAgICAgIGd1ZXNzID0gbWF4SW5kZXggKyBtaW5JbmRleCA+PiAxO1xuXG4gICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5sYXN0SW5kZXggPSB4Lmxlbmd0aCAtIDE7IC8vIEdpdmVuIGFuIHggdmFsdWUgKHgyKSwgcmV0dXJuIHRoZSBleHBlY3RlZCB5MiB2YWx1ZTpcbiAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgLy8gKHgzLHkzKSBpcyB0aGUga25vd24gcG9pbnQgYWZ0ZXIgZ2l2ZW4gdmFsdWUuXG5cbiAgICB2YXIgaTE7XG4gICAgdmFyIGkzO1xuXG4gICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICBpZiAoIXgyKSByZXR1cm4gMDsgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG5cbiAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgaTEgPSBpMyAtIDE7IC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgLy8geTIgOj0gKCh4MuKIkngxKSDDlyAoeTPiiJJ5MSkpIMO3ICh4M+KIkngxKSArIHkxXG5cbiAgICAgIHJldHVybiAoeDIgLSB0aGlzLnhbaTFdKSAqICh0aGlzLnlbaTNdIC0gdGhpcy55W2kxXSkgLyAodGhpcy54W2kzXSAtIHRoaXMueFtpMV0pICsgdGhpcy55W2kxXTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIC8vIHh4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG9cbiAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbjogZnVuY3Rpb24gZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gc3dpcGVyLnBhcmFtcy5sb29wID8gbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpIDogbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbmFwR3JpZCwgYy5zbmFwR3JpZCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShfc2V0VHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgdmFyIG11bHRpcGxpZXI7XG4gICAgdmFyIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgdmFyIFN3aXBlciA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcblxuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgLy8gdGhpcyB3aWxsIGNyZWF0ZSBhbiBJbnRlcnBvbGF0ZSBmdW5jdGlvbiBiYXNlZCBvbiB0aGUgc25hcEdyaWRzXG4gICAgICAvLyB4IGlzIHRoZSBHcmlkIG9mIHRoZSBzY3JvbGxlZCBzY3JvbGxlciBhbmQgeSB3aWxsIGJlIHRoZSBjb250cm9sbGVkIHNjcm9sbGVyXG4gICAgICAvLyBpdCBtYWtlcyBzZW5zZSB0byBjcmVhdGUgdGhpcyBvbmx5IG9uY2UgYW5kIHJlY2FsbCBpdCBmb3IgdGhlIGludGVycG9sYXRpb25cbiAgICAgIC8vIHRoZSBmdW5jdGlvbiBkb2VzIGEgbG90IG9mIHZhbHVlIGNhY2hpbmcgZm9yIHBlcmZvcm1hbmNlXG4gICAgICB2YXIgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5nZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpOyAvLyBpIGFtIG5vdCBzdXJlIHdoeSB0aGUgdmFsdWVzIGhhdmUgdG8gYmUgbXVsdGlwbGljYXRlZCB0aGlzIHdheSwgdHJpZWQgdG8gaW52ZXJ0IHRoZSBzbmFwR3JpZFxuICAgICAgICAvLyBidXQgaXQgZGlkIG5vdCB3b3JrIG91dFxuXG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRyb2xsZWRUcmFuc2xhdGUgfHwgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnY29udGFpbmVyJykge1xuICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyICsgYy5taW5UcmFuc2xhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5pbnZlcnNlKSB7XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSBjLm1heFRyYW5zbGF0ZSgpIC0gY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICAgIH1cblxuICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgIGMuc2V0VHJhbnNsYXRlKGNvbnRyb2xsZWRUcmFuc2xhdGUsIHN3aXBlcik7XG4gICAgICBjLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIFN3aXBlciA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgdmFyIGk7XG5cbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjKSB7XG4gICAgICBjLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIHN3aXBlcik7XG5cbiAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuXG4gICAgICAgIGlmIChjLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFjb250cm9sbGVkKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoYy5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICAgIGMubG9vcEZpeCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgcGFyYW1zOiB7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJyAvLyBvciAnY29udGFpbmVyJ1xuXG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGNvbnRyb2xsZXI6IF9leHRlbmRzKHtcbiAgICAgICAgY29udHJvbDogc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2xcbiAgICAgIH0sIENvbnRyb2xsZXIpXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcblxuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuXG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuXG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHN3aXBlciwgdHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgfVxuICB9XG59OyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbnZhciBQYXJhbGxheCA9IHtcbiAgc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgdmFyICRlbCA9ICQoZWwpO1xuICAgIHZhciBydGxGYWN0b3IgPSBydGwgPyAtMSA6IDE7XG4gICAgdmFyIHAgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgnKSB8fCAnMCc7XG4gICAgdmFyIHggPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteCcpO1xuICAgIHZhciB5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICB2YXIgc2NhbGUgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGUnKTtcbiAgICB2YXIgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG5cbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB4ID0geCB8fCAnMCc7XG4gICAgICB5ID0geSB8fCAnMCc7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeSA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHA7XG4gICAgICB4ID0gJzAnO1xuICAgIH1cblxuICAgIGlmICh4LmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB4ID0gcGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IgKyBcIiVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHggKiBwcm9ncmVzcyAqIHJ0bEZhY3RvciArIFwicHhcIjtcbiAgICB9XG5cbiAgICBpZiAoeS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeSA9IHBhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzICsgXCIlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSB5ICogcHJvZ3Jlc3MgKyBcInB4XCI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcGFjaXR5ICE9PSAndW5kZWZpbmVkJyAmJiBvcGFjaXR5ICE9PSBudWxsKSB7XG4gICAgICB2YXIgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gY3VycmVudE9wYWNpdHk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICRlbC50cmFuc2Zvcm0oXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIDBweClcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjdXJyZW50U2NhbGUgPSBzY2FsZSAtIChzY2FsZSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpO1xuICAgICAgJGVsLnRyYW5zZm9ybShcInRyYW5zbGF0ZTNkKFwiICsgeCArIFwiLCBcIiArIHkgKyBcIiwgMHB4KSBzY2FsZShcIiArIGN1cnJlbnRTY2FsZSArIFwiKVwiKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsLFxuICAgICAgICBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzLFxuICAgICAgICBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcyxcbiAgICAgICAgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgJGVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKTtcbiAgICB9KTtcbiAgICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVFbCwgc2xpZGVJbmRleCkge1xuICAgICAgdmFyIHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gcHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpO1xuICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zZm9ybShlbCwgc2xpZGVQcm9ncmVzcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGlmIChkdXJhdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIH1cblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgICRlbC5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChmdW5jdGlvbiAocGFyYWxsYXhFbCkge1xuICAgICAgdmFyICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgIHZhciBwYXJhbGxheER1cmF0aW9uID0gcGFyc2VJbnQoJHBhcmFsbGF4RWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtZHVyYXRpb24nKSwgMTApIHx8IGR1cmF0aW9uO1xuICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgICRwYXJhbGxheEVsLnRyYW5zaXRpb24ocGFyYWxsYXhEdXJhdGlvbik7XG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwYXJhbGxheCcsXG4gIHBhcmFtczoge1xuICAgIHBhcmFsbGF4OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBwYXJhbGxheDogX2V4dGVuZHMoe30sIFBhcmFsbGF4KVxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfVxufTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IG5vdywgbmV4dFRpY2ssIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5mdW5jdGlvbiBpc0V2ZW50U3VwcG9ydGVkKCkge1xuICB2YXIgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICB2YXIgZXZlbnROYW1lID0gJ29ud2hlZWwnO1xuICB2YXIgaXNTdXBwb3J0ZWQgPSAoZXZlbnROYW1lIGluIGRvY3VtZW50KTtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgaXNTdXBwb3J0ZWQgPSB0eXBlb2YgZWxlbWVudFtldmVudE5hbWVdID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgaWYgKCFpc1N1cHBvcnRlZCAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbiAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmIC8vIGFsd2F5cyByZXR1cm5zIHRydWUgaW4gbmV3ZXIgYnJvd3NlcnMgYXMgcGVyIHRoZSBzdGFuZGFyZC5cbiAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG52YXIgTW91c2V3aGVlbCA9IHtcbiAgbGFzdFNjcm9sbFRpbWU6IG5vdygpLFxuICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgZXZlbnQ6IGZ1bmN0aW9uIGV2ZW50KCkge1xuICAgIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpIHJldHVybiAnRE9NTW91c2VTY3JvbGwnO1xuICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkKCkgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnO1xuICB9LFxuICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIHZhciBQSVhFTF9TVEVQID0gMTA7XG4gICAgdmFyIExJTkVfSEVJR0hUID0gNDA7XG4gICAgdmFyIFBBR0VfSEVJR0hUID0gODAwO1xuICAgIHZhciBzWCA9IDA7XG4gICAgdmFyIHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG5cbiAgICB2YXIgcFggPSAwO1xuICAgIHZhciBwWSA9IDA7IC8vIHBpeGVsWCwgcGl4ZWxZXG4gICAgLy8gTGVnYWN5XG5cbiAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgc1kgPSBlLmRldGFpbDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG5cbiAgICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgIH1cblxuICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgIHNYID0gLWUud2hlZWxEZWx0YVggLyAxMjA7XG4gICAgfSAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG5cblxuICAgIGlmICgnYXhpcycgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICBzWCA9IHNZO1xuICAgICAgc1kgPSAwO1xuICAgIH1cblxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuXG4gICAgaWYgKCdkZWx0YVgnIGluIGUpIHtcbiAgICAgIHBYID0gZS5kZWx0YVg7XG4gICAgfVxuXG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7XG4gICAgICAvLyBpZiB1c2VyIHNjcm9sbHMgd2l0aCBzaGlmdCBoZSB3YW50cyBob3Jpem9udGFsIHNjcm9sbFxuICAgICAgcFggPSBwWTtcbiAgICAgIHBZID0gMDtcbiAgICB9XG5cbiAgICBpZiAoKHBYIHx8IHBZKSAmJiBlLmRlbHRhTW9kZSkge1xuICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7XG4gICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICB9XG4gICAgfSAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuXG5cbiAgICBpZiAocFggJiYgIXNYKSB7XG4gICAgICBzWCA9IHBYIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICBpZiAocFkgJiYgIXNZKSB7XG4gICAgICBzWSA9IHBZIDwgMSA/IC0xIDogMTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3Bpblg6IHNYLFxuICAgICAgc3Bpblk6IHNZLFxuICAgICAgcGl4ZWxYOiBwWCxcbiAgICAgIHBpeGVsWTogcFlcbiAgICB9O1xuICB9LFxuICBoYW5kbGVNb3VzZUVudGVyOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gdHJ1ZTtcbiAgfSxcbiAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IGZhbHNlO1xuICB9LFxuICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIHZhciBlID0gZXZlbnQ7XG4gICAgdmFyIGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhdGFyZ2V0WzBdLmNvbnRhaW5zKGUudGFyZ2V0KSAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG5cbiAgICB2YXIgZGVsdGEgPSAwO1xuICAgIHZhciBydGxGYWN0b3IgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIHZhciBkYXRhID0gTW91c2V3aGVlbC5ub3JtYWxpemUoZSk7XG5cbiAgICBpZiAocGFyYW1zLmZvcmNlVG9BeGlzKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIGRlbHRhID0gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSAtZGF0YS5waXhlbFk7ZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsdGEgPSBNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkgPyAtZGF0YS5waXhlbFggKiBydGxGYWN0b3IgOiAtZGF0YS5waXhlbFk7XG4gICAgfVxuXG4gICAgaWYgKGRlbHRhID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAocGFyYW1zLmludmVydCkgZGVsdGEgPSAtZGVsdGE7IC8vIEdldCB0aGUgc2Nyb2xsIHBvc2l0aW9uc1xuXG4gICAgdmFyIHBvc2l0aW9ucyA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgIGlmIChwb3NpdGlvbnMgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbnMgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgaWYgKHBvc2l0aW9ucyA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9ucyA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTsgLy8gV2hlbiBsb29wIGlzIHRydWU6XG4gICAgLy8gICAgIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgdHJ1ZS5cbiAgICAvLyBXaGVuIGxvb3AgaXMgZmFsc2U6XG4gICAgLy8gICAgIGlmIHRoZSBzY3JvbGwgcG9zaXRpb25zIGlzIG5vdCBvbiBlZGdlLFxuICAgIC8vICAgICB0aGVuIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgdHJ1ZS5cbiAgICAvLyAgICAgaWYgdGhlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9ucyxcbiAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIGZhbHNlLlxuXG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHRydWUgOiAhKHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKTtcbiAgICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlciAmJiBzd2lwZXIucGFyYW1zLm5lc3RlZCkgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YVxuICAgICAgdmFyIG5ld0V2ZW50ID0ge1xuICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSxcbiAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24oZGVsdGEpLFxuICAgICAgICByYXc6IGV2ZW50XG4gICAgICB9OyAvLyBLZWVwIHRoZSBtb3N0IHJlY2VudCBldmVudHNcblxuICAgICAgdmFyIHJlY2VudFdoZWVsRXZlbnRzID0gc3dpcGVyLm1vdXNld2hlZWwucmVjZW50V2hlZWxFdmVudHM7XG5cbiAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpOyAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAvLyAgIElmIGRpcmVjdGlvbiBoYXMgY2hhbmdlZCBvclxuICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgIC8vIEVsc2UgKHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHdoZWVsIGlzIG1vdmVkKTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG5cbiAgICAgIGlmIChwcmV2RXZlbnQpIHtcbiAgICAgICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbiB8fCBuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC50aW1lID4gcHJldkV2ZW50LnRpbWUgKyAxNTApIHtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICB9IC8vIElmIGl0J3MgdGltZSB0byByZWxlYXNlIHRoZSBzY3JvbGw6XG4gICAgICAvLyAgIFJldHVybiBub3cgc28geW91IGRvbid0IGhpdCB0aGUgcHJldmVudERlZmF1bHQuXG5cblxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG4gICAgICAvLyBJZiB3ZSByZWNlbnRseSBzbmFwcGVkIGFmdGVyIGEgbW9tZW50dW0gc2Nyb2xsLCB0aGVuIGlnbm9yZSB3aGVlbCBldmVudHNcbiAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzXG4gICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgLy8gYW4gZW5kLW9mLW1vbWVudHVtIHNuYXApLlxuICAgICAgdmFyIF9uZXdFdmVudCA9IHtcbiAgICAgICAgdGltZTogbm93KCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKVxuICAgICAgfTtcbiAgICAgIHZhciBsYXN0RXZlbnRCZWZvcmVTbmFwID0gc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcDtcbiAgICAgIHZhciBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgX25ld0V2ZW50LnRpbWUgPCBsYXN0RXZlbnRCZWZvcmVTbmFwLnRpbWUgKyA1MDAgJiYgX25ld0V2ZW50LmRlbHRhIDw9IGxhc3RFdmVudEJlZm9yZVNuYXAuZGVsdGEgJiYgX25ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgICAgICB2YXIgd2FzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nO1xuICAgICAgICB2YXIgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICAgIGlmICghd2FzQmVnaW5uaW5nICYmIHN3aXBlci5pc0JlZ2lubmluZyB8fCAhd2FzRW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIC8vIFdoZW4gd2hlZWwgc2Nyb2xsaW5nIHN0YXJ0cyB3aXRoIHN0aWNreSAoYWthIHNuYXApIGVuYWJsZWQsIHRoZW4gZGV0ZWN0XG4gICAgICAgICAgLy8gdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBieSBzdG9yaW5nIHJlY2VudCAoTj0xNT8pIHdoZWVsIGV2ZW50cy5cbiAgICAgICAgICAvLyAxLiBkbyBhbGwgTiBldmVudHMgaGF2ZSBkZWNyZWFzaW5nIG9yIHNhbWUgKGFic29sdXRlIHZhbHVlKSBkZWx0YT9cbiAgICAgICAgICAvLyAyLiBkaWQgYWxsIE4gZXZlbnRzIGFycml2ZSBpbiB0aGUgbGFzdCBNIChNPTUwMD8pIG1zZWNzP1xuICAgICAgICAgIC8vIDMuIGRvZXMgdGhlIGVhcmxpZXN0IGV2ZW50IGhhdmUgYW4gKGFic29sdXRlIHZhbHVlKSBkZWx0YSB0aGF0J3NcbiAgICAgICAgICAvLyAgICBhdCBsZWFzdCBQIChQPTE/KSBsYXJnZXIgdGhhbiB0aGUgbW9zdCByZWNlbnQgZXZlbnQncyBkZWx0YT9cbiAgICAgICAgICAvLyA0LiBkb2VzIHRoZSBsYXRlc3QgZXZlbnQgaGF2ZSBhIGRlbHRhIHRoYXQncyBzbWFsbGVyIHRoYW4gUSAoUT02PykgcGl4ZWxzP1xuICAgICAgICAgIC8vIElmIDEtNCBhcmUgXCJ5ZXNcIiB0aGVuIHdlJ3JlIG5lYXIgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBkZWNlbGVyYXRpb24uXG4gICAgICAgICAgLy8gU25hcCBpbW1lZGlhdGVseSBhbmQgaWdub3JlIHJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGwuXG4gICAgICAgICAgLy8gU2VlIGNvbW1lbnQgYWJvdmUgZm9yIFwicmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbFwiIGRldGVybWluYXRpb24uXG4gICAgICAgICAgLy8gSWYgMS00IGFyZW4ndCBzYXRpc2ZpZWQsIHRoZW4gd2FpdCB0byBzbmFwIHVudGlsIDUwMG1zIGFmdGVyIHRoZSBsYXN0IGV2ZW50LlxuICAgICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KTtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHZhciBfcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcblxuICAgICAgICAgIGlmIChfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9wcmV2RXZlbnQgPSBfcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gX3JlY2VudFdoZWVsRXZlbnRzW19yZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciBmaXJzdEV2ZW50ID0gX3JlY2VudFdoZWVsRXZlbnRzWzBdO1xuXG4gICAgICAgICAgX3JlY2VudFdoZWVsRXZlbnRzLnB1c2goX25ld0V2ZW50KTtcblxuICAgICAgICAgIGlmIChfcHJldkV2ZW50ICYmIChfbmV3RXZlbnQuZGVsdGEgPiBfcHJldkV2ZW50LmRlbHRhIHx8IF9uZXdFdmVudC5kaXJlY3Rpb24gIT09IF9wcmV2RXZlbnQuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgLy8gSW5jcmVhc2luZyBvciByZXZlcnNlLXNpZ24gZGVsdGEgbWVhbnMgdGhlIHVzZXIgc3RhcnRlZCBzY3JvbGxpbmcgYWdhaW4uIENsZWFyIHRoZSB3aGVlbCBldmVudCBsb2cuXG4gICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSAmJiBfbmV3RXZlbnQudGltZSAtIGZpcnN0RXZlbnQudGltZSA8IDUwMCAmJiBmaXJzdEV2ZW50LmRlbHRhIC0gX25ld0V2ZW50LmRlbHRhID49IDEgJiYgX25ld0V2ZW50LmRlbHRhIDw9IDYpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGRlY2VsZXJhdGlvbiBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc28gdGhlcmUncyBubyBuZWVkXG4gICAgICAgICAgICAvLyB0byB3YWl0IGZvciBtb3JlIGV2ZW50cy4gU25hcCBBU0FQIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgICAgICAgICAvLyBBbHNvLCBiZWNhdXNlIHRoZXJlJ3Mgc29tZSByZW1haW5pbmcgbW9tZW50dW0gd2UnbGwgYmlhcyB0aGUgc25hcCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGRpcmVjdGlvbiBvZiB0aGUgb25nb2luZyBzY3JvbGwgYmVjYXVzZSBpdCdzIGJldHRlciBVWCBmb3IgdGhlIHNjcm9sbCB0byBzbmFwXG4gICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHNjcm9sbCBpbnN0ZWFkIG9mIHJldmVyc2luZyB0byBzbmFwLiAgVGhlcmVmb3JlLFxuICAgICAgICAgICAgLy8gaWYgaXQncyBhbHJlYWR5IHNjcm9sbGVkIG1vcmUgdGhhbiAyMCUgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBrZWVwIGdvaW5nLlxuICAgICAgICAgICAgdmFyIHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBfbmV3RXZlbnQ7XG5cbiAgICAgICAgICAgIF9yZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG5cbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCAwKTsgLy8gbm8gZGVsYXk7IG1vdmUgb24gbmV4dCB0aWNrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBoYXZlbid0IGRldGVjdGVkIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvXG4gICAgICAgICAgICAvLyB3ZSdsbCBjb25zaWRlciBhIHNjcm9sbCBcImNvbXBsZXRlXCIgd2hlbiB0aGVyZSBoYXZlbid0IGJlZW4gYW55IHdoZWVsIGV2ZW50c1xuICAgICAgICAgICAgLy8gZm9yIDUwMG1zLlxuICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCA9IG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IF9uZXdFdmVudDtcblxuICAgICAgICAgICAgICBfcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuXG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBFbWl0IGV2ZW50XG5cblxuICAgICAgICBpZiAoIWlnbm9yZVdoZWVsRXZlbnRzKSBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7IC8vIFN0b3AgYXV0b3BsYXlcblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24pIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7IC8vIFJldHVybiBwYWdlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9uc1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBhbmltYXRlU2xpZGVyOiBmdW5jdGlvbiBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gICAgaWYgKHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkRGVsdGEgJiYgbmV3RXZlbnQuZGVsdGEgPCB0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZERlbHRhKSB7XG4gICAgICAvLyBQcmV2ZW50IGlmIGRlbHRhIG9mIHdoZWVsIHNjcm9sbCBkZWx0YSBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IHRoaXMucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkge1xuICAgICAgLy8gUHJldmVudCBpZiB0aW1lIGJldHdlZW4gc2Nyb2xscyBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gSWYgdGhlIG1vdmVtZW50IGlzIE5PVCBiaWcgZW5vdWdoIGFuZFxuICAgIC8vIGlmIHRoZSBsYXN0IHRpbWUgdGhlIHVzZXIgc2Nyb2xsZWQgd2FzIHRvbyBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgKGF2b2lkIGNvbnRpbnVvdXNseSB0cmlnZ2VyaW5nIHRoZSBzbGlkZXIpOlxuICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS5cblxuXG4gICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgbm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIElmIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGVuZDpcbiAgICAvLyAgIElmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgbGF0ZXN0IHNsaWRlIG9yXG4gICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAvLyAgICAgR28gdG8gbmV4dCBzbGlkZSBhbmRcbiAgICAvLyAgICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICAvLyBFbHNlICh0aGUgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgYmVnaW5uaW5nKSBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGZpcnN0IHNsaWRlIG9yXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgLy8gaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgR28gdG8gcHJldiBzbGlkZSBhbmRcbiAgICAvLyAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG5cblxuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIG5ld0V2ZW50LnJhdyk7XG4gICAgfSAvLyBJZiB5b3UgZ290IGhlcmUgaXMgYmVjYXVzZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkIHNvIHN0b3JlIHRoZSBjdXJyZW50IHRpbWVcblxuXG4gICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7IC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgcmVsZWFzZVNjcm9sbDogZnVuY3Rpb24gcmVsZWFzZVNjcm9sbChuZXdFdmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcik7XG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWxlYXZlJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0Lm9uKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBldmVudCA9IE1vdXNld2hlZWwuZXZlbnQoKTtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KTtcbiAgICB9XG5cbiAgICB0YXJnZXQub2ZmKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ21vdXNld2hlZWwnLFxuICBwYXJhbXM6IHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgIHRocmVzaG9sZFRpbWU6IG51bGxcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgbGFzdFNjcm9sbFRpbWU6IG5vdygpLFxuICAgICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwOiB1bmRlZmluZWQsXG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzOiBbXSxcbiAgICAgICAgZW5hYmxlOiBNb3VzZXdoZWVsLmVuYWJsZSxcbiAgICAgICAgZGlzYWJsZTogTW91c2V3aGVlbC5kaXNhYmxlLFxuICAgICAgICBoYW5kbGU6IE1vdXNld2hlZWwuaGFuZGxlLFxuICAgICAgICBoYW5kbGVNb3VzZUVudGVyOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIGhhbmRsZU1vdXNlTGVhdmU6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgYW5pbWF0ZVNsaWRlcjogTW91c2V3aGVlbC5hbmltYXRlU2xpZGVyLFxuICAgICAgICByZWxlYXNlU2Nyb2xsOiBNb3VzZXdoZWVsLnJlbGVhc2VTY3JvbGxcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZGlzYWJsZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG59OyIsImltcG9ydCB7IFN3aXBlciwgRWZmZWN0RmFkZSwgTmF2aWdhdGlvbiwgUGFnaW5hdGlvbiwgU2Nyb2xsYmFyLCBDb250cm9sbGVyLCBQYXJhbGxheCwgTW91c2V3aGVlbCB9IGZyb20gJ3N3aXBlcidcblN3aXBlci51c2UoW0VmZmVjdEZhZGUsIE5hdmlnYXRpb24sIFBhZ2luYXRpb24sIFNjcm9sbGJhciwgQ29udHJvbGxlciwgUGFyYWxsYXgsIE1vdXNld2hlZWxdKVxuXG5cblx0Y29uc29sZS5sb2coJ3NsaWRlcicpO1xuXG4gIG5ldyBTd2lwZXIoJy5zbGlkZXItcHJvamVjdCcsIHtcblx0XHRzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG5cdFx0c3BhY2VCZXR3ZWVuOiAzMCxcblx0XHRvYnNlcnZlcjogdHJ1ZSxcblx0XHRuYXZpZ2F0aW9uOiB7XG5cdFx0XHRuZXh0RWw6IFwiLnN3aXBlci1idXR0b24tbmV4dFwiLFxuXHRcdFx0cHJldkVsOiBcIi5zd2lwZXItYnV0dG9uLXByZXZcIixcblx0XHR9LFxuXHRcdHNjcm9sbGJhcjoge1xuXHRcdFx0ZWw6ICcuc3dpcGVyLXNjcm9sbGJhcicsXG5cdFx0XHRkcmFnZ2FibGU6IHRydWUsXG5cdFx0fSxcblxuXHRcdGJyZWFrcG9pbnRzOiB7XG5cdFx0XHQvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSAzMjBweFxuXHRcdFx0MzIwOiB7XG5cdFx0XHRcdHNwYWNlQmV0d2VlbjogMjBcblx0XHRcdH0sXG5cdFx0fVxuICB9KTtcblxuICBuZXcgU3dpcGVyKCcuc2xpZGVyLXNlcnZpY2VzLWZpbHRlcicsIHtcblx0XHRzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG5cdFx0c3BhY2VCZXR3ZWVuOiAxMCxcbiAgfSk7XG5cbiAgXG4gIG5ldyBTd2lwZXIoJy5zbGlkZXItZ2FsbGVyeScsIHtcblx0Ly8gT3B0aW9uYWwgcGFyYW1ldGVyc1xuXHQvL2RpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcblx0bG9vcDogZmFsc2UsXG5cdHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcblx0c3BhY2VCZXR3ZWVuOiAzMCxcblx0bmF2aWdhdGlvbjoge1xuXHRcdG5leHRFbDogXCIuc3dpcGVyLWJ1dHRvbi1uZXh0XCIsXG5cdFx0cHJldkVsOiBcIi5zd2lwZXItYnV0dG9uLXByZXZcIixcblx0fSxcblx0c2Nyb2xsYmFyOiB7XG5cdFx0ZWw6ICcuc3dpcGVyLXNjcm9sbGJhcicsXG5cdFx0ZHJhZ2dhYmxlOiB0cnVlLFxuXHR9XG59KTtcblxuXG5cbm5ldyBTd2lwZXIoJy5zbGlkZXItZ2FsbGVyeS1taW4nLCB7XG5cdGxvb3A6IGZhbHNlLFxuXHRzbGlkZXNQZXJWaWV3OiA0LFxuXHRzcGFjZUJldHdlZW46IDMwLFxuXHRuYXZpZ2F0aW9uOiB7XG5cdFx0bmV4dEVsOiBcIi5zd2lwZXItYnV0dG9uLW5leHRcIixcblx0XHRwcmV2RWw6IFwiLnN3aXBlci1idXR0b24tcHJldlwiLFxuXHR9LFxuXHRzY3JvbGxiYXI6IHtcblx0XHRlbDogJy5zd2lwZXItc2Nyb2xsYmFyJyxcblx0XHRkcmFnZ2FibGU6IHRydWUsXG5cdH0sXG59KTtcblxuXG5cbiAgY29uc3QgaGVhZGVyU2xpZGVyID0gbmV3IFN3aXBlcignLnNsaWRlci1oZWFkZXInLCB7XG5cdFx0Ly8gT3B0aW9uYWwgcGFyYW1ldGVyc1xuXHRcdC8vZGlyZWN0aW9uOiAndmVydGljYWwnLFxuXHRcdGxvb3A6IGZhbHNlLFxuXHRcdGVmZmVjdDogXCJmYWRlXCIsXG5cdH0pO1xuXG4gIGNvbnN0IHRodW1ic1NsaWRlciA9IG5ldyBTd2lwZXIoJy5zbGlkZXItdGh1bWJzJywge1xuXHRcdGxvb3A6IGZhbHNlLFxuXHRcdGVmZmVjdDogXCJmYWRlXCIsXG5cdFx0bmF2aWdhdGlvbjoge1xuXHRcdFx0bmV4dEVsOiBcIi5zd2lwZXItYnV0dG9uLW5leHRcIixcblx0XHRcdHByZXZFbDogXCIuc3dpcGVyLWJ1dHRvbi1wcmV2XCIsXG5cdFx0fSxcblx0XHRwYWdpbmF0aW9uOiB7XG5cdFx0XHRlbDogXCIuc3dpcGVyLXBhZ2luYXRpb25cIixcblx0XHRcdGNsaWNrYWJsZTogdHJ1ZSxcblx0XHR9LFxuXHRcdHNjcm9sbGJhcjoge1xuXHRcdFx0ZWw6ICcuc3dpcGVyLXNjcm9sbGJhcicsXG5cdFx0XHRkcmFnZ2FibGU6IHRydWUsXG5cdFx0fSxcbiAgfSk7XG5cblx0aGVhZGVyU2xpZGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IHRodW1ic1NsaWRlclxuXHR0aHVtYnNTbGlkZXIuY29udHJvbGxlci5jb250cm9sID0gaGVhZGVyU2xpZGVyXG5cblxuXHRuZXcgU3dpcGVyKCcuc2xpZGVyLXNlcnZpY2UnLCB7XG5cdFx0c2xpZGVzUGVyVmlldzogJ2F1dG8nLFxuXHRcdHNwYWNlQmV0d2VlbjogMzAsXG5cdFx0cGFnaW5hdGlvbjoge1xuXHRcdFx0ZWw6IFwiLnN3aXBlci1wYWdpbmF0aW9uXCIsXG5cdFx0XHRjbGlja2FibGU6IHRydWVcblx0XHR9LFxuXHRcdG5hdmlnYXRpb246IHtcblx0XHRcdG5leHRFbDogXCIuc3dpcGVyLWJ1dHRvbi1uZXh0XCIsXG5cdFx0XHRwcmV2RWw6IFwiLnN3aXBlci1idXR0b24tcHJldlwiLFxuXHRcdH0sXG5cdFx0c2Nyb2xsYmFyOiB7XG5cdFx0XHRlbDogJy5zd2lwZXItc2Nyb2xsYmFyJyxcblx0XHRcdGRyYWdnYWJsZTogdHJ1ZSxcblx0XHR9LFxuXHRcdGJyZWFrcG9pbnRzOiB7XG5cdFx0XHQvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSAzMjBweFxuXHRcdFx0MzIwOiB7XG5cdFx0XHRcdHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcblx0XHRcdFx0c3BhY2VCZXR3ZWVuOiAyMFxuXHRcdFx0fSxcblx0XHRcdC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDY0MHB4XG5cdFx0XHQxMTQwOiB7XG5cdFx0XHRcdHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcblx0XHRcdFx0c3BhY2VCZXR3ZWVuOiAzMFxuXHRcdFx0fVxuXHRcdH1cbiAgfSk7XG5cbiAgbmV3IFN3aXBlcignLnNsaWRlci1wcm9qZWN0LXNpbmdsZScsIHtcblxuXHRuYXZpZ2F0aW9uOiB7XG5cdFx0bmV4dEVsOiBcIi5zd2lwZXItYnV0dG9uLW5leHRcIixcblx0XHRwcmV2RWw6IFwiLnN3aXBlci1idXR0b24tcHJldlwiLFxuXHR9LFxuXG59KTtcblxuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjYuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIxLTAzLTAyVDE3OjA4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjZcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjEtMDItMTZcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdFx0XHQvLyBJbiBDaHJvbWUsIGlmIGFuIGVsZW1lbnQgaGF2aW5nIGEgZm9jdXNvdXQgaGFuZGxlciBpcyBibHVycmVkIGJ5XG5cdFx0XHRcdFx0XHQvLyBjbGlja2luZyBvdXRzaWRlIG9mIGl0LCBpdCBpbnZva2VzIHRoZSBoYW5kbGVyIHN5bmNocm9ub3VzbHkuIElmXG5cdFx0XHRcdFx0XHQvLyB0aGF0IGhhbmRsZXIgY2FsbHMgYC5yZW1vdmUoKWAgb24gdGhlIGVsZW1lbnQsIHRoZSBkYXRhIGlzIGNsZWFyZWQsXG5cdFx0XHRcdFx0XHQvLyBsZWF2aW5nIGByZXN1bHRgIHVuZGVmaW5lZC4gV2UgbmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgYXMgaXQncyBhbHJlYWR5IGJlaW5nIGZpcmVkXG5cdFx0Ly8gaW4gbGV2ZXJhZ2VOYXRpdmUuXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDcwK1xuXHRcdC8vIE9ubHkgRmlyZWZveCBpbmNsdWRlcyBib3JkZXIgd2lkdGhzXG5cdFx0Ly8gaW4gY29tcHV0ZWQgZGltZW5zaW9ucy4gKGdoLTQ1MjkpXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZVwiO1xuXHRcdFx0XHR0ci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBkaXNwbGF5OiBibG9ja1xuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xuXG4vKiAgalF1ZXJ5IE5pY2UgU2VsZWN0IC0gdjEuMS4wXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2hlcm5hbnNhcnRvcmlvL2pxdWVyeS1uaWNlLXNlbGVjdFxuICAgIE1hZGUgYnkgSGVybsOhbiBTYXJ0b3JpbyAgKi9cbiBcbiAgICAoZnVuY3Rpb24oJCkge1xuXG4gICAgICAgICQuZm4ubmljZVNlbGVjdCA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIE1ldGhvZHNcbiAgICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCA9PSAnc3RyaW5nJykgeyAgICAgIFxuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PSAndXBkYXRlJykge1xuICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyICRzZWxlY3QgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciAkZHJvcGRvd24gPSAkKHRoaXMpLm5leHQoJy5uaWNlLXNlbGVjdCcpO1xuICAgICAgICAgICAgICAgIHZhciBvcGVuID0gJGRyb3Bkb3duLmhhc0NsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCRkcm9wZG93bi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICRkcm9wZG93bi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZV9uaWNlX3NlbGVjdCgkc2VsZWN0KTtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgJHNlbGVjdC5uZXh0KCkudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT0gJ2Rlc3Ryb3knKSB7XG4gICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgJHNlbGVjdCA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgdmFyICRkcm9wZG93biA9ICQodGhpcykubmV4dCgnLm5pY2Utc2VsZWN0Jyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCRkcm9wZG93bi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICRkcm9wZG93bi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICRzZWxlY3QuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmICgkKCcubmljZS1zZWxlY3QnKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignLm5pY2Vfc2VsZWN0Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNZXRob2QgXCInICsgbWV0aG9kICsgJ1wiIGRvZXMgbm90IGV4aXN0LicpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAvLyBIaWRlIG5hdGl2ZSBzZWxlY3RcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDcmVhdGUgY3VzdG9tIG1hcmt1cFxuICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkc2VsZWN0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCEkc2VsZWN0Lm5leHQoKS5oYXNDbGFzcygnbmljZS1zZWxlY3QnKSkge1xuICAgICAgICAgICAgICBjcmVhdGVfbmljZV9zZWxlY3QoJHNlbGVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgZnVuY3Rpb24gY3JlYXRlX25pY2Vfc2VsZWN0KCRzZWxlY3QpIHtcbiAgICAgICAgICAgICRzZWxlY3QuYWZ0ZXIoJCgnPGRpdj48L2Rpdj4nKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ25pY2Utc2VsZWN0JylcbiAgICAgICAgICAgICAgLmFkZENsYXNzKCRzZWxlY3QuYXR0cignY2xhc3MnKSB8fCAnJylcbiAgICAgICAgICAgICAgLmFkZENsYXNzKCRzZWxlY3QuYXR0cignZGlzYWJsZWQnKSA/ICdkaXNhYmxlZCcgOiAnJylcbiAgICAgICAgICAgICAgLmF0dHIoJ3RhYmluZGV4JywgJHNlbGVjdC5hdHRyKCdkaXNhYmxlZCcpID8gbnVsbCA6ICcwJylcbiAgICAgICAgICAgICAgLmh0bWwoJzxzcGFuIGNsYXNzPVwiY3VycmVudFwiPjwvc3Bhbj48dWwgY2xhc3M9XCJsaXN0XCI+PC91bD4nKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgJGRyb3Bkb3duID0gJHNlbGVjdC5uZXh0KCk7XG4gICAgICAgICAgICB2YXIgJG9wdGlvbnMgPSAkc2VsZWN0LmZpbmQoJ29wdGlvbicpO1xuICAgICAgICAgICAgdmFyICRzZWxlY3RlZCA9ICRzZWxlY3QuZmluZCgnb3B0aW9uOnNlbGVjdGVkJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRkcm9wZG93bi5maW5kKCcuY3VycmVudCcpLmh0bWwoJHNlbGVjdGVkLmRhdGEoJ2Rpc3BsYXknKSB8fMKgJHNlbGVjdGVkLnRleHQoKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICRvcHRpb25zLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICB2YXIgJG9wdGlvbiA9ICQodGhpcyk7XG4gICAgICAgICAgICAgIHZhciBkaXNwbGF5ID0gJG9wdGlvbi5kYXRhKCdkaXNwbGF5Jyk7XG4gICAgICBcbiAgICAgICAgICAgICAgJGRyb3Bkb3duLmZpbmQoJ3VsJykuYXBwZW5kKCQoJzxsaT48L2xpPicpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtdmFsdWUnLCAkb3B0aW9uLnZhbCgpKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLWRpc3BsYXknLCAoZGlzcGxheSB8fCBudWxsKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ29wdGlvbicgK1xuICAgICAgICAgICAgICAgICAgKCRvcHRpb24uaXMoJzpzZWxlY3RlZCcpID8gJyBzZWxlY3RlZCcgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKCRvcHRpb24uaXMoJzpkaXNhYmxlZCcpID8gJyBkaXNhYmxlZCcgOiAnJykpXG4gICAgICAgICAgICAgICAgLmh0bWwoJG9wdGlvbi50ZXh0KCkpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLyogRXZlbnQgbGlzdGVuZXJzICovXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVW5iaW5kIGV4aXN0aW5nIGV2ZW50cyBpbiBjYXNlIHRoYXQgdGhlIHBsdWdpbiBoYXMgYmVlbiBpbml0aWFsaXplZCBiZWZvcmVcbiAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJy5uaWNlX3NlbGVjdCcpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIE9wZW4vY2xvc2VcbiAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2submljZV9zZWxlY3QnLCAnLm5pY2Utc2VsZWN0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciAkZHJvcGRvd24gPSAkKHRoaXMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkKCcubmljZS1zZWxlY3QnKS5ub3QoJGRyb3Bkb3duKS5yZW1vdmVDbGFzcygnb3BlbicpO1xuICAgICAgICAgICAgJGRyb3Bkb3duLnRvZ2dsZUNsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICgkZHJvcGRvd24uaGFzQ2xhc3MoJ29wZW4nKSkge1xuICAgICAgICAgICAgICAkZHJvcGRvd24uZmluZCgnLm9wdGlvbicpOyAgXG4gICAgICAgICAgICAgICRkcm9wZG93bi5maW5kKCcuZm9jdXMnKS5yZW1vdmVDbGFzcygnZm9jdXMnKTtcbiAgICAgICAgICAgICAgJGRyb3Bkb3duLmZpbmQoJy5zZWxlY3RlZCcpLmFkZENsYXNzKCdmb2N1cycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJGRyb3Bkb3duLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2xvc2Ugd2hlbiBjbGlja2luZyBvdXRzaWRlXG4gICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrLm5pY2Vfc2VsZWN0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuY2xvc2VzdCgnLm5pY2Utc2VsZWN0JykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICQoJy5uaWNlLXNlbGVjdCcpLnJlbW92ZUNsYXNzKCdvcGVuJykuZmluZCgnLm9wdGlvbicpOyAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gT3B0aW9uIGNsaWNrXG4gICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrLm5pY2Vfc2VsZWN0JywgJy5uaWNlLXNlbGVjdCAub3B0aW9uOm5vdCguZGlzYWJsZWQpJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciAkb3B0aW9uID0gJCh0aGlzKTtcbiAgICAgICAgICAgIHZhciAkZHJvcGRvd24gPSAkb3B0aW9uLmNsb3Nlc3QoJy5uaWNlLXNlbGVjdCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkZHJvcGRvd24uZmluZCgnLnNlbGVjdGVkJykucmVtb3ZlQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAkb3B0aW9uLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdGV4dCA9ICRvcHRpb24uZGF0YSgnZGlzcGxheScpIHx8ICRvcHRpb24udGV4dCgpO1xuICAgICAgICAgICAgJGRyb3Bkb3duLmZpbmQoJy5jdXJyZW50JykudGV4dCh0ZXh0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJGRyb3Bkb3duLnByZXYoJ3NlbGVjdCcpLnZhbCgkb3B0aW9uLmRhdGEoJ3ZhbHVlJykpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgXG4gICAgICAgICAgLy8gS2V5Ym9hcmQgZXZlbnRzXG4gICAgICAgICAgJChkb2N1bWVudCkub24oJ2tleWRvd24ubmljZV9zZWxlY3QnLCAnLm5pY2Utc2VsZWN0JywgZnVuY3Rpb24oZXZlbnQpIHsgICAgXG4gICAgICAgICAgICB2YXIgJGRyb3Bkb3duID0gJCh0aGlzKTtcbiAgICAgICAgICAgIHZhciAkZm9jdXNlZF9vcHRpb24gPSAkKCRkcm9wZG93bi5maW5kKCcuZm9jdXMnKSB8fCAkZHJvcGRvd24uZmluZCgnLmxpc3QgLm9wdGlvbi5zZWxlY3RlZCcpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU3BhY2Ugb3IgRW50ZXJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDMyIHx8IGV2ZW50LmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgICAgaWYgKCRkcm9wZG93bi5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgICAgICAgJGZvY3VzZWRfb3B0aW9uLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGRyb3Bkb3duLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgLy8gRG93blxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09IDQwKSB7XG4gICAgICAgICAgICAgIGlmICghJGRyb3Bkb3duLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgICAgICAgICAkZHJvcGRvd24udHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgJG5leHQgPSAkZm9jdXNlZF9vcHRpb24ubmV4dEFsbCgnLm9wdGlvbjpub3QoLmRpc2FibGVkKScpLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCRuZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICRkcm9wZG93bi5maW5kKCcuZm9jdXMnKS5yZW1vdmVDbGFzcygnZm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICRuZXh0LmFkZENsYXNzKCdmb2N1cycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAvLyBVcFxuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09IDM4KSB7XG4gICAgICAgICAgICAgIGlmICghJGRyb3Bkb3duLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgICAgICAgICAkZHJvcGRvd24udHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgJHByZXYgPSAkZm9jdXNlZF9vcHRpb24ucHJldkFsbCgnLm9wdGlvbjpub3QoLmRpc2FibGVkKScpLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCRwcmV2Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICRkcm9wZG93bi5maW5kKCcuZm9jdXMnKS5yZW1vdmVDbGFzcygnZm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICRwcmV2LmFkZENsYXNzKCdmb2N1cycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAvLyBFc2NcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSAyNykge1xuICAgICAgICAgICAgICBpZiAoJGRyb3Bkb3duLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgICAgICAgICAkZHJvcGRvd24udHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGFiXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT0gOSkge1xuICAgICAgICAgICAgICBpZiAoJGRyb3Bkb3duLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIFxuICAgICAgICAgIC8vIERldGVjdCBDU1MgcG9pbnRlci1ldmVudHMgc3VwcG9ydCwgZm9yIElFIDw9IDEwLiBGcm9tIE1vZGVybml6ci5cbiAgICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJykuc3R5bGU7XG4gICAgICAgICAgc3R5bGUuY3NzVGV4dCA9ICdwb2ludGVyLWV2ZW50czphdXRvJztcbiAgICAgICAgICBpZiAoc3R5bGUucG9pbnRlckV2ZW50cyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAkKCdodG1sJykuYWRkQ2xhc3MoJ25vLWNzc3BvaW50ZXJldmVudHMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICBcbiAgICAgICAgfTtcbiAgICAgIFxuICAgICAgfSgkKSk7XG5cbiAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCdzZWxlY3QnKS5uaWNlU2VsZWN0KCk7XG4gICAgICB9KTsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qIVxuICogR1NBUCAzLjguMFxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IDIwMDgtMjAyMSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfY29uZmlnID0ge1xuICBhdXRvU2xlZXA6IDEyMCxcbiAgZm9yY2UzRDogXCJhdXRvXCIsXG4gIG51bGxUYXJnZXRXYXJuOiAxLFxuICB1bml0czoge1xuICAgIGxpbmVIZWlnaHQ6IFwiXCJcbiAgfVxufSxcbiAgICBfZGVmYXVsdHMgPSB7XG4gIGR1cmF0aW9uOiAuNSxcbiAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgZGVsYXk6IDBcbn0sXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfYmlnTnVtID0gMWU4LFxuICAgIF90aW55TnVtID0gMSAvIF9iaWdOdW0sXG4gICAgXzJQSSA9IE1hdGguUEkgKiAyLFxuICAgIF9IQUxGX1BJID0gXzJQSSAvIDQsXG4gICAgX2dzSUQgPSAwLFxuICAgIF9zcXJ0ID0gTWF0aC5zcXJ0LFxuICAgIF9jb3MgPSBNYXRoLmNvcyxcbiAgICBfc2luID0gTWF0aC5zaW4sXG4gICAgX2lzU3RyaW5nID0gZnVuY3Rpb24gX2lzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCI7XG59LFxuICAgIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24gX2lzRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xufSxcbiAgICBfaXNOdW1iZXIgPSBmdW5jdGlvbiBfaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIjtcbn0sXG4gICAgX2lzVW5kZWZpbmVkID0gZnVuY3Rpb24gX2lzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfaXNOb3RGYWxzZSA9IGZ1bmN0aW9uIF9pc05vdEZhbHNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gZmFsc2U7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2lzRnVuY09yU3RyaW5nID0gZnVuY3Rpb24gX2lzRnVuY09yU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgfHwgX2lzU3RyaW5nKHZhbHVlKTtcbn0sXG4gICAgX2lzVHlwZWRBcnJheSA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5QnVmZmVyLmlzVmlldyB8fCBmdW5jdGlvbiAoKSB7fSxcbiAgICAvLyBub3RlOiBJRTEwIGhhcyBBcnJheUJ1ZmZlciwgYnV0IE5PVCBBcnJheUJ1ZmZlci5pc1ZpZXcoKS5cbl9pc0FycmF5ID0gQXJyYXkuaXNBcnJheSxcbiAgICBfc3RyaWN0TnVtRXhwID0gLyg/Oi0/XFwuP1xcZHxcXC4pKy9naSxcbiAgICAvL29ubHkgbnVtYmVycyAoaW5jbHVkaW5nIG5lZ2F0aXZlcyBhbmQgZGVjaW1hbHMpIGJ1dCBOT1QgcmVsYXRpdmUgdmFsdWVzLlxuX251bUV4cCA9IC9bLSs9Ll0qXFxkK1suZVxcLStdKlxcZCpbZVxcLStdKlxcZCovZyxcbiAgICAvL2ZpbmRzIGFueSBudW1iZXJzLCBpbmNsdWRpbmcgb25lcyB0aGF0IHN0YXJ0IHdpdGggKz0gb3IgLT0sIG5lZ2F0aXZlIG51bWJlcnMsIGFuZCBvbmVzIGluIHNjaWVudGlmaWMgbm90YXRpb24gbGlrZSAxZS04LlxuX251bVdpdGhVbml0RXhwID0gL1stKz0uXSpcXGQrWy5lLV0qXFxkKlthLXolXSovZyxcbiAgICBfY29tcGxleFN0cmluZ051bUV4cCA9IC9bLSs9Ll0qXFxkK1xcLj9cXGQqKD86ZS18ZVxcKyk/XFxkKi9naSxcbiAgICAvL2R1cGxpY2F0ZSBzbyB0aGF0IHdoaWxlIHdlJ3JlIGxvb3BpbmcgdGhyb3VnaCBtYXRjaGVzIGZyb20gZXhlYygpLCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBsYXN0SW5kZXggb2YgX251bUV4cCB3aGljaCB3ZSB1c2UgdG8gc2VhcmNoIGZvciBjb2xvcnMgdG9vLlxuX3JlbEV4cCA9IC9bKy1dPS0/Wy5cXGRdKy8sXG4gICAgX2RlbGltaXRlZFZhbHVlRXhwID0gL1teLCdcIlxcW1xcXVxcc10rL2dpLFxuICAgIC8vIHByZXZpb3VzbHkgL1sjXFwtKy5dKlxcYlthLXpcXGRcXC09KyUuXSsvZ2kgYnV0IGRpZG4ndCBjYXRjaCBzcGVjaWFsIGNoYXJhY3RlcnMuXG5fdW5pdEV4cCA9IC9bXFxkLitcXC09XSsoPzplWy0rXVxcZCopKi9pLFxuICAgIF9nbG9iYWxUaW1lbGluZSxcbiAgICBfd2luLFxuICAgIF9jb3JlSW5pdHRlZCxcbiAgICBfZG9jLFxuICAgIF9nbG9iYWxzID0ge30sXG4gICAgX2luc3RhbGxTY29wZSA9IHt9LFxuICAgIF9jb3JlUmVhZHksXG4gICAgX2luc3RhbGwgPSBmdW5jdGlvbiBfaW5zdGFsbChzY29wZSkge1xuICByZXR1cm4gKF9pbnN0YWxsU2NvcGUgPSBfbWVyZ2Uoc2NvcGUsIF9nbG9iYWxzKSkgJiYgZ3NhcDtcbn0sXG4gICAgX21pc3NpbmdQbHVnaW4gPSBmdW5jdGlvbiBfbWlzc2luZ1BsdWdpbihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihcIkludmFsaWQgcHJvcGVydHlcIiwgcHJvcGVydHksIFwic2V0IHRvXCIsIHZhbHVlLCBcIk1pc3NpbmcgcGx1Z2luPyBnc2FwLnJlZ2lzdGVyUGx1Z2luKClcIik7XG59LFxuICAgIF93YXJuID0gZnVuY3Rpb24gX3dhcm4obWVzc2FnZSwgc3VwcHJlc3MpIHtcbiAgcmV0dXJuICFzdXBwcmVzcyAmJiBjb25zb2xlLndhcm4obWVzc2FnZSk7XG59LFxuICAgIF9hZGRHbG9iYWwgPSBmdW5jdGlvbiBfYWRkR2xvYmFsKG5hbWUsIG9iaikge1xuICByZXR1cm4gbmFtZSAmJiAoX2dsb2JhbHNbbmFtZV0gPSBvYmopICYmIF9pbnN0YWxsU2NvcGUgJiYgKF9pbnN0YWxsU2NvcGVbbmFtZV0gPSBvYmopIHx8IF9nbG9iYWxzO1xufSxcbiAgICBfZW1wdHlGdW5jID0gZnVuY3Rpb24gX2VtcHR5RnVuYygpIHtcbiAgcmV0dXJuIDA7XG59LFxuICAgIF9yZXNlcnZlZFByb3BzID0ge30sXG4gICAgX2xhenlUd2VlbnMgPSBbXSxcbiAgICBfbGF6eUxvb2t1cCA9IHt9LFxuICAgIF9sYXN0UmVuZGVyZWRGcmFtZSxcbiAgICBfcGx1Z2lucyA9IHt9LFxuICAgIF9lZmZlY3RzID0ge30sXG4gICAgX25leHRHQ0ZyYW1lID0gMzAsXG4gICAgX2hhcm5lc3NQbHVnaW5zID0gW10sXG4gICAgX2NhbGxiYWNrTmFtZXMgPSBcIlwiLFxuICAgIF9oYXJuZXNzID0gZnVuY3Rpb24gX2hhcm5lc3ModGFyZ2V0cykge1xuICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1swXSxcbiAgICAgIGhhcm5lc3NQbHVnaW4sXG4gICAgICBpO1xuICBfaXNPYmplY3QodGFyZ2V0KSB8fCBfaXNGdW5jdGlvbih0YXJnZXQpIHx8ICh0YXJnZXRzID0gW3RhcmdldHNdKTtcblxuICBpZiAoIShoYXJuZXNzUGx1Z2luID0gKHRhcmdldC5fZ3NhcCB8fCB7fSkuaGFybmVzcykpIHtcbiAgICAvLyBmaW5kIHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBhIGhhcm5lc3MuIFdlIGFzc3VtZSB0YXJnZXRzIHBhc3NlZCBpbnRvIGFuIGFuaW1hdGlvbiB3aWxsIGJlIG9mIHNpbWlsYXIgdHlwZSwgbWVhbmluZyB0aGUgc2FtZSBraW5kIG9mIGhhcm5lc3MgY2FuIGJlIHVzZWQgZm9yIHRoZW0gYWxsIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgaSA9IF9oYXJuZXNzUGx1Z2lucy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tICYmICFfaGFybmVzc1BsdWdpbnNbaV0udGFyZ2V0VGVzdCh0YXJnZXQpKSB7fVxuXG4gICAgaGFybmVzc1BsdWdpbiA9IF9oYXJuZXNzUGx1Z2luc1tpXTtcbiAgfVxuXG4gIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgdGFyZ2V0c1tpXSAmJiAodGFyZ2V0c1tpXS5fZ3NhcCB8fCAodGFyZ2V0c1tpXS5fZ3NhcCA9IG5ldyBHU0NhY2hlKHRhcmdldHNbaV0sIGhhcm5lc3NQbHVnaW4pKSkgfHwgdGFyZ2V0cy5zcGxpY2UoaSwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0cztcbn0sXG4gICAgX2dldENhY2hlID0gZnVuY3Rpb24gX2dldENhY2hlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRvQXJyYXkodGFyZ2V0KSlbMF0uX2dzYXA7XG59LFxuICAgIF9nZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCB2KSB7XG4gIHJldHVybiAodiA9IHRhcmdldFtwcm9wZXJ0eV0pICYmIF9pc0Z1bmN0aW9uKHYpID8gdGFyZ2V0W3Byb3BlcnR5XSgpIDogX2lzVW5kZWZpbmVkKHYpICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShwcm9wZXJ0eSkgfHwgdjtcbn0sXG4gICAgX2ZvckVhY2hOYW1lID0gZnVuY3Rpb24gX2ZvckVhY2hOYW1lKG5hbWVzLCBmdW5jKSB7XG4gIHJldHVybiAobmFtZXMgPSBuYW1lcy5zcGxpdChcIixcIikpLmZvckVhY2goZnVuYykgfHwgbmFtZXM7XG59LFxuICAgIC8vc3BsaXQgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBuYW1lcyBpbnRvIGFuIGFycmF5LCB0aGVuIHJ1biBhIGZvckVhY2goKSBmdW5jdGlvbiBhbmQgcmV0dXJuIHRoZSBzcGxpdCBhcnJheSAodGhpcyBpcyBqdXN0IGEgd2F5IHRvIGNvbnNvbGlkYXRlL3Nob3J0ZW4gc29tZSBjb2RlKS5cbl9yb3VuZCA9IGZ1bmN0aW9uIF9yb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwMDAwMCkgLyAxMDAwMDAgfHwgMDtcbn0sXG4gICAgX3JvdW5kUHJlY2lzZSA9IGZ1bmN0aW9uIF9yb3VuZFByZWNpc2UodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDAwMCkgLyAxMDAwMDAwMCB8fCAwO1xufSxcbiAgICAvLyBpbmNyZWFzZWQgcHJlY2lzaW9uIG1vc3RseSBmb3IgdGltaW5nIHZhbHVlcy5cbl9hcnJheUNvbnRhaW5zQW55ID0gZnVuY3Rpb24gX2FycmF5Q29udGFpbnNBbnkodG9TZWFyY2gsIHRvRmluZCkge1xuICAvL3NlYXJjaGVzIG9uZSBhcnJheSB0byBmaW5kIG1hdGNoZXMgZm9yIGFueSBvZiB0aGUgaXRlbXMgaW4gdGhlIHRvRmluZCBhcnJheS4gQXMgc29vbiBhcyBvbmUgaXMgZm91bmQsIGl0IHJldHVybnMgdHJ1ZS4gSXQgZG9lcyBOT1QgcmV0dXJuIGFsbCB0aGUgbWF0Y2hlczsgaXQncyBzaW1wbHkgYSBib29sZWFuIHNlYXJjaC5cbiAgdmFyIGwgPSB0b0ZpbmQubGVuZ3RoLFxuICAgICAgaSA9IDA7XG5cbiAgZm9yICg7IHRvU2VhcmNoLmluZGV4T2YodG9GaW5kW2ldKSA8IDAgJiYgKytpIDwgbDspIHt9XG5cbiAgcmV0dXJuIGkgPCBsO1xufSxcbiAgICBfbGF6eVJlbmRlciA9IGZ1bmN0aW9uIF9sYXp5UmVuZGVyKCkge1xuICB2YXIgbCA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcbiAgICAgIGEgPSBfbGF6eVR3ZWVucy5zbGljZSgwKSxcbiAgICAgIGksXG4gICAgICB0d2VlbjtcblxuICBfbGF6eUxvb2t1cCA9IHt9O1xuICBfbGF6eVR3ZWVucy5sZW5ndGggPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICB0d2VlbiA9IGFbaV07XG4gICAgdHdlZW4gJiYgdHdlZW4uX2xhenkgJiYgKHR3ZWVuLnJlbmRlcih0d2Vlbi5fbGF6eVswXSwgdHdlZW4uX2xhenlbMV0sIHRydWUpLl9sYXp5ID0gMCk7XG4gIH1cbn0sXG4gICAgX2xhenlTYWZlUmVuZGVyID0gZnVuY3Rpb24gX2xhenlTYWZlUmVuZGVyKGFuaW1hdGlvbiwgdGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpO1xuICBhbmltYXRpb24ucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gc29tZW9uZSBjYWxscyBzZWVrKCkgb3IgdGltZSgpIG9yIHByb2dyZXNzKCksIHRoZXkgZXhwZWN0IGFuIGltbWVkaWF0ZSByZW5kZXIuXG59LFxuICAgIF9udW1lcmljSWZQb3NzaWJsZSA9IGZ1bmN0aW9uIF9udW1lcmljSWZQb3NzaWJsZSh2YWx1ZSkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICByZXR1cm4gKG4gfHwgbiA9PT0gMCkgJiYgKHZhbHVlICsgXCJcIikubWF0Y2goX2RlbGltaXRlZFZhbHVlRXhwKS5sZW5ndGggPCAyID8gbiA6IF9pc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn0sXG4gICAgX3Bhc3NUaHJvdWdoID0gZnVuY3Rpb24gX3Bhc3NUaHJvdWdoKHApIHtcbiAgcmV0dXJuIHA7XG59LFxuICAgIF9zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIF9zZXREZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCAob2JqW3BdID0gZGVmYXVsdHNbcF0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0sXG4gICAgX3NldEtleWZyYW1lRGVmYXVsdHMgPSBmdW5jdGlvbiBfc2V0S2V5ZnJhbWVEZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7XG4gIGZvciAodmFyIHAgaW4gZGVmYXVsdHMpIHtcbiAgICBwIGluIG9iaiB8fCBwID09PSBcImR1cmF0aW9uXCIgfHwgcCA9PT0gXCJlYXNlXCIgfHwgKG9ialtwXSA9IGRlZmF1bHRzW3BdKTtcbiAgfVxufSxcbiAgICBfbWVyZ2UgPSBmdW5jdGlvbiBfbWVyZ2UoYmFzZSwgdG9NZXJnZSkge1xuICBmb3IgKHZhciBwIGluIHRvTWVyZ2UpIHtcbiAgICBiYXNlW3BdID0gdG9NZXJnZVtwXTtcbiAgfVxuXG4gIHJldHVybiBiYXNlO1xufSxcbiAgICBfbWVyZ2VEZWVwID0gZnVuY3Rpb24gX21lcmdlRGVlcChiYXNlLCB0b01lcmdlKSB7XG4gIGZvciAodmFyIHAgaW4gdG9NZXJnZSkge1xuICAgIHAgIT09IFwiX19wcm90b19fXCIgJiYgcCAhPT0gXCJjb25zdHJ1Y3RvclwiICYmIHAgIT09IFwicHJvdG90eXBlXCIgJiYgKGJhc2VbcF0gPSBfaXNPYmplY3QodG9NZXJnZVtwXSkgPyBfbWVyZ2VEZWVwKGJhc2VbcF0gfHwgKGJhc2VbcF0gPSB7fSksIHRvTWVyZ2VbcF0pIDogdG9NZXJnZVtwXSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn0sXG4gICAgX2NvcHlFeGNsdWRpbmcgPSBmdW5jdGlvbiBfY29weUV4Y2x1ZGluZyhvYmosIGV4Y2x1ZGluZykge1xuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gb2JqKSB7XG4gICAgcCBpbiBleGNsdWRpbmcgfHwgKGNvcHlbcF0gPSBvYmpbcF0pO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9pbmhlcml0RGVmYXVsdHMgPSBmdW5jdGlvbiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpIHtcbiAgdmFyIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgIGZ1bmMgPSB2YXJzLmtleWZyYW1lcyA/IF9zZXRLZXlmcmFtZURlZmF1bHRzIDogX3NldERlZmF1bHRzO1xuXG4gIGlmIChfaXNOb3RGYWxzZSh2YXJzLmluaGVyaXQpKSB7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgZnVuYyh2YXJzLCBwYXJlbnQudmFycy5kZWZhdWx0cyk7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50IHx8IHBhcmVudC5fZHA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhcnM7XG59LFxuICAgIF9hcnJheXNNYXRjaCA9IGZ1bmN0aW9uIF9hcnJheXNNYXRjaChhMSwgYTIpIHtcbiAgdmFyIGkgPSBhMS5sZW5ndGgsXG4gICAgICBtYXRjaCA9IGkgPT09IGEyLmxlbmd0aDtcblxuICB3aGlsZSAobWF0Y2ggJiYgaS0tICYmIGExW2ldID09PSBhMltpXSkge31cblxuICByZXR1cm4gaSA8IDA7XG59LFxuICAgIF9hZGRMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9hZGRMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wLCBzb3J0QnkpIHtcbiAgaWYgKGZpcnN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgZmlyc3RQcm9wID0gXCJfZmlyc3RcIjtcbiAgfVxuXG4gIGlmIChsYXN0UHJvcCA9PT0gdm9pZCAwKSB7XG4gICAgbGFzdFByb3AgPSBcIl9sYXN0XCI7XG4gIH1cblxuICB2YXIgcHJldiA9IHBhcmVudFtsYXN0UHJvcF0sXG4gICAgICB0O1xuXG4gIGlmIChzb3J0QnkpIHtcbiAgICB0ID0gY2hpbGRbc29ydEJ5XTtcblxuICAgIHdoaWxlIChwcmV2ICYmIHByZXZbc29ydEJ5XSA+IHQpIHtcbiAgICAgIHByZXYgPSBwcmV2Ll9wcmV2O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgY2hpbGQuX25leHQgPSBwcmV2Ll9uZXh0O1xuICAgIHByZXYuX25leHQgPSBjaGlsZDtcbiAgfSBlbHNlIHtcbiAgICBjaGlsZC5fbmV4dCA9IHBhcmVudFtmaXJzdFByb3BdO1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gY2hpbGQ7XG4gIH1cblxuICBpZiAoY2hpbGQuX25leHQpIHtcbiAgICBjaGlsZC5fbmV4dC5fcHJldiA9IGNoaWxkO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFtsYXN0UHJvcF0gPSBjaGlsZDtcbiAgfVxuXG4gIGNoaWxkLl9wcmV2ID0gcHJldjtcbiAgY2hpbGQucGFyZW50ID0gY2hpbGQuX2RwID0gcGFyZW50O1xuICByZXR1cm4gY2hpbGQ7XG59LFxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSA9IGZ1bmN0aW9uIF9yZW1vdmVMaW5rZWRMaXN0SXRlbShwYXJlbnQsIGNoaWxkLCBmaXJzdFByb3AsIGxhc3RQcm9wKSB7XG4gIGlmIChmaXJzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGZpcnN0UHJvcCA9IFwiX2ZpcnN0XCI7XG4gIH1cblxuICBpZiAobGFzdFByb3AgPT09IHZvaWQgMCkge1xuICAgIGxhc3RQcm9wID0gXCJfbGFzdFwiO1xuICB9XG5cbiAgdmFyIHByZXYgPSBjaGlsZC5fcHJldixcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICBpZiAocHJldikge1xuICAgIHByZXYuX25leHQgPSBuZXh0O1xuICB9IGVsc2UgaWYgKHBhcmVudFtmaXJzdFByb3BdID09PSBjaGlsZCkge1xuICAgIHBhcmVudFtmaXJzdFByb3BdID0gbmV4dDtcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5fcHJldiA9IHByZXY7XG4gIH0gZWxzZSBpZiAocGFyZW50W2xhc3RQcm9wXSA9PT0gY2hpbGQpIHtcbiAgICBwYXJlbnRbbGFzdFByb3BdID0gcHJldjtcbiAgfVxuXG4gIGNoaWxkLl9uZXh0ID0gY2hpbGQuX3ByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsOyAvLyBkb24ndCBkZWxldGUgdGhlIF9kcCBqdXN0IHNvIHdlIGNhbiByZXZlcnQgaWYgbmVjZXNzYXJ5LiBCdXQgcGFyZW50IHNob3VsZCBiZSBudWxsIHRvIGluZGljYXRlIHRoZSBpdGVtIGlzbid0IGluIGEgbGlua2VkIGxpc3QuXG59LFxuICAgIF9yZW1vdmVGcm9tUGFyZW50ID0gZnVuY3Rpb24gX3JlbW92ZUZyb21QYXJlbnQoY2hpbGQsIG9ubHlJZlBhcmVudEhhc0F1dG9SZW1vdmUpIHtcbiAgY2hpbGQucGFyZW50ICYmICghb25seUlmUGFyZW50SGFzQXV0b1JlbW92ZSB8fCBjaGlsZC5wYXJlbnQuYXV0b1JlbW92ZUNoaWxkcmVuKSAmJiBjaGlsZC5wYXJlbnQucmVtb3ZlKGNoaWxkKTtcbiAgY2hpbGQuX2FjdCA9IDA7XG59LFxuICAgIF91bmNhY2hlID0gZnVuY3Rpb24gX3VuY2FjaGUoYW5pbWF0aW9uLCBjaGlsZCkge1xuICBpZiAoYW5pbWF0aW9uICYmICghY2hpbGQgfHwgY2hpbGQuX2VuZCA+IGFuaW1hdGlvbi5fZHVyIHx8IGNoaWxkLl9zdGFydCA8IDApKSB7XG4gICAgLy8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiBpZiBhIGNoaWxkIGFuaW1hdGlvbiBpcyBwYXNzZWQgaW4gd2Ugc2hvdWxkIG9ubHkgdW5jYWNoZSBpZiB0aGF0IGNoaWxkIEVYVEVORFMgdGhlIGFuaW1hdGlvbiAoaXRzIGVuZCB0aW1lIGlzIGJleW9uZCB0aGUgZW5kKVxuICAgIHZhciBhID0gYW5pbWF0aW9uO1xuXG4gICAgd2hpbGUgKGEpIHtcbiAgICAgIGEuX2RpcnR5ID0gMTtcbiAgICAgIGEgPSBhLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcmVjYWNoZUFuY2VzdG9ycyA9IGZ1bmN0aW9uIF9yZWNhY2hlQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICB2YXIgcGFyZW50ID0gYW5pbWF0aW9uLnBhcmVudDtcblxuICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAvL3NvbWV0aW1lcyB3ZSBtdXN0IGZvcmNlIGEgcmUtc29ydCBvZiBhbGwgY2hpbGRyZW4gYW5kIHVwZGF0ZSB0aGUgZHVyYXRpb24vdG90YWxEdXJhdGlvbiBvZiBhbGwgYW5jZXN0b3IgdGltZWxpbmVzIGltbWVkaWF0ZWx5IGluIGNhc2UsIGZvciBleGFtcGxlLCBpbiB0aGUgbWlkZGxlIG9mIGEgcmVuZGVyIGxvb3AsIG9uZSB0d2VlbiBhbHRlcnMgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSB3aGljaCBzaG92ZXMgaXRzIHN0YXJ0VGltZSBiZWZvcmUgMCwgZm9yY2luZyB0aGUgcGFyZW50IHRpbWVsaW5lIHRvIHNoaWZ0IGFyb3VuZCBhbmQgc2hpZnRDaGlsZHJlbigpIHdoaWNoIGNvdWxkIGFmZmVjdCB0aGF0IG5leHQgdHdlZW4ncyByZW5kZXIgKHN0YXJ0VGltZSkuIERvZXNuJ3QgbWF0dGVyIGZvciB0aGUgcm9vdCB0aW1lbGluZSB0aG91Z2guXG4gICAgcGFyZW50Ll9kaXJ0eSA9IDE7XG4gICAgcGFyZW50LnRvdGFsRHVyYXRpb24oKTtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG4gICAgX2hhc05vUGF1c2VkQW5jZXN0b3JzID0gZnVuY3Rpb24gX2hhc05vUGF1c2VkQW5jZXN0b3JzKGFuaW1hdGlvbikge1xuICByZXR1cm4gIWFuaW1hdGlvbiB8fCBhbmltYXRpb24uX3RzICYmIF9oYXNOb1BhdXNlZEFuY2VzdG9ycyhhbmltYXRpb24ucGFyZW50KTtcbn0sXG4gICAgX2VsYXBzZWRDeWNsZUR1cmF0aW9uID0gZnVuY3Rpb24gX2VsYXBzZWRDeWNsZUR1cmF0aW9uKGFuaW1hdGlvbikge1xuICByZXR1cm4gYW5pbWF0aW9uLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUoYW5pbWF0aW9uLl90VGltZSwgYW5pbWF0aW9uID0gYW5pbWF0aW9uLmR1cmF0aW9uKCkgKyBhbmltYXRpb24uX3JEZWxheSkgKiBhbmltYXRpb24gOiAwO1xufSxcbiAgICAvLyBmZWVkIGluIHRoZSB0b3RhbFRpbWUgYW5kIGN5Y2xlRHVyYXRpb24gYW5kIGl0J2xsIHJldHVybiB0aGUgY3ljbGUgKGl0ZXJhdGlvbiBtaW51cyAxKSBhbmQgaWYgdGhlIHBsYXloZWFkIGlzIGV4YWN0bHkgYXQgdGhlIHZlcnkgRU5ELCBpdCB3aWxsIE5PVCBidW1wIHVwIHRvIHRoZSBuZXh0IGN5Y2xlLlxuX2FuaW1hdGlvbkN5Y2xlID0gZnVuY3Rpb24gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCBjeWNsZUR1cmF0aW9uKSB7XG4gIHZhciB3aG9sZSA9IE1hdGguZmxvb3IodFRpbWUgLz0gY3ljbGVEdXJhdGlvbik7XG4gIHJldHVybiB0VGltZSAmJiB3aG9sZSA9PT0gdFRpbWUgPyB3aG9sZSAtIDEgOiB3aG9sZTtcbn0sXG4gICAgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUgPSBmdW5jdGlvbiBfcGFyZW50VG9DaGlsZFRvdGFsVGltZShwYXJlbnRUaW1lLCBjaGlsZCkge1xuICByZXR1cm4gKHBhcmVudFRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzICsgKGNoaWxkLl90cyA+PSAwID8gMCA6IGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKTtcbn0sXG4gICAgX3NldEVuZCA9IGZ1bmN0aW9uIF9zZXRFbmQoYW5pbWF0aW9uKSB7XG4gIHJldHVybiBhbmltYXRpb24uX2VuZCA9IF9yb3VuZFByZWNpc2UoYW5pbWF0aW9uLl9zdGFydCArIChhbmltYXRpb24uX3REdXIgLyBNYXRoLmFicyhhbmltYXRpb24uX3RzIHx8IGFuaW1hdGlvbi5fcnRzIHx8IF90aW55TnVtKSB8fCAwKSk7XG59LFxuICAgIF9hbGlnblBsYXloZWFkID0gZnVuY3Rpb24gX2FsaWduUGxheWhlYWQoYW5pbWF0aW9uLCB0b3RhbFRpbWUpIHtcbiAgLy8gYWRqdXN0cyB0aGUgYW5pbWF0aW9uJ3MgX3N0YXJ0IGFuZCBfZW5kIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgdG90YWxUaW1lIChvbmx5IGlmIHRoZSBwYXJlbnQncyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlIGFuZCB0aGUgYW5pbWF0aW9uIGlzbid0IHBhdXNlZCkuIEl0IGRvZXNuJ3QgZG8gYW55IHJlbmRlcmluZyBvciBmb3JjaW5nIHRoaW5ncyBiYWNrIGludG8gcGFyZW50IHRpbWVsaW5lcywgZXRjLiAtIHRoYXQncyB3aGF0IHRvdGFsVGltZSgpIGlzIGZvci5cbiAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi5fZHA7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgYW5pbWF0aW9uLl90cykge1xuICAgIGFuaW1hdGlvbi5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKHBhcmVudC5fdGltZSAtIChhbmltYXRpb24uX3RzID4gMCA/IHRvdGFsVGltZSAvIGFuaW1hdGlvbi5fdHMgOiAoKGFuaW1hdGlvbi5fZGlydHkgPyBhbmltYXRpb24udG90YWxEdXJhdGlvbigpIDogYW5pbWF0aW9uLl90RHVyKSAtIHRvdGFsVGltZSkgLyAtYW5pbWF0aW9uLl90cykpO1xuXG4gICAgX3NldEVuZChhbmltYXRpb24pO1xuXG4gICAgcGFyZW50Ll9kaXJ0eSB8fCBfdW5jYWNoZShwYXJlbnQsIGFuaW1hdGlvbik7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuICB9XG5cbiAgcmV0dXJuIGFuaW1hdGlvbjtcbn0sXG5cbi8qXG5fdG90YWxUaW1lVG9UaW1lID0gKGNsYW1wZWRUb3RhbFRpbWUsIGR1cmF0aW9uLCByZXBlYXQsIHJlcGVhdERlbGF5LCB5b3lvKSA9PiB7XG5cdGxldCBjeWNsZUR1cmF0aW9uID0gZHVyYXRpb24gKyByZXBlYXREZWxheSxcblx0XHR0aW1lID0gX3JvdW5kKGNsYW1wZWRUb3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uKTtcblx0aWYgKHRpbWUgPiBkdXJhdGlvbikge1xuXHRcdHRpbWUgPSBkdXJhdGlvbjtcblx0fVxuXHRyZXR1cm4gKHlveW8gJiYgKH5+KGNsYW1wZWRUb3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSAmIDEpKSA/IGR1cmF0aW9uIC0gdGltZSA6IHRpbWU7XG59LFxuKi9cbl9wb3N0QWRkQ2hlY2tzID0gZnVuY3Rpb24gX3Bvc3RBZGRDaGVja3ModGltZWxpbmUsIGNoaWxkKSB7XG4gIHZhciB0O1xuXG4gIGlmIChjaGlsZC5fdGltZSB8fCBjaGlsZC5faW5pdHRlZCAmJiAhY2hpbGQuX2R1cikge1xuICAgIC8vaW4gY2FzZSwgZm9yIGV4YW1wbGUsIHRoZSBfc3RhcnQgaXMgbW92ZWQgb24gYSB0d2VlbiB0aGF0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLiBJbWFnaW5lIGl0J3MgYXQgaXRzIGVuZCBzdGF0ZSwgdGhlbiB0aGUgc3RhcnRUaW1lIGlzIG1vdmVkIFdBWSBsYXRlciAoYWZ0ZXIgdGhlIGVuZCBvZiB0aGlzIHRpbWVsaW5lKSwgaXQgc2hvdWxkIHJlbmRlciBhdCBpdHMgYmVnaW5uaW5nLlxuICAgIHQgPSBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aW1lbGluZS5yYXdUaW1lKCksIGNoaWxkKTtcblxuICAgIGlmICghY2hpbGQuX2R1ciB8fCBfY2xhbXAoMCwgY2hpbGQudG90YWxEdXJhdGlvbigpLCB0KSAtIGNoaWxkLl90VGltZSA+IF90aW55TnVtKSB7XG4gICAgICBjaGlsZC5yZW5kZXIodCwgdHJ1ZSk7XG4gICAgfVxuICB9IC8vaWYgdGhlIHRpbWVsaW5lIGhhcyBhbHJlYWR5IGVuZGVkIGJ1dCB0aGUgaW5zZXJ0ZWQgdHdlZW4vdGltZWxpbmUgZXh0ZW5kcyB0aGUgZHVyYXRpb24sIHdlIHNob3VsZCBlbmFibGUgdGhpcyB0aW1lbGluZSBhZ2FpbiBzbyB0aGF0IGl0IHJlbmRlcnMgcHJvcGVybHkuIFdlIHNob3VsZCBhbHNvIGFsaWduIHRoZSBwbGF5aGVhZCB3aXRoIHRoZSBwYXJlbnQgdGltZWxpbmUncyB3aGVuIGFwcHJvcHJpYXRlLlxuXG5cbiAgaWYgKF91bmNhY2hlKHRpbWVsaW5lLCBjaGlsZCkuX2RwICYmIHRpbWVsaW5lLl9pbml0dGVkICYmIHRpbWVsaW5lLl90aW1lID49IHRpbWVsaW5lLl9kdXIgJiYgdGltZWxpbmUuX3RzKSB7XG4gICAgLy9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3JzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZC4uLlxuICAgIGlmICh0aW1lbGluZS5fZHVyIDwgdGltZWxpbmUuZHVyYXRpb24oKSkge1xuICAgICAgdCA9IHRpbWVsaW5lO1xuXG4gICAgICB3aGlsZSAodC5fZHApIHtcbiAgICAgICAgdC5yYXdUaW1lKCkgPj0gMCAmJiB0LnRvdGFsVGltZSh0Ll90VGltZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LiBJZiBpdCdzIGN1cnJlbnRseSB6ZXJvLCB0aG91Z2gsIGl0IG1heSBub3QgYmUgc2NoZWR1bGVkIHRvIHJlbmRlciB1bnRpbCBsYXRlciBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgaXQgdG8gYWxpZ24gd2l0aCB0aGUgY3VycmVudCBwbGF5aGVhZCBwb3NpdGlvbi4gT25seSBtb3ZlIHRvIGNhdGNoIHVwIHdpdGggdGhlIHBsYXloZWFkLlxuXG4gICAgICAgIHQgPSB0Ll9kcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aW1lbGluZS5felRpbWUgPSAtX3RpbnlOdW07IC8vIGhlbHBzIGVuc3VyZSB0aGF0IHRoZSBuZXh0IHJlbmRlcigpIHdpbGwgYmUgZm9yY2VkIChjcm9zc2luZ1N0YXJ0ID0gdHJ1ZSBpbiByZW5kZXIoKSksIGV2ZW4gaWYgdGhlIGR1cmF0aW9uIGhhc24ndCBjaGFuZ2VkICh3ZSdyZSBhZGRpbmcgYSBjaGlsZCB3aGljaCB3b3VsZCBuZWVkIHRvIGdldCByZW5kZXJlZCkuIERlZmluaXRlbHkgYW4gZWRnZSBjYXNlLiBOb3RlOiB3ZSBNVVNUIGRvIHRoaXMgQUZURVIgdGhlIGxvb3AgYWJvdmUgd2hlcmUgdGhlIHRvdGFsVGltZSgpIG1pZ2h0IHRyaWdnZXIgYSByZW5kZXIoKSBiZWNhdXNlIHRoaXMgX2FkZFRvVGltZWxpbmUoKSBtZXRob2QgZ2V0cyBjYWxsZWQgZnJvbSB0aGUgQW5pbWF0aW9uIGNvbnN0cnVjdG9yLCBCRUZPUkUgdHdlZW5zIGV2ZW4gcmVjb3JkIHRoZWlyIHRhcmdldHMsIGV0Yy4gc28gd2Ugd291bGRuJ3Qgd2FudCB0aGluZ3MgdG8gZ2V0IHRyaWdnZXJlZCBpbiB0aGUgd3Jvbmcgb3JkZXIuXG4gIH1cbn0sXG4gICAgX2FkZFRvVGltZWxpbmUgPSBmdW5jdGlvbiBfYWRkVG9UaW1lbGluZSh0aW1lbGluZSwgY2hpbGQsIHBvc2l0aW9uLCBza2lwQ2hlY2tzKSB7XG4gIGNoaWxkLnBhcmVudCAmJiBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gIGNoaWxkLl9zdGFydCA9IF9yb3VuZFByZWNpc2UoKF9pc051bWJlcihwb3NpdGlvbikgPyBwb3NpdGlvbiA6IHBvc2l0aW9uIHx8IHRpbWVsaW5lICE9PSBfZ2xvYmFsVGltZWxpbmUgPyBfcGFyc2VQb3NpdGlvbih0aW1lbGluZSwgcG9zaXRpb24sIGNoaWxkKSA6IHRpbWVsaW5lLl90aW1lKSArIGNoaWxkLl9kZWxheSk7XG4gIGNoaWxkLl9lbmQgPSBfcm91bmRQcmVjaXNlKGNoaWxkLl9zdGFydCArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBNYXRoLmFicyhjaGlsZC50aW1lU2NhbGUoKSkgfHwgMCkpO1xuXG4gIF9hZGRMaW5rZWRMaXN0SXRlbSh0aW1lbGluZSwgY2hpbGQsIFwiX2ZpcnN0XCIsIFwiX2xhc3RcIiwgdGltZWxpbmUuX3NvcnQgPyBcIl9zdGFydFwiIDogMCk7XG5cbiAgX2lzRnJvbU9yRnJvbVN0YXJ0KGNoaWxkKSB8fCAodGltZWxpbmUuX3JlY2VudCA9IGNoaWxkKTtcbiAgc2tpcENoZWNrcyB8fCBfcG9zdEFkZENoZWNrcyh0aW1lbGluZSwgY2hpbGQpO1xuICByZXR1cm4gdGltZWxpbmU7XG59LFxuICAgIF9zY3JvbGxUcmlnZ2VyID0gZnVuY3Rpb24gX3Njcm9sbFRyaWdnZXIoYW5pbWF0aW9uLCB0cmlnZ2VyKSB7XG4gIHJldHVybiAoX2dsb2JhbHMuU2Nyb2xsVHJpZ2dlciB8fCBfbWlzc2luZ1BsdWdpbihcInNjcm9sbFRyaWdnZXJcIiwgdHJpZ2dlcikpICYmIF9nbG9iYWxzLlNjcm9sbFRyaWdnZXIuY3JlYXRlKHRyaWdnZXIsIGFuaW1hdGlvbik7XG59LFxuICAgIF9hdHRlbXB0SW5pdFR3ZWVuID0gZnVuY3Rpb24gX2F0dGVtcHRJbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSwgZm9yY2UsIHN1cHByZXNzRXZlbnRzKSB7XG4gIF9pbml0VHdlZW4odHdlZW4sIHRvdGFsVGltZSk7XG5cbiAgaWYgKCF0d2Vlbi5faW5pdHRlZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKCFmb3JjZSAmJiB0d2Vlbi5fcHQgJiYgKHR3ZWVuLl9kdXIgJiYgdHdlZW4udmFycy5sYXp5ICE9PSBmYWxzZSB8fCAhdHdlZW4uX2R1ciAmJiB0d2Vlbi52YXJzLmxhenkpICYmIF9sYXN0UmVuZGVyZWRGcmFtZSAhPT0gX3RpY2tlci5mcmFtZSkge1xuICAgIF9sYXp5VHdlZW5zLnB1c2godHdlZW4pO1xuXG4gICAgdHdlZW4uX2xhenkgPSBbdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50c107XG4gICAgcmV0dXJuIDE7XG4gIH1cbn0sXG4gICAgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCA9IGZ1bmN0aW9uIF9wYXJlbnRQbGF5aGVhZElzQmVmb3JlU3RhcnQoX3JlZikge1xuICB2YXIgcGFyZW50ID0gX3JlZi5wYXJlbnQ7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Ll90cyAmJiBwYXJlbnQuX2luaXR0ZWQgJiYgIXBhcmVudC5fbG9jayAmJiAocGFyZW50LnJhd1RpbWUoKSA8IDAgfHwgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydChwYXJlbnQpKTtcbn0sXG4gICAgLy8gY2hlY2sgcGFyZW50J3MgX2xvY2sgYmVjYXVzZSB3aGVuIGEgdGltZWxpbmUgcmVwZWF0cy95b3lvcyBhbmQgZG9lcyBpdHMgYXJ0aWZpY2lhbCB3cmFwcGluZywgd2Ugc2hvdWxkbid0IGZvcmNlIHRoZSByYXRpbyBiYWNrIHRvIDBcbl9pc0Zyb21PckZyb21TdGFydCA9IGZ1bmN0aW9uIF9pc0Zyb21PckZyb21TdGFydChfcmVmMikge1xuICB2YXIgZGF0YSA9IF9yZWYyLmRhdGE7XG4gIHJldHVybiBkYXRhID09PSBcImlzRnJvbVN0YXJ0XCIgfHwgZGF0YSA9PT0gXCJpc1N0YXJ0XCI7XG59LFxuICAgIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2VlbiA9IGZ1bmN0aW9uIF9yZW5kZXJaZXJvRHVyYXRpb25Ud2Vlbih0d2VlbiwgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgdmFyIHByZXZSYXRpbyA9IHR3ZWVuLnJhdGlvLFxuICAgICAgcmF0aW8gPSB0b3RhbFRpbWUgPCAwIHx8ICF0b3RhbFRpbWUgJiYgKCF0d2Vlbi5fc3RhcnQgJiYgX3BhcmVudFBsYXloZWFkSXNCZWZvcmVTdGFydCh0d2VlbikgJiYgISghdHdlZW4uX2luaXR0ZWQgJiYgX2lzRnJvbU9yRnJvbVN0YXJ0KHR3ZWVuKSkgfHwgKHR3ZWVuLl90cyA8IDAgfHwgdHdlZW4uX2RwLl90cyA8IDApICYmICFfaXNGcm9tT3JGcm9tU3RhcnQodHdlZW4pKSA/IDAgOiAxLFxuICAgICAgLy8gaWYgdGhlIHR3ZWVuIG9yIGl0cyBwYXJlbnQgaXMgcmV2ZXJzZWQgYW5kIHRoZSB0b3RhbFRpbWUgaXMgMCwgd2Ugc2hvdWxkIGdvIHRvIGEgcmF0aW8gb2YgMC4gRWRnZSBjYXNlOiBpZiBhIGZyb20oKSBvciBmcm9tVG8oKSBzdGFnZ2VyIHR3ZWVuIGlzIHBsYWNlZCBsYXRlciBpbiBhIHRpbWVsaW5lLCB0aGUgXCJzdGFydEF0XCIgemVyby1kdXJhdGlvbiB0d2VlbiBjb3VsZCBpbml0aWFsbHkgcmVuZGVyIGF0IGEgdGltZSB3aGVuIHRoZSBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBpcyB0ZWNobmljYWxseSBCRUZPUkUgd2hlcmUgdGhpcyB0d2VlbiBpcywgc28gbWFrZSBzdXJlIHRoYXQgYW55IFwiZnJvbVwiIGFuZCBcImZyb21Ub1wiIHN0YXJ0QXQgdHdlZW5zIGFyZSByZW5kZXJlZCB0aGUgZmlyc3QgdGltZSBhdCBhIHJhdGlvIG9mIDEuXG4gIHJlcGVhdERlbGF5ID0gdHdlZW4uX3JEZWxheSxcbiAgICAgIHRUaW1lID0gMCxcbiAgICAgIHB0LFxuICAgICAgaXRlcmF0aW9uLFxuICAgICAgcHJldkl0ZXJhdGlvbjtcblxuICBpZiAocmVwZWF0RGVsYXkgJiYgdHdlZW4uX3JlcGVhdCkge1xuICAgIC8vIGluIGNhc2UgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gdGhhdCBoYXMgYSByZXBlYXQgd2l0aCBhIHJlcGVhdERlbGF5XG4gICAgdFRpbWUgPSBfY2xhbXAoMCwgdHdlZW4uX3REdXIsIHRvdGFsVGltZSk7XG4gICAgaXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRUaW1lLCByZXBlYXREZWxheSk7XG4gICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0d2Vlbi5fdFRpbWUsIHJlcGVhdERlbGF5KTtcbiAgICB0d2Vlbi5feW95byAmJiBpdGVyYXRpb24gJiAxICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG5cbiAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uKSB7XG4gICAgICBwcmV2UmF0aW8gPSAxIC0gcmF0aW87XG4gICAgICB0d2Vlbi52YXJzLnJlcGVhdFJlZnJlc2ggJiYgdHdlZW4uX2luaXR0ZWQgJiYgdHdlZW4uaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyYXRpbyAhPT0gcHJldlJhdGlvIHx8IGZvcmNlIHx8IHR3ZWVuLl96VGltZSA9PT0gX3RpbnlOdW0gfHwgIXRvdGFsVGltZSAmJiB0d2Vlbi5felRpbWUpIHtcbiAgICBpZiAoIXR3ZWVuLl9pbml0dGVkICYmIF9hdHRlbXB0SW5pdFR3ZWVuKHR3ZWVuLCB0b3RhbFRpbWUsIGZvcmNlLCBzdXBwcmVzc0V2ZW50cykpIHtcbiAgICAgIC8vIGlmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcmV2SXRlcmF0aW9uID0gdHdlZW4uX3pUaW1lO1xuICAgIHR3ZWVuLl96VGltZSA9IHRvdGFsVGltZSB8fCAoc3VwcHJlc3NFdmVudHMgPyBfdGlueU51bSA6IDApOyAvLyB3aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgIHN1cHByZXNzRXZlbnRzIHx8IChzdXBwcmVzc0V2ZW50cyA9IHRvdGFsVGltZSAmJiAhcHJldkl0ZXJhdGlvbik7IC8vIGlmIGl0IHdhcyByZW5kZXJlZCBwcmV2aW91c2x5IGF0IGV4YWN0bHkgMCAoX3pUaW1lKSBhbmQgbm93IHRoZSBwbGF5aGVhZCBpcyBtb3ZpbmcgYXdheSwgRE9OJ1QgZmlyZSBjYWxsYmFja3Mgb3RoZXJ3aXNlIHRoZXknbGwgc2VlbSBsaWtlIGR1cGxpY2F0ZXMuXG5cbiAgICB0d2Vlbi5yYXRpbyA9IHJhdGlvO1xuICAgIHR3ZWVuLl9mcm9tICYmIChyYXRpbyA9IDEgLSByYXRpbyk7XG4gICAgdHdlZW4uX3RpbWUgPSAwO1xuICAgIHR3ZWVuLl90VGltZSA9IHRUaW1lO1xuICAgIHB0ID0gdHdlZW4uX3B0O1xuXG4gICAgd2hpbGUgKHB0KSB7XG4gICAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICAgIHB0ID0gcHQuX25leHQ7XG4gICAgfVxuXG4gICAgdHdlZW4uX3N0YXJ0QXQgJiYgdG90YWxUaW1lIDwgMCAmJiB0d2Vlbi5fc3RhcnRBdC5yZW5kZXIodG90YWxUaW1lLCB0cnVlLCB0cnVlKTtcbiAgICB0d2Vlbi5fb25VcGRhdGUgJiYgIXN1cHByZXNzRXZlbnRzICYmIF9jYWxsYmFjayh0d2VlbiwgXCJvblVwZGF0ZVwiKTtcbiAgICB0VGltZSAmJiB0d2Vlbi5fcmVwZWF0ICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0d2Vlbi5wYXJlbnQgJiYgX2NhbGxiYWNrKHR3ZWVuLCBcIm9uUmVwZWF0XCIpO1xuXG4gICAgaWYgKCh0b3RhbFRpbWUgPj0gdHdlZW4uX3REdXIgfHwgdG90YWxUaW1lIDwgMCkgJiYgdHdlZW4ucmF0aW8gPT09IHJhdGlvKSB7XG4gICAgICByYXRpbyAmJiBfcmVtb3ZlRnJvbVBhcmVudCh0d2VlbiwgMSk7XG5cbiAgICAgIGlmICghc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgX2NhbGxiYWNrKHR3ZWVuLCByYXRpbyA/IFwib25Db21wbGV0ZVwiIDogXCJvblJldmVyc2VDb21wbGV0ZVwiLCB0cnVlKTtcblxuICAgICAgICB0d2Vlbi5fcHJvbSAmJiB0d2Vlbi5fcHJvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghdHdlZW4uX3pUaW1lKSB7XG4gICAgdHdlZW4uX3pUaW1lID0gdG90YWxUaW1lO1xuICB9XG59LFxuICAgIF9maW5kTmV4dFBhdXNlVHdlZW4gPSBmdW5jdGlvbiBfZmluZE5leHRQYXVzZVR3ZWVuKGFuaW1hdGlvbiwgcHJldlRpbWUsIHRpbWUpIHtcbiAgdmFyIGNoaWxkO1xuXG4gIGlmICh0aW1lID4gcHJldlRpbWUpIHtcbiAgICBjaGlsZCA9IGFuaW1hdGlvbi5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQgJiYgY2hpbGQuX3N0YXJ0IDw9IHRpbWUpIHtcbiAgICAgIGlmICghY2hpbGQuX2R1ciAmJiBjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIiAmJiBjaGlsZC5fc3RhcnQgPiBwcmV2VGltZSkge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoaWxkID0gYW5pbWF0aW9uLl9sYXN0O1xuXG4gICAgd2hpbGUgKGNoaWxkICYmIGNoaWxkLl9zdGFydCA+PSB0aW1lKSB7XG4gICAgICBpZiAoIWNoaWxkLl9kdXIgJiYgY2hpbGQuZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgY2hpbGQuX3N0YXJ0IDwgcHJldlRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLl9wcmV2O1xuICAgIH1cbiAgfVxufSxcbiAgICBfc2V0RHVyYXRpb24gPSBmdW5jdGlvbiBfc2V0RHVyYXRpb24oYW5pbWF0aW9uLCBkdXJhdGlvbiwgc2tpcFVuY2FjaGUsIGxlYXZlUGxheWhlYWQpIHtcbiAgdmFyIHJlcGVhdCA9IGFuaW1hdGlvbi5fcmVwZWF0LFxuICAgICAgZHVyID0gX3JvdW5kUHJlY2lzZShkdXJhdGlvbikgfHwgMCxcbiAgICAgIHRvdGFsUHJvZ3Jlc3MgPSBhbmltYXRpb24uX3RUaW1lIC8gYW5pbWF0aW9uLl90RHVyO1xuICB0b3RhbFByb2dyZXNzICYmICFsZWF2ZVBsYXloZWFkICYmIChhbmltYXRpb24uX3RpbWUgKj0gZHVyIC8gYW5pbWF0aW9uLl9kdXIpO1xuICBhbmltYXRpb24uX2R1ciA9IGR1cjtcbiAgYW5pbWF0aW9uLl90RHVyID0gIXJlcGVhdCA/IGR1ciA6IHJlcGVhdCA8IDAgPyAxZTEwIDogX3JvdW5kUHJlY2lzZShkdXIgKiAocmVwZWF0ICsgMSkgKyBhbmltYXRpb24uX3JEZWxheSAqIHJlcGVhdCk7XG4gIHRvdGFsUHJvZ3Jlc3MgJiYgIWxlYXZlUGxheWhlYWQgPyBfYWxpZ25QbGF5aGVhZChhbmltYXRpb24sIGFuaW1hdGlvbi5fdFRpbWUgPSBhbmltYXRpb24uX3REdXIgKiB0b3RhbFByb2dyZXNzKSA6IGFuaW1hdGlvbi5wYXJlbnQgJiYgX3NldEVuZChhbmltYXRpb24pO1xuICBza2lwVW5jYWNoZSB8fCBfdW5jYWNoZShhbmltYXRpb24ucGFyZW50LCBhbmltYXRpb24pO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uID0gZnVuY3Rpb24gX29uVXBkYXRlVG90YWxEdXJhdGlvbihhbmltYXRpb24pIHtcbiAgcmV0dXJuIGFuaW1hdGlvbiBpbnN0YW5jZW9mIFRpbWVsaW5lID8gX3VuY2FjaGUoYW5pbWF0aW9uKSA6IF9zZXREdXJhdGlvbihhbmltYXRpb24sIGFuaW1hdGlvbi5fZHVyKTtcbn0sXG4gICAgX3plcm9Qb3NpdGlvbiA9IHtcbiAgX3N0YXJ0OiAwLFxuICBlbmRUaW1lOiBfZW1wdHlGdW5jLFxuICB0b3RhbER1cmF0aW9uOiBfZW1wdHlGdW5jXG59LFxuICAgIF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbiwgcGVyY2VudEFuaW1hdGlvbikge1xuICB2YXIgbGFiZWxzID0gYW5pbWF0aW9uLmxhYmVscyxcbiAgICAgIHJlY2VudCA9IGFuaW1hdGlvbi5fcmVjZW50IHx8IF96ZXJvUG9zaXRpb24sXG4gICAgICBjbGlwcGVkRHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24oKSA+PSBfYmlnTnVtID8gcmVjZW50LmVuZFRpbWUoZmFsc2UpIDogYW5pbWF0aW9uLl9kdXIsXG4gICAgICAvL2luIGNhc2UgdGhlcmUncyBhIGNoaWxkIHRoYXQgaW5maW5pdGVseSByZXBlYXRzLCB1c2VycyBhbG1vc3QgbmV2ZXIgaW50ZW5kIGZvciB0aGUgaW5zZXJ0aW9uIHBvaW50IG9mIGEgbmV3IGNoaWxkIHRvIGJlIGJhc2VkIG9uIGEgU1VQRVIgbG9uZyB2YWx1ZSBsaWtlIHRoYXQgc28gd2UgY2xpcCBpdCBhbmQgYXNzdW1lIHRoZSBtb3N0IHJlY2VudGx5LWFkZGVkIGNoaWxkJ3MgZW5kVGltZSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICBpLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNQZXJjZW50O1xuXG4gIGlmIChfaXNTdHJpbmcocG9zaXRpb24pICYmIChpc05hTihwb3NpdGlvbikgfHwgcG9zaXRpb24gaW4gbGFiZWxzKSkge1xuICAgIC8vaWYgdGhlIHN0cmluZyBpcyBhIG51bWJlciBsaWtlIFwiMVwiLCBjaGVjayB0byBzZWUgaWYgdGhlcmUncyBhIGxhYmVsIHdpdGggdGhhdCBuYW1lLCBvdGhlcndpc2UgaW50ZXJwcmV0IGl0IGFzIGEgbnVtYmVyIChhYnNvbHV0ZSB2YWx1ZSkuXG4gICAgb2Zmc2V0ID0gcG9zaXRpb24uY2hhckF0KDApO1xuICAgIGlzUGVyY2VudCA9IHBvc2l0aW9uLnN1YnN0cigtMSkgPT09IFwiJVwiO1xuICAgIGkgPSBwb3NpdGlvbi5pbmRleE9mKFwiPVwiKTtcblxuICAgIGlmIChvZmZzZXQgPT09IFwiPFwiIHx8IG9mZnNldCA9PT0gXCI+XCIpIHtcbiAgICAgIGkgPj0gMCAmJiAocG9zaXRpb24gPSBwb3NpdGlvbi5yZXBsYWNlKC89LywgXCJcIikpO1xuICAgICAgcmV0dXJuIChvZmZzZXQgPT09IFwiPFwiID8gcmVjZW50Ll9zdGFydCA6IHJlY2VudC5lbmRUaW1lKHJlY2VudC5fcmVwZWF0ID49IDApKSArIChwYXJzZUZsb2F0KHBvc2l0aW9uLnN1YnN0cigxKSkgfHwgMCkgKiAoaXNQZXJjZW50ID8gKGkgPCAwID8gcmVjZW50IDogcGVyY2VudEFuaW1hdGlvbikudG90YWxEdXJhdGlvbigpIC8gMTAwIDogMSk7XG4gICAgfVxuXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBwb3NpdGlvbiBpbiBsYWJlbHMgfHwgKGxhYmVsc1twb3NpdGlvbl0gPSBjbGlwcGVkRHVyYXRpb24pO1xuICAgICAgcmV0dXJuIGxhYmVsc1twb3NpdGlvbl07XG4gICAgfVxuXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChwb3NpdGlvbi5jaGFyQXQoaSAtIDEpICsgcG9zaXRpb24uc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoaXNQZXJjZW50ICYmIHBlcmNlbnRBbmltYXRpb24pIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCAvIDEwMCAqIChfaXNBcnJheShwZXJjZW50QW5pbWF0aW9uKSA/IHBlcmNlbnRBbmltYXRpb25bMF0gOiBwZXJjZW50QW5pbWF0aW9uKS50b3RhbER1cmF0aW9uKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGkgPiAxID8gX3BhcnNlUG9zaXRpb24oYW5pbWF0aW9uLCBwb3NpdGlvbi5zdWJzdHIoMCwgaSAtIDEpLCBwZXJjZW50QW5pbWF0aW9uKSArIG9mZnNldCA6IGNsaXBwZWREdXJhdGlvbiArIG9mZnNldDtcbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbiA9PSBudWxsID8gY2xpcHBlZER1cmF0aW9uIDogK3Bvc2l0aW9uO1xufSxcbiAgICBfY3JlYXRlVHdlZW5UeXBlID0gZnVuY3Rpb24gX2NyZWF0ZVR3ZWVuVHlwZSh0eXBlLCBwYXJhbXMsIHRpbWVsaW5lKSB7XG4gIHZhciBpc0xlZ2FjeSA9IF9pc051bWJlcihwYXJhbXNbMV0pLFxuICAgICAgdmFyc0luZGV4ID0gKGlzTGVnYWN5ID8gMiA6IDEpICsgKHR5cGUgPCAyID8gMCA6IDEpLFxuICAgICAgdmFycyA9IHBhcmFtc1t2YXJzSW5kZXhdLFxuICAgICAgaXJWYXJzLFxuICAgICAgcGFyZW50O1xuXG4gIGlzTGVnYWN5ICYmICh2YXJzLmR1cmF0aW9uID0gcGFyYW1zWzFdKTtcbiAgdmFycy5wYXJlbnQgPSB0aW1lbGluZTtcblxuICBpZiAodHlwZSkge1xuICAgIGlyVmFycyA9IHZhcnM7XG4gICAgcGFyZW50ID0gdGltZWxpbmU7XG5cbiAgICB3aGlsZSAocGFyZW50ICYmICEoXCJpbW1lZGlhdGVSZW5kZXJcIiBpbiBpclZhcnMpKSB7XG4gICAgICAvLyBpbmhlcml0YW5jZSBoYXNuJ3QgaGFwcGVuZWQgeWV0LCBidXQgc29tZW9uZSBtYXkgaGF2ZSBzZXQgYSBkZWZhdWx0IGluIGFuIGFuY2VzdG9yIHRpbWVsaW5lLiBXZSBjb3VsZCBkbyB2YXJzLmltbWVkaWF0ZVJlbmRlciA9IF9pc05vdEZhbHNlKF9pbmhlcml0RGVmYXVsdHModmFycykuaW1tZWRpYXRlUmVuZGVyKSBidXQgdGhhdCdkIGV4YWN0IGEgc2xpZ2h0IHBlcmZvcm1hbmNlIHBlbmFsdHkgYmVjYXVzZSBfaW5oZXJpdERlZmF1bHRzKCkgYWxzbyBydW5zIGluIHRoZSBUd2VlbiBjb25zdHJ1Y3Rvci4gV2UncmUgcGF5aW5nIGEgc21hbGwga2IgcHJpY2UgaGVyZSB0byBnYWluIHNwZWVkLlxuICAgICAgaXJWYXJzID0gcGFyZW50LnZhcnMuZGVmYXVsdHMgfHwge307XG4gICAgICBwYXJlbnQgPSBfaXNOb3RGYWxzZShwYXJlbnQudmFycy5pbmhlcml0KSAmJiBwYXJlbnQucGFyZW50O1xuICAgIH1cblxuICAgIHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gX2lzTm90RmFsc2UoaXJWYXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgdHlwZSA8IDIgPyB2YXJzLnJ1bkJhY2t3YXJkcyA9IDEgOiB2YXJzLnN0YXJ0QXQgPSBwYXJhbXNbdmFyc0luZGV4IC0gMV07IC8vIFwiZnJvbVwiIHZhcnNcbiAgfVxuXG4gIHJldHVybiBuZXcgVHdlZW4ocGFyYW1zWzBdLCB2YXJzLCBwYXJhbXNbdmFyc0luZGV4ICsgMV0pO1xufSxcbiAgICBfY29uZGl0aW9uYWxSZXR1cm4gPSBmdW5jdGlvbiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmMpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwID8gZnVuYyh2YWx1ZSkgOiBmdW5jO1xufSxcbiAgICBfY2xhbXAgPSBmdW5jdGlvbiBfY2xhbXAobWluLCBtYXgsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG59LFxuICAgIGdldFVuaXQgPSBmdW5jdGlvbiBnZXRVbml0KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHZhciB2ID0gX3VuaXRFeHAuZXhlYyh2YWx1ZSk7XG5cbiAgcmV0dXJuIHYgPyB2YWx1ZS5zdWJzdHIodi5pbmRleCArIHZbMF0ubGVuZ3RoKSA6IFwiXCI7XG59LFxuICAgIC8vIG5vdGU6IHByb3RlY3QgYWdhaW5zdCBwYWRkZWQgbnVtYmVycyBhcyBzdHJpbmdzLCBsaWtlIFwiMTAwLjEwMFwiLiBUaGF0IHNob3VsZG4ndCByZXR1cm4gXCIwMFwiIGFzIHRoZSB1bml0LiBJZiBpdCdzIG51bWVyaWMsIHJldHVybiBubyB1bml0LlxuY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gX2NsYW1wKG1pbiwgbWF4LCB2KTtcbiAgfSk7XG59LFxuICAgIF9zbGljZSA9IFtdLnNsaWNlLFxuICAgIF9pc0FycmF5TGlrZSA9IGZ1bmN0aW9uIF9pc0FycmF5TGlrZSh2YWx1ZSwgbm9uRW1wdHkpIHtcbiAgcmV0dXJuIHZhbHVlICYmIF9pc09iamVjdCh2YWx1ZSkgJiYgXCJsZW5ndGhcIiBpbiB2YWx1ZSAmJiAoIW5vbkVtcHR5ICYmICF2YWx1ZS5sZW5ndGggfHwgdmFsdWUubGVuZ3RoIC0gMSBpbiB2YWx1ZSAmJiBfaXNPYmplY3QodmFsdWVbMF0pKSAmJiAhdmFsdWUubm9kZVR5cGUgJiYgdmFsdWUgIT09IF93aW47XG59LFxuICAgIF9mbGF0dGVuID0gZnVuY3Rpb24gX2ZsYXR0ZW4oYXIsIGxlYXZlU3RyaW5ncywgYWNjdW11bGF0b3IpIHtcbiAgaWYgKGFjY3VtdWxhdG9yID09PSB2b2lkIDApIHtcbiAgICBhY2N1bXVsYXRvciA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF9hY2N1bXVsYXRvcjtcblxuICAgIHJldHVybiBfaXNTdHJpbmcodmFsdWUpICYmICFsZWF2ZVN0cmluZ3MgfHwgX2lzQXJyYXlMaWtlKHZhbHVlLCAxKSA/IChfYWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvcikucHVzaC5hcHBseShfYWNjdW11bGF0b3IsIHRvQXJyYXkodmFsdWUpKSA6IGFjY3VtdWxhdG9yLnB1c2godmFsdWUpO1xuICB9KSB8fCBhY2N1bXVsYXRvcjtcbn0sXG4gICAgLy90YWtlcyBhbnkgdmFsdWUgYW5kIHJldHVybnMgYW4gYXJyYXkuIElmIGl0J3MgYSBzdHJpbmcgKGFuZCBsZWF2ZVN0cmluZ3MgaXNuJ3QgdHJ1ZSksIGl0J2xsIHVzZSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCkgYW5kIGNvbnZlcnQgdGhhdCB0byBhbiBhcnJheS4gSXQnbGwgYWxzbyBhY2NlcHQgaXRlcmFibGVzIGxpa2UgalF1ZXJ5IG9iamVjdHMuXG50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSwgc2NvcGUsIGxlYXZlU3RyaW5ncykge1xuICByZXR1cm4gX2lzU3RyaW5nKHZhbHVlKSAmJiAhbGVhdmVTdHJpbmdzICYmIChfY29yZUluaXR0ZWQgfHwgIV93YWtlKCkpID8gX3NsaWNlLmNhbGwoKHNjb3BlIHx8IF9kb2MpLnF1ZXJ5U2VsZWN0b3JBbGwodmFsdWUpLCAwKSA6IF9pc0FycmF5KHZhbHVlKSA/IF9mbGF0dGVuKHZhbHVlLCBsZWF2ZVN0cmluZ3MpIDogX2lzQXJyYXlMaWtlKHZhbHVlKSA/IF9zbGljZS5jYWxsKHZhbHVlLCAwKSA6IHZhbHVlID8gW3ZhbHVlXSA6IFtdO1xufSxcbiAgICBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9BcnJheSh2YWx1ZSlbMF0gfHwgX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgZWwgPSB2YWx1ZS5jdXJyZW50IHx8IHZhbHVlLm5hdGl2ZUVsZW1lbnQgfHwgdmFsdWU7XG4gICAgcmV0dXJuIHRvQXJyYXkodiwgZWwucXVlcnlTZWxlY3RvckFsbCA/IGVsIDogZWwgPT09IHZhbHVlID8gX3dhcm4oXCJJbnZhbGlkIHNjb3BlXCIpIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSA6IHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgc2h1ZmZsZSA9IGZ1bmN0aW9uIHNodWZmbGUoYSkge1xuICByZXR1cm4gYS5zb3J0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gLjUgLSBNYXRoLnJhbmRvbSgpO1xuICB9KTtcbn0sXG4gICAgLy8gYWx0ZXJuYXRpdmUgdGhhdCdzIGEgYml0IGZhc3RlciBhbmQgbW9yZSByZWxpYWJseSBkaXZlcnNlIGJ1dCBiaWdnZXI6ICAgZm9yIChsZXQgaiwgdiwgaSA9IGEubGVuZ3RoOyBpOyBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaSksIHYgPSBhWy0taV0sIGFbaV0gPSBhW2pdLCBhW2pdID0gdik7IHJldHVybiBhO1xuLy9mb3IgZGlzdHJpYnV0aW5nIHZhbHVlcyBhY3Jvc3MgYW4gYXJyYXkuIENhbiBhY2NlcHQgYSBudW1iZXIsIGEgZnVuY3Rpb24gb3IgKG1vc3QgY29tbW9ubHkpIGEgZnVuY3Rpb24gd2hpY2ggY2FuIGNvbnRhaW4gdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiB7YmFzZSwgYW1vdW50LCBmcm9tLCBlYXNlLCBncmlkLCBheGlzLCBsZW5ndGgsIGVhY2h9LiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBleHBlY3RzIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczogaW5kZXgsIHRhcmdldCwgYXJyYXkuIFJlY29nbml6ZXMgdGhlIGZvbGxvd2luZ1xuZGlzdHJpYnV0ZSA9IGZ1bmN0aW9uIGRpc3RyaWJ1dGUodikge1xuICBpZiAoX2lzRnVuY3Rpb24odikpIHtcbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIHZhciB2YXJzID0gX2lzT2JqZWN0KHYpID8gdiA6IHtcbiAgICBlYWNoOiB2XG4gIH0sXG4gICAgICAvL246MSBpcyBqdXN0IHRvIGluZGljYXRlIHYgd2FzIGEgbnVtYmVyOyB3ZSBsZXZlcmFnZSB0aGF0IGxhdGVyIHRvIHNldCB2IGFjY29yZGluZyB0byB0aGUgbGVuZ3RoIHdlIGdldC4gSWYgYSBudW1iZXIgaXMgcGFzc2VkIGluLCB3ZSB0cmVhdCBpdCBsaWtlIHRoZSBvbGQgc3RhZ2dlciB2YWx1ZSB3aGVyZSAwLjEsIGZvciBleGFtcGxlLCB3b3VsZCBtZWFuIHRoYXQgdGhpbmdzIHdvdWxkIGJlIGRpc3RyaWJ1dGVkIHdpdGggMC4xIGJldHdlZW4gZWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSByYXRoZXIgdGhhbiBhIHRvdGFsIFwiYW1vdW50XCIgdGhhdCdzIGNodW5rZWQgb3V0IGFtb25nIHRoZW0gYWxsLlxuICBlYXNlID0gX3BhcnNlRWFzZSh2YXJzLmVhc2UpLFxuICAgICAgZnJvbSA9IHZhcnMuZnJvbSB8fCAwLFxuICAgICAgYmFzZSA9IHBhcnNlRmxvYXQodmFycy5iYXNlKSB8fCAwLFxuICAgICAgY2FjaGUgPSB7fSxcbiAgICAgIGlzRGVjaW1hbCA9IGZyb20gPiAwICYmIGZyb20gPCAxLFxuICAgICAgcmF0aW9zID0gaXNOYU4oZnJvbSkgfHwgaXNEZWNpbWFsLFxuICAgICAgYXhpcyA9IHZhcnMuYXhpcyxcbiAgICAgIHJhdGlvWCA9IGZyb20sXG4gICAgICByYXRpb1kgPSBmcm9tO1xuXG4gIGlmIChfaXNTdHJpbmcoZnJvbSkpIHtcbiAgICByYXRpb1ggPSByYXRpb1kgPSB7XG4gICAgICBjZW50ZXI6IC41LFxuICAgICAgZWRnZXM6IC41LFxuICAgICAgZW5kOiAxXG4gICAgfVtmcm9tXSB8fCAwO1xuICB9IGVsc2UgaWYgKCFpc0RlY2ltYWwgJiYgcmF0aW9zKSB7XG4gICAgcmF0aW9YID0gZnJvbVswXTtcbiAgICByYXRpb1kgPSBmcm9tWzFdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpLCB0YXJnZXQsIGEpIHtcbiAgICB2YXIgbCA9IChhIHx8IHZhcnMpLmxlbmd0aCxcbiAgICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0sXG4gICAgICAgIG9yaWdpblgsXG4gICAgICAgIG9yaWdpblksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGQsXG4gICAgICAgIGosXG4gICAgICAgIG1heCxcbiAgICAgICAgbWluLFxuICAgICAgICB3cmFwQXQ7XG5cbiAgICBpZiAoIWRpc3RhbmNlcykge1xuICAgICAgd3JhcEF0ID0gdmFycy5ncmlkID09PSBcImF1dG9cIiA/IDAgOiAodmFycy5ncmlkIHx8IFsxLCBfYmlnTnVtXSlbMV07XG5cbiAgICAgIGlmICghd3JhcEF0KSB7XG4gICAgICAgIG1heCA9IC1fYmlnTnVtO1xuXG4gICAgICAgIHdoaWxlIChtYXggPCAobWF4ID0gYVt3cmFwQXQrK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgJiYgd3JhcEF0IDwgbCkge31cblxuICAgICAgICB3cmFwQXQtLTtcbiAgICAgIH1cblxuICAgICAgZGlzdGFuY2VzID0gY2FjaGVbbF0gPSBbXTtcbiAgICAgIG9yaWdpblggPSByYXRpb3MgPyBNYXRoLm1pbih3cmFwQXQsIGwpICogcmF0aW9YIC0gLjUgOiBmcm9tICUgd3JhcEF0O1xuICAgICAgb3JpZ2luWSA9IHJhdGlvcyA/IGwgKiByYXRpb1kgLyB3cmFwQXQgLSAuNSA6IGZyb20gLyB3cmFwQXQgfCAwO1xuICAgICAgbWF4ID0gMDtcbiAgICAgIG1pbiA9IF9iaWdOdW07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICAgICAgeCA9IGogJSB3cmFwQXQgLSBvcmlnaW5YO1xuICAgICAgICB5ID0gb3JpZ2luWSAtIChqIC8gd3JhcEF0IHwgMCk7XG4gICAgICAgIGRpc3RhbmNlc1tqXSA9IGQgPSAhYXhpcyA/IF9zcXJ0KHggKiB4ICsgeSAqIHkpIDogTWF0aC5hYnMoYXhpcyA9PT0gXCJ5XCIgPyB5IDogeCk7XG4gICAgICAgIGQgPiBtYXggJiYgKG1heCA9IGQpO1xuICAgICAgICBkIDwgbWluICYmIChtaW4gPSBkKTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9PT0gXCJyYW5kb21cIiAmJiBzaHVmZmxlKGRpc3RhbmNlcyk7XG4gICAgICBkaXN0YW5jZXMubWF4ID0gbWF4IC0gbWluO1xuICAgICAgZGlzdGFuY2VzLm1pbiA9IG1pbjtcbiAgICAgIGRpc3RhbmNlcy52ID0gbCA9IChwYXJzZUZsb2F0KHZhcnMuYW1vdW50KSB8fCBwYXJzZUZsb2F0KHZhcnMuZWFjaCkgKiAod3JhcEF0ID4gbCA/IGwgLSAxIDogIWF4aXMgPyBNYXRoLm1heCh3cmFwQXQsIGwgLyB3cmFwQXQpIDogYXhpcyA9PT0gXCJ5XCIgPyBsIC8gd3JhcEF0IDogd3JhcEF0KSB8fCAwKSAqIChmcm9tID09PSBcImVkZ2VzXCIgPyAtMSA6IDEpO1xuICAgICAgZGlzdGFuY2VzLmIgPSBsIDwgMCA/IGJhc2UgLSBsIDogYmFzZTtcbiAgICAgIGRpc3RhbmNlcy51ID0gZ2V0VW5pdCh2YXJzLmFtb3VudCB8fCB2YXJzLmVhY2gpIHx8IDA7IC8vdW5pdFxuXG4gICAgICBlYXNlID0gZWFzZSAmJiBsIDwgMCA/IF9pbnZlcnRFYXNlKGVhc2UpIDogZWFzZTtcbiAgICB9XG5cbiAgICBsID0gKGRpc3RhbmNlc1tpXSAtIGRpc3RhbmNlcy5taW4pIC8gZGlzdGFuY2VzLm1heCB8fCAwO1xuICAgIHJldHVybiBfcm91bmRQcmVjaXNlKGRpc3RhbmNlcy5iICsgKGVhc2UgPyBlYXNlKGwpIDogbCkgKiBkaXN0YW5jZXMudikgKyBkaXN0YW5jZXMudTsgLy9yb3VuZCBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBmbG9hdGluZyBwb2ludCBlcnJvcnNcbiAgfTtcbn0sXG4gICAgX3JvdW5kTW9kaWZpZXIgPSBmdW5jdGlvbiBfcm91bmRNb2RpZmllcih2KSB7XG4gIC8vcGFzcyBpbiAwLjEgZ2V0IGEgZnVuY3Rpb24gdGhhdCdsbCByb3VuZCB0byB0aGUgbmVhcmVzdCB0ZW50aCwgb3IgNSB0byByb3VuZCB0byB0aGUgY2xvc2VzdCA1LCBvciAwLjAwMSB0byB0aGUgY2xvc2VzdCAxMDAwdGgsIGV0Yy5cbiAgdmFyIHAgPSBNYXRoLnBvdygxMCwgKCh2ICsgXCJcIikuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aCk7IC8vdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGxpa2UgMjQgKiAwLjEgPT0gMi40MDAwMDAwMDAwMDAwMDA0KSwgd2UgY2hvcCBvZmYgYXQgYSBzcGVjaWZpYyBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgKG11Y2ggZmFzdGVyIHRoYW4gdG9GaXhlZCgpKVxuXG4gIHJldHVybiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIG4gPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQocmF3KSAvIHYpICogdiAqIHA7XG4gICAgcmV0dXJuIChuIC0gbiAlIDEpIC8gcCArIChfaXNOdW1iZXIocmF3KSA/IDAgOiBnZXRVbml0KHJhdykpOyAvLyBuIC0gbiAlIDEgcmVwbGFjZXMgTWF0aC5mbG9vcigpIGluIG9yZGVyIHRvIGhhbmRsZSBuZWdhdGl2ZSB2YWx1ZXMgcHJvcGVybHkuIEZvciBleGFtcGxlLCBNYXRoLmZsb29yKC0xNTAuMDAwMDAwMDAwMDAwMDMpIGlzIDE1MSFcbiAgfTtcbn0sXG4gICAgc25hcCA9IGZ1bmN0aW9uIHNuYXAoc25hcFRvLCB2YWx1ZSkge1xuICB2YXIgaXNBcnJheSA9IF9pc0FycmF5KHNuYXBUbyksXG4gICAgICByYWRpdXMsXG4gICAgICBpczJEO1xuXG4gIGlmICghaXNBcnJheSAmJiBfaXNPYmplY3Qoc25hcFRvKSkge1xuICAgIHJhZGl1cyA9IGlzQXJyYXkgPSBzbmFwVG8ucmFkaXVzIHx8IF9iaWdOdW07XG5cbiAgICBpZiAoc25hcFRvLnZhbHVlcykge1xuICAgICAgc25hcFRvID0gdG9BcnJheShzbmFwVG8udmFsdWVzKTtcblxuICAgICAgaWYgKGlzMkQgPSAhX2lzTnVtYmVyKHNuYXBUb1swXSkpIHtcbiAgICAgICAgcmFkaXVzICo9IHJhZGl1czsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gc28gd2UgZG9uJ3QgaGF2ZSB0byBNYXRoLnNxcnQoKSBpbiB0aGUgbG9vcC5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc25hcFRvID0gX3JvdW5kTW9kaWZpZXIoc25hcFRvLmluY3JlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgIWlzQXJyYXkgPyBfcm91bmRNb2RpZmllcihzbmFwVG8pIDogX2lzRnVuY3Rpb24oc25hcFRvKSA/IGZ1bmN0aW9uIChyYXcpIHtcbiAgICBpczJEID0gc25hcFRvKHJhdyk7XG4gICAgcmV0dXJuIE1hdGguYWJzKGlzMkQgLSByYXcpIDw9IHJhZGl1cyA/IGlzMkQgOiByYXc7XG4gIH0gOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgdmFyIHggPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueCA6IHJhdyksXG4gICAgICAgIHkgPSBwYXJzZUZsb2F0KGlzMkQgPyByYXcueSA6IDApLFxuICAgICAgICBtaW4gPSBfYmlnTnVtLFxuICAgICAgICBjbG9zZXN0ID0gMCxcbiAgICAgICAgaSA9IHNuYXBUby5sZW5ndGgsXG4gICAgICAgIGR4LFxuICAgICAgICBkeTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChpczJEKSB7XG4gICAgICAgIGR4ID0gc25hcFRvW2ldLnggLSB4O1xuICAgICAgICBkeSA9IHNuYXBUb1tpXS55IC0geTtcbiAgICAgICAgZHggPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR4ID0gTWF0aC5hYnMoc25hcFRvW2ldIC0geCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkeCA8IG1pbikge1xuICAgICAgICBtaW4gPSBkeDtcbiAgICAgICAgY2xvc2VzdCA9IGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2VzdCA9ICFyYWRpdXMgfHwgbWluIDw9IHJhZGl1cyA/IHNuYXBUb1tjbG9zZXN0XSA6IHJhdztcbiAgICByZXR1cm4gaXMyRCB8fCBjbG9zZXN0ID09PSByYXcgfHwgX2lzTnVtYmVyKHJhdykgPyBjbG9zZXN0IDogY2xvc2VzdCArIGdldFVuaXQocmF3KTtcbiAgfSk7XG59LFxuICAgIHJhbmRvbSA9IGZ1bmN0aW9uIHJhbmRvbShtaW4sIG1heCwgcm91bmRpbmdJbmNyZW1lbnQsIHJldHVybkZ1bmN0aW9uKSB7XG4gIHJldHVybiBfY29uZGl0aW9uYWxSZXR1cm4oX2lzQXJyYXkobWluKSA/ICFtYXggOiByb3VuZGluZ0luY3JlbWVudCA9PT0gdHJ1ZSA/ICEhKHJvdW5kaW5nSW5jcmVtZW50ID0gMCkgOiAhcmV0dXJuRnVuY3Rpb24sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzQXJyYXkobWluKSA/IG1pblt+fihNYXRoLnJhbmRvbSgpICogbWluLmxlbmd0aCldIDogKHJvdW5kaW5nSW5jcmVtZW50ID0gcm91bmRpbmdJbmNyZW1lbnQgfHwgMWUtNSkgJiYgKHJldHVybkZ1bmN0aW9uID0gcm91bmRpbmdJbmNyZW1lbnQgPCAxID8gTWF0aC5wb3coMTAsIChyb3VuZGluZ0luY3JlbWVudCArIFwiXCIpLmxlbmd0aCAtIDIpIDogMSkgJiYgTWF0aC5mbG9vcihNYXRoLnJvdW5kKChtaW4gLSByb3VuZGluZ0luY3JlbWVudCAvIDIgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIHJvdW5kaW5nSW5jcmVtZW50ICogLjk5KSkgLyByb3VuZGluZ0luY3JlbWVudCkgKiByb3VuZGluZ0luY3JlbWVudCAqIHJldHVybkZ1bmN0aW9uKSAvIHJldHVybkZ1bmN0aW9uO1xuICB9KTtcbn0sXG4gICAgcGlwZSA9IGZ1bmN0aW9uIHBpcGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3Rpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbnMucmVkdWNlKGZ1bmN0aW9uICh2LCBmKSB7XG4gICAgICByZXR1cm4gZih2KTtcbiAgICB9LCB2YWx1ZSk7XG4gIH07XG59LFxuICAgIHVuaXRpemUgPSBmdW5jdGlvbiB1bml0aXplKGZ1bmMsIHVuaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHBhcnNlRmxvYXQodmFsdWUpKSArICh1bml0IHx8IGdldFVuaXQodmFsdWUpKTtcbiAgfTtcbn0sXG4gICAgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKG1pbiwgbWF4LCB2YWx1ZSkge1xuICByZXR1cm4gbWFwUmFuZ2UobWluLCBtYXgsIDAsIDEsIHZhbHVlKTtcbn0sXG4gICAgX3dyYXBBcnJheSA9IGZ1bmN0aW9uIF93cmFwQXJyYXkoYSwgd3JhcHBlciwgdmFsdWUpIHtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIGFbfn53cmFwcGVyKGluZGV4KV07XG4gIH0pO1xufSxcbiAgICB3cmFwID0gZnVuY3Rpb24gd3JhcChtaW4sIG1heCwgdmFsdWUpIHtcbiAgLy8gTk9URTogd3JhcCgpIENBTk5PVCBiZSBhbiBhcnJvdyBmdW5jdGlvbiEgQSB2ZXJ5IG9kZCBjb21waWxpbmcgYnVnIGNhdXNlcyBwcm9ibGVtcyAodW5yZWxhdGVkIHRvIEdTQVApLlxuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW47XG4gIHJldHVybiBfaXNBcnJheShtaW4pID8gX3dyYXBBcnJheShtaW4sIHdyYXAoMCwgbWluLmxlbmd0aCksIG1heCkgOiBfY29uZGl0aW9uYWxSZXR1cm4odmFsdWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiAocmFuZ2UgKyAodmFsdWUgLSBtaW4pICUgcmFuZ2UpICUgcmFuZ2UgKyBtaW47XG4gIH0pO1xufSxcbiAgICB3cmFwWW95byA9IGZ1bmN0aW9uIHdyYXBZb3lvKG1pbiwgbWF4LCB2YWx1ZSkge1xuICB2YXIgcmFuZ2UgPSBtYXggLSBtaW4sXG4gICAgICB0b3RhbCA9IHJhbmdlICogMjtcbiAgcmV0dXJuIF9pc0FycmF5KG1pbikgPyBfd3JhcEFycmF5KG1pbiwgd3JhcFlveW8oMCwgbWluLmxlbmd0aCAtIDEpLCBtYXgpIDogX2NvbmRpdGlvbmFsUmV0dXJuKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YWx1ZSA9ICh0b3RhbCArICh2YWx1ZSAtIG1pbikgJSB0b3RhbCkgJSB0b3RhbCB8fCAwO1xuICAgIHJldHVybiBtaW4gKyAodmFsdWUgPiByYW5nZSA/IHRvdGFsIC0gdmFsdWUgOiB2YWx1ZSk7XG4gIH0pO1xufSxcbiAgICBfcmVwbGFjZVJhbmRvbSA9IGZ1bmN0aW9uIF9yZXBsYWNlUmFuZG9tKHZhbHVlKSB7XG4gIC8vcmVwbGFjZXMgYWxsIG9jY3VycmVuY2VzIG9mIHJhbmRvbSguLi4pIGluIGEgc3RyaW5nIHdpdGggdGhlIGNhbGN1bGF0ZWQgcmFuZG9tIHZhbHVlLiBjYW4gYmUgYSByYW5nZSBsaWtlIHJhbmRvbSgtMTAwLCAxMDAsIDUpIG9yIGFuIGFycmF5IGxpa2UgcmFuZG9tKFswLCAxMDAsIDUwMF0pXG4gIHZhciBwcmV2ID0gMCxcbiAgICAgIHMgPSBcIlwiLFxuICAgICAgaSxcbiAgICAgIG51bXMsXG4gICAgICBlbmQsXG4gICAgICBpc0FycmF5O1xuXG4gIHdoaWxlICh+KGkgPSB2YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiLCBwcmV2KSkpIHtcbiAgICBlbmQgPSB2YWx1ZS5pbmRleE9mKFwiKVwiLCBpKTtcbiAgICBpc0FycmF5ID0gdmFsdWUuY2hhckF0KGkgKyA3KSA9PT0gXCJbXCI7XG4gICAgbnVtcyA9IHZhbHVlLnN1YnN0cihpICsgNywgZW5kIC0gaSAtIDcpLm1hdGNoKGlzQXJyYXkgPyBfZGVsaW1pdGVkVmFsdWVFeHAgOiBfc3RyaWN0TnVtRXhwKTtcbiAgICBzICs9IHZhbHVlLnN1YnN0cihwcmV2LCBpIC0gcHJldikgKyByYW5kb20oaXNBcnJheSA/IG51bXMgOiArbnVtc1swXSwgaXNBcnJheSA/IDAgOiArbnVtc1sxXSwgK251bXNbMl0gfHwgMWUtNSk7XG4gICAgcHJldiA9IGVuZCArIDE7XG4gIH1cblxuICByZXR1cm4gcyArIHZhbHVlLnN1YnN0cihwcmV2LCB2YWx1ZS5sZW5ndGggLSBwcmV2KTtcbn0sXG4gICAgbWFwUmFuZ2UgPSBmdW5jdGlvbiBtYXBSYW5nZShpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4LCB2YWx1ZSkge1xuICB2YXIgaW5SYW5nZSA9IGluTWF4IC0gaW5NaW4sXG4gICAgICBvdXRSYW5nZSA9IG91dE1heCAtIG91dE1pbjtcbiAgcmV0dXJuIF9jb25kaXRpb25hbFJldHVybih2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIG91dE1pbiArICgodmFsdWUgLSBpbk1pbikgLyBpblJhbmdlICogb3V0UmFuZ2UgfHwgMCk7XG4gIH0pO1xufSxcbiAgICBpbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHByb2dyZXNzLCBtdXRhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc05hTihzdGFydCArIGVuZCkgPyAwIDogZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gKDEgLSBwKSAqIHN0YXJ0ICsgcCAqIGVuZDtcbiAgfTtcblxuICBpZiAoIWZ1bmMpIHtcbiAgICB2YXIgaXNTdHJpbmcgPSBfaXNTdHJpbmcoc3RhcnQpLFxuICAgICAgICBtYXN0ZXIgPSB7fSxcbiAgICAgICAgcCxcbiAgICAgICAgaSxcbiAgICAgICAgaW50ZXJwb2xhdG9ycyxcbiAgICAgICAgbCxcbiAgICAgICAgaWw7XG5cbiAgICBwcm9ncmVzcyA9PT0gdHJ1ZSAmJiAobXV0YXRlID0gMSkgJiYgKHByb2dyZXNzID0gbnVsbCk7XG5cbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHN0YXJ0ID0ge1xuICAgICAgICBwOiBzdGFydFxuICAgICAgfTtcbiAgICAgIGVuZCA9IHtcbiAgICAgICAgcDogZW5kXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoX2lzQXJyYXkoc3RhcnQpICYmICFfaXNBcnJheShlbmQpKSB7XG4gICAgICBpbnRlcnBvbGF0b3JzID0gW107XG4gICAgICBsID0gc3RhcnQubGVuZ3RoO1xuICAgICAgaWwgPSBsIC0gMjtcblxuICAgICAgZm9yIChpID0gMTsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnRlcnBvbGF0b3JzLnB1c2goaW50ZXJwb2xhdGUoc3RhcnRbaSAtIDFdLCBzdGFydFtpXSkpOyAvL2J1aWxkIHRoZSBpbnRlcnBvbGF0b3JzIHVwIGZyb250IGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHNvIHRoYXQgd2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIG1hbnkgdGltZXMsIGl0IGNhbiBqdXN0IHJldXNlIHRoZW0uXG4gICAgICB9XG5cbiAgICAgIGwtLTtcblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICBwICo9IGw7XG4gICAgICAgIHZhciBpID0gTWF0aC5taW4oaWwsIH5+cCk7XG4gICAgICAgIHJldHVybiBpbnRlcnBvbGF0b3JzW2ldKHAgLSBpKTtcbiAgICAgIH07XG5cbiAgICAgIHByb2dyZXNzID0gZW5kO1xuICAgIH0gZWxzZSBpZiAoIW11dGF0ZSkge1xuICAgICAgc3RhcnQgPSBfbWVyZ2UoX2lzQXJyYXkoc3RhcnQpID8gW10gOiB7fSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJwb2xhdG9ycykge1xuICAgICAgZm9yIChwIGluIGVuZCkge1xuICAgICAgICBfYWRkUHJvcFR3ZWVuLmNhbGwobWFzdGVyLCBzdGFydCwgcCwgXCJnZXRcIiwgZW5kW3BdKTtcbiAgICAgIH1cblxuICAgICAgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMocCkge1xuICAgICAgICByZXR1cm4gX3JlbmRlclByb3BUd2VlbnMocCwgbWFzdGVyKSB8fCAoaXNTdHJpbmcgPyBzdGFydC5wIDogc3RhcnQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2NvbmRpdGlvbmFsUmV0dXJuKHByb2dyZXNzLCBmdW5jKTtcbn0sXG4gICAgX2dldExhYmVsSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiBfZ2V0TGFiZWxJbkRpcmVjdGlvbih0aW1lbGluZSwgZnJvbVRpbWUsIGJhY2t3YXJkKSB7XG4gIC8vdXNlZCBmb3IgbmV4dExhYmVsKCkgYW5kIHByZXZpb3VzTGFiZWwoKVxuICB2YXIgbGFiZWxzID0gdGltZWxpbmUubGFiZWxzLFxuICAgICAgbWluID0gX2JpZ051bSxcbiAgICAgIHAsXG4gICAgICBkaXN0YW5jZSxcbiAgICAgIGxhYmVsO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBkaXN0YW5jZSA9IGxhYmVsc1twXSAtIGZyb21UaW1lO1xuXG4gICAgaWYgKGRpc3RhbmNlIDwgMCA9PT0gISFiYWNrd2FyZCAmJiBkaXN0YW5jZSAmJiBtaW4gPiAoZGlzdGFuY2UgPSBNYXRoLmFicyhkaXN0YW5jZSkpKSB7XG4gICAgICBsYWJlbCA9IHA7XG4gICAgICBtaW4gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGFiZWw7XG59LFxuICAgIF9jYWxsYmFjayA9IGZ1bmN0aW9uIF9jYWxsYmFjayhhbmltYXRpb24sIHR5cGUsIGV4ZWN1dGVMYXp5Rmlyc3QpIHtcbiAgdmFyIHYgPSBhbmltYXRpb24udmFycyxcbiAgICAgIGNhbGxiYWNrID0gdlt0eXBlXSxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHNjb3BlO1xuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXTtcbiAgc2NvcGUgPSB2LmNhbGxiYWNrU2NvcGUgfHwgYW5pbWF0aW9uO1xuICBleGVjdXRlTGF6eUZpcnN0ICYmIF9sYXp5VHdlZW5zLmxlbmd0aCAmJiBfbGF6eVJlbmRlcigpOyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblxuICByZXR1cm4gcGFyYW1zID8gY2FsbGJhY2suYXBwbHkoc2NvcGUsIHBhcmFtcykgOiBjYWxsYmFjay5jYWxsKHNjb3BlKTtcbn0sXG4gICAgX2ludGVycnVwdCA9IGZ1bmN0aW9uIF9pbnRlcnJ1cHQoYW5pbWF0aW9uKSB7XG4gIF9yZW1vdmVGcm9tUGFyZW50KGFuaW1hdGlvbik7XG5cbiAgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIgJiYgYW5pbWF0aW9uLnNjcm9sbFRyaWdnZXIua2lsbChmYWxzZSk7XG4gIGFuaW1hdGlvbi5wcm9ncmVzcygpIDwgMSAmJiBfY2FsbGJhY2soYW5pbWF0aW9uLCBcIm9uSW50ZXJydXB0XCIpO1xuICByZXR1cm4gYW5pbWF0aW9uO1xufSxcbiAgICBfcXVpY2tUd2VlbixcbiAgICBfY3JlYXRlUGx1Z2luID0gZnVuY3Rpb24gX2NyZWF0ZVBsdWdpbihjb25maWcpIHtcbiAgY29uZmlnID0gIWNvbmZpZy5uYW1lICYmIGNvbmZpZ1tcImRlZmF1bHRcIl0gfHwgY29uZmlnOyAvL1VNRCBwYWNrYWdpbmcgd3JhcHMgdGhpbmdzIG9kZGx5LCBzbyBmb3IgZXhhbXBsZSBNb3Rpb25QYXRoSGVscGVyIGJlY29tZXMge01vdGlvblBhdGhIZWxwZXI6TW90aW9uUGF0aEhlbHBlciwgZGVmYXVsdDpNb3Rpb25QYXRoSGVscGVyfS5cblxuICB2YXIgbmFtZSA9IGNvbmZpZy5uYW1lLFxuICAgICAgaXNGdW5jID0gX2lzRnVuY3Rpb24oY29uZmlnKSxcbiAgICAgIFBsdWdpbiA9IG5hbWUgJiYgIWlzRnVuYyAmJiBjb25maWcuaW5pdCA/IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wcm9wcyA9IFtdO1xuICB9IDogY29uZmlnLFxuICAgICAgLy9pbiBjYXNlIHNvbWVvbmUgcGFzc2VzIGluIGFuIG9iamVjdCB0aGF0J3Mgbm90IGEgcGx1Z2luLCBsaWtlIEN1c3RvbUVhc2VcbiAgaW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICBpbml0OiBfZW1wdHlGdW5jLFxuICAgIHJlbmRlcjogX3JlbmRlclByb3BUd2VlbnMsXG4gICAgYWRkOiBfYWRkUHJvcFR3ZWVuLFxuICAgIGtpbGw6IF9raWxsUHJvcFR3ZWVuc09mLFxuICAgIG1vZGlmaWVyOiBfYWRkUGx1Z2luTW9kaWZpZXIsXG4gICAgcmF3VmFyczogMFxuICB9LFxuICAgICAgc3RhdGljcyA9IHtcbiAgICB0YXJnZXRUZXN0OiAwLFxuICAgIGdldDogMCxcbiAgICBnZXRTZXR0ZXI6IF9nZXRTZXR0ZXIsXG4gICAgYWxpYXNlczoge30sXG4gICAgcmVnaXN0ZXI6IDBcbiAgfTtcblxuICBfd2FrZSgpO1xuXG4gIGlmIChjb25maWcgIT09IFBsdWdpbikge1xuICAgIGlmIChfcGx1Z2luc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9zZXREZWZhdWx0cyhQbHVnaW4sIF9zZXREZWZhdWx0cyhfY29weUV4Y2x1ZGluZyhjb25maWcsIGluc3RhbmNlRGVmYXVsdHMpLCBzdGF0aWNzKSk7IC8vc3RhdGljIG1ldGhvZHNcblxuXG4gICAgX21lcmdlKFBsdWdpbi5wcm90b3R5cGUsIF9tZXJnZShpbnN0YW5jZURlZmF1bHRzLCBfY29weUV4Y2x1ZGluZyhjb25maWcsIHN0YXRpY3MpKSk7IC8vaW5zdGFuY2UgbWV0aG9kc1xuXG5cbiAgICBfcGx1Z2luc1tQbHVnaW4ucHJvcCA9IG5hbWVdID0gUGx1Z2luO1xuXG4gICAgaWYgKGNvbmZpZy50YXJnZXRUZXN0KSB7XG4gICAgICBfaGFybmVzc1BsdWdpbnMucHVzaChQbHVnaW4pO1xuXG4gICAgICBfcmVzZXJ2ZWRQcm9wc1tuYW1lXSA9IDE7XG4gICAgfVxuXG4gICAgbmFtZSA9IChuYW1lID09PSBcImNzc1wiID8gXCJDU1NcIiA6IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKSkgKyBcIlBsdWdpblwiOyAvL2ZvciB0aGUgZ2xvYmFsIG5hbWUuIFwibW90aW9uUGF0aFwiIHNob3VsZCBiZWNvbWUgTW90aW9uUGF0aFBsdWdpblxuICB9XG5cbiAgX2FkZEdsb2JhbChuYW1lLCBQbHVnaW4pO1xuXG4gIGNvbmZpZy5yZWdpc3RlciAmJiBjb25maWcucmVnaXN0ZXIoZ3NhcCwgUGx1Z2luLCBQcm9wVHdlZW4pO1xufSxcblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDT0xPUlNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbl8yNTUgPSAyNTUsXG4gICAgX2NvbG9yTG9va3VwID0ge1xuICBhcXVhOiBbMCwgXzI1NSwgXzI1NV0sXG4gIGxpbWU6IFswLCBfMjU1LCAwXSxcbiAgc2lsdmVyOiBbMTkyLCAxOTIsIDE5Ml0sXG4gIGJsYWNrOiBbMCwgMCwgMF0sXG4gIG1hcm9vbjogWzEyOCwgMCwgMF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIGJsdWU6IFswLCAwLCBfMjU1XSxcbiAgbmF2eTogWzAsIDAsIDEyOF0sXG4gIHdoaXRlOiBbXzI1NSwgXzI1NSwgXzI1NV0sXG4gIG9saXZlOiBbMTI4LCAxMjgsIDBdLFxuICB5ZWxsb3c6IFtfMjU1LCBfMjU1LCAwXSxcbiAgb3JhbmdlOiBbXzI1NSwgMTY1LCAwXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBwdXJwbGU6IFsxMjgsIDAsIDEyOF0sXG4gIGdyZWVuOiBbMCwgMTI4LCAwXSxcbiAgcmVkOiBbXzI1NSwgMCwgMF0sXG4gIHBpbms6IFtfMjU1LCAxOTIsIDIwM10sXG4gIGN5YW46IFswLCBfMjU1LCBfMjU1XSxcbiAgdHJhbnNwYXJlbnQ6IFtfMjU1LCBfMjU1LCBfMjU1LCAwXVxufSxcbiAgICBfaHVlID0gZnVuY3Rpb24gX2h1ZShoLCBtMSwgbTIpIHtcbiAgaCA9IGggPCAwID8gaCArIDEgOiBoID4gMSA/IGggLSAxIDogaDtcbiAgcmV0dXJuIChoICogNiA8IDEgPyBtMSArIChtMiAtIG0xKSAqIGggKiA2IDogaCA8IC41ID8gbTIgOiBoICogMyA8IDIgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIF8yNTUgKyAuNSB8IDA7XG59LFxuICAgIHNwbGl0Q29sb3IgPSBmdW5jdGlvbiBzcGxpdENvbG9yKHYsIHRvSFNMLCBmb3JjZUFscGhhKSB7XG4gIHZhciBhID0gIXYgPyBfY29sb3JMb29rdXAuYmxhY2sgOiBfaXNOdW1iZXIodikgPyBbdiA+PiAxNiwgdiA+PiA4ICYgXzI1NSwgdiAmIF8yNTVdIDogMCxcbiAgICAgIHIsXG4gICAgICBnLFxuICAgICAgYixcbiAgICAgIGgsXG4gICAgICBzLFxuICAgICAgbCxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGQsXG4gICAgICB3YXNIU0w7XG5cbiAgaWYgKCFhKSB7XG4gICAgaWYgKHYuc3Vic3RyKC0xKSA9PT0gXCIsXCIpIHtcbiAgICAgIC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG4gICAgICB2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG4gICAgICBhID0gX2NvbG9yTG9va3VwW3ZdO1xuICAgIH0gZWxzZSBpZiAodi5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICBpZiAodi5sZW5ndGggPCA2KSB7XG4gICAgICAgIC8vZm9yIHNob3J0aGFuZCBsaWtlICM5RjAgb3IgIzlGMEYgKGNvdWxkIGhhdmUgYWxwaGEpXG4gICAgICAgIHIgPSB2LmNoYXJBdCgxKTtcbiAgICAgICAgZyA9IHYuY2hhckF0KDIpO1xuICAgICAgICBiID0gdi5jaGFyQXQoMyk7XG4gICAgICAgIHYgPSBcIiNcIiArIHIgKyByICsgZyArIGcgKyBiICsgYiArICh2Lmxlbmd0aCA9PT0gNSA/IHYuY2hhckF0KDQpICsgdi5jaGFyQXQoNCkgOiBcIlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHYubGVuZ3RoID09PSA5KSB7XG4gICAgICAgIC8vIGhleCB3aXRoIGFscGhhLCBsaWtlICNmZDVlNTNmZlxuICAgICAgICBhID0gcGFyc2VJbnQodi5zdWJzdHIoMSwgNiksIDE2KTtcbiAgICAgICAgcmV0dXJuIFthID4+IDE2LCBhID4+IDggJiBfMjU1LCBhICYgXzI1NSwgcGFyc2VJbnQodi5zdWJzdHIoNyksIDE2KSAvIDI1NV07XG4gICAgICB9XG5cbiAgICAgIHYgPSBwYXJzZUludCh2LnN1YnN0cigxKSwgMTYpO1xuICAgICAgYSA9IFt2ID4+IDE2LCB2ID4+IDggJiBfMjU1LCB2ICYgXzI1NV07XG4gICAgfSBlbHNlIGlmICh2LnN1YnN0cigwLCAzKSA9PT0gXCJoc2xcIikge1xuICAgICAgYSA9IHdhc0hTTCA9IHYubWF0Y2goX3N0cmljdE51bUV4cCk7XG5cbiAgICAgIGlmICghdG9IU0wpIHtcbiAgICAgICAgaCA9ICthWzBdICUgMzYwIC8gMzYwO1xuICAgICAgICBzID0gK2FbMV0gLyAxMDA7XG4gICAgICAgIGwgPSArYVsyXSAvIDEwMDtcbiAgICAgICAgZyA9IGwgPD0gLjUgPyBsICogKHMgKyAxKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHIgPSBsICogMiAtIGc7XG4gICAgICAgIGEubGVuZ3RoID4gMyAmJiAoYVszXSAqPSAxKTsgLy9jYXN0IGFzIG51bWJlclxuXG4gICAgICAgIGFbMF0gPSBfaHVlKGggKyAxIC8gMywgciwgZyk7XG4gICAgICAgIGFbMV0gPSBfaHVlKGgsIHIsIGcpO1xuICAgICAgICBhWzJdID0gX2h1ZShoIC0gMSAvIDMsIHIsIGcpO1xuICAgICAgfSBlbHNlIGlmICh+di5pbmRleE9mKFwiPVwiKSkge1xuICAgICAgICAvL2lmIHJlbGF0aXZlIHZhbHVlcyBhcmUgZm91bmQsIGp1c3QgcmV0dXJuIHRoZSByYXcgc3RyaW5ncyB3aXRoIHRoZSByZWxhdGl2ZSBwcmVmaXhlcyBpbiBwbGFjZS5cbiAgICAgICAgYSA9IHYubWF0Y2goX251bUV4cCk7XG4gICAgICAgIGZvcmNlQWxwaGEgJiYgYS5sZW5ndGggPCA0ICYmIChhWzNdID0gMSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhID0gdi5tYXRjaChfc3RyaWN0TnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgYSA9IGEubWFwKE51bWJlcik7XG4gIH1cblxuICBpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuICAgIHIgPSBhWzBdIC8gXzI1NTtcbiAgICBnID0gYVsxXSAvIF8yNTU7XG4gICAgYiA9IGFbMl0gLyBfMjU1O1xuICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgIGggPSBzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IG1heCAtIG1pbjtcbiAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgIGggPSBtYXggPT09IHIgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IG1heCA9PT0gZyA/IChiIC0gcikgLyBkICsgMiA6IChyIC0gZykgLyBkICsgNDtcbiAgICAgIGggKj0gNjA7XG4gICAgfVxuXG4gICAgYVswXSA9IH5+KGggKyAuNSk7XG4gICAgYVsxXSA9IH5+KHMgKiAxMDAgKyAuNSk7XG4gICAgYVsyXSA9IH5+KGwgKiAxMDAgKyAuNSk7XG4gIH1cblxuICBmb3JjZUFscGhhICYmIGEubGVuZ3RoIDwgNCAmJiAoYVszXSA9IDEpO1xuICByZXR1cm4gYTtcbn0sXG4gICAgX2NvbG9yT3JkZXJEYXRhID0gZnVuY3Rpb24gX2NvbG9yT3JkZXJEYXRhKHYpIHtcbiAgLy8gc3RyaXBzIG91dCB0aGUgY29sb3JzIGZyb20gdGhlIHN0cmluZywgZmluZHMgYWxsIHRoZSBudW1lcmljIHNsb3RzICh3aXRoIHVuaXRzKSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aG9zZS4gVGhlIEFycmF5IGFsc28gaGFzIGEgXCJjXCIgcHJvcGVydHkgd2hpY2ggaXMgYW4gQXJyYXkgb2YgdGhlIGluZGV4IHZhbHVlcyB3aGVyZSB0aGUgY29sb3JzIGJlbG9uZy4gVGhpcyBpcyB0byBoZWxwIHdvcmsgYXJvdW5kIGlzc3VlcyB3aGVyZSB0aGVyZSdzIGEgbWlzLW1hdGNoZWQgb3JkZXIgb2YgY29sb3IvbnVtZXJpYyBkYXRhIGxpa2UgZHJvcC1zaGFkb3coI2YwMCAwcHggMXB4IDJweCkgYW5kIGRyb3Atc2hhZG93KDB4IDFweCAycHggI2YwMCkuIFRoaXMgaXMgYmFzaWNhbGx5IGEgaGVscGVyIGZ1bmN0aW9uIHVzZWQgaW4gX2Zvcm1hdENvbG9ycygpXG4gIHZhciB2YWx1ZXMgPSBbXSxcbiAgICAgIGMgPSBbXSxcbiAgICAgIGkgPSAtMTtcbiAgdi5zcGxpdChfY29sb3JFeHApLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICB2YXIgYSA9IHYubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcbiAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIGEpO1xuICAgIGMucHVzaChpICs9IGEubGVuZ3RoICsgMSk7XG4gIH0pO1xuICB2YWx1ZXMuYyA9IGM7XG4gIHJldHVybiB2YWx1ZXM7XG59LFxuICAgIF9mb3JtYXRDb2xvcnMgPSBmdW5jdGlvbiBfZm9ybWF0Q29sb3JzKHMsIHRvSFNMLCBvcmRlck1hdGNoRGF0YSkge1xuICB2YXIgcmVzdWx0ID0gXCJcIixcbiAgICAgIGNvbG9ycyA9IChzICsgcmVzdWx0KS5tYXRjaChfY29sb3JFeHApLFxuICAgICAgdHlwZSA9IHRvSFNMID8gXCJoc2xhKFwiIDogXCJyZ2JhKFwiLFxuICAgICAgaSA9IDAsXG4gICAgICBjLFxuICAgICAgc2hlbGwsXG4gICAgICBkLFxuICAgICAgbDtcblxuICBpZiAoIWNvbG9ycykge1xuICAgIHJldHVybiBzO1xuICB9XG5cbiAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICByZXR1cm4gKGNvbG9yID0gc3BsaXRDb2xvcihjb2xvciwgdG9IU0wsIDEpKSAmJiB0eXBlICsgKHRvSFNMID8gY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuICB9KTtcblxuICBpZiAob3JkZXJNYXRjaERhdGEpIHtcbiAgICBkID0gX2NvbG9yT3JkZXJEYXRhKHMpO1xuICAgIGMgPSBvcmRlck1hdGNoRGF0YS5jO1xuXG4gICAgaWYgKGMuam9pbihyZXN1bHQpICE9PSBkLmMuam9pbihyZXN1bHQpKSB7XG4gICAgICBzaGVsbCA9IHMucmVwbGFjZShfY29sb3JFeHAsIFwiMVwiKS5zcGxpdChfbnVtV2l0aFVuaXRFeHApO1xuICAgICAgbCA9IHNoZWxsLmxlbmd0aCAtIDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzaGVsbFtpXSArICh+Yy5pbmRleE9mKGkpID8gY29sb3JzLnNoaWZ0KCkgfHwgdHlwZSArIFwiMCwwLDAsMClcIiA6IChkLmxlbmd0aCA/IGQgOiBjb2xvcnMubGVuZ3RoID8gY29sb3JzIDogb3JkZXJNYXRjaERhdGEpLnNoaWZ0KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghc2hlbGwpIHtcbiAgICBzaGVsbCA9IHMuc3BsaXQoX2NvbG9yRXhwKTtcbiAgICBsID0gc2hlbGwubGVuZ3RoIC0gMTtcblxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gc2hlbGxbaV0gKyBjb2xvcnNbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdCArIHNoZWxsW2xdO1xufSxcbiAgICBfY29sb3JFeHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezMsNH0pezEsMn1cXFxcYlwiLFxuICAgICAgLy93ZSdsbCBkeW5hbWljYWxseSBidWlsZCB0aGlzIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBjb25zZXJ2ZSBmaWxlIHNpemUuIEFmdGVyIGJ1aWxkaW5nIGl0LCBpdCB3aWxsIGJlIGFibGUgdG8gZmluZCByZ2IoKSwgcmdiYSgpLCAjIChoZXhhZGVjaW1hbCksIGFuZCBuYW1lZCBjb2xvciB2YWx1ZXMgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLixcbiAgcDtcblxuICBmb3IgKHAgaW4gX2NvbG9yTG9va3VwKSB7XG4gICAgcyArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChzICsgXCIpXCIsIFwiZ2lcIik7XG59KCksXG4gICAgX2hzbEV4cCA9IC9oc2xbYV0/XFwoLyxcbiAgICBfY29sb3JTdHJpbmdGaWx0ZXIgPSBmdW5jdGlvbiBfY29sb3JTdHJpbmdGaWx0ZXIoYSkge1xuICB2YXIgY29tYmluZWQgPSBhLmpvaW4oXCIgXCIpLFxuICAgICAgdG9IU0w7XG4gIF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXG4gIGlmIChfY29sb3JFeHAudGVzdChjb21iaW5lZCkpIHtcbiAgICB0b0hTTCA9IF9oc2xFeHAudGVzdChjb21iaW5lZCk7XG4gICAgYVsxXSA9IF9mb3JtYXRDb2xvcnMoYVsxXSwgdG9IU0wpO1xuICAgIGFbMF0gPSBfZm9ybWF0Q29sb3JzKGFbMF0sIHRvSFNMLCBfY29sb3JPcmRlckRhdGEoYVsxXSkpOyAvLyBtYWtlIHN1cmUgdGhlIG9yZGVyIG9mIG51bWJlcnMvY29sb3JzIG1hdGNoIHdpdGggdGhlIEVORCB2YWx1ZS5cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59LFxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJQ0tFUlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX3RpY2tlckFjdGl2ZSxcbiAgICBfdGlja2VyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX2dldFRpbWUgPSBEYXRlLm5vdyxcbiAgICAgIF9sYWdUaHJlc2hvbGQgPSA1MDAsXG4gICAgICBfYWRqdXN0ZWRMYWcgPSAzMyxcbiAgICAgIF9zdGFydFRpbWUgPSBfZ2V0VGltZSgpLFxuICAgICAgX2xhc3RVcGRhdGUgPSBfc3RhcnRUaW1lLFxuICAgICAgX2dhcCA9IDEwMDAgLyAyNDAsXG4gICAgICBfbmV4dFRpbWUgPSBfZ2FwLFxuICAgICAgX2xpc3RlbmVycyA9IFtdLFxuICAgICAgX2lkLFxuICAgICAgX3JlcSxcbiAgICAgIF9yYWYsXG4gICAgICBfc2VsZixcbiAgICAgIF9kZWx0YSxcbiAgICAgIF9pLFxuICAgICAgX3RpY2sgPSBmdW5jdGlvbiBfdGljayh2KSB7XG4gICAgdmFyIGVsYXBzZWQgPSBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUsXG4gICAgICAgIG1hbnVhbCA9IHYgPT09IHRydWUsXG4gICAgICAgIG92ZXJsYXAsXG4gICAgICAgIGRpc3BhdGNoLFxuICAgICAgICB0aW1lLFxuICAgICAgICBmcmFtZTtcblxuICAgIGVsYXBzZWQgPiBfbGFnVGhyZXNob2xkICYmIChfc3RhcnRUaW1lICs9IGVsYXBzZWQgLSBfYWRqdXN0ZWRMYWcpO1xuICAgIF9sYXN0VXBkYXRlICs9IGVsYXBzZWQ7XG4gICAgdGltZSA9IF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZTtcbiAgICBvdmVybGFwID0gdGltZSAtIF9uZXh0VGltZTtcblxuICAgIGlmIChvdmVybGFwID4gMCB8fCBtYW51YWwpIHtcbiAgICAgIGZyYW1lID0gKytfc2VsZi5mcmFtZTtcbiAgICAgIF9kZWx0YSA9IHRpbWUgLSBfc2VsZi50aW1lICogMTAwMDtcbiAgICAgIF9zZWxmLnRpbWUgPSB0aW1lID0gdGltZSAvIDEwMDA7XG4gICAgICBfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyA0IDogX2dhcCAtIG92ZXJsYXApO1xuICAgICAgZGlzcGF0Y2ggPSAxO1xuICAgIH1cblxuICAgIG1hbnVhbCB8fCAoX2lkID0gX3JlcShfdGljaykpOyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICBmb3IgKF9pID0gMDsgX2kgPCBfbGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAvLyB1c2UgX2kgYW5kIGNoZWNrIF9saXN0ZW5lcnMubGVuZ3RoIGluc3RlYWQgb2YgYSB2YXJpYWJsZSBiZWNhdXNlIGEgbGlzdGVuZXIgY291bGQgZ2V0IHJlbW92ZWQgZHVyaW5nIHRoZSBsb29wLCBhbmQgaWYgdGhhdCBoYXBwZW5zIHRvIGFuIGVsZW1lbnQgbGVzcyB0aGFuIHRoZSBjdXJyZW50IGluZGV4LCBpdCdkIHRocm93IHRoaW5ncyBvZmYgaW4gdGhlIGxvb3AuXG4gICAgICAgIF9saXN0ZW5lcnNbX2ldKHRpbWUsIF9kZWx0YSwgZnJhbWUsIHYpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfc2VsZiA9IHtcbiAgICB0aW1lOiAwLFxuICAgIGZyYW1lOiAwLFxuICAgIHRpY2s6IGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICBfdGljayh0cnVlKTtcbiAgICB9LFxuICAgIGRlbHRhUmF0aW86IGZ1bmN0aW9uIGRlbHRhUmF0aW8oZnBzKSB7XG4gICAgICByZXR1cm4gX2RlbHRhIC8gKDEwMDAgLyAoZnBzIHx8IDYwKSk7XG4gICAgfSxcbiAgICB3YWtlOiBmdW5jdGlvbiB3YWtlKCkge1xuICAgICAgaWYgKF9jb3JlUmVhZHkpIHtcbiAgICAgICAgaWYgKCFfY29yZUluaXR0ZWQgJiYgX3dpbmRvd0V4aXN0cygpKSB7XG4gICAgICAgICAgX3dpbiA9IF9jb3JlSW5pdHRlZCA9IHdpbmRvdztcbiAgICAgICAgICBfZG9jID0gX3dpbi5kb2N1bWVudCB8fCB7fTtcbiAgICAgICAgICBfZ2xvYmFscy5nc2FwID0gZ3NhcDtcbiAgICAgICAgICAoX3dpbi5nc2FwVmVyc2lvbnMgfHwgKF93aW4uZ3NhcFZlcnNpb25zID0gW10pKS5wdXNoKGdzYXAudmVyc2lvbik7XG5cbiAgICAgICAgICBfaW5zdGFsbChfaW5zdGFsbFNjb3BlIHx8IF93aW4uR3JlZW5Tb2NrR2xvYmFscyB8fCAhX3dpbi5nc2FwICYmIF93aW4gfHwge30pO1xuXG4gICAgICAgICAgX3JhZiA9IF93aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgX2lkICYmIF9zZWxmLnNsZWVwKCk7XG5cbiAgICAgICAgX3JlcSA9IF9yYWYgfHwgZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmLCBfbmV4dFRpbWUgLSBfc2VsZi50aW1lICogMTAwMCArIDEgfCAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBfdGlja2VyQWN0aXZlID0gMTtcblxuICAgICAgICBfdGljaygyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsZWVwOiBmdW5jdGlvbiBzbGVlcCgpIHtcbiAgICAgIChfcmFmID8gX3dpbi5jYW5jZWxBbmltYXRpb25GcmFtZSA6IGNsZWFyVGltZW91dCkoX2lkKTtcbiAgICAgIF90aWNrZXJBY3RpdmUgPSAwO1xuICAgICAgX3JlcSA9IF9lbXB0eUZ1bmM7XG4gICAgfSxcbiAgICBsYWdTbW9vdGhpbmc6IGZ1bmN0aW9uIGxhZ1Ntb290aGluZyh0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG4gICAgICBfbGFnVGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEgLyBfdGlueU51bTsgLy96ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cbiAgICAgIF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnLCBfbGFnVGhyZXNob2xkLCAwKTtcbiAgICB9LFxuICAgIGZwczogZnVuY3Rpb24gZnBzKF9mcHMpIHtcbiAgICAgIF9nYXAgPSAxMDAwIC8gKF9mcHMgfHwgMjQwKTtcbiAgICAgIF9uZXh0VGltZSA9IF9zZWxmLnRpbWUgKiAxMDAwICsgX2dhcDtcbiAgICB9LFxuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbGxiYWNrKSB7XG4gICAgICBfbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spIDwgMCAmJiBfbGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICBfd2FrZSgpO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpO1xuICAgICAgfihpID0gX2xpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKSkgJiYgX2xpc3RlbmVycy5zcGxpY2UoaSwgMSkgJiYgX2kgPj0gaSAmJiBfaS0tO1xuICAgIH0sXG4gICAgX2xpc3RlbmVyczogX2xpc3RlbmVyc1xuICB9O1xuICByZXR1cm4gX3NlbGY7XG59KCksXG4gICAgX3dha2UgPSBmdW5jdGlvbiBfd2FrZSgpIHtcbiAgcmV0dXJuICFfdGlja2VyQWN0aXZlICYmIF90aWNrZXIud2FrZSgpO1xufSxcbiAgICAvL2Fsc28gZW5zdXJlcyB0aGUgY29yZSBjbGFzc2VzIGFyZSBpbml0aWFsaXplZC5cblxuLypcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBFQVNJTkdcbiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKi9cbl9lYXNlTWFwID0ge30sXG4gICAgX2N1c3RvbUVhc2VFeHAgPSAvXltcXGQuXFwtTV1bXFxkLlxcLSxcXHNdLyxcbiAgICBfcXVvdGVzRXhwID0gL1tcIiddL2csXG4gICAgX3BhcnNlT2JqZWN0SW5TdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VPYmplY3RJblN0cmluZyh2YWx1ZSkge1xuICAvL3Rha2VzIGEgc3RyaW5nIGxpa2UgXCJ7d2lnZ2xlczoxMCwgdHlwZTphbnRpY2lwYXRlfSlcIiBhbmQgdHVybnMgaXQgaW50byBhIHJlYWwgb2JqZWN0LiBOb3RpY2UgaXQgZW5kcyBpbiBcIilcIiBhbmQgaW5jbHVkZXMgdGhlIHt9IHdyYXBwZXJzLiBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3IgcGFyc2luZyBlYXNlIGNvbmZpZ3MgYW5kIHByaW9yaXRpemVkIG9wdGltaXphdGlvbiByYXRoZXIgdGhhbiByZXVzYWJpbGl0eS5cbiAgdmFyIG9iaiA9IHt9LFxuICAgICAgc3BsaXQgPSB2YWx1ZS5zdWJzdHIoMSwgdmFsdWUubGVuZ3RoIC0gMykuc3BsaXQoXCI6XCIpLFxuICAgICAga2V5ID0gc3BsaXRbMF0sXG4gICAgICBpID0gMSxcbiAgICAgIGwgPSBzcGxpdC5sZW5ndGgsXG4gICAgICBpbmRleCxcbiAgICAgIHZhbCxcbiAgICAgIHBhcnNlZFZhbDtcblxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIHZhbCA9IHNwbGl0W2ldO1xuICAgIGluZGV4ID0gaSAhPT0gbCAtIDEgPyB2YWwubGFzdEluZGV4T2YoXCIsXCIpIDogdmFsLmxlbmd0aDtcbiAgICBwYXJzZWRWYWwgPSB2YWwuc3Vic3RyKDAsIGluZGV4KTtcbiAgICBvYmpba2V5XSA9IGlzTmFOKHBhcnNlZFZhbCkgPyBwYXJzZWRWYWwucmVwbGFjZShfcXVvdGVzRXhwLCBcIlwiKS50cmltKCkgOiArcGFyc2VkVmFsO1xuICAgIGtleSA9IHZhbC5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfdmFsdWVJblBhcmVudGhlc2VzID0gZnVuY3Rpb24gX3ZhbHVlSW5QYXJlbnRoZXNlcyh2YWx1ZSkge1xuICB2YXIgb3BlbiA9IHZhbHVlLmluZGV4T2YoXCIoXCIpICsgMSxcbiAgICAgIGNsb3NlID0gdmFsdWUuaW5kZXhPZihcIilcIiksXG4gICAgICBuZXN0ZWQgPSB2YWx1ZS5pbmRleE9mKFwiKFwiLCBvcGVuKTtcbiAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhvcGVuLCB+bmVzdGVkICYmIG5lc3RlZCA8IGNsb3NlID8gdmFsdWUuaW5kZXhPZihcIilcIiwgY2xvc2UgKyAxKSA6IGNsb3NlKTtcbn0sXG4gICAgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKG5hbWUpIHtcbiAgLy9uYW1lIGNhbiBiZSBhIHN0cmluZyBsaWtlIFwiZWxhc3RpYy5vdXQoMSwwLjUpXCIsIGFuZCBwYXNzIGluIF9lYXNlTWFwIGFzIG9iaiBhbmQgaXQnbGwgcGFyc2UgaXQgb3V0IGFuZCBjYWxsIHRoZSBhY3R1YWwgZnVuY3Rpb24gbGlrZSBfZWFzZU1hcC5FbGFzdGljLmVhc2VPdXQuY29uZmlnKDEsMC41KS4gSXQgd2lsbCBhbHNvIHBhcnNlIGN1c3RvbSBlYXNlIHN0cmluZ3MgYXMgbG9uZyBhcyBDdXN0b21FYXNlIGlzIGxvYWRlZCBhbmQgcmVnaXN0ZXJlZCAoaW50ZXJuYWxseSBhcyBfZWFzZU1hcC5fQ0UpLlxuICB2YXIgc3BsaXQgPSAobmFtZSArIFwiXCIpLnNwbGl0KFwiKFwiKSxcbiAgICAgIGVhc2UgPSBfZWFzZU1hcFtzcGxpdFswXV07XG4gIHJldHVybiBlYXNlICYmIHNwbGl0Lmxlbmd0aCA+IDEgJiYgZWFzZS5jb25maWcgPyBlYXNlLmNvbmZpZy5hcHBseShudWxsLCB+bmFtZS5pbmRleE9mKFwie1wiKSA/IFtfcGFyc2VPYmplY3RJblN0cmluZyhzcGxpdFsxXSldIDogX3ZhbHVlSW5QYXJlbnRoZXNlcyhuYW1lKS5zcGxpdChcIixcIikubWFwKF9udW1lcmljSWZQb3NzaWJsZSkpIDogX2Vhc2VNYXAuX0NFICYmIF9jdXN0b21FYXNlRXhwLnRlc3QobmFtZSkgPyBfZWFzZU1hcC5fQ0UoXCJcIiwgbmFtZSkgOiBlYXNlO1xufSxcbiAgICBfaW52ZXJ0RWFzZSA9IGZ1bmN0aW9uIF9pbnZlcnRFYXNlKGVhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlKDEgLSBwKTtcbiAgfTtcbn0sXG4gICAgLy8gYWxsb3cgeW95b0Vhc2UgdG8gYmUgc2V0IGluIGNoaWxkcmVuIGFuZCBoYXZlIHRob3NlIGFmZmVjdGVkIHdoZW4gdGhlIHBhcmVudC9hbmNlc3RvciB0aW1lbGluZSB5b3lvcy5cbl9wcm9wYWdhdGVZb3lvRWFzZSA9IGZ1bmN0aW9uIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKSB7XG4gIHZhciBjaGlsZCA9IHRpbWVsaW5lLl9maXJzdCxcbiAgICAgIGVhc2U7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgVGltZWxpbmUpIHtcbiAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZCwgaXNZb3lvKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnZhcnMueW95b0Vhc2UgJiYgKCFjaGlsZC5feW95byB8fCAhY2hpbGQuX3JlcGVhdCkgJiYgY2hpbGQuX3lveW8gIT09IGlzWW95bykge1xuICAgICAgaWYgKGNoaWxkLnRpbWVsaW5lKSB7XG4gICAgICAgIF9wcm9wYWdhdGVZb3lvRWFzZShjaGlsZC50aW1lbGluZSwgaXNZb3lvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhc2UgPSBjaGlsZC5fZWFzZTtcbiAgICAgICAgY2hpbGQuX2Vhc2UgPSBjaGlsZC5feUVhc2U7XG4gICAgICAgIGNoaWxkLl95RWFzZSA9IGVhc2U7XG4gICAgICAgIGNoaWxkLl95b3lvID0gaXNZb3lvO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gIH1cbn0sXG4gICAgX3BhcnNlRWFzZSA9IGZ1bmN0aW9uIF9wYXJzZUVhc2UoZWFzZSwgZGVmYXVsdEVhc2UpIHtcbiAgcmV0dXJuICFlYXNlID8gZGVmYXVsdEVhc2UgOiAoX2lzRnVuY3Rpb24oZWFzZSkgPyBlYXNlIDogX2Vhc2VNYXBbZWFzZV0gfHwgX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nKGVhc2UpKSB8fCBkZWZhdWx0RWFzZTtcbn0sXG4gICAgX2luc2VydEVhc2UgPSBmdW5jdGlvbiBfaW5zZXJ0RWFzZShuYW1lcywgZWFzZUluLCBlYXNlT3V0LCBlYXNlSW5PdXQpIHtcbiAgaWYgKGVhc2VPdXQgPT09IHZvaWQgMCkge1xuICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICAgIHJldHVybiAxIC0gZWFzZUluKDEgLSBwKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKGVhc2VJbk91dCA9PT0gdm9pZCAwKSB7XG4gICAgZWFzZUluT3V0ID0gZnVuY3Rpb24gZWFzZUluT3V0KHApIHtcbiAgICAgIHJldHVybiBwIDwgLjUgPyBlYXNlSW4ocCAqIDIpIC8gMiA6IDEgLSBlYXNlSW4oKDEgLSBwKSAqIDIpIC8gMjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGVhc2UgPSB7XG4gICAgZWFzZUluOiBlYXNlSW4sXG4gICAgZWFzZU91dDogZWFzZU91dCxcbiAgICBlYXNlSW5PdXQ6IGVhc2VJbk91dFxuICB9LFxuICAgICAgbG93ZXJjYXNlTmFtZTtcblxuICBfZm9yRWFjaE5hbWUobmFtZXMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX2Vhc2VNYXBbbmFtZV0gPSBfZ2xvYmFsc1tuYW1lXSA9IGVhc2U7XG4gICAgX2Vhc2VNYXBbbG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKV0gPSBlYXNlT3V0O1xuXG4gICAgZm9yICh2YXIgcCBpbiBlYXNlKSB7XG4gICAgICBfZWFzZU1hcFtsb3dlcmNhc2VOYW1lICsgKHAgPT09IFwiZWFzZUluXCIgPyBcIi5pblwiIDogcCA9PT0gXCJlYXNlT3V0XCIgPyBcIi5vdXRcIiA6IFwiLmluT3V0XCIpXSA9IF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHBdID0gZWFzZVtwXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlYXNlO1xufSxcbiAgICBfZWFzZUluT3V0RnJvbU91dCA9IGZ1bmN0aW9uIF9lYXNlSW5PdXRGcm9tT3V0KGVhc2VPdXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHAgPCAuNSA/ICgxIC0gZWFzZU91dCgxIC0gcCAqIDIpKSAvIDIgOiAuNSArIGVhc2VPdXQoKHAgLSAuNSkgKiAyKSAvIDI7XG4gIH07XG59LFxuICAgIF9jb25maWdFbGFzdGljID0gZnVuY3Rpb24gX2NvbmZpZ0VsYXN0aWModHlwZSwgYW1wbGl0dWRlLCBwZXJpb2QpIHtcbiAgdmFyIHAxID0gYW1wbGl0dWRlID49IDEgPyBhbXBsaXR1ZGUgOiAxLFxuICAgICAgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cbiAgcDIgPSAocGVyaW9kIHx8ICh0eXBlID8gLjMgOiAuNDUpKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSksXG4gICAgICBwMyA9IHAyIC8gXzJQSSAqIChNYXRoLmFzaW4oMSAvIHAxKSB8fCAwKSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA9PT0gMSA/IDEgOiBwMSAqIE1hdGgucG93KDIsIC0xMCAqIHApICogX3NpbigocCAtIHAzKSAqIHAyKSArIDE7XG4gIH0sXG4gICAgICBlYXNlID0gdHlwZSA9PT0gXCJvdXRcIiA/IGVhc2VPdXQgOiB0eXBlID09PSBcImluXCIgPyBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiAxIC0gZWFzZU91dCgxIC0gcCk7XG4gIH0gOiBfZWFzZUluT3V0RnJvbU91dChlYXNlT3V0KTtcblxuICBwMiA9IF8yUEkgLyBwMjsgLy9wcmVjYWxjdWxhdGUgdG8gb3B0aW1pemVcblxuICBlYXNlLmNvbmZpZyA9IGZ1bmN0aW9uIChhbXBsaXR1ZGUsIHBlcmlvZCkge1xuICAgIHJldHVybiBfY29uZmlnRWxhc3RpYyh0eXBlLCBhbXBsaXR1ZGUsIHBlcmlvZCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59LFxuICAgIF9jb25maWdCYWNrID0gZnVuY3Rpb24gX2NvbmZpZ0JhY2sodHlwZSwgb3ZlcnNob290KSB7XG4gIGlmIChvdmVyc2hvb3QgPT09IHZvaWQgMCkge1xuICAgIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gIH1cblxuICB2YXIgZWFzZU91dCA9IGZ1bmN0aW9uIGVhc2VPdXQocCkge1xuICAgIHJldHVybiBwID8gLS1wICogcCAqICgob3ZlcnNob290ICsgMSkgKiBwICsgb3ZlcnNob290KSArIDEgOiAwO1xuICB9LFxuICAgICAgZWFzZSA9IHR5cGUgPT09IFwib3V0XCIgPyBlYXNlT3V0IDogdHlwZSA9PT0gXCJpblwiID8gZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gMSAtIGVhc2VPdXQoMSAtIHApO1xuICB9IDogX2Vhc2VJbk91dEZyb21PdXQoZWFzZU91dCk7XG5cbiAgZWFzZS5jb25maWcgPSBmdW5jdGlvbiAob3ZlcnNob290KSB7XG4gICAgcmV0dXJuIF9jb25maWdCYWNrKHR5cGUsIG92ZXJzaG9vdCk7XG4gIH07XG5cbiAgcmV0dXJuIGVhc2U7XG59OyAvLyBhIGNoZWFwZXIgKGtiIGFuZCBjcHUpIGJ1dCBtb3JlIG1pbGQgd2F5IHRvIGdldCBhIHBhcmFtZXRlcml6ZWQgd2VpZ2h0ZWQgZWFzZSBieSBmZWVkaW5nIGluIGEgdmFsdWUgYmV0d2VlbiAtMSAoZWFzZUluKSBhbmQgMSAoZWFzZU91dCkgd2hlcmUgMCBpcyBsaW5lYXIuXG4vLyBfd2VpZ2h0ZWRFYXNlID0gcmF0aW8gPT4ge1xuLy8gXHRsZXQgeSA9IDAuNSArIHJhdGlvIC8gMjtcbi8vIFx0cmV0dXJuIHAgPT4gKDIgKiAoMSAtIHApICogcCAqIHkgKyBwICogcCk7XG4vLyB9LFxuLy8gYSBzdHJvbmdlciAoYnV0IG1vcmUgZXhwZW5zaXZlIGtiL2NwdSkgcGFyYW1ldGVyaXplZCB3ZWlnaHRlZCBlYXNlIHRoYXQgbGV0cyB5b3UgZmVlZCBpbiBhIHZhbHVlIGJldHdlZW4gLTEgKGVhc2VJbikgYW5kIDEgKGVhc2VPdXQpIHdoZXJlIDAgaXMgbGluZWFyLlxuLy8gX3dlaWdodGVkRWFzZVN0cm9uZyA9IHJhdGlvID0+IHtcbi8vIFx0cmF0aW8gPSAuNSArIHJhdGlvIC8gMjtcbi8vIFx0bGV0IG8gPSAxIC8gMyAqIChyYXRpbyA8IC41ID8gcmF0aW8gOiAxIC0gcmF0aW8pLFxuLy8gXHRcdGIgPSByYXRpbyAtIG8sXG4vLyBcdFx0YyA9IHJhdGlvICsgbztcbi8vIFx0cmV0dXJuIHAgPT4gcCA9PT0gMSA/IHAgOiAzICogYiAqICgxIC0gcCkgKiAoMSAtIHApICogcCArIDMgKiBjICogKDEgLSBwKSAqIHAgKiBwICsgcCAqIHAgKiBwO1xuLy8gfTtcblxuXG5fZm9yRWFjaE5hbWUoXCJMaW5lYXIsUXVhZCxDdWJpYyxRdWFydCxRdWludCxTdHJvbmdcIiwgZnVuY3Rpb24gKG5hbWUsIGkpIHtcbiAgdmFyIHBvd2VyID0gaSA8IDUgPyBpICsgMSA6IGk7XG5cbiAgX2luc2VydEVhc2UobmFtZSArIFwiLFBvd2VyXCIgKyAocG93ZXIgLSAxKSwgaSA/IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHAsIHBvd2VyKTtcbiAgfSA6IGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIHA7XG4gIH0sIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gcCwgcG93ZXIpO1xuICB9LCBmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBwIDwgLjUgPyBNYXRoLnBvdyhwICogMiwgcG93ZXIpIC8gMiA6IDEgLSBNYXRoLnBvdygoMSAtIHApICogMiwgcG93ZXIpIC8gMjtcbiAgfSk7XG59KTtcblxuX2Vhc2VNYXAuTGluZWFyLmVhc2VOb25lID0gX2Vhc2VNYXAubm9uZSA9IF9lYXNlTWFwLkxpbmVhci5lYXNlSW47XG5cbl9pbnNlcnRFYXNlKFwiRWxhc3RpY1wiLCBfY29uZmlnRWxhc3RpYyhcImluXCIpLCBfY29uZmlnRWxhc3RpYyhcIm91dFwiKSwgX2NvbmZpZ0VsYXN0aWMoKSk7XG5cbihmdW5jdGlvbiAobiwgYykge1xuICB2YXIgbjEgPSAxIC8gYyxcbiAgICAgIG4yID0gMiAqIG4xLFxuICAgICAgbjMgPSAyLjUgKiBuMSxcbiAgICAgIGVhc2VPdXQgPSBmdW5jdGlvbiBlYXNlT3V0KHApIHtcbiAgICByZXR1cm4gcCA8IG4xID8gbiAqIHAgKiBwIDogcCA8IG4yID8gbiAqIE1hdGgucG93KHAgLSAxLjUgLyBjLCAyKSArIC43NSA6IHAgPCBuMyA/IG4gKiAocCAtPSAyLjI1IC8gYykgKiBwICsgLjkzNzUgOiBuICogTWF0aC5wb3cocCAtIDIuNjI1IC8gYywgMikgKyAuOTg0Mzc1O1xuICB9O1xuXG4gIF9pbnNlcnRFYXNlKFwiQm91bmNlXCIsIGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIDEgLSBlYXNlT3V0KDEgLSBwKTtcbiAgfSwgZWFzZU91dCk7XG59KSg3LjU2MjUsIDIuNzUpO1xuXG5faW5zZXJ0RWFzZShcIkV4cG9cIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAgPyBNYXRoLnBvdygyLCAxMCAqIChwIC0gMSkpIDogMDtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkNpcmNcIiwgZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIC0oX3NxcnQoMSAtIHAgKiBwKSAtIDEpO1xufSk7XG5cbl9pbnNlcnRFYXNlKFwiU2luZVwiLCBmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCA9PT0gMSA/IDEgOiAtX2NvcyhwICogX0hBTEZfUEkpICsgMTtcbn0pO1xuXG5faW5zZXJ0RWFzZShcIkJhY2tcIiwgX2NvbmZpZ0JhY2soXCJpblwiKSwgX2NvbmZpZ0JhY2soXCJvdXRcIiksIF9jb25maWdCYWNrKCkpO1xuXG5fZWFzZU1hcC5TdGVwcGVkRWFzZSA9IF9lYXNlTWFwLnN0ZXBzID0gX2dsb2JhbHMuU3RlcHBlZEVhc2UgPSB7XG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHN0ZXBzLCBpbW1lZGlhdGVTdGFydCkge1xuICAgIGlmIChzdGVwcyA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGVwcyA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHAxID0gMSAvIHN0ZXBzLFxuICAgICAgICBwMiA9IHN0ZXBzICsgKGltbWVkaWF0ZVN0YXJ0ID8gMCA6IDEpLFxuICAgICAgICBwMyA9IGltbWVkaWF0ZVN0YXJ0ID8gMSA6IDAsXG4gICAgICAgIG1heCA9IDEgLSBfdGlueU51bTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiAoKHAyICogX2NsYW1wKDAsIG1heCwgcCkgfCAwKSArIHAzKSAqIHAxO1xuICAgIH07XG4gIH1cbn07XG5fZGVmYXVsdHMuZWFzZSA9IF9lYXNlTWFwW1wicXVhZC5vdXRcIl07XG5cbl9mb3JFYWNoTmFtZShcIm9uQ29tcGxldGUsb25VcGRhdGUsb25TdGFydCxvblJlcGVhdCxvblJldmVyc2VDb21wbGV0ZSxvbkludGVycnVwdFwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX2NhbGxiYWNrTmFtZXMgKz0gbmFtZSArIFwiLFwiICsgbmFtZSArIFwiUGFyYW1zLFwiO1xufSk7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENBQ0hFXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBHU0NhY2hlID0gZnVuY3Rpb24gR1NDYWNoZSh0YXJnZXQsIGhhcm5lc3MpIHtcbiAgdGhpcy5pZCA9IF9nc0lEKys7XG4gIHRhcmdldC5fZ3NhcCA9IHRoaXM7XG4gIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB0aGlzLmhhcm5lc3MgPSBoYXJuZXNzO1xuICB0aGlzLmdldCA9IGhhcm5lc3MgPyBoYXJuZXNzLmdldCA6IF9nZXRQcm9wZXJ0eTtcbiAgdGhpcy5zZXQgPSBoYXJuZXNzID8gaGFybmVzcy5nZXRTZXR0ZXIgOiBfZ2V0U2V0dGVyO1xufTtcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQU5JTUFUSU9OXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmV4cG9ydCB2YXIgQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5pbWF0aW9uKHZhcnMpIHtcbiAgICB0aGlzLnZhcnMgPSB2YXJzO1xuICAgIHRoaXMuX2RlbGF5ID0gK3ZhcnMuZGVsYXkgfHwgMDtcblxuICAgIGlmICh0aGlzLl9yZXBlYXQgPSB2YXJzLnJlcGVhdCA9PT0gSW5maW5pdHkgPyAtMiA6IHZhcnMucmVwZWF0IHx8IDApIHtcbiAgICAgIC8vIFRPRE86IHJlcGVhdDogSW5maW5pdHkgb24gYSB0aW1lbGluZSdzIGNoaWxkcmVuIG11c3QgZmxhZyB0aGF0IHRpbWVsaW5lIGludGVybmFsbHkgYW5kIGFmZmVjdCBpdHMgdG90YWxEdXJhdGlvbiwgb3RoZXJ3aXNlIGl0J2xsIHN0b3AgaW4gdGhlIG5lZ2F0aXZlIGRpcmVjdGlvbiB3aGVuIHJlYWNoaW5nIHRoZSBzdGFydC5cbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhcnMucmVwZWF0RGVsYXkgfHwgMDtcbiAgICAgIHRoaXMuX3lveW8gPSAhIXZhcnMueW95byB8fCAhIXZhcnMueW95b0Vhc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdHMgPSAxO1xuXG4gICAgX3NldER1cmF0aW9uKHRoaXMsICt2YXJzLmR1cmF0aW9uLCAxLCAxKTtcblxuICAgIHRoaXMuZGF0YSA9IHZhcnMuZGF0YTtcbiAgICBfdGlja2VyQWN0aXZlIHx8IF90aWNrZXIud2FrZSgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlbGF5ID0gZnVuY3Rpb24gZGVsYXkodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LnNtb290aENoaWxkVGltaW5nICYmIHRoaXMuc3RhcnRUaW1lKHRoaXMuX3N0YXJ0ICsgdmFsdWUgLSB0aGlzLl9kZWxheSk7XG4gICAgICB0aGlzLl9kZWxheSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xuICB9O1xuXG4gIF9wcm90by5kdXJhdGlvbiA9IGZ1bmN0aW9uIGR1cmF0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsRHVyYXRpb24odGhpcy5fcmVwZWF0ID4gMCA/IHZhbHVlICsgKHZhbHVlICsgdGhpcy5fckRlbGF5KSAqIHRoaXMuX3JlcGVhdCA6IHZhbHVlKSA6IHRoaXMudG90YWxEdXJhdGlvbigpICYmIHRoaXMuX2R1cjtcbiAgfTtcblxuICBfcHJvdG8udG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uIHRvdGFsRHVyYXRpb24odmFsdWUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl90RHVyO1xuICAgIH1cblxuICAgIHRoaXMuX2RpcnR5ID0gMDtcbiAgICByZXR1cm4gX3NldER1cmF0aW9uKHRoaXMsIHRoaXMuX3JlcGVhdCA8IDAgPyB2YWx1ZSA6ICh2YWx1ZSAtIHRoaXMuX3JlcGVhdCAqIHRoaXMuX3JEZWxheSkgLyAodGhpcy5fcmVwZWF0ICsgMSkpO1xuICB9O1xuXG4gIF9wcm90by50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICBfd2FrZSgpO1xuXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IHRoaXMuX2RwO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcgJiYgdGhpcy5fdHMpIHtcbiAgICAgIF9hbGlnblBsYXloZWFkKHRoaXMsIF90b3RhbFRpbWUpO1xuXG4gICAgICAhcGFyZW50Ll9kcCB8fCBwYXJlbnQucGFyZW50IHx8IF9wb3N0QWRkQ2hlY2tzKHBhcmVudCwgdGhpcyk7IC8vIGVkZ2UgY2FzZTogaWYgdGhpcyBpcyBhIGNoaWxkIG9mIGEgdGltZWxpbmUgdGhhdCBhbHJlYWR5IGNvbXBsZXRlZCwgZm9yIGV4YW1wbGUsIHdlIG11c3QgcmUtYWN0aXZhdGUgdGhlIHBhcmVudC5cbiAgICAgIC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydCBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5wYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wYXJlbnQuX3RpbWUgIT09IHBhcmVudC5fc3RhcnQgKyAocGFyZW50Ll90cyA+PSAwID8gcGFyZW50Ll90VGltZSAvIHBhcmVudC5fdHMgOiAocGFyZW50LnRvdGFsRHVyYXRpb24oKSAtIHBhcmVudC5fdFRpbWUpIC8gLXBhcmVudC5fdHMpKSB7XG4gICAgICAgICAgcGFyZW50LnRvdGFsVGltZShwYXJlbnQuX3RUaW1lLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5wYXJlbnQgJiYgdGhpcy5fZHAuYXV0b1JlbW92ZUNoaWxkcmVuICYmICh0aGlzLl90cyA+IDAgJiYgX3RvdGFsVGltZSA8IHRoaXMuX3REdXIgfHwgdGhpcy5fdHMgPCAwICYmIF90b3RhbFRpbWUgPiAwIHx8ICF0aGlzLl90RHVyICYmICFfdG90YWxUaW1lKSkge1xuICAgICAgICAvL2lmIHRoZSBhbmltYXRpb24gZG9lc24ndCBoYXZlIGEgcGFyZW50LCBwdXQgaXQgYmFjayBpbnRvIGl0cyBsYXN0IHBhcmVudCAocmVjb3JkZWQgYXMgX2RwIGZvciBleGFjdGx5IGNhc2VzIGxpa2UgdGhpcykuIExpbWl0IHRvIHBhcmVudHMgd2l0aCBhdXRvUmVtb3ZlQ2hpbGRyZW4gKGxpa2UgZ2xvYmFsVGltZWxpbmUpIHNvIHRoYXQgaWYgdGhlIHVzZXIgbWFudWFsbHkgcmVtb3ZlcyBhbiBhbmltYXRpb24gZnJvbSBhIHRpbWVsaW5lIGFuZCB0aGVuIGFsdGVycyBpdHMgcGxheWhlYWQsIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIGJhY2sgaW4uXG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRoaXMuX2RwLCB0aGlzLCB0aGlzLl9zdGFydCAtIHRoaXMuX2RlbGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdFRpbWUgIT09IF90b3RhbFRpbWUgfHwgIXRoaXMuX2R1ciAmJiAhc3VwcHJlc3NFdmVudHMgfHwgdGhpcy5faW5pdHRlZCAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgPT09IF90aW55TnVtIHx8ICFfdG90YWxUaW1lICYmICF0aGlzLl9pbml0dGVkICYmICh0aGlzLmFkZCB8fCB0aGlzLl9wdExvb2t1cCkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciBfcHRMb29rdXAgb24gYSBUd2VlbiBpbnN0YW5jZSB0byBlbnN1cmUgaXQgaGFzIGFjdHVhbGx5IGZpbmlzaGVkIGJlaW5nIGluc3RhbnRpYXRlZCwgb3RoZXJ3aXNlIGlmIHRoaXMucmV2ZXJzZSgpIGdldHMgY2FsbGVkIGluIHRoZSBBbmltYXRpb24gY29uc3RydWN0b3IsIGl0IGNvdWxkIHRyaWdnZXIgYSByZW5kZXIoKSBoZXJlIGV2ZW4gdGhvdWdoIHRoZSBfdGFyZ2V0cyB3ZXJlbid0IHBvcHVsYXRlZCwgdGh1cyB3aGVuIF9pbml0KCkgaXMgY2FsbGVkIHRoZXJlIHdvbid0IGJlIGFueSBQcm9wVHdlZW5zIChpdCdsbCBhY3QgbGlrZSB0aGUgdHdlZW4gaXMgbm9uLWZ1bmN0aW9uYWwpXG4gICAgICB0aGlzLl90cyB8fCAodGhpcy5fcFRpbWUgPSBfdG90YWxUaW1lKTsgLy8gb3RoZXJ3aXNlLCBpZiBhbiBhbmltYXRpb24gaXMgcGF1c2VkLCB0aGVuIHRoZSBwbGF5aGVhZCBpcyBtb3ZlZCBiYWNrIHRvIHplcm8sIHRoZW4gcmVzdW1lZCwgaXQnZCByZXZlcnQgYmFjayB0byB0aGUgb3JpZ2luYWwgdGltZSBhdCB0aGUgcGF1c2VcbiAgICAgIC8vaWYgKCF0aGlzLl9sb2NrKSB7IC8vIGF2b2lkIGVuZGxlc3MgcmVjdXJzaW9uIChub3Qgc3VyZSB3ZSBuZWVkIHRoaXMgeWV0IG9yIGlmIGl0J3Mgd29ydGggdGhlIHBlcmZvcm1hbmNlIGhpdClcbiAgICAgIC8vICAgdGhpcy5fbG9jayA9IDE7XG5cbiAgICAgIF9sYXp5U2FmZVJlbmRlcih0aGlzLCBfdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cyk7IC8vICAgdGhpcy5fbG9jayA9IDA7XG4gICAgICAvL31cblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50aW1lID0gZnVuY3Rpb24gdGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRoaXMudG90YWxUaW1lKE1hdGgubWluKHRoaXMudG90YWxEdXJhdGlvbigpLCB2YWx1ZSArIF9lbGFwc2VkQ3ljbGVEdXJhdGlvbih0aGlzKSkgJSAodGhpcy5fZHVyICsgdGhpcy5fckRlbGF5KSB8fCAodmFsdWUgPyB0aGlzLl9kdXIgOiAwKSwgc3VwcHJlc3NFdmVudHMpIDogdGhpcy5fdGltZTsgLy8gbm90ZTogaWYgdGhlIG1vZHVsdXMgcmVzdWx0cyBpbiAwLCB0aGUgcGxheWhlYWQgY291bGQgYmUgZXhhY3RseSBhdCB0aGUgZW5kIG9yIHRoZSBiZWdpbm5pbmcsIGFuZCB3ZSBhbHdheXMgZGVmZXIgdG8gdGhlIEVORCB3aXRoIGEgbm9uLXplcm8gdmFsdWUsIG90aGVyd2lzZSBpZiB5b3Ugc2V0IHRoZSB0aW1lKCkgdG8gdGhlIHZlcnkgZW5kIChkdXJhdGlvbigpKSwgaXQgd291bGQgcmVuZGVyIGF0IHRoZSBTVEFSVCFcbiAgfTtcblxuICBfcHJvdG8udG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uIHRvdGFsUHJvZ3Jlc3ModmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLnRvdGFsRHVyYXRpb24oKSAqIHZhbHVlLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLnRvdGFsRHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RUaW1lIC8gdGhpcy5fdER1cikgOiB0aGlzLnJhdGlvO1xuICB9O1xuXG4gIF9wcm90by5wcm9ncmVzcyA9IGZ1bmN0aW9uIHByb2dyZXNzKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy50b3RhbFRpbWUodGhpcy5kdXJhdGlvbigpICogKHRoaXMuX3lveW8gJiYgISh0aGlzLml0ZXJhdGlvbigpICYgMSkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyBfZWxhcHNlZEN5Y2xlRHVyYXRpb24odGhpcyksIHN1cHByZXNzRXZlbnRzKSA6IHRoaXMuZHVyYXRpb24oKSA/IE1hdGgubWluKDEsIHRoaXMuX3RpbWUgLyB0aGlzLl9kdXIpIDogdGhpcy5yYXRpbztcbiAgfTtcblxuICBfcHJvdG8uaXRlcmF0aW9uID0gZnVuY3Rpb24gaXRlcmF0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHZhciBjeWNsZUR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpICsgdGhpcy5fckRlbGF5O1xuXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRvdGFsVGltZSh0aGlzLl90aW1lICsgKHZhbHVlIC0gMSkgKiBjeWNsZUR1cmF0aW9uLCBzdXBwcmVzc0V2ZW50cykgOiB0aGlzLl9yZXBlYXQgPyBfYW5pbWF0aW9uQ3ljbGUodGhpcy5fdFRpbWUsIGN5Y2xlRHVyYXRpb24pICsgMSA6IDE7XG4gIH0gLy8gcG90ZW50aWFsIGZ1dHVyZSBhZGRpdGlvbjpcbiAgLy8gaXNQbGF5aW5nQmFja3dhcmRzKCkge1xuICAvLyBcdGxldCBhbmltYXRpb24gPSB0aGlzLFxuICAvLyBcdFx0b3JpZW50YXRpb24gPSAxOyAvLyAxID0gZm9yd2FyZCwgLTEgPSBiYWNrd2FyZFxuICAvLyBcdHdoaWxlIChhbmltYXRpb24pIHtcbiAgLy8gXHRcdG9yaWVudGF0aW9uICo9IGFuaW1hdGlvbi5yZXZlcnNlZCgpIHx8IChhbmltYXRpb24ucmVwZWF0KCkgJiYgIShhbmltYXRpb24uaXRlcmF0aW9uKCkgJiAxKSkgPyAtMSA6IDE7XG4gIC8vIFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24ucGFyZW50O1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gb3JpZW50YXRpb24gPCAwO1xuICAvLyB9XG4gIDtcblxuICBfcHJvdG8udGltZVNjYWxlID0gZnVuY3Rpb24gdGltZVNjYWxlKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcnRzID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyByZWNvcmRlZCB0aW1lU2NhbGUuIFNwZWNpYWwgY2FzZTogaWYgc29tZW9uZSBjYWxscyByZXZlcnNlKCkgb24gYW4gYW5pbWF0aW9uIHdpdGggdGltZVNjYWxlIG9mIDAsIHdlIGFzc2lnbiBpdCAtX3RpbnlOdW0gdG8gcmVtZW1iZXIgaXQncyByZXZlcnNlZC5cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcnRzID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHRUaW1lID0gdGhpcy5wYXJlbnQgJiYgdGhpcy5fdHMgPyBfcGFyZW50VG9DaGlsZFRvdGFsVGltZSh0aGlzLnBhcmVudC5fdGltZSwgdGhpcykgOiB0aGlzLl90VGltZTsgLy8gbWFrZSBzdXJlIHRvIGRvIHRoZSBwYXJlbnRUb0NoaWxkVG90YWxUaW1lKCkgQkVGT1JFIHNldHRpbmcgdGhlIG5ldyBfdHMgYmVjYXVzZSB0aGUgb2xkIG9uZSBtdXN0IGJlIHVzZWQgaW4gdGhhdCBjYWxjdWxhdGlvbi5cbiAgICAvLyBmdXR1cmUgYWRkaXRpb24/IFVwIHNpZGU6IGZhc3QgYW5kIG1pbmltYWwgZmlsZSBzaXplLiBEb3duIHNpZGU6IG9ubHkgd29ya3Mgb24gdGhpcyBhbmltYXRpb247IGlmIGEgdGltZWxpbmUgaXMgcmV2ZXJzZWQsIGZvciBleGFtcGxlLCBpdHMgY2hpbGRyZW5zJyBvblJldmVyc2Ugd291bGRuJ3QgZ2V0IGNhbGxlZC5cbiAgICAvLygrdmFsdWUgPCAwICYmIHRoaXMuX3J0cyA+PSAwKSAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJldmVyc2VcIiwgdHJ1ZSk7XG4gICAgLy8gcHJpb3JpdGl6ZSByZW5kZXJpbmcgd2hlcmUgdGhlIHBhcmVudCdzIHBsYXloZWFkIGxpbmVzIHVwIGluc3RlYWQgb2YgdGhpcy5fdFRpbWUgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBhIHR3ZWVuIHRoYXQncyBhbmltYXRpbmcgYW5vdGhlciB0d2VlbidzIHRpbWVTY2FsZSBpbiB0aGUgc2FtZSByZW5kZXJpbmcgbG9vcCAoc2FtZSBwYXJlbnQpLCB0aHVzIGlmIHRoZSB0aW1lU2NhbGUgdHdlZW4gcmVuZGVycyBmaXJzdCwgaXQgd291bGQgYWx0ZXIgX3N0YXJ0IEJFRk9SRSBfdFRpbWUgd2FzIHNldCBvbiB0aGF0IHRpY2sgKGluIHRoZSByZW5kZXJpbmcgbG9vcCksIGVmZmVjdGl2ZWx5IGZyZWV6aW5nIGl0IHVudGlsIHRoZSB0aW1lU2NhbGUgdHdlZW4gZmluaXNoZXMuXG5cbiAgICB0aGlzLl9ydHMgPSArdmFsdWUgfHwgMDtcbiAgICB0aGlzLl90cyA9IHRoaXMuX3BzIHx8IHZhbHVlID09PSAtX3RpbnlOdW0gPyAwIDogdGhpcy5fcnRzOyAvLyBfdHMgaXMgdGhlIGZ1bmN0aW9uYWwgdGltZVNjYWxlIHdoaWNoIHdvdWxkIGJlIDAgaWYgdGhlIGFuaW1hdGlvbiBpcyBwYXVzZWQuXG5cbiAgICBfcmVjYWNoZUFuY2VzdG9ycyh0aGlzLnRvdGFsVGltZShfY2xhbXAoLXRoaXMuX2RlbGF5LCB0aGlzLl90RHVyLCB0VGltZSksIHRydWUpKTtcblxuICAgIF9zZXRFbmQodGhpcyk7IC8vIGlmIHBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyB3YXMgZmFsc2UsIHRoZSBlbmQgdGltZSBkaWRuJ3QgZ2V0IHVwZGF0ZWQgaW4gdGhlIF9hbGlnblBsYXloZWFkKCkgbWV0aG9kLCBzbyBkbyBpdCBoZXJlLlxuXG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8ucGF1c2VkID0gZnVuY3Rpb24gcGF1c2VkKHZhbHVlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3BzICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fcHMgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BUaW1lID0gdGhpcy5fdFRpbWUgfHwgTWF0aC5tYXgoLXRoaXMuX2RlbGF5LCB0aGlzLnJhd1RpbWUoKSk7IC8vIGlmIHRoZSBwYXVzZSBvY2N1cnMgZHVyaW5nIHRoZSBkZWxheSBwaGFzZSwgbWFrZSBzdXJlIHRoYXQncyBmYWN0b3JlZCBpbiB3aGVuIHJlc3VtaW5nLlxuXG4gICAgICAgIHRoaXMuX3RzID0gdGhpcy5fYWN0ID0gMDsgLy8gX3RzIGlzIHRoZSBmdW5jdGlvbmFsIHRpbWVTY2FsZSwgc28gYSBwYXVzZWQgdHdlZW4gd291bGQgZWZmZWN0aXZlbHkgaGF2ZSBhIHRpbWVTY2FsZSBvZiAwLiBXZSByZWNvcmQgdGhlIFwicmVhbFwiIHRpbWVTY2FsZSBhcyBfcnRzIChyZWNvcmRlZCB0aW1lIHNjYWxlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3dha2UoKTtcblxuICAgICAgICB0aGlzLl90cyA9IHRoaXMuX3J0czsgLy9vbmx5IGRlZmVyIHRvIF9wVGltZSAocGF1c2VUaW1lKSBpZiB0VGltZSBpcyB6ZXJvLiBSZW1lbWJlciwgc29tZW9uZSBjb3VsZCBwYXVzZSgpIGFuIGFuaW1hdGlvbiwgdGhlbiBzY3J1YiB0aGUgcGxheWhlYWQgYW5kIHJlc3VtZSgpLiBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBzbW9vdGhDaGlsZFRpbWluZywgd2UgcmVuZGVyIGF0IHRoZSByYXdUaW1lKCkgYmVjYXVzZSB0aGUgc3RhcnRUaW1lIHdvbid0IGdldCB1cGRhdGVkLlxuXG4gICAgICAgIHRoaXMudG90YWxUaW1lKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5zbW9vdGhDaGlsZFRpbWluZyA/IHRoaXMucmF3VGltZSgpIDogdGhpcy5fdFRpbWUgfHwgdGhpcy5fcFRpbWUsIHRoaXMucHJvZ3Jlc3MoKSA9PT0gMSAmJiBNYXRoLmFicyh0aGlzLl96VGltZSkgIT09IF90aW55TnVtICYmICh0aGlzLl90VGltZSAtPSBfdGlueU51bSkpOyAvLyBlZGdlIGNhc2U6IGFuaW1hdGlvbi5wcm9ncmVzcygxKS5wYXVzZSgpLnBsYXkoKSB3b3VsZG4ndCByZW5kZXIgYWdhaW4gYmVjYXVzZSB0aGUgcGxheWhlYWQgaXMgYWxyZWFkeSBhdCB0aGUgZW5kLCBidXQgdGhlIGNhbGwgdG8gdG90YWxUaW1lKCkgYmVsb3cgd2lsbCBhZGQgaXQgYmFjayB0byBpdHMgcGFyZW50Li4uYW5kIG5vdCByZW1vdmUgaXQgYWdhaW4gKHNpbmNlIHJlbW92aW5nIG9ubHkgaGFwcGVucyB1cG9uIHJlbmRlcmluZyBhdCBhIG5ldyB0aW1lKS4gT2Zmc2V0dGluZyB0aGUgX3RUaW1lIHNsaWdodGx5IGlzIGRvbmUgc2ltcGx5IHRvIGNhdXNlIHRoZSBmaW5hbCByZW5kZXIgaW4gdG90YWxUaW1lKCkgdGhhdCdsbCBwb3AgaXQgb2ZmIGl0cyB0aW1lbGluZSAoaWYgYXV0b1JlbW92ZUNoaWxkcmVuIGlzIHRydWUsIG9mIGNvdXJzZSkuIENoZWNrIHRvIG1ha2Ugc3VyZSBfelRpbWUgaXNuJ3QgLV90aW55TnVtIHRvIGF2b2lkIGFuIGVkZ2UgY2FzZSB3aGVyZSB0aGUgcGxheWhlYWQgaXMgcHVzaGVkIHRvIHRoZSBlbmQgYnV0IElOU0lERSBhIHR3ZWVuL2NhbGxiYWNrLCB0aGUgdGltZWxpbmUgaXRzZWxmIGlzIHBhdXNlZCB0aHVzIGhhbHRpbmcgcmVuZGVyaW5nIGFuZCBsZWF2aW5nIGEgZmV3IHVucmVuZGVyZWQuIFdoZW4gcmVzdW1pbmcsIGl0IHdvdWxkbid0IHJlbmRlciB0aG9zZSBvdGhlcndpc2UuXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0VGltZSA9IGZ1bmN0aW9uIHN0YXJ0VGltZSh2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zdGFydCA9IHZhbHVlO1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwO1xuICAgICAgcGFyZW50ICYmIChwYXJlbnQuX3NvcnQgfHwgIXRoaXMucGFyZW50KSAmJiBfYWRkVG9UaW1lbGluZShwYXJlbnQsIHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0O1xuICB9O1xuXG4gIF9wcm90by5lbmRUaW1lID0gZnVuY3Rpb24gZW5kVGltZShpbmNsdWRlUmVwZWF0cykge1xuICAgIHJldHVybiB0aGlzLl9zdGFydCArIChfaXNOb3RGYWxzZShpbmNsdWRlUmVwZWF0cykgPyB0aGlzLnRvdGFsRHVyYXRpb24oKSA6IHRoaXMuZHVyYXRpb24oKSkgLyBNYXRoLmFicyh0aGlzLl90cyB8fCAxKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VGltZSA9IGZ1bmN0aW9uIHJhd1RpbWUod3JhcFJlcGVhdHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQgfHwgdGhpcy5fZHA7IC8vIF9kcCA9IGRldGFjaGVkIHBhcmVudFxuXG4gICAgcmV0dXJuICFwYXJlbnQgPyB0aGlzLl90VGltZSA6IHdyYXBSZXBlYXRzICYmICghdGhpcy5fdHMgfHwgdGhpcy5fcmVwZWF0ICYmIHRoaXMuX3RpbWUgJiYgdGhpcy50b3RhbFByb2dyZXNzKCkgPCAxKSA/IHRoaXMuX3RUaW1lICUgKHRoaXMuX2R1ciArIHRoaXMuX3JEZWxheSkgOiAhdGhpcy5fdHMgPyB0aGlzLl90VGltZSA6IF9wYXJlbnRUb0NoaWxkVG90YWxUaW1lKHBhcmVudC5yYXdUaW1lKHdyYXBSZXBlYXRzKSwgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmdsb2JhbFRpbWUgPSBmdW5jdGlvbiBnbG9iYWxUaW1lKHJhd1RpbWUpIHtcbiAgICB2YXIgYW5pbWF0aW9uID0gdGhpcyxcbiAgICAgICAgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPyByYXdUaW1lIDogYW5pbWF0aW9uLnJhd1RpbWUoKTtcblxuICAgIHdoaWxlIChhbmltYXRpb24pIHtcbiAgICAgIHRpbWUgPSBhbmltYXRpb24uX3N0YXJ0ICsgdGltZSAvIChhbmltYXRpb24uX3RzIHx8IDEpO1xuICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uLl9kcDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGltZTtcbiAgfTtcblxuICBfcHJvdG8ucmVwZWF0ID0gZnVuY3Rpb24gcmVwZWF0KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3JlcGVhdCA9IHZhbHVlID09PSBJbmZpbml0eSA/IC0yIDogdmFsdWU7XG4gICAgICByZXR1cm4gX29uVXBkYXRlVG90YWxEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0ID09PSAtMiA/IEluZmluaXR5IDogdGhpcy5fcmVwZWF0O1xuICB9O1xuXG4gIF9wcm90by5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIHJlcGVhdERlbGF5KHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcbiAgICAgIHRoaXMuX3JEZWxheSA9IHZhbHVlO1xuXG4gICAgICBfb25VcGRhdGVUb3RhbER1cmF0aW9uKHRoaXMpO1xuXG4gICAgICByZXR1cm4gdGltZSA/IHRoaXMudGltZSh0aW1lKSA6IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JEZWxheTtcbiAgfTtcblxuICBfcHJvdG8ueW95byA9IGZ1bmN0aW9uIHlveW8odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5feW95byA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3lveW87XG4gIH07XG5cbiAgX3Byb3RvLnNlZWsgPSBmdW5jdGlvbiBzZWVrKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3RhcnQgPSBmdW5jdGlvbiByZXN0YXJ0KGluY2x1ZGVEZWxheSwgc3VwcHJlc3NFdmVudHMpIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5KCkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIF9pc05vdEZhbHNlKHN1cHByZXNzRXZlbnRzKSk7XG4gIH07XG5cbiAgX3Byb3RvLnBsYXkgPSBmdW5jdGlvbiBwbGF5KGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgZnJvbSAhPSBudWxsICYmIHRoaXMuc2Vlayhmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpLCBzdXBwcmVzc0V2ZW50cyk7XG4gICAgcmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgYXRUaW1lICE9IG51bGwgJiYgdGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuICAgIHJldHVybiB0aGlzLnBhdXNlZCh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgIHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJldmVyc2VkID0gZnVuY3Rpb24gcmV2ZXJzZWQodmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgISF2YWx1ZSAhPT0gdGhpcy5yZXZlcnNlZCgpICYmIHRoaXMudGltZVNjYWxlKC10aGlzLl9ydHMgfHwgKHZhbHVlID8gLV90aW55TnVtIDogMCkpOyAvLyBpbiBjYXNlIHRpbWVTY2FsZSBpcyB6ZXJvLCByZXZlcnNpbmcgd291bGQgaGF2ZSBubyBlZmZlY3Qgc28gd2UgdXNlIF90aW55TnVtLlxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcnRzIDwgMDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5faW5pdHRlZCA9IHRoaXMuX2FjdCA9IDA7XG4gICAgdGhpcy5felRpbWUgPSAtX3RpbnlOdW07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50IHx8IHRoaXMuX2RwLFxuICAgICAgICBzdGFydCA9IHRoaXMuX3N0YXJ0LFxuICAgICAgICByYXdUaW1lO1xuICAgIHJldHVybiAhISghcGFyZW50IHx8IHRoaXMuX3RzICYmIHRoaXMuX2luaXR0ZWQgJiYgcGFyZW50LmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSBwYXJlbnQucmF3VGltZSh0cnVlKSkgPj0gc3RhcnQgJiYgcmF3VGltZSA8IHRoaXMuZW5kVGltZSh0cnVlKSAtIF90aW55TnVtKTtcbiAgfTtcblxuICBfcHJvdG8uZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIGV2ZW50Q2FsbGJhY2sodHlwZSwgY2FsbGJhY2ssIHBhcmFtcykge1xuICAgIHZhciB2YXJzID0gdGhpcy52YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIGRlbGV0ZSB2YXJzW3R5cGVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyc1t0eXBlXSA9IGNhbGxiYWNrO1xuICAgICAgICBwYXJhbXMgJiYgKHZhcnNbdHlwZSArIFwiUGFyYW1zXCJdID0gcGFyYW1zKTtcbiAgICAgICAgdHlwZSA9PT0gXCJvblVwZGF0ZVwiICYmICh0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhcnNbdHlwZV07XG4gIH07XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgdmFyIGYgPSBfaXNGdW5jdGlvbihvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IF9wYXNzVGhyb3VnaCxcbiAgICAgICAgICBfcmVzb2x2ZSA9IGZ1bmN0aW9uIF9yZXNvbHZlKCkge1xuICAgICAgICB2YXIgX3RoZW4gPSBzZWxmLnRoZW47XG4gICAgICAgIHNlbGYudGhlbiA9IG51bGw7IC8vIHRlbXBvcmFyaWx5IG51bGwgdGhlIHRoZW4oKSBtZXRob2QgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzIyKVxuXG4gICAgICAgIF9pc0Z1bmN0aW9uKGYpICYmIChmID0gZihzZWxmKSkgJiYgKGYudGhlbiB8fCBmID09PSBzZWxmKSAmJiAoc2VsZi50aGVuID0gX3RoZW4pO1xuICAgICAgICByZXNvbHZlKGYpO1xuICAgICAgICBzZWxmLnRoZW4gPSBfdGhlbjtcbiAgICAgIH07XG5cbiAgICAgIGlmIChzZWxmLl9pbml0dGVkICYmIHNlbGYudG90YWxQcm9ncmVzcygpID09PSAxICYmIHNlbGYuX3RzID49IDAgfHwgIXNlbGYuX3RUaW1lICYmIHNlbGYuX3RzIDwgMCkge1xuICAgICAgICBfcmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5fcHJvbSA9IF9yZXNvbHZlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5raWxsID0gZnVuY3Rpb24ga2lsbCgpIHtcbiAgICBfaW50ZXJydXB0KHRoaXMpO1xuICB9O1xuXG4gIHJldHVybiBBbmltYXRpb247XG59KCk7XG5cbl9zZXREZWZhdWx0cyhBbmltYXRpb24ucHJvdG90eXBlLCB7XG4gIF90aW1lOiAwLFxuICBfc3RhcnQ6IDAsXG4gIF9lbmQ6IDAsXG4gIF90VGltZTogMCxcbiAgX3REdXI6IDAsXG4gIF9kaXJ0eTogMCxcbiAgX3JlcGVhdDogMCxcbiAgX3lveW86IGZhbHNlLFxuICBwYXJlbnQ6IG51bGwsXG4gIF9pbml0dGVkOiBmYWxzZSxcbiAgX3JEZWxheTogMCxcbiAgX3RzOiAxLFxuICBfZHA6IDAsXG4gIHJhdGlvOiAwLFxuICBfelRpbWU6IC1fdGlueU51bSxcbiAgX3Byb206IDAsXG4gIF9wczogZmFsc2UsXG4gIF9ydHM6IDFcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRJTUVMSU5FXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5leHBvcnQgdmFyIFRpbWVsaW5lID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5pbWF0aW9uKSB7XG4gIF9pbmhlcml0c0xvb3NlKFRpbWVsaW5lLCBfQW5pbWF0aW9uKTtcblxuICBmdW5jdGlvbiBUaW1lbGluZSh2YXJzLCBwb3NpdGlvbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSB7fTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9BbmltYXRpb24uY2FsbCh0aGlzLCB2YXJzKSB8fCB0aGlzO1xuICAgIF90aGlzLmxhYmVscyA9IHt9O1xuICAgIF90aGlzLnNtb290aENoaWxkVGltaW5nID0gISF2YXJzLnNtb290aENoaWxkVGltaW5nO1xuICAgIF90aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9ICEhdmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW47XG4gICAgX3RoaXMuX3NvcnQgPSBfaXNOb3RGYWxzZSh2YXJzLnNvcnRDaGlsZHJlbik7XG4gICAgX2dsb2JhbFRpbWVsaW5lICYmIF9hZGRUb1RpbWVsaW5lKHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHBvc2l0aW9uKTtcbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzLnJldmVyc2UoKTtcbiAgICB2YXJzLnBhdXNlZCAmJiBfdGhpcy5wYXVzZWQodHJ1ZSk7XG4gICAgdmFycy5zY3JvbGxUcmlnZ2VyICYmIF9zY3JvbGxUcmlnZ2VyKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB2YXJzLnNjcm9sbFRyaWdnZXIpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVGltZWxpbmUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMCwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuZnJvbSA9IGZ1bmN0aW9uIGZyb20odGFyZ2V0cywgdmFycywgcG9zaXRpb24pIHtcbiAgICBfY3JlYXRlVHdlZW5UeXBlKDEsIGFyZ3VtZW50cywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmZyb21UbyA9IGZ1bmN0aW9uIGZyb21Ubyh0YXJnZXRzLCBmcm9tVmFycywgdG9WYXJzLCBwb3NpdGlvbikge1xuICAgIF9jcmVhdGVUd2VlblR5cGUoMiwgYXJndW1lbnRzLCB0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldHMsIHZhcnMsIHBvc2l0aW9uKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModmFycykucmVwZWF0RGVsYXkgfHwgKHZhcnMucmVwZWF0ID0gMCk7XG4gICAgdmFycy5pbW1lZGlhdGVSZW5kZXIgPSAhIXZhcnMuaW1tZWRpYXRlUmVuZGVyO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbiksIDEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuY2FsbCA9IGZ1bmN0aW9uIGNhbGwoY2FsbGJhY2ssIHBhcmFtcywgcG9zaXRpb24pIHtcbiAgICByZXR1cm4gX2FkZFRvVGltZWxpbmUodGhpcywgVHdlZW4uZGVsYXllZENhbGwoMCwgY2FsbGJhY2ssIHBhcmFtcyksIHBvc2l0aW9uKTtcbiAgfSAvL09OTFkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkhIE1heWJlIGRlbGV0ZT9cbiAgO1xuXG4gIF9wcm90bzIuc3RhZ2dlclRvID0gZnVuY3Rpb24gc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcykge1xuICAgIHZhcnMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB2YXJzLnN0YWdnZXIgPSB2YXJzLnN0YWdnZXIgfHwgc3RhZ2dlcjtcbiAgICB2YXJzLm9uQ29tcGxldGUgPSBvbkNvbXBsZXRlQWxsO1xuICAgIHZhcnMub25Db21wbGV0ZVBhcmFtcyA9IG9uQ29tcGxldGVBbGxQYXJhbXM7XG4gICAgdmFycy5wYXJlbnQgPSB0aGlzO1xuICAgIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuc3RhZ2dlckZyb20gPSBmdW5jdGlvbiBzdGFnZ2VyRnJvbSh0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB2YXJzLnJ1bkJhY2t3YXJkcyA9IDE7XG4gICAgX2luaGVyaXREZWZhdWx0cyh2YXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh2YXJzLmltbWVkaWF0ZVJlbmRlcik7XG4gICAgcmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24gc3RhZ2dlckZyb21Ubyh0YXJnZXRzLCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpIHtcbiAgICB0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuICAgIF9pbmhlcml0RGVmYXVsdHModG9WYXJzKS5pbW1lZGlhdGVSZW5kZXIgPSBfaXNOb3RGYWxzZSh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyKTtcbiAgICByZXR1cm4gdGhpcy5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHRvVmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMpO1xuICB9O1xuXG4gIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG4gICAgdmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcbiAgICAgICAgdER1ciA9IHRoaXMuX2RpcnR5ID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLl90RHVyLFxuICAgICAgICBkdXIgPSB0aGlzLl9kdXIsXG4gICAgICAgIHRUaW1lID0gdG90YWxUaW1lIDw9IDAgPyAwIDogX3JvdW5kUHJlY2lzZSh0b3RhbFRpbWUpLFxuICAgICAgICAvLyBpZiBhIHBhdXNlZCB0aW1lbGluZSBpcyByZXN1bWVkIChvciBpdHMgX3N0YXJ0IGlzIHVwZGF0ZWQgZm9yIGFub3RoZXIgcmVhc29uLi4ud2hpY2ggcm91bmRzIGl0KSwgdGhhdCBjb3VsZCByZXN1bHQgaW4gdGhlIHBsYXloZWFkIHNoaWZ0aW5nIGEgKip0aW55KiogYW1vdW50IGFuZCBhIHplcm8tZHVyYXRpb24gY2hpbGQgYXQgdGhhdCBzcG90IG1heSBnZXQgcmVuZGVyZWQgYXQgYSBkaWZmZXJlbnQgcmF0aW8sIGxpa2UgaXRzIHRvdGFsVGltZSBpbiByZW5kZXIoKSBtYXkgYmUgMWUtMTcgaW5zdGVhZCBvZiAwLCBmb3IgZXhhbXBsZS5cbiAgICBjcm9zc2luZ1N0YXJ0ID0gdGhpcy5felRpbWUgPCAwICE9PSB0b3RhbFRpbWUgPCAwICYmICh0aGlzLl9pbml0dGVkIHx8ICFkdXIpLFxuICAgICAgICB0aW1lLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgaXRlcmF0aW9uLFxuICAgICAgICBjeWNsZUR1cmF0aW9uLFxuICAgICAgICBwcmV2UGF1c2VkLFxuICAgICAgICBwYXVzZVR3ZWVuLFxuICAgICAgICB0aW1lU2NhbGUsXG4gICAgICAgIHByZXZTdGFydCxcbiAgICAgICAgcHJldkl0ZXJhdGlvbixcbiAgICAgICAgeW95byxcbiAgICAgICAgaXNZb3lvO1xuICAgIHRoaXMgIT09IF9nbG9iYWxUaW1lbGluZSAmJiB0VGltZSA+IHREdXIgJiYgdG90YWxUaW1lID49IDAgJiYgKHRUaW1lID0gdER1cik7XG5cbiAgICBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8IGZvcmNlIHx8IGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgIGlmIChwcmV2VGltZSAhPT0gdGhpcy5fdGltZSAmJiBkdXIpIHtcbiAgICAgICAgLy9pZiB0b3RhbER1cmF0aW9uKCkgZmluZHMgYSBjaGlsZCB3aXRoIGEgbmVnYXRpdmUgc3RhcnRUaW1lIGFuZCBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCB0aGluZ3MgZ2V0IHNoaWZ0ZWQgYXJvdW5kIGludGVybmFsbHkgc28gd2UgbmVlZCB0byBhZGp1c3QgdGhlIHRpbWUgYWNjb3JkaW5nbHkuIEZvciBleGFtcGxlLCBpZiBhIHR3ZWVuIHN0YXJ0cyBhdCAtMzAgd2UgbXVzdCBzaGlmdCBFVkVSWVRISU5HIGZvcndhcmQgMzAgc2Vjb25kcyBhbmQgbW92ZSB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lIGJhY2t3YXJkIGJ5IDMwIHNlY29uZHMgc28gdGhhdCB0aGluZ3MgYWxpZ24gd2l0aCB0aGUgcGxheWhlYWQgKG5vIGp1bXApLlxuICAgICAgICB0VGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICAgIHRvdGFsVGltZSArPSB0aGlzLl90aW1lIC0gcHJldlRpbWU7XG4gICAgICB9XG5cbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0O1xuICAgICAgdGltZVNjYWxlID0gdGhpcy5fdHM7XG4gICAgICBwcmV2UGF1c2VkID0gIXRpbWVTY2FsZTtcblxuICAgICAgaWYgKGNyb3NzaW5nU3RhcnQpIHtcbiAgICAgICAgZHVyIHx8IChwcmV2VGltZSA9IHRoaXMuX3pUaW1lKTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC5cblxuICAgICAgICAodG90YWxUaW1lIHx8ICFzdXBwcmVzc0V2ZW50cykgJiYgKHRoaXMuX3pUaW1lID0gdG90YWxUaW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgeW95byA9IHRoaXMuX3lveW87XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBkdXIgKyB0aGlzLl9yRGVsYXk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlcGVhdCA8IC0xICYmIHRvdGFsVGltZSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy50b3RhbFRpbWUoY3ljbGVEdXJhdGlvbiAqIDEwMCArIHRvdGFsVGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSBfcm91bmRQcmVjaXNlKHRUaW1lICUgY3ljbGVEdXJhdGlvbik7IC8vcm91bmQgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgZXJyb3JzLiAoNCAlIDAuOCBzaG91bGQgYmUgMCBidXQgc29tZSBicm93c2VycyByZXBvcnQgaXQgYXMgMC43OTk5OTk5OSEpXG5cbiAgICAgICAgaWYgKHRUaW1lID09PSB0RHVyKSB7XG4gICAgICAgICAgLy8gdGhlIHREdXIgPT09IHRUaW1lIGlzIGZvciBlZGdlIGNhc2VzIHdoZXJlIHRoZXJlJ3MgYSBsZW5ndGh5IGRlY2ltYWwgb24gdGhlIGR1cmF0aW9uIGFuZCBpdCBtYXkgcmVhY2ggdGhlIHZlcnkgZW5kIGJ1dCB0aGUgdGltZSBpcyByZW5kZXJlZCBhcyBub3QtcXVpdGUtdGhlcmUgKHJlbWVtYmVyLCB0RHVyIGlzIHJvdW5kZWQgdG8gNCBkZWNpbWFscyB3aGVyZWFzIGR1ciBpc24ndClcbiAgICAgICAgICBpdGVyYXRpb24gPSB0aGlzLl9yZXBlYXQ7XG4gICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVyYXRpb24gPSB+fih0VGltZSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbiAmJiBpdGVyYXRpb24gPT09IHRUaW1lIC8gY3ljbGVEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZSA9IGR1cjtcbiAgICAgICAgICAgIGl0ZXJhdGlvbi0tO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRpbWUgPiBkdXIgJiYgKHRpbWUgPSBkdXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldkl0ZXJhdGlvbiA9IF9hbmltYXRpb25DeWNsZSh0aGlzLl90VGltZSwgY3ljbGVEdXJhdGlvbik7XG4gICAgICAgICFwcmV2VGltZSAmJiB0aGlzLl90VGltZSAmJiBwcmV2SXRlcmF0aW9uICE9PSBpdGVyYXRpb24gJiYgKHByZXZJdGVyYXRpb24gPSBpdGVyYXRpb24pOyAvLyBlZGdlIGNhc2UgLSBpZiBzb21lb25lIGRvZXMgYWRkUGF1c2UoKSBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgb2YgYSByZXBlYXRpbmcgdGltZWxpbmUsIHRoYXQgcGF1c2UgaXMgdGVjaG5pY2FsbHkgYXQgdGhlIHNhbWUgc3BvdCBhcyB0aGUgZW5kIHdoaWNoIGNhdXNlcyB0aGlzLl90aW1lIHRvIGdldCBzZXQgdG8gMCB3aGVuIHRoZSB0b3RhbFRpbWUgd291bGQgbm9ybWFsbHkgcGxhY2UgdGhlIHBsYXloZWFkIGF0IHRoZSBlbmQuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIzODIzLWNsb3NpbmctbmF2LWFuaW1hdGlvbi1ub3Qtd29ya2luZy1vbi1pZS1hbmQtaXBob25lLTYtbWF5YmUtb3RoZXItb2xkZXItYnJvd3Nlci8/dGFiPWNvbW1lbnRzI2NvbW1lbnQtMTEzMDA1XG5cbiAgICAgICAgaWYgKHlveW8gJiYgaXRlcmF0aW9uICYgMSkge1xuICAgICAgICAgIHRpbWUgPSBkdXIgLSB0aW1lO1xuICAgICAgICAgIGlzWW95byA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLypcbiAgICAgICAgbWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcbiAgICAgICAgYSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcbiAgICAgICAgd291bGQgZ2V0IHRyYW5zbGF0ZWQgdG8gMi44IHNlY29uZHMgaWYgdGhlIHRpbWVsaW5lIHlveW9zIG9yIDAuMiBzZWNvbmRzIGlmIGl0IGp1c3QgcmVwZWF0cyksIHRoZXJlXG4gICAgICAgIGNvdWxkIGJlIGEgY2FsbGJhY2sgb3IgYSBzaG9ydCB0d2VlbiB0aGF0J3MgYXQgMi45NSBvciAzIHNlY29uZHMgaW4gd2hpY2ggd291bGRuJ3QgcmVuZGVyLiBTb1xuICAgICAgICB3ZSBuZWVkIHRvIHB1c2ggdGhlIHRpbWVsaW5lIHRvIHRoZSBlbmQgKGFuZC9vciBiZWdpbm5pbmcgZGVwZW5kaW5nIG9uIGl0cyB5b3lvIHZhbHVlKS4gQWxzbyB3ZSBtdXN0XG4gICAgICAgIGVuc3VyZSB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZyBvciBlbmQgb2YgdGhlIFRpbWVsaW5lIHdvcmsuXG4gICAgICAgICovXG5cblxuICAgICAgICBpZiAoaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgdmFyIHJld2luZGluZyA9IHlveW8gJiYgcHJldkl0ZXJhdGlvbiAmIDEsXG4gICAgICAgICAgICAgIGRvZXNXcmFwID0gcmV3aW5kaW5nID09PSAoeW95byAmJiBpdGVyYXRpb24gJiAxKTtcbiAgICAgICAgICBpdGVyYXRpb24gPCBwcmV2SXRlcmF0aW9uICYmIChyZXdpbmRpbmcgPSAhcmV3aW5kaW5nKTtcbiAgICAgICAgICBwcmV2VGltZSA9IHJld2luZGluZyA/IDAgOiBkdXI7XG4gICAgICAgICAgdGhpcy5fbG9jayA9IDE7XG4gICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUgfHwgKGlzWW95byA/IDAgOiBfcm91bmRQcmVjaXNlKGl0ZXJhdGlvbiAqIGN5Y2xlRHVyYXRpb24pKSwgc3VwcHJlc3NFdmVudHMsICFkdXIpLl9sb2NrID0gMDtcbiAgICAgICAgICB0aGlzLl90VGltZSA9IHRUaW1lOyAvLyBpZiBhIHVzZXIgZ2V0cyB0aGUgaXRlcmF0aW9uKCkgaW5zaWRlIHRoZSBvblJlcGVhdCwgZm9yIGV4YW1wbGUsIGl0IHNob3VsZCBiZSBhY2N1cmF0ZS5cblxuICAgICAgICAgICFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnBhcmVudCAmJiBfY2FsbGJhY2sodGhpcywgXCJvblJlcGVhdFwiKTtcbiAgICAgICAgICB0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICh0aGlzLmludmFsaWRhdGUoKS5fbG9jayA9IDEpO1xuXG4gICAgICAgICAgaWYgKHByZXZUaW1lICYmIHByZXZUaW1lICE9PSB0aGlzLl90aW1lIHx8IHByZXZQYXVzZWQgIT09ICF0aGlzLl90cyB8fCB0aGlzLnZhcnMub25SZXBlYXQgJiYgIXRoaXMucGFyZW50ICYmICF0aGlzLl9hY3QpIHtcbiAgICAgICAgICAgIC8vIGlmIHByZXZUaW1lIGlzIDAgYW5kIHdlIHJlbmRlciBhdCB0aGUgdmVyeSBlbmQsIF90aW1lIHdpbGwgYmUgdGhlIGVuZCwgdGh1cyB3b24ndCBtYXRjaC4gU28gaW4gdGhpcyBlZGdlIGNhc2UsIHByZXZUaW1lIHdvbid0IG1hdGNoIF90aW1lIGJ1dCB0aGF0J3Mgb2theS4gSWYgaXQgZ2V0cyBraWxsZWQgaW4gdGhlIG9uUmVwZWF0LCBlamVjdCBhcyB3ZWxsLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZHVyID0gdGhpcy5fZHVyOyAvLyBpbiBjYXNlIHRoZSBkdXJhdGlvbiBjaGFuZ2VkIGluIHRoZSBvblJlcGVhdFxuXG4gICAgICAgICAgdER1ciA9IHRoaXMuX3REdXI7XG5cbiAgICAgICAgICBpZiAoZG9lc1dyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2sgPSAyO1xuICAgICAgICAgICAgcHJldlRpbWUgPSByZXdpbmRpbmcgPyBkdXIgOiAtMC4wMDAxO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIocHJldlRpbWUsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52YXJzLnJlcGVhdFJlZnJlc2ggJiYgIWlzWW95byAmJiB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgICAgICAgIGlmICghdGhpcy5fdHMgJiYgIXByZXZQYXVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gLy9pbiBvcmRlciBmb3IgeW95b0Vhc2UgdG8gd29yayBwcm9wZXJseSB3aGVuIHRoZXJlJ3MgYSBzdGFnZ2VyLCB3ZSBtdXN0IHN3YXAgb3V0IHRoZSBlYXNlIGluIGVhY2ggc3ViLXR3ZWVuLlxuXG5cbiAgICAgICAgICBfcHJvcGFnYXRlWW95b0Vhc2UodGhpcywgaXNZb3lvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faGFzUGF1c2UgJiYgIXRoaXMuX2ZvcmNpbmcgJiYgdGhpcy5fbG9jayA8IDIpIHtcbiAgICAgICAgcGF1c2VUd2VlbiA9IF9maW5kTmV4dFBhdXNlVHdlZW4odGhpcywgX3JvdW5kUHJlY2lzZShwcmV2VGltZSksIF9yb3VuZFByZWNpc2UodGltZSkpO1xuXG4gICAgICAgIGlmIChwYXVzZVR3ZWVuKSB7XG4gICAgICAgICAgdFRpbWUgLT0gdGltZSAtICh0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICAgIHRoaXMuX2FjdCA9ICF0aW1lU2NhbGU7IC8vYXMgbG9uZyBhcyBpdCdzIG5vdCBwYXVzZWQsIGZvcmNlIGl0IHRvIGJlIGFjdGl2ZSBzbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgaW5kZXBlbmRlbnQgb2YgdGhlIHBhcmVudCB0aW1lbGluZSwgaXQnbGwgYmUgZm9yY2VkIHRvIHJlLXJlbmRlciBvbiB0aGUgbmV4dCB0aWNrLlxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgdGhpcy5fb25VcGRhdGUgPSB0aGlzLnZhcnMub25VcGRhdGU7XG4gICAgICAgIHRoaXMuX2luaXR0ZWQgPSAxO1xuICAgICAgICB0aGlzLl96VGltZSA9IHRvdGFsVGltZTtcbiAgICAgICAgcHJldlRpbWUgPSAwOyAvLyB1cG9uIGluaXQsIHRoZSBwbGF5aGVhZCBzaG91bGQgYWx3YXlzIGdvIGZvcndhcmQ7IHNvbWVvbmUgY291bGQgaW52YWxpZGF0ZSgpIGEgY29tcGxldGVkIHRpbWVsaW5lIGFuZCB0aGVuIGlmIHRoZXkgcmVzdGFydCgpLCB0aGF0IHdvdWxkIG1ha2UgY2hpbGQgdHdlZW5zIHJlbmRlciBpbiByZXZlcnNlIG9yZGVyIHdoaWNoIGNvdWxkIGxvY2sgaW4gdGhlIHdyb25nIHN0YXJ0aW5nIHZhbHVlcyBpZiB0aGV5IGJ1aWxkIG9uIGVhY2ggb3RoZXIsIGxpa2UgdGwudG8ob2JqLCB7eDogMTAwfSkudG8ob2JqLCB7eDogMH0pLlxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZUaW1lICYmIHRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWUgPj0gcHJldlRpbWUgJiYgdG90YWxUaW1lID49IDApIHtcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX25leHQ7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgdGltZSA+PSBjaGlsZC5fc3RhcnQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKHRpbWUgLSBjaGlsZC5fc3RhcnQpICogY2hpbGQuX3RzIDogKGNoaWxkLl9kaXJ0eSA/IGNoaWxkLnRvdGFsRHVyYXRpb24oKSA6IGNoaWxkLl90RHVyKSArICh0aW1lIC0gY2hpbGQuX3N0YXJ0KSAqIGNoaWxkLl90cywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgIT09IHRoaXMuX3RpbWUgfHwgIXRoaXMuX3RzICYmICFwcmV2UGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcbiAgICAgICAgICAgICAgcGF1c2VUd2VlbiA9IDA7XG4gICAgICAgICAgICAgIG5leHQgJiYgKHRUaW1lICs9IHRoaXMuX3pUaW1lID0gLV90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGZsYWcgelRpbWUgYXMgbmVnYXRpdmUgc28gdGhhdCBzbyB0aGF0IHRoZSBuZXh0IHRpbWUgcmVuZGVyKCkgaXMgY2FsbGVkIGl0J2xsIGJlIGZvcmNlZCAodG8gcmVuZGVyIGFueSByZW1haW5pbmcgY2hpbGRyZW4pXG5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2xhc3Q7XG4gICAgICAgIHZhciBhZGp1c3RlZFRpbWUgPSB0b3RhbFRpbWUgPCAwID8gdG90YWxUaW1lIDogdGltZTsgLy93aGVuIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIGJleW9uZCB0aGUgc3RhcnQgb2YgdGhpcyB0aW1lbGluZSwgd2UgbXVzdCBwYXNzIHRoYXQgaW5mb3JtYXRpb24gZG93biB0byB0aGUgY2hpbGQgYW5pbWF0aW9ucyBzbyB0aGF0IHplcm8tZHVyYXRpb24gdHdlZW5zIGtub3cgd2hldGhlciB0byByZW5kZXIgdGhlaXIgc3RhcnRpbmcgb3IgZW5kaW5nIHZhbHVlcy5cblxuICAgICAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgICAgICBuZXh0ID0gY2hpbGQuX3ByZXY7XG5cbiAgICAgICAgICBpZiAoKGNoaWxkLl9hY3QgfHwgYWRqdXN0ZWRUaW1lIDw9IGNoaWxkLl9lbmQpICYmIGNoaWxkLl90cyAmJiBwYXVzZVR3ZWVuICE9PSBjaGlsZCkge1xuICAgICAgICAgICAgaWYgKGNoaWxkLnBhcmVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAvLyBhbiBleHRyZW1lIGVkZ2UgY2FzZSAtIHRoZSBjaGlsZCdzIHJlbmRlciBjb3VsZCBkbyBzb21ldGhpbmcgbGlrZSBraWxsKCkgdGhlIFwibmV4dFwiIG9uZSBpbiB0aGUgbGlua2VkIGxpc3QsIG9yIHJlcGFyZW50IGl0LiBJbiB0aGF0IGNhc2Ugd2UgbXVzdCByZS1pbml0aWF0ZSB0aGUgd2hvbGUgcmVuZGVyIHRvIGJlIHNhZmUuXG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcih0b3RhbFRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnJlbmRlcihjaGlsZC5fdHMgPiAwID8gKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMgOiAoY2hpbGQuX2RpcnR5ID8gY2hpbGQudG90YWxEdXJhdGlvbigpIDogY2hpbGQuX3REdXIpICsgKGFkanVzdGVkVGltZSAtIGNoaWxkLl9zdGFydCkgKiBjaGlsZC5fdHMsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cbiAgICAgICAgICAgIGlmICh0aW1lICE9PSB0aGlzLl90aW1lIHx8ICF0aGlzLl90cyAmJiAhcHJldlBhdXNlZCkge1xuICAgICAgICAgICAgICAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG4gICAgICAgICAgICAgIHBhdXNlVHdlZW4gPSAwO1xuICAgICAgICAgICAgICBuZXh0ICYmICh0VGltZSArPSB0aGlzLl96VGltZSA9IGFkanVzdGVkVGltZSA/IC1fdGlueU51bSA6IF90aW55TnVtKTsgLy8gaXQgZGlkbid0IGZpbmlzaCByZW5kZXJpbmcsIHNvIGFkanVzdCB6VGltZSBzbyB0aGF0IHNvIHRoYXQgdGhlIG5leHQgdGltZSByZW5kZXIoKSBpcyBjYWxsZWQgaXQnbGwgYmUgZm9yY2VkICh0byByZW5kZXIgYW55IHJlbWFpbmluZyBjaGlsZHJlbilcblxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhdXNlVHdlZW4gJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgcGF1c2VUd2Vlbi5yZW5kZXIodGltZSA+PSBwcmV2VGltZSA/IDAgOiAtX3RpbnlOdW0pLl96VGltZSA9IHRpbWUgPj0gcHJldlRpbWUgPyAxIDogLTE7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RzKSB7XG4gICAgICAgICAgLy90aGUgY2FsbGJhY2sgcmVzdW1lZCBwbGF5YmFjayEgU28gc2luY2Ugd2UgbWF5IGhhdmUgaGVsZCBiYWNrIHRoZSBwbGF5aGVhZCBkdWUgdG8gd2hlcmUgdGhlIHBhdXNlIGlzIHBvc2l0aW9uZWQsIGdvIGFoZWFkIGFuZCBqdW1wIHRvIHdoZXJlIGl0J3MgU1VQUE9TRUQgdG8gYmUgKGlmIG5vIHBhdXNlIGhhcHBlbmVkKS5cbiAgICAgICAgICB0aGlzLl9zdGFydCA9IHByZXZTdGFydDsgLy9pZiB0aGUgcGF1c2Ugd2FzIGF0IGFuIGVhcmxpZXIgdGltZSBhbmQgdGhlIHVzZXIgcmVzdW1lZCBpbiB0aGUgY2FsbGJhY2ssIGl0IGNvdWxkIHJlcG9zaXRpb24gdGhlIHRpbWVsaW5lIChjaGFuZ2luZyBpdHMgc3RhcnRUaW1lKSwgdGhyb3dpbmcgdGhpbmdzIG9mZiBzbGlnaHRseSwgc28gd2UgbWFrZSBzdXJlIHRoZSBfc3RhcnQgZG9lc24ndCBzaGlmdC5cblxuICAgICAgICAgIF9zZXRFbmQodGhpcyk7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX29uVXBkYXRlICYmICFzdXBwcmVzc0V2ZW50cyAmJiBfY2FsbGJhY2sodGhpcywgXCJvblVwZGF0ZVwiLCB0cnVlKTtcbiAgICAgIGlmICh0VGltZSA9PT0gdER1ciAmJiB0RHVyID49IHRoaXMudG90YWxEdXJhdGlvbigpIHx8ICF0VGltZSAmJiBwcmV2VGltZSkgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnQgfHwgTWF0aC5hYnModGltZVNjYWxlKSAhPT0gTWF0aC5hYnModGhpcy5fdHMpKSBpZiAoIXRoaXMuX2xvY2spIHtcbiAgICAgICAgKHRvdGFsVGltZSB8fCAhZHVyKSAmJiAodFRpbWUgPT09IHREdXIgJiYgdGhpcy5fdHMgPiAwIHx8ICF0VGltZSAmJiB0aGlzLl90cyA8IDApICYmIF9yZW1vdmVGcm9tUGFyZW50KHRoaXMsIDEpOyAvLyBkb24ndCByZW1vdmUgaWYgdGhlIHRpbWVsaW5lIGlzIHJldmVyc2VkIGFuZCB0aGUgcGxheWhlYWQgaXNuJ3QgYXQgMCwgb3RoZXJ3aXNlIHRsLnByb2dyZXNzKDEpLnJldmVyc2UoKSB3b24ndCB3b3JrLiBPbmx5IHJlbW92ZSBpZiB0aGUgcGxheWhlYWQgaXMgYXQgdGhlIGVuZCBhbmQgdGltZVNjYWxlIGlzIHBvc2l0aXZlLCBvciBpZiB0aGUgcGxheWhlYWQgaXMgYXQgMCBhbmQgdGhlIHRpbWVTY2FsZSBpcyBuZWdhdGl2ZS5cblxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmICEodG90YWxUaW1lIDwgMCAmJiAhcHJldlRpbWUpICYmICh0VGltZSB8fCBwcmV2VGltZSB8fCAhdER1cikpIHtcbiAgICAgICAgICBfY2FsbGJhY2sodGhpcywgdFRpbWUgPT09IHREdXIgJiYgdG90YWxUaW1lID49IDAgPyBcIm9uQ29tcGxldGVcIiA6IFwib25SZXZlcnNlQ29tcGxldGVcIiwgdHJ1ZSk7XG5cbiAgICAgICAgICB0aGlzLl9wcm9tICYmICEodFRpbWUgPCB0RHVyICYmIHRoaXMudGltZVNjYWxlKCkgPiAwKSAmJiB0aGlzLl9wcm9tKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZCA9IGZ1bmN0aW9uIGFkZChjaGlsZCwgcG9zaXRpb24pIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIF9pc051bWJlcihwb3NpdGlvbikgfHwgKHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24sIGNoaWxkKSk7XG5cbiAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEFuaW1hdGlvbikpIHtcbiAgICAgIGlmIChfaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgY2hpbGQuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5hZGQob2JqLCBwb3NpdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTGFiZWwoY2hpbGQsIHBvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9pc0Z1bmN0aW9uKGNoaWxkKSkge1xuICAgICAgICBjaGlsZCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzICE9PSBjaGlsZCA/IF9hZGRUb1RpbWVsaW5lKHRoaXMsIGNoaWxkLCBwb3NpdGlvbikgOiB0aGlzOyAvL2Rvbid0IGFsbG93IGEgdGltZWxpbmUgdG8gYmUgYWRkZWQgdG8gaXRzZWxmIGFzIGEgY2hpbGQhXG4gIH07XG5cbiAgX3Byb3RvMi5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uIGdldENoaWxkcmVuKG5lc3RlZCwgdHdlZW5zLCB0aW1lbGluZXMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAobmVzdGVkID09PSB2b2lkIDApIHtcbiAgICAgIG5lc3RlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR3ZWVucyA9PT0gdm9pZCAwKSB7XG4gICAgICB0d2VlbnMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aW1lbGluZXMgPT09IHZvaWQgMCkge1xuICAgICAgdGltZWxpbmVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gLV9iaWdOdW07XG4gICAgfVxuXG4gICAgdmFyIGEgPSBbXSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9zdGFydCA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgICAgdHdlZW5zICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGltZWxpbmVzICYmIGEucHVzaChjaGlsZCk7XG4gICAgICAgICAgbmVzdGVkICYmIGEucHVzaC5hcHBseShhLCBjaGlsZC5nZXRDaGlsZHJlbih0cnVlLCB0d2VlbnMsIHRpbWVsaW5lcykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRCeUlkID0gZnVuY3Rpb24gZ2V0QnlJZChpZCkge1xuICAgIHZhciBhbmltYXRpb25zID0gdGhpcy5nZXRDaGlsZHJlbigxLCAxLCAxKSxcbiAgICAgICAgaSA9IGFuaW1hdGlvbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKGFuaW1hdGlvbnNbaV0udmFycy5pZCA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnNbaV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGNoaWxkKSB7XG4gICAgaWYgKF9pc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbW92ZUxhYmVsKGNoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX2lzRnVuY3Rpb24oY2hpbGQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5raWxsVHdlZW5zT2YoY2hpbGQpO1xuICAgIH1cblxuICAgIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSh0aGlzLCBjaGlsZCk7XG5cbiAgICBpZiAoY2hpbGQgPT09IHRoaXMuX3JlY2VudCkge1xuICAgICAgdGhpcy5fcmVjZW50ID0gdGhpcy5fbGFzdDtcbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbFRpbWUgPSBmdW5jdGlvbiB0b3RhbFRpbWUoX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdFRpbWU7XG4gICAgfVxuXG4gICAgdGhpcy5fZm9yY2luZyA9IDE7XG5cbiAgICBpZiAoIXRoaXMuX2RwICYmIHRoaXMuX3RzKSB7XG4gICAgICAvL3NwZWNpYWwgY2FzZSBmb3IgdGhlIGdsb2JhbCB0aW1lbGluZSAob3IgYW55IG90aGVyIHRoYXQgaGFzIG5vIHBhcmVudCBvciBkZXRhY2hlZCBwYXJlbnQpLlxuICAgICAgdGhpcy5fc3RhcnQgPSBfcm91bmRQcmVjaXNlKF90aWNrZXIudGltZSAtICh0aGlzLl90cyA+IDAgPyBfdG90YWxUaW1lMiAvIHRoaXMuX3RzIDogKHRoaXMudG90YWxEdXJhdGlvbigpIC0gX3RvdGFsVGltZTIpIC8gLXRoaXMuX3RzKSk7XG4gICAgfVxuXG4gICAgX0FuaW1hdGlvbi5wcm90b3R5cGUudG90YWxUaW1lLmNhbGwodGhpcywgX3RvdGFsVGltZTIsIHN1cHByZXNzRXZlbnRzKTtcblxuICAgIHRoaXMuX2ZvcmNpbmcgPSAwO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90bzIuYWRkTGFiZWwgPSBmdW5jdGlvbiBhZGRMYWJlbChsYWJlbCwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmxhYmVsc1tsYWJlbF0gPSBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGxhYmVsKSB7XG4gICAgZGVsZXRlIHRoaXMubGFiZWxzW2xhYmVsXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8yLmFkZFBhdXNlID0gZnVuY3Rpb24gYWRkUGF1c2UocG9zaXRpb24sIGNhbGxiYWNrLCBwYXJhbXMpIHtcbiAgICB2YXIgdCA9IFR3ZWVuLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrIHx8IF9lbXB0eUZ1bmMsIHBhcmFtcyk7XG4gICAgdC5kYXRhID0gXCJpc1BhdXNlXCI7XG4gICAgdGhpcy5faGFzUGF1c2UgPSAxO1xuICAgIHJldHVybiBfYWRkVG9UaW1lbGluZSh0aGlzLCB0LCBfcGFyc2VQb3NpdGlvbih0aGlzLCBwb3NpdGlvbikpO1xuICB9O1xuXG4gIF9wcm90bzIucmVtb3ZlUGF1c2UgPSBmdW5jdGlvbiByZW1vdmVQYXVzZShwb3NpdGlvbikge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2ZpcnN0O1xuICAgIHBvc2l0aW9uID0gX3BhcnNlUG9zaXRpb24odGhpcywgcG9zaXRpb24pO1xuXG4gICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICBpZiAoY2hpbGQuX3N0YXJ0ID09PSBwb3NpdGlvbiAmJiBjaGlsZC5kYXRhID09PSBcImlzUGF1c2VcIikge1xuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudChjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuX25leHQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzIua2lsbFR3ZWVuc09mID0gZnVuY3Rpb24ga2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKSB7XG4gICAgdmFyIHR3ZWVucyA9IHRoaXMuZ2V0VHdlZW5zT2YodGFyZ2V0cywgb25seUFjdGl2ZSksXG4gICAgICAgIGkgPSB0d2VlbnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gIT09IHR3ZWVuc1tpXSAmJiB0d2VlbnNbaV0ua2lsbCh0YXJnZXRzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uIGdldFR3ZWVuc09mKHRhcmdldHMsIG9ubHlBY3RpdmUpIHtcbiAgICB2YXIgYSA9IFtdLFxuICAgICAgICBwYXJzZWRUYXJnZXRzID0gdG9BcnJheSh0YXJnZXRzKSxcbiAgICAgICAgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgaXNHbG9iYWxUaW1lID0gX2lzTnVtYmVyKG9ubHlBY3RpdmUpLFxuICAgICAgICAvLyBhIG51bWJlciBpcyBpbnRlcnByZXRlZCBhcyBhIGdsb2JhbCB0aW1lLiBJZiB0aGUgYW5pbWF0aW9uIHNwYW5zXG4gICAgY2hpbGRyZW47XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuKSB7XG4gICAgICAgIGlmIChfYXJyYXlDb250YWluc0FueShjaGlsZC5fdGFyZ2V0cywgcGFyc2VkVGFyZ2V0cykgJiYgKGlzR2xvYmFsVGltZSA/ICghX292ZXJ3cml0aW5nVHdlZW4gfHwgY2hpbGQuX2luaXR0ZWQgJiYgY2hpbGQuX3RzKSAmJiBjaGlsZC5nbG9iYWxUaW1lKDApIDw9IG9ubHlBY3RpdmUgJiYgY2hpbGQuZ2xvYmFsVGltZShjaGlsZC50b3RhbER1cmF0aW9uKCkpID4gb25seUFjdGl2ZSA6ICFvbmx5QWN0aXZlIHx8IGNoaWxkLmlzQWN0aXZlKCkpKSB7XG4gICAgICAgICAgLy8gbm90ZTogaWYgdGhpcyBpcyBmb3Igb3ZlcndyaXRpbmcsIGl0IHNob3VsZCBvbmx5IGJlIGZvciB0d2VlbnMgdGhhdCBhcmVuJ3QgcGF1c2VkIGFuZCBhcmUgaW5pdHRlZC5cbiAgICAgICAgICBhLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKChjaGlsZHJlbiA9IGNoaWxkLmdldFR3ZWVuc09mKHBhcnNlZFRhcmdldHMsIG9ubHlBY3RpdmUpKS5sZW5ndGgpIHtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSAvLyBwb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUgLSB0YXJnZXRzKCkgb24gdGltZWxpbmVzXG4gIC8vIHRhcmdldHMoKSB7XG4gIC8vIFx0bGV0IHJlc3VsdCA9IFtdO1xuICAvLyBcdHRoaXMuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpLmZvckVhY2godCA9PiByZXN1bHQucHVzaCguLi50LnRhcmdldHMoKSkpO1xuICAvLyBcdHJldHVybiByZXN1bHQuZmlsdGVyKCh2LCBpKSA9PiByZXN1bHQuaW5kZXhPZih2KSA9PT0gaSk7XG4gIC8vIH1cbiAgO1xuXG4gIF9wcm90bzIudHdlZW5UbyA9IGZ1bmN0aW9uIHR3ZWVuVG8ocG9zaXRpb24sIHZhcnMpIHtcbiAgICB2YXJzID0gdmFycyB8fCB7fTtcblxuICAgIHZhciB0bCA9IHRoaXMsXG4gICAgICAgIGVuZFRpbWUgPSBfcGFyc2VQb3NpdGlvbih0bCwgcG9zaXRpb24pLFxuICAgICAgICBfdmFycyA9IHZhcnMsXG4gICAgICAgIHN0YXJ0QXQgPSBfdmFycy5zdGFydEF0LFxuICAgICAgICBfb25TdGFydCA9IF92YXJzLm9uU3RhcnQsXG4gICAgICAgIG9uU3RhcnRQYXJhbXMgPSBfdmFycy5vblN0YXJ0UGFyYW1zLFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIGluaXR0ZWQsXG4gICAgICAgIHR3ZWVuID0gVHdlZW4udG8odGwsIF9zZXREZWZhdWx0cyh7XG4gICAgICBlYXNlOiB2YXJzLmVhc2UgfHwgXCJub25lXCIsXG4gICAgICBsYXp5OiBmYWxzZSxcbiAgICAgIGltbWVkaWF0ZVJlbmRlcjogZmFsc2UsXG4gICAgICB0aW1lOiBlbmRUaW1lLFxuICAgICAgb3ZlcndyaXRlOiBcImF1dG9cIixcbiAgICAgIGR1cmF0aW9uOiB2YXJzLmR1cmF0aW9uIHx8IE1hdGguYWJzKChlbmRUaW1lIC0gKHN0YXJ0QXQgJiYgXCJ0aW1lXCIgaW4gc3RhcnRBdCA/IHN0YXJ0QXQudGltZSA6IHRsLl90aW1lKSkgLyB0bC50aW1lU2NhbGUoKSkgfHwgX3RpbnlOdW0sXG4gICAgICBvblN0YXJ0OiBmdW5jdGlvbiBvblN0YXJ0KCkge1xuICAgICAgICB0bC5wYXVzZSgpO1xuXG4gICAgICAgIGlmICghaW5pdHRlZCkge1xuICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHZhcnMuZHVyYXRpb24gfHwgTWF0aC5hYnMoKGVuZFRpbWUgLSAoc3RhcnRBdCAmJiBcInRpbWVcIiBpbiBzdGFydEF0ID8gc3RhcnRBdC50aW1lIDogdGwuX3RpbWUpKSAvIHRsLnRpbWVTY2FsZSgpKTtcbiAgICAgICAgICB0d2Vlbi5fZHVyICE9PSBkdXJhdGlvbiAmJiBfc2V0RHVyYXRpb24odHdlZW4sIGR1cmF0aW9uLCAwLCAxKS5yZW5kZXIodHdlZW4uX3RpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGluaXR0ZWQgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX29uU3RhcnQgJiYgX29uU3RhcnQuYXBwbHkodHdlZW4sIG9uU3RhcnRQYXJhbXMgfHwgW10pOyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cbiAgICAgIH1cbiAgICB9LCB2YXJzKSk7XG5cbiAgICByZXR1cm4gaW1tZWRpYXRlUmVuZGVyID8gdHdlZW4ucmVuZGVyKDApIDogdHdlZW47XG4gIH07XG5cbiAgX3Byb3RvMi50d2VlbkZyb21UbyA9IGZ1bmN0aW9uIHR3ZWVuRnJvbVRvKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuICAgIHJldHVybiB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgX3NldERlZmF1bHRzKHtcbiAgICAgIHN0YXJ0QXQ6IHtcbiAgICAgICAgdGltZTogX3BhcnNlUG9zaXRpb24odGhpcywgZnJvbVBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0sIHZhcnMpKTtcbiAgfTtcblxuICBfcHJvdG8yLnJlY2VudCA9IGZ1bmN0aW9uIHJlY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjZW50O1xuICB9O1xuXG4gIF9wcm90bzIubmV4dExhYmVsID0gZnVuY3Rpb24gbmV4dExhYmVsKGFmdGVyVGltZSkge1xuICAgIGlmIChhZnRlclRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYWZ0ZXJUaW1lID0gdGhpcy5fdGltZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldExhYmVsSW5EaXJlY3Rpb24odGhpcywgX3BhcnNlUG9zaXRpb24odGhpcywgYWZ0ZXJUaW1lKSk7XG4gIH07XG5cbiAgX3Byb3RvMi5wcmV2aW91c0xhYmVsID0gZnVuY3Rpb24gcHJldmlvdXNMYWJlbChiZWZvcmVUaW1lKSB7XG4gICAgaWYgKGJlZm9yZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgYmVmb3JlVGltZSA9IHRoaXMuX3RpbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9nZXRMYWJlbEluRGlyZWN0aW9uKHRoaXMsIF9wYXJzZVBvc2l0aW9uKHRoaXMsIGJlZm9yZVRpbWUpLCAxKTtcbiAgfTtcblxuICBfcHJvdG8yLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uIGN1cnJlbnRMYWJlbCh2YWx1ZSkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdGhpcy5zZWVrKHZhbHVlLCB0cnVlKSA6IHRoaXMucHJldmlvdXNMYWJlbCh0aGlzLl90aW1lICsgX3RpbnlOdW0pO1xuICB9O1xuXG4gIF9wcm90bzIuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uIHNoaWZ0Q2hpbGRyZW4oYW1vdW50LCBhZGp1c3RMYWJlbHMsIGlnbm9yZUJlZm9yZVRpbWUpIHtcbiAgICBpZiAoaWdub3JlQmVmb3JlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZ25vcmVCZWZvcmVUaW1lID0gMDtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdCxcbiAgICAgICAgbGFiZWxzID0gdGhpcy5sYWJlbHMsXG4gICAgICAgIHA7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5fc3RhcnQgPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICBjaGlsZC5fc3RhcnQgKz0gYW1vdW50O1xuICAgICAgICBjaGlsZC5fZW5kICs9IGFtb3VudDtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICBpZiAoYWRqdXN0TGFiZWxzKSB7XG4gICAgICBmb3IgKHAgaW4gbGFiZWxzKSB7XG4gICAgICAgIGlmIChsYWJlbHNbcF0gPj0gaWdub3JlQmVmb3JlVGltZSkge1xuICAgICAgICAgIGxhYmVsc1twXSArPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi5pbnZhbGlkYXRlID0gZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLl9maXJzdDtcbiAgICB0aGlzLl9sb2NrID0gMDtcblxuICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgY2hpbGQuaW52YWxpZGF0ZSgpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gX0FuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzIuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcihpbmNsdWRlTGFiZWxzKSB7XG4gICAgaWYgKGluY2x1ZGVMYWJlbHMgPT09IHZvaWQgMCkge1xuICAgICAgaW5jbHVkZUxhYmVscyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gdGhpcy5fZmlyc3QsXG4gICAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcbiAgICAgIHRoaXMucmVtb3ZlKGNoaWxkKTtcbiAgICAgIGNoaWxkID0gbmV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9kcCAmJiAodGhpcy5fdGltZSA9IHRoaXMuX3RUaW1lID0gdGhpcy5fcFRpbWUgPSAwKTtcbiAgICBpbmNsdWRlTGFiZWxzICYmICh0aGlzLmxhYmVscyA9IHt9KTtcbiAgICByZXR1cm4gX3VuY2FjaGUodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvMi50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24gdG90YWxEdXJhdGlvbih2YWx1ZSkge1xuICAgIHZhciBtYXggPSAwLFxuICAgICAgICBzZWxmID0gdGhpcyxcbiAgICAgICAgY2hpbGQgPSBzZWxmLl9sYXN0LFxuICAgICAgICBwcmV2U3RhcnQgPSBfYmlnTnVtLFxuICAgICAgICBwcmV2LFxuICAgICAgICBzdGFydCxcbiAgICAgICAgcGFyZW50O1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBzZWxmLnRpbWVTY2FsZSgoc2VsZi5fcmVwZWF0IDwgMCA/IHNlbGYuZHVyYXRpb24oKSA6IHNlbGYudG90YWxEdXJhdGlvbigpKSAvIChzZWxmLnJldmVyc2VkKCkgPyAtdmFsdWUgOiB2YWx1ZSkpO1xuICAgIH1cblxuICAgIGlmIChzZWxmLl9kaXJ0eSkge1xuICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQ7XG5cbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBwcmV2ID0gY2hpbGQuX3ByZXY7IC8vcmVjb3JkIGl0IGhlcmUgaW4gY2FzZSB0aGUgdHdlZW4gY2hhbmdlcyBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2UuLi5cblxuICAgICAgICBjaGlsZC5fZGlydHkgJiYgY2hpbGQudG90YWxEdXJhdGlvbigpOyAvL2NvdWxkIGNoYW5nZSB0aGUgdHdlZW4uX3N0YXJ0VGltZSwgc28gbWFrZSBzdXJlIHRoZSBhbmltYXRpb24ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXG4gICAgICAgIHN0YXJ0ID0gY2hpbGQuX3N0YXJ0O1xuXG4gICAgICAgIGlmIChzdGFydCA+IHByZXZTdGFydCAmJiBzZWxmLl9zb3J0ICYmIGNoaWxkLl90cyAmJiAhc2VsZi5fbG9jaykge1xuICAgICAgICAgIC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2VcbiAgICAgICAgICBzZWxmLl9sb2NrID0gMTsgLy9wcmV2ZW50IGVuZGxlc3MgcmVjdXJzaXZlIGNhbGxzIC0gdGhlcmUgYXJlIG1ldGhvZHMgdGhhdCBnZXQgdHJpZ2dlcmVkIHRoYXQgY2hlY2sgZHVyYXRpb24vdG90YWxEdXJhdGlvbiB3aGVuIHdlIGFkZCgpLlxuXG4gICAgICAgICAgX2FkZFRvVGltZWxpbmUoc2VsZiwgY2hpbGQsIHN0YXJ0IC0gY2hpbGQuX2RlbGF5LCAxKS5fbG9jayA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnQgPCAwICYmIGNoaWxkLl90cykge1xuICAgICAgICAgIC8vY2hpbGRyZW4gYXJlbid0IGFsbG93ZWQgdG8gaGF2ZSBuZWdhdGl2ZSBzdGFydFRpbWVzIHVubGVzcyBzbW9vdGhDaGlsZFRpbWluZyBpcyB0cnVlLCBzbyBhZGp1c3QgaGVyZSBpZiBvbmUgaXMgZm91bmQuXG4gICAgICAgICAgbWF4IC09IHN0YXJ0O1xuXG4gICAgICAgICAgaWYgKCFwYXJlbnQgJiYgIXNlbGYuX2RwIHx8IHBhcmVudCAmJiBwYXJlbnQuc21vb3RoQ2hpbGRUaW1pbmcpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXJ0ICs9IHN0YXJ0IC8gc2VsZi5fdHM7XG4gICAgICAgICAgICBzZWxmLl90aW1lIC09IHN0YXJ0O1xuICAgICAgICAgICAgc2VsZi5fdFRpbWUgLT0gc3RhcnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5zaGlmdENoaWxkcmVuKC1zdGFydCwgZmFsc2UsIC0xZTk5OSk7XG4gICAgICAgICAgcHJldlN0YXJ0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkLl9lbmQgPiBtYXggJiYgY2hpbGQuX3RzICYmIChtYXggPSBjaGlsZC5fZW5kKTtcbiAgICAgICAgY2hpbGQgPSBwcmV2O1xuICAgICAgfVxuXG4gICAgICBfc2V0RHVyYXRpb24oc2VsZiwgc2VsZiA9PT0gX2dsb2JhbFRpbWVsaW5lICYmIHNlbGYuX3RpbWUgPiBtYXggPyBzZWxmLl90aW1lIDogbWF4LCAxLCAxKTtcblxuICAgICAgc2VsZi5fZGlydHkgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl90RHVyO1xuICB9O1xuXG4gIFRpbWVsaW5lLnVwZGF0ZVJvb3QgPSBmdW5jdGlvbiB1cGRhdGVSb290KHRpbWUpIHtcbiAgICBpZiAoX2dsb2JhbFRpbWVsaW5lLl90cykge1xuICAgICAgX2xhenlTYWZlUmVuZGVyKF9nbG9iYWxUaW1lbGluZSwgX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUodGltZSwgX2dsb2JhbFRpbWVsaW5lKSk7XG5cbiAgICAgIF9sYXN0UmVuZGVyZWRGcmFtZSA9IF90aWNrZXIuZnJhbWU7XG4gICAgfVxuXG4gICAgaWYgKF90aWNrZXIuZnJhbWUgPj0gX25leHRHQ0ZyYW1lKSB7XG4gICAgICBfbmV4dEdDRnJhbWUgKz0gX2NvbmZpZy5hdXRvU2xlZXAgfHwgMTIwO1xuICAgICAgdmFyIGNoaWxkID0gX2dsb2JhbFRpbWVsaW5lLl9maXJzdDtcbiAgICAgIGlmICghY2hpbGQgfHwgIWNoaWxkLl90cykgaWYgKF9jb25maWcuYXV0b1NsZWVwICYmIF90aWNrZXIuX2xpc3RlbmVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHdoaWxlIChjaGlsZCAmJiAhY2hpbGQuX3RzKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZC5fbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkIHx8IF90aWNrZXIuc2xlZXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRpbWVsaW5lO1xufShBbmltYXRpb24pO1xuXG5fc2V0RGVmYXVsdHMoVGltZWxpbmUucHJvdG90eXBlLCB7XG4gIF9sb2NrOiAwLFxuICBfaGFzUGF1c2U6IDAsXG4gIF9mb3JjaW5nOiAwXG59KTtcblxudmFyIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2FkZENvbXBsZXhTdHJpbmdQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgdmFyIHB0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgdGFyZ2V0LCBwcm9wLCAwLCAxLCBfcmVuZGVyQ29tcGxleFN0cmluZywgbnVsbCwgc2V0dGVyKSxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIG1hdGNoSW5kZXggPSAwLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnROdW1zLFxuICAgICAgY29sb3IsXG4gICAgICBlbmROdW0sXG4gICAgICBjaHVuayxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgaGFzUmFuZG9tLFxuICAgICAgYTtcbiAgcHQuYiA9IHN0YXJ0O1xuICBwdC5lID0gZW5kO1xuICBzdGFydCArPSBcIlwiOyAvL2Vuc3VyZSB2YWx1ZXMgYXJlIHN0cmluZ3NcblxuICBlbmQgKz0gXCJcIjtcblxuICBpZiAoaGFzUmFuZG9tID0gfmVuZC5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgIGVuZCA9IF9yZXBsYWNlUmFuZG9tKGVuZCk7XG4gIH1cblxuICBpZiAoc3RyaW5nRmlsdGVyKSB7XG4gICAgYSA9IFtzdGFydCwgZW5kXTtcbiAgICBzdHJpbmdGaWx0ZXIoYSwgdGFyZ2V0LCBwcm9wKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLlxuXG4gICAgc3RhcnQgPSBhWzBdO1xuICAgIGVuZCA9IGFbMV07XG4gIH1cblxuICBzdGFydE51bXMgPSBzdGFydC5tYXRjaChfY29tcGxleFN0cmluZ051bUV4cCkgfHwgW107XG5cbiAgd2hpbGUgKHJlc3VsdCA9IF9jb21wbGV4U3RyaW5nTnVtRXhwLmV4ZWMoZW5kKSkge1xuICAgIGVuZE51bSA9IHJlc3VsdFswXTtcbiAgICBjaHVuayA9IGVuZC5zdWJzdHJpbmcoaW5kZXgsIHJlc3VsdC5pbmRleCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgIH0gZWxzZSBpZiAoY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG4gICAgICBjb2xvciA9IDE7XG4gICAgfVxuXG4gICAgaWYgKGVuZE51bSAhPT0gc3RhcnROdW1zW21hdGNoSW5kZXgrK10pIHtcbiAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydE51bXNbbWF0Y2hJbmRleCAtIDFdKSB8fCAwOyAvL3RoZXNlIG5lc3RlZCBQcm9wVHdlZW5zIGFyZSBoYW5kbGVkIGluIGEgc3BlY2lhbCB3YXkgLSB3ZSdsbCBuZXZlciBhY3R1YWxseSBjYWxsIGEgcmVuZGVyIG9yIHNldHRlciBtZXRob2Qgb24gdGhlbS4gV2UnbGwganVzdCBsb29wIHRocm91Z2ggdGhlbSBpbiB0aGUgcGFyZW50IGNvbXBsZXggc3RyaW5nIFByb3BUd2VlbidzIHJlbmRlciBtZXRob2QuXG5cbiAgICAgIHB0Ll9wdCA9IHtcbiAgICAgICAgX25leHQ6IHB0Ll9wdCxcbiAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgIC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuICAgICAgICBzOiBzdGFydE51bSxcbiAgICAgICAgYzogZW5kTnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyBwYXJzZUZsb2F0KGVuZE51bS5zdWJzdHIoMikpICogKGVuZE51bS5jaGFyQXQoMCkgPT09IFwiLVwiID8gLTEgOiAxKSA6IHBhcnNlRmxvYXQoZW5kTnVtKSAtIHN0YXJ0TnVtLFxuICAgICAgICBtOiBjb2xvciAmJiBjb2xvciA8IDQgPyBNYXRoLnJvdW5kIDogMFxuICAgICAgfTtcbiAgICAgIGluZGV4ID0gX2NvbXBsZXhTdHJpbmdOdW1FeHAubGFzdEluZGV4O1xuICAgIH1cbiAgfVxuXG4gIHB0LmMgPSBpbmRleCA8IGVuZC5sZW5ndGggPyBlbmQuc3Vic3RyaW5nKGluZGV4LCBlbmQubGVuZ3RoKSA6IFwiXCI7IC8vd2UgdXNlIHRoZSBcImNcIiBvZiB0aGUgUHJvcFR3ZWVuIHRvIHN0b3JlIHRoZSBmaW5hbCBwYXJ0IG9mIHRoZSBzdHJpbmcgKGFmdGVyIHRoZSBsYXN0IG51bWJlcilcblxuICBwdC5mcCA9IGZ1bmNQYXJhbTtcblxuICBpZiAoX3JlbEV4cC50ZXN0KGVuZCkgfHwgaGFzUmFuZG9tKSB7XG4gICAgcHQuZSA9IDA7IC8vaWYgdGhlIGVuZCBzdHJpbmcgY29udGFpbnMgcmVsYXRpdmUgdmFsdWVzIG9yIGR5bmFtaWMgcmFuZG9tKC4uLikgdmFsdWVzLCBkZWxldGUgdGhlIGVuZCBpdCBzbyB0aGF0IG9uIHRoZSBmaW5hbCByZW5kZXIgd2UgZG9uJ3QgYWN0dWFsbHkgc2V0IGl0IHRvIHRoZSBzdHJpbmcgd2l0aCArPSBvciAtPSBjaGFyYWN0ZXJzIChmb3JjZXMgaXQgdG8gdXNlIHRoZSBjYWxjdWxhdGVkIHZhbHVlKS5cbiAgfVxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfYWRkQ29tcGxleFN0cmluZ1Byb3BUd2Vlbi5jYWxsKHR3ZWVuSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbiBfYWRkUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCwgaW5kZXgsIHRhcmdldHMsIG1vZGlmaWVyLCBzdHJpbmdGaWx0ZXIsIGZ1bmNQYXJhbSkge1xuICBfaXNGdW5jdGlvbihlbmQpICYmIChlbmQgPSBlbmQoaW5kZXggfHwgMCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG4gIHZhciBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF0sXG4gICAgICBwYXJzZWRTdGFydCA9IHN0YXJ0ICE9PSBcImdldFwiID8gc3RhcnQgOiAhX2lzRnVuY3Rpb24oY3VycmVudFZhbHVlKSA/IGN1cnJlbnRWYWx1ZSA6IGZ1bmNQYXJhbSA/IHRhcmdldFtwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgIV9pc0Z1bmN0aW9uKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKGZ1bmNQYXJhbSkgOiB0YXJnZXRbcHJvcF0oKSxcbiAgICAgIHNldHRlciA9ICFfaXNGdW5jdGlvbihjdXJyZW50VmFsdWUpID8gX3NldHRlclBsYWluIDogZnVuY1BhcmFtID8gX3NldHRlckZ1bmNXaXRoUGFyYW0gOiBfc2V0dGVyRnVuYyxcbiAgICAgIHB0O1xuXG4gIGlmIChfaXNTdHJpbmcoZW5kKSkge1xuICAgIGlmICh+ZW5kLmluZGV4T2YoXCJyYW5kb20oXCIpKSB7XG4gICAgICBlbmQgPSBfcmVwbGFjZVJhbmRvbShlbmQpO1xuICAgIH1cblxuICAgIGlmIChlbmQuY2hhckF0KDEpID09PSBcIj1cIikge1xuICAgICAgcHQgPSBwYXJzZUZsb2F0KHBhcnNlZFN0YXJ0KSArIHBhcnNlRmxvYXQoZW5kLnN1YnN0cigyKSkgKiAoZW5kLmNoYXJBdCgwKSA9PT0gXCItXCIgPyAtMSA6IDEpICsgKGdldFVuaXQocGFyc2VkU3RhcnQpIHx8IDApO1xuXG4gICAgICBpZiAocHQgfHwgcHQgPT09IDApIHtcbiAgICAgICAgLy8gdG8gYXZvaWQgaXNOYU4sIGxpa2UgaWYgc29tZW9uZSBwYXNzZXMgaW4gYSB2YWx1ZSBsaWtlIFwiIT0gd2hhdGV2ZXJcIlxuICAgICAgICBlbmQgPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAocGFyc2VkU3RhcnQgIT09IGVuZCkge1xuICAgIGlmICghaXNOYU4ocGFyc2VkU3RhcnQgKiBlbmQpICYmIGVuZCAhPT0gXCJcIikge1xuICAgICAgLy8gZnVuIGZhY3Q6IGFueSBudW1iZXIgbXVsdGlwbGllZCBieSBcIlwiIGlzIGV2YWx1YXRlZCBhcyB0aGUgbnVtYmVyIDAhXG4gICAgICBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldCwgcHJvcCwgK3BhcnNlZFN0YXJ0IHx8IDAsIGVuZCAtIChwYXJzZWRTdGFydCB8fCAwKSwgdHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gXCJib29sZWFuXCIgPyBfcmVuZGVyQm9vbGVhbiA6IF9yZW5kZXJQbGFpbiwgMCwgc2V0dGVyKTtcbiAgICAgIGZ1bmNQYXJhbSAmJiAocHQuZnAgPSBmdW5jUGFyYW0pO1xuICAgICAgbW9kaWZpZXIgJiYgcHQubW9kaWZpZXIobW9kaWZpZXIsIHRoaXMsIHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcy5fcHQgPSBwdDtcbiAgICB9XG5cbiAgICAhY3VycmVudFZhbHVlICYmICEocHJvcCBpbiB0YXJnZXQpICYmIF9taXNzaW5nUGx1Z2luKHByb3AsIGVuZCk7XG4gICAgcmV0dXJuIF9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuLmNhbGwodGhpcywgdGFyZ2V0LCBwcm9wLCBwYXJzZWRTdGFydCwgZW5kLCBzZXR0ZXIsIHN0cmluZ0ZpbHRlciB8fCBfY29uZmlnLnN0cmluZ0ZpbHRlciwgZnVuY1BhcmFtKTtcbiAgfVxufSxcbiAgICAvL2NyZWF0ZXMgYSBjb3B5IG9mIHRoZSB2YXJzIG9iamVjdCBhbmQgcHJvY2Vzc2VzIGFueSBmdW5jdGlvbi1iYXNlZCB2YWx1ZXMgKHB1dHRpbmcgdGhlIHJlc3VsdGluZyB2YWx1ZXMgZGlyZWN0bHkgaW50byB0aGUgY29weSkgYXMgd2VsbCBhcyBzdHJpbmdzIHdpdGggXCJyYW5kb20oKVwiIGluIHRoZW0uIEl0IGRvZXMgTk9UIHByb2Nlc3MgcmVsYXRpdmUgdmFsdWVzLlxuX3Byb2Nlc3NWYXJzID0gZnVuY3Rpb24gX3Byb2Nlc3NWYXJzKHZhcnMsIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSB7XG4gIF9pc0Z1bmN0aW9uKHZhcnMpICYmICh2YXJzID0gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSk7XG5cbiAgaWYgKCFfaXNPYmplY3QodmFycykgfHwgdmFycy5zdHlsZSAmJiB2YXJzLm5vZGVUeXBlIHx8IF9pc0FycmF5KHZhcnMpIHx8IF9pc1R5cGVkQXJyYXkodmFycykpIHtcbiAgICByZXR1cm4gX2lzU3RyaW5nKHZhcnMpID8gX3BhcnNlRnVuY09yU3RyaW5nKHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHZhcnM7XG4gIH1cblxuICB2YXIgY29weSA9IHt9LFxuICAgICAgcDtcblxuICBmb3IgKHAgaW4gdmFycykge1xuICAgIGNvcHlbcF0gPSBfcGFyc2VGdW5jT3JTdHJpbmcodmFyc1twXSwgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59LFxuICAgIF9jaGVja1BsdWdpbiA9IGZ1bmN0aW9uIF9jaGVja1BsdWdpbihwcm9wZXJ0eSwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgdmFyIHBsdWdpbiwgcHQsIHB0TG9va3VwLCBpO1xuXG4gIGlmIChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgKHBsdWdpbiA9IG5ldyBfcGx1Z2luc1twcm9wZXJ0eV0oKSkuaW5pdCh0YXJnZXQsIHBsdWdpbi5yYXdWYXJzID8gdmFyc1twcm9wZXJ0eV0gOiBfcHJvY2Vzc1ZhcnModmFyc1twcm9wZXJ0eV0sIGluZGV4LCB0YXJnZXQsIHRhcmdldHMsIHR3ZWVuKSwgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSAhPT0gZmFsc2UpIHtcbiAgICB0d2Vlbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4odHdlZW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAxLCBwbHVnaW4ucmVuZGVyLCBwbHVnaW4sIDAsIHBsdWdpbi5wcmlvcml0eSk7XG5cbiAgICBpZiAodHdlZW4gIT09IF9xdWlja1R3ZWVuKSB7XG4gICAgICBwdExvb2t1cCA9IHR3ZWVuLl9wdExvb2t1cFt0d2Vlbi5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCldOyAvL25vdGU6IHdlIGNhbid0IHVzZSB0d2Vlbi5fcHRMb29rdXBbaW5kZXhdIGJlY2F1c2UgZm9yIHN0YWdnZXJlZCB0d2VlbnMsIHRoZSBpbmRleCBmcm9tIHRoZSBmdWxsVGFyZ2V0cyBhcnJheSB3b24ndCBtYXRjaCB3aGF0IGl0IGlzIGluIGVhY2ggaW5kaXZpZHVhbCB0d2VlbiB0aGF0IHNwYXducyBmcm9tIHRoZSBzdGFnZ2VyLlxuXG4gICAgICBpID0gcGx1Z2luLl9wcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgcHRMb29rdXBbcGx1Z2luLl9wcm9wc1tpXV0gPSBwdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGx1Z2luO1xufSxcbiAgICBfb3ZlcndyaXRpbmdUd2VlbixcbiAgICAvL3N0b3JlIGEgcmVmZXJlbmNlIHRlbXBvcmFyaWx5IHNvIHdlIGNhbiBhdm9pZCBvdmVyd3JpdGluZyBpdHNlbGYuXG5faW5pdFR3ZWVuID0gZnVuY3Rpb24gX2luaXRUd2Vlbih0d2VlbiwgdGltZSkge1xuICB2YXIgdmFycyA9IHR3ZWVuLnZhcnMsXG4gICAgICBlYXNlID0gdmFycy5lYXNlLFxuICAgICAgc3RhcnRBdCA9IHZhcnMuc3RhcnRBdCxcbiAgICAgIGltbWVkaWF0ZVJlbmRlciA9IHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuICAgICAgbGF6eSA9IHZhcnMubGF6eSxcbiAgICAgIG9uVXBkYXRlID0gdmFycy5vblVwZGF0ZSxcbiAgICAgIG9uVXBkYXRlUGFyYW1zID0gdmFycy5vblVwZGF0ZVBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGUgPSB2YXJzLmNhbGxiYWNrU2NvcGUsXG4gICAgICBydW5CYWNrd2FyZHMgPSB2YXJzLnJ1bkJhY2t3YXJkcyxcbiAgICAgIHlveW9FYXNlID0gdmFycy55b3lvRWFzZSxcbiAgICAgIGtleWZyYW1lcyA9IHZhcnMua2V5ZnJhbWVzLFxuICAgICAgYXV0b1JldmVydCA9IHZhcnMuYXV0b1JldmVydCxcbiAgICAgIGR1ciA9IHR3ZWVuLl9kdXIsXG4gICAgICBwcmV2U3RhcnRBdCA9IHR3ZWVuLl9zdGFydEF0LFxuICAgICAgdGFyZ2V0cyA9IHR3ZWVuLl90YXJnZXRzLFxuICAgICAgcGFyZW50ID0gdHdlZW4ucGFyZW50LFxuICAgICAgZnVsbFRhcmdldHMgPSBwYXJlbnQgJiYgcGFyZW50LmRhdGEgPT09IFwibmVzdGVkXCIgPyBwYXJlbnQucGFyZW50Ll90YXJnZXRzIDogdGFyZ2V0cyxcbiAgICAgIGF1dG9PdmVyd3JpdGUgPSB0d2Vlbi5fb3ZlcndyaXRlID09PSBcImF1dG9cIiAmJiAhX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICAgIHRsID0gdHdlZW4udGltZWxpbmUsXG4gICAgICBjbGVhblZhcnMsXG4gICAgICBpLFxuICAgICAgcCxcbiAgICAgIHB0LFxuICAgICAgdGFyZ2V0LFxuICAgICAgaGFzUHJpb3JpdHksXG4gICAgICBnc0RhdGEsXG4gICAgICBoYXJuZXNzLFxuICAgICAgcGx1Z2luLFxuICAgICAgcHRMb29rdXAsXG4gICAgICBpbmRleCxcbiAgICAgIGhhcm5lc3NWYXJzLFxuICAgICAgb3ZlcndyaXR0ZW47XG4gIHRsICYmICgha2V5ZnJhbWVzIHx8ICFlYXNlKSAmJiAoZWFzZSA9IFwibm9uZVwiKTtcbiAgdHdlZW4uX2Vhc2UgPSBfcGFyc2VFYXNlKGVhc2UsIF9kZWZhdWx0cy5lYXNlKTtcbiAgdHdlZW4uX3lFYXNlID0geW95b0Vhc2UgPyBfaW52ZXJ0RWFzZShfcGFyc2VFYXNlKHlveW9FYXNlID09PSB0cnVlID8gZWFzZSA6IHlveW9FYXNlLCBfZGVmYXVsdHMuZWFzZSkpIDogMDtcblxuICBpZiAoeW95b0Vhc2UgJiYgdHdlZW4uX3lveW8gJiYgIXR3ZWVuLl9yZXBlYXQpIHtcbiAgICAvL3RoZXJlIG11c3QgaGF2ZSBiZWVuIGEgcGFyZW50IHRpbWVsaW5lIHdpdGggeW95bzp0cnVlIHRoYXQgaXMgY3VycmVudGx5IGluIGl0cyB5b3lvIHBoYXNlLCBzbyBmbGlwIHRoZSBlYXNlcy5cbiAgICB5b3lvRWFzZSA9IHR3ZWVuLl95RWFzZTtcbiAgICB0d2Vlbi5feUVhc2UgPSB0d2Vlbi5fZWFzZTtcbiAgICB0d2Vlbi5fZWFzZSA9IHlveW9FYXNlO1xuICB9XG5cbiAgdHdlZW4uX2Zyb20gPSAhdGwgJiYgISF2YXJzLnJ1bkJhY2t3YXJkczsgLy9uZXN0ZWQgdGltZWxpbmVzIHNob3VsZCBuZXZlciBydW4gYmFja3dhcmRzIC0gdGhlIGJhY2t3YXJkcy1uZXNzIGlzIGluIHRoZSBjaGlsZCB0d2VlbnMuXG5cbiAgaWYgKCF0bCkge1xuICAgIC8vaWYgdGhlcmUncyBhbiBpbnRlcm5hbCB0aW1lbGluZSwgc2tpcCBhbGwgdGhlIHBhcnNpbmcgYmVjYXVzZSB3ZSBwYXNzZWQgdGhhdCB0YXNrIGRvd24gdGhlIGNoYWluLlxuICAgIGhhcm5lc3MgPSB0YXJnZXRzWzBdID8gX2dldENhY2hlKHRhcmdldHNbMF0pLmhhcm5lc3MgOiAwO1xuICAgIGhhcm5lc3NWYXJzID0gaGFybmVzcyAmJiB2YXJzW2hhcm5lc3MucHJvcF07IC8vc29tZW9uZSBtYXkgbmVlZCB0byBzcGVjaWZ5IENTUy1zcGVjaWZpYyB2YWx1ZXMgQU5EIG5vbi1DU1MgdmFsdWVzLCBsaWtlIGlmIHRoZSBlbGVtZW50IGhhcyBhbiBcInhcIiBwcm9wZXJ0eSBwbHVzIGl0J3MgYSBzdGFuZGFyZCBET00gZWxlbWVudC4gV2UgYWxsb3cgcGVvcGxlIHRvIGRpc3Rpbmd1aXNoIGJ5IHdyYXBwaW5nIHBsdWdpbi1zcGVjaWZpYyBzdHVmZiBpbiBhIGNzczp7fSBvYmplY3QgZm9yIGV4YW1wbGUuXG5cbiAgICBjbGVhblZhcnMgPSBfY29weUV4Y2x1ZGluZyh2YXJzLCBfcmVzZXJ2ZWRQcm9wcyk7XG4gICAgcHJldlN0YXJ0QXQgJiYgcHJldlN0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKS5raWxsKCk7XG5cbiAgICBpZiAoc3RhcnRBdCkge1xuICAgICAgX3JlbW92ZUZyb21QYXJlbnQodHdlZW4uX3N0YXJ0QXQgPSBUd2Vlbi5zZXQodGFyZ2V0cywgX3NldERlZmF1bHRzKHtcbiAgICAgICAgZGF0YTogXCJpc1N0YXJ0XCIsXG4gICAgICAgIG92ZXJ3cml0ZTogZmFsc2UsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXI6IHRydWUsXG4gICAgICAgIGxhenk6IF9pc05vdEZhbHNlKGxhenkpLFxuICAgICAgICBzdGFydEF0OiBudWxsLFxuICAgICAgICBkZWxheTogMCxcbiAgICAgICAgb25VcGRhdGU6IG9uVXBkYXRlLFxuICAgICAgICBvblVwZGF0ZVBhcmFtczogb25VcGRhdGVQYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrU2NvcGU6IGNhbGxiYWNrU2NvcGUsXG4gICAgICAgIHN0YWdnZXI6IDBcbiAgICAgIH0sIHN0YXJ0QXQpKSk7IC8vY29weSB0aGUgcHJvcGVydGllcy92YWx1ZXMgaW50byBhIG5ldyBvYmplY3QgdG8gYXZvaWQgY29sbGlzaW9ucywgbGlrZSB2YXIgdG8gPSB7eDowfSwgZnJvbSA9IHt4OjUwMH07IHRpbWVsaW5lLmZyb21UbyhlLCBmcm9tLCB0bykuZnJvbVRvKGUsIHRvLCBmcm9tKTtcblxuXG4gICAgICB0aW1lIDwgMCAmJiAhaW1tZWRpYXRlUmVuZGVyICYmICFhdXRvUmV2ZXJ0ICYmIHR3ZWVuLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSk7IC8vIHJhcmUgZWRnZSBjYXNlLCBsaWtlIGlmIGEgcmVuZGVyIGlzIGZvcmNlZCBpbiB0aGUgbmVnYXRpdmUgZGlyZWN0aW9uIG9mIGEgbm9uLWluaXR0ZWQgdHdlZW4uXG5cbiAgICAgIGlmIChpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgdGltZSA+IDAgJiYgIWF1dG9SZXZlcnQgJiYgKHR3ZWVuLl9zdGFydEF0ID0gMCk7IC8vdHdlZW5zIHRoYXQgcmVuZGVyIGltbWVkaWF0ZWx5IChsaWtlIG1vc3QgZnJvbSgpIGFuZCBmcm9tVG8oKSB0d2VlbnMpIHNob3VsZG4ndCByZXZlcnQgd2hlbiB0aGVpciBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIHBhc3QgdGhlIHN0YXJ0VGltZSBiZWNhdXNlIHRoZSBpbml0aWFsIHJlbmRlciBjb3VsZCBoYXZlIGhhcHBlbmVkIGFueXRpbWUgYW5kIGl0IHNob3VsZG4ndCBiZSBkaXJlY3RseSBjb3JyZWxhdGVkIHRvIHRoaXMgdHdlZW4ncyBzdGFydFRpbWUuIEltYWdpbmUgc2V0dGluZyB1cCBhIGNvbXBsZXggYW5pbWF0aW9uIHdoZXJlIHRoZSBiZWdpbm5pbmcgc3RhdGVzIG9mIHZhcmlvdXMgb2JqZWN0cyBhcmUgcmVuZGVyZWQgaW1tZWRpYXRlbHkgYnV0IHRoZSB0d2VlbiBkb2Vzbid0IGhhcHBlbiBmb3IgcXVpdGUgc29tZSB0aW1lIC0gaWYgd2UgcmV2ZXJ0IHRvIHRoZSBzdGFydGluZyB2YWx1ZXMgYXMgc29vbiBhcyB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBwYXN0IHRoZSB0d2VlbidzIHN0YXJ0VGltZSwgaXQgd2lsbCB0aHJvdyB0aGluZ3Mgb2ZmIHZpc3VhbGx5LiBSZXZlcnNpb24gc2hvdWxkIG9ubHkgaGFwcGVuIGluIFRpbWVsaW5lIGluc3RhbmNlcyB3aGVyZSBpbW1lZGlhdGVSZW5kZXIgd2FzIGZhbHNlIG9yIHdoZW4gYXV0b1JldmVydCBpcyBleHBsaWNpdGx5IHNldCB0byB0cnVlLlxuXG4gICAgICAgIGlmIChkdXIgJiYgdGltZSA8PSAwKSB7XG4gICAgICAgICAgdGltZSAmJiAodHdlZW4uX3pUaW1lID0gdGltZSk7XG4gICAgICAgICAgcmV0dXJuOyAvL3dlIHNraXAgaW5pdGlhbGl6YXRpb24gaGVyZSBzbyB0aGF0IG92ZXJ3cml0aW5nIGRvZXNuJ3Qgb2NjdXIgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucy4gT3RoZXJ3aXNlLCBpZiB5b3UgY3JlYXRlIHNldmVyYWwgaW1tZWRpYXRlUmVuZGVyOnRydWUgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldC9wcm9wZXJ0aWVzIHRvIGRyb3AgaW50byBhIFRpbWVsaW5lLCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuICAgICAgICB9IC8vIGlmICh0aW1lID4gMCkge1xuICAgICAgICAvLyBcdGF1dG9SZXZlcnQgfHwgKHR3ZWVuLl9zdGFydEF0ID0gMCk7IC8vdHdlZW5zIHRoYXQgcmVuZGVyIGltbWVkaWF0ZWx5IChsaWtlIG1vc3QgZnJvbSgpIGFuZCBmcm9tVG8oKSB0d2VlbnMpIHNob3VsZG4ndCByZXZlcnQgd2hlbiB0aGVpciBwYXJlbnQgdGltZWxpbmUncyBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIHBhc3QgdGhlIHN0YXJ0VGltZSBiZWNhdXNlIHRoZSBpbml0aWFsIHJlbmRlciBjb3VsZCBoYXZlIGhhcHBlbmVkIGFueXRpbWUgYW5kIGl0IHNob3VsZG4ndCBiZSBkaXJlY3RseSBjb3JyZWxhdGVkIHRvIHRoaXMgdHdlZW4ncyBzdGFydFRpbWUuIEltYWdpbmUgc2V0dGluZyB1cCBhIGNvbXBsZXggYW5pbWF0aW9uIHdoZXJlIHRoZSBiZWdpbm5pbmcgc3RhdGVzIG9mIHZhcmlvdXMgb2JqZWN0cyBhcmUgcmVuZGVyZWQgaW1tZWRpYXRlbHkgYnV0IHRoZSB0d2VlbiBkb2Vzbid0IGhhcHBlbiBmb3IgcXVpdGUgc29tZSB0aW1lIC0gaWYgd2UgcmV2ZXJ0IHRvIHRoZSBzdGFydGluZyB2YWx1ZXMgYXMgc29vbiBhcyB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBwYXN0IHRoZSB0d2VlbidzIHN0YXJ0VGltZSwgaXQgd2lsbCB0aHJvdyB0aGluZ3Mgb2ZmIHZpc3VhbGx5LiBSZXZlcnNpb24gc2hvdWxkIG9ubHkgaGFwcGVuIGluIFRpbWVsaW5lIGluc3RhbmNlcyB3aGVyZSBpbW1lZGlhdGVSZW5kZXIgd2FzIGZhbHNlIG9yIHdoZW4gYXV0b1JldmVydCBpcyBleHBsaWNpdGx5IHNldCB0byB0cnVlLlxuICAgICAgICAvLyB9IGVsc2UgaWYgKGR1ciAmJiAhKHRpbWUgPCAwICYmIHByZXZTdGFydEF0KSkge1xuICAgICAgICAvLyBcdHRpbWUgJiYgKHR3ZWVuLl96VGltZSA9IHRpbWUpO1xuICAgICAgICAvLyBcdHJldHVybjsgLy93ZSBza2lwIGluaXRpYWxpemF0aW9uIGhlcmUgc28gdGhhdCBvdmVyd3JpdGluZyBkb2Vzbid0IG9jY3VyIHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBzZXZlcmFsIGltbWVkaWF0ZVJlbmRlcjp0cnVlIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQvcHJvcGVydGllcyB0byBkcm9wIGludG8gYSBUaW1lbGluZSwgdGhlIGxhc3Qgb25lIGNyZWF0ZWQgd291bGQgb3ZlcndyaXRlIHRoZSBmaXJzdCBvbmVzIGJlY2F1c2UgdGhleSBkaWRuJ3QgZ2V0IHBsYWNlZCBpbnRvIHRoZSB0aW1lbGluZSB5ZXQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXIgb2NjdXJzIGFuZCBraWNrcyBpbiBvdmVyd3JpdGluZy5cbiAgICAgICAgLy8gfVxuXG4gICAgICB9IGVsc2UgaWYgKGF1dG9SZXZlcnQgPT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9zdGFydEF0ID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bkJhY2t3YXJkcyAmJiBkdXIpIHtcbiAgICAgIC8vZnJvbSgpIHR3ZWVucyBtdXN0IGJlIGhhbmRsZWQgdW5pcXVlbHk6IHRoZWlyIGJlZ2lubmluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZCBidXQgd2UgZG9uJ3Qgd2FudCBvdmVyd3JpdGluZyB0byBvY2N1ciB5ZXQgKHdoZW4gdGltZSBpcyBzdGlsbCAwKS4gV2FpdCB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zIGJlZm9yZSBkb2luZyBhbGwgdGhlIHJvdXRpbmVzIGxpa2Ugb3ZlcndyaXRpbmcuIEF0IHRoYXQgdGltZSwgd2Ugc2hvdWxkIHJlbmRlciBhdCB0aGUgRU5EIG9mIHRoZSB0d2VlbiB0byBlbnN1cmUgdGhhdCB0aGluZ3MgaW5pdGlhbGl6ZSBjb3JyZWN0bHkgKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIGdvIGJhY2t3YXJkcylcbiAgICAgIGlmIChwcmV2U3RhcnRBdCkge1xuICAgICAgICAhYXV0b1JldmVydCAmJiAodHdlZW4uX3N0YXJ0QXQgPSAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRpbWUgJiYgKGltbWVkaWF0ZVJlbmRlciA9IGZhbHNlKTsgLy9pbiByYXJlIGNhc2VzIChsaWtlIGlmIGEgZnJvbSgpIHR3ZWVuIHJ1bnMgYW5kIHRoZW4gaXMgaW52YWxpZGF0ZSgpLWVkKSwgaW1tZWRpYXRlUmVuZGVyIGNvdWxkIGJlIHRydWUgYnV0IHRoZSBpbml0aWFsIGZvcmNlZC1yZW5kZXIgZ2V0cyBza2lwcGVkLCBzbyB0aGVyZSdzIG5vIG5lZWQgdG8gZm9yY2UgdGhlIHJlbmRlciBpbiB0aGlzIGNvbnRleHQgd2hlbiB0aGUgX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDBcblxuICAgICAgICBwID0gX3NldERlZmF1bHRzKHtcbiAgICAgICAgICBvdmVyd3JpdGU6IGZhbHNlLFxuICAgICAgICAgIGRhdGE6IFwiaXNGcm9tU3RhcnRcIixcbiAgICAgICAgICAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cbiAgICAgICAgICBsYXp5OiBpbW1lZGlhdGVSZW5kZXIgJiYgX2lzTm90RmFsc2UobGF6eSksXG4gICAgICAgICAgaW1tZWRpYXRlUmVuZGVyOiBpbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgICAgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuICAgICAgICAgIHN0YWdnZXI6IDAsXG4gICAgICAgICAgcGFyZW50OiBwYXJlbnQgLy9lbnN1cmVzIHRoYXQgbmVzdGVkIHR3ZWVucyB0aGF0IGhhZCBhIHN0YWdnZXIgYXJlIGhhbmRsZWQgcHJvcGVybHksIGxpa2UgZ3NhcC5mcm9tKFwiLmNsYXNzXCIsIHt5OmdzYXAudXRpbHMud3JhcChbLTEwMCwxMDBdKX0pXG5cbiAgICAgICAgfSwgY2xlYW5WYXJzKTtcbiAgICAgICAgaGFybmVzc1ZhcnMgJiYgKHBbaGFybmVzcy5wcm9wXSA9IGhhcm5lc3NWYXJzKTsgLy8gaW4gY2FzZSBzb21lb25lIGRvZXMgc29tZXRoaW5nIGxpa2UgLmZyb20oLi4uLCB7Y3NzOnt9fSlcblxuICAgICAgICBfcmVtb3ZlRnJvbVBhcmVudCh0d2Vlbi5fc3RhcnRBdCA9IFR3ZWVuLnNldCh0YXJnZXRzLCBwKSk7XG5cbiAgICAgICAgdGltZSA8IDAgJiYgdHdlZW4uX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKTsgLy8gcmFyZSBlZGdlIGNhc2UsIGxpa2UgaWYgYSByZW5kZXIgaXMgZm9yY2VkIGluIHRoZSBuZWdhdGl2ZSBkaXJlY3Rpb24gb2YgYSBub24taW5pdHRlZCBmcm9tKCkgdHdlZW4uXG5cbiAgICAgICAgaWYgKCFpbW1lZGlhdGVSZW5kZXIpIHtcbiAgICAgICAgICBfaW5pdFR3ZWVuKHR3ZWVuLl9zdGFydEF0LCBfdGlueU51bSk7IC8vZW5zdXJlcyB0aGF0IHRoZSBpbml0aWFsIHZhbHVlcyBhcmUgcmVjb3JkZWRcblxuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHdlZW4uX3B0ID0gMDtcbiAgICBsYXp5ID0gZHVyICYmIF9pc05vdEZhbHNlKGxhenkpIHx8IGxhenkgJiYgIWR1cjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgZ3NEYXRhID0gdGFyZ2V0Ll9nc2FwIHx8IF9oYXJuZXNzKHRhcmdldHMpW2ldLl9nc2FwO1xuICAgICAgdHdlZW4uX3B0TG9va3VwW2ldID0gcHRMb29rdXAgPSB7fTtcbiAgICAgIF9sYXp5TG9va3VwW2dzRGF0YS5pZF0gJiYgX2xhenlUd2VlbnMubGVuZ3RoICYmIF9sYXp5UmVuZGVyKCk7IC8vaWYgb3RoZXIgdHdlZW5zIG9mIHRoZSBzYW1lIHRhcmdldCBoYXZlIHJlY2VudGx5IGluaXR0ZWQgYnV0IGhhdmVuJ3QgcmVuZGVyZWQgeWV0LCB3ZSd2ZSBnb3QgdG8gZm9yY2UgdGhlIHJlbmRlciBzbyB0aGF0IHRoZSBzdGFydGluZyB2YWx1ZXMgYXJlIGNvcnJlY3QgKGltYWdpbmUgcG9wdWxhdGluZyBhIHRpbWVsaW5lIHdpdGggYSBidW5jaCBvZiBzZXF1ZW50aWFsIHR3ZWVucyBhbmQgdGhlbiBqdW1waW5nIHRvIHRoZSBlbmQpXG5cbiAgICAgIGluZGV4ID0gZnVsbFRhcmdldHMgPT09IHRhcmdldHMgPyBpIDogZnVsbFRhcmdldHMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgICBpZiAoaGFybmVzcyAmJiAocGx1Z2luID0gbmV3IGhhcm5lc3MoKSkuaW5pdCh0YXJnZXQsIGhhcm5lc3NWYXJzIHx8IGNsZWFuVmFycywgdHdlZW4sIGluZGV4LCBmdWxsVGFyZ2V0cykgIT09IGZhbHNlKSB7XG4gICAgICAgIHR3ZWVuLl9wdCA9IHB0ID0gbmV3IFByb3BUd2Vlbih0d2Vlbi5fcHQsIHRhcmdldCwgcGx1Z2luLm5hbWUsIDAsIDEsIHBsdWdpbi5yZW5kZXIsIHBsdWdpbiwgMCwgcGx1Z2luLnByaW9yaXR5KTtcblxuICAgICAgICBwbHVnaW4uX3Byb3BzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICBwdExvb2t1cFtuYW1lXSA9IHB0O1xuICAgICAgICB9KTtcblxuICAgICAgICBwbHVnaW4ucHJpb3JpdHkgJiYgKGhhc1ByaW9yaXR5ID0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFybmVzcyB8fCBoYXJuZXNzVmFycykge1xuICAgICAgICBmb3IgKHAgaW4gY2xlYW5WYXJzKSB7XG4gICAgICAgICAgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBfY2hlY2tQbHVnaW4ocCwgY2xlYW5WYXJzLCB0d2VlbiwgaW5kZXgsIHRhcmdldCwgZnVsbFRhcmdldHMpKSkge1xuICAgICAgICAgICAgcGx1Z2luLnByaW9yaXR5ICYmIChoYXNQcmlvcml0eSA9IDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdExvb2t1cFtwXSA9IHB0ID0gX2FkZFByb3BUd2Vlbi5jYWxsKHR3ZWVuLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIGNsZWFuVmFyc1twXSwgaW5kZXgsIGZ1bGxUYXJnZXRzLCAwLCB2YXJzLnN0cmluZ0ZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9vcCAmJiB0d2Vlbi5fb3BbaV0gJiYgdHdlZW4ua2lsbCh0YXJnZXQsIHR3ZWVuLl9vcFtpXSk7XG5cbiAgICAgIGlmIChhdXRvT3ZlcndyaXRlICYmIHR3ZWVuLl9wdCkge1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IHR3ZWVuO1xuXG4gICAgICAgIF9nbG9iYWxUaW1lbGluZS5raWxsVHdlZW5zT2YodGFyZ2V0LCBwdExvb2t1cCwgdHdlZW4uZ2xvYmFsVGltZSh0aW1lKSk7IC8vIG1ha2Ugc3VyZSB0aGUgb3ZlcndyaXRpbmcgZG9lc24ndCBvdmVyd3JpdGUgVEhJUyB0d2VlbiEhIVxuXG5cbiAgICAgICAgb3ZlcndyaXR0ZW4gPSAhdHdlZW4ucGFyZW50O1xuICAgICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IDA7XG4gICAgICB9XG5cbiAgICAgIHR3ZWVuLl9wdCAmJiBsYXp5ICYmIChfbGF6eUxvb2t1cFtnc0RhdGEuaWRdID0gMSk7XG4gICAgfVxuXG4gICAgaGFzUHJpb3JpdHkgJiYgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSh0d2Vlbik7XG4gICAgdHdlZW4uX29uSW5pdCAmJiB0d2Vlbi5fb25Jbml0KHR3ZWVuKTsgLy9wbHVnaW5zIGxpa2UgUm91bmRQcm9wcyBtdXN0IHdhaXQgdW50aWwgQUxMIG9mIHRoZSBQcm9wVHdlZW5zIGFyZSBpbnN0YW50aWF0ZWQuIEluIHRoZSBwbHVnaW4ncyBpbml0KCkgZnVuY3Rpb24sIGl0IHNldHMgdGhlIF9vbkluaXQgb24gdGhlIHR3ZWVuIGluc3RhbmNlLiBNYXkgbm90IGJlIHByZXR0eS9pbnR1aXRpdmUsIGJ1dCBpdCdzIGZhc3QgYW5kIGtlZXBzIGZpbGUgc2l6ZSBkb3duLlxuICB9XG5cbiAgdHdlZW4uX29uVXBkYXRlID0gb25VcGRhdGU7XG4gIHR3ZWVuLl9pbml0dGVkID0gKCF0d2Vlbi5fb3AgfHwgdHdlZW4uX3B0KSAmJiAhb3ZlcndyaXR0ZW47IC8vIGlmIG92ZXJ3cml0dGVuUHJvcHMgcmVzdWx0ZWQgaW4gdGhlIGVudGlyZSB0d2VlbiBiZWluZyBraWxsZWQsIGRvIE5PVCBmbGFnIGl0IGFzIGluaXR0ZWQgb3IgZWxzZSBpdCBtYXkgcmVuZGVyIGZvciBvbmUgdGljay5cbn0sXG4gICAgX2FkZEFsaWFzZXNUb1ZhcnMgPSBmdW5jdGlvbiBfYWRkQWxpYXNlc1RvVmFycyh0YXJnZXRzLCB2YXJzKSB7XG4gIHZhciBoYXJuZXNzID0gdGFyZ2V0c1swXSA/IF9nZXRDYWNoZSh0YXJnZXRzWzBdKS5oYXJuZXNzIDogMCxcbiAgICAgIHByb3BlcnR5QWxpYXNlcyA9IGhhcm5lc3MgJiYgaGFybmVzcy5hbGlhc2VzLFxuICAgICAgY29weSxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgYWxpYXNlcztcblxuICBpZiAoIXByb3BlcnR5QWxpYXNlcykge1xuICAgIHJldHVybiB2YXJzO1xuICB9XG5cbiAgY29weSA9IF9tZXJnZSh7fSwgdmFycyk7XG5cbiAgZm9yIChwIGluIHByb3BlcnR5QWxpYXNlcykge1xuICAgIGlmIChwIGluIGNvcHkpIHtcbiAgICAgIGFsaWFzZXMgPSBwcm9wZXJ0eUFsaWFzZXNbcF0uc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IGFsaWFzZXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvcHlbYWxpYXNlc1tpXV0gPSBjb3B5W3BdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufSxcbiAgICBfcGFyc2VGdW5jT3JTdHJpbmcgPSBmdW5jdGlvbiBfcGFyc2VGdW5jT3JTdHJpbmcodmFsdWUsIHR3ZWVuLCBpLCB0YXJnZXQsIHRhcmdldHMpIHtcbiAgcmV0dXJuIF9pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwodHdlZW4sIGksIHRhcmdldCwgdGFyZ2V0cykgOiBfaXNTdHJpbmcodmFsdWUpICYmIH52YWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSA/IF9yZXBsYWNlUmFuZG9tKHZhbHVlKSA6IHZhbHVlO1xufSxcbiAgICBfc3RhZ2dlclR3ZWVuUHJvcHMgPSBfY2FsbGJhY2tOYW1lcyArIFwicmVwZWF0LHJlcGVhdERlbGF5LHlveW8scmVwZWF0UmVmcmVzaCx5b3lvRWFzZVwiLFxuICAgIF9zdGFnZ2VyUHJvcHNUb1NraXAgPSAoX3N0YWdnZXJUd2VlblByb3BzICsgXCIsaWQsc3RhZ2dlcixkZWxheSxkdXJhdGlvbixwYXVzZWQsc2Nyb2xsVHJpZ2dlclwiKS5zcGxpdChcIixcIik7XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRXRUVOXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuZXhwb3J0IHZhciBUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0FuaW1hdGlvbjIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHdlZW4sIF9BbmltYXRpb24yKTtcblxuICBmdW5jdGlvbiBUd2Vlbih0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbiwgc2tpcEluaGVyaXQpIHtcbiAgICB2YXIgX3RoaXMzO1xuXG4gICAgaWYgKHR5cGVvZiB2YXJzID09PSBcIm51bWJlclwiKSB7XG4gICAgICBwb3NpdGlvbi5kdXJhdGlvbiA9IHZhcnM7XG4gICAgICB2YXJzID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgX3RoaXMzID0gX0FuaW1hdGlvbjIuY2FsbCh0aGlzLCBza2lwSW5oZXJpdCA/IHZhcnMgOiBfaW5oZXJpdERlZmF1bHRzKHZhcnMpKSB8fCB0aGlzO1xuICAgIHZhciBfdGhpczMkdmFycyA9IF90aGlzMy52YXJzLFxuICAgICAgICBkdXJhdGlvbiA9IF90aGlzMyR2YXJzLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF90aGlzMyR2YXJzLmRlbGF5LFxuICAgICAgICBpbW1lZGlhdGVSZW5kZXIgPSBfdGhpczMkdmFycy5pbW1lZGlhdGVSZW5kZXIsXG4gICAgICAgIHN0YWdnZXIgPSBfdGhpczMkdmFycy5zdGFnZ2VyLFxuICAgICAgICBvdmVyd3JpdGUgPSBfdGhpczMkdmFycy5vdmVyd3JpdGUsXG4gICAgICAgIGtleWZyYW1lcyA9IF90aGlzMyR2YXJzLmtleWZyYW1lcyxcbiAgICAgICAgZGVmYXVsdHMgPSBfdGhpczMkdmFycy5kZWZhdWx0cyxcbiAgICAgICAgc2Nyb2xsVHJpZ2dlciA9IF90aGlzMyR2YXJzLnNjcm9sbFRyaWdnZXIsXG4gICAgICAgIHlveW9FYXNlID0gX3RoaXMzJHZhcnMueW95b0Vhc2UsXG4gICAgICAgIHBhcmVudCA9IHZhcnMucGFyZW50IHx8IF9nbG9iYWxUaW1lbGluZSxcbiAgICAgICAgcGFyc2VkVGFyZ2V0cyA9IChfaXNBcnJheSh0YXJnZXRzKSB8fCBfaXNUeXBlZEFycmF5KHRhcmdldHMpID8gX2lzTnVtYmVyKHRhcmdldHNbMF0pIDogXCJsZW5ndGhcIiBpbiB2YXJzKSA/IFt0YXJnZXRzXSA6IHRvQXJyYXkodGFyZ2V0cyksXG4gICAgICAgIHRsLFxuICAgICAgICBpLFxuICAgICAgICBjb3B5LFxuICAgICAgICBsLFxuICAgICAgICBwLFxuICAgICAgICBjdXJUYXJnZXQsXG4gICAgICAgIHN0YWdnZXJGdW5jLFxuICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2U7XG4gICAgX3RoaXMzLl90YXJnZXRzID0gcGFyc2VkVGFyZ2V0cy5sZW5ndGggPyBfaGFybmVzcyhwYXJzZWRUYXJnZXRzKSA6IF93YXJuKFwiR1NBUCB0YXJnZXQgXCIgKyB0YXJnZXRzICsgXCIgbm90IGZvdW5kLiBodHRwczovL2dyZWVuc29jay5jb21cIiwgIV9jb25maWcubnVsbFRhcmdldFdhcm4pIHx8IFtdO1xuICAgIF90aGlzMy5fcHRMb29rdXAgPSBbXTsgLy9Qcm9wVHdlZW4gbG9va3VwLiBBbiBhcnJheSBjb250YWluaW5nIGFuIG9iamVjdCBmb3IgZWFjaCB0YXJnZXQsIGhhdmluZyBrZXlzIGZvciBlYWNoIHR3ZWVuaW5nIHByb3BlcnR5XG5cbiAgICBfdGhpczMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZTtcblxuICAgIGlmIChrZXlmcmFtZXMgfHwgc3RhZ2dlciB8fCBfaXNGdW5jT3JTdHJpbmcoZHVyYXRpb24pIHx8IF9pc0Z1bmNPclN0cmluZyhkZWxheSkpIHtcbiAgICAgIHZhcnMgPSBfdGhpczMudmFycztcbiAgICAgIHRsID0gX3RoaXMzLnRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgICAgICAgZGF0YTogXCJuZXN0ZWRcIixcbiAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzIHx8IHt9XG4gICAgICB9KTtcbiAgICAgIHRsLmtpbGwoKTtcbiAgICAgIHRsLnBhcmVudCA9IHRsLl9kcCA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcbiAgICAgIHRsLl9zdGFydCA9IDA7XG5cbiAgICAgIGlmIChrZXlmcmFtZXMpIHtcbiAgICAgICAgX2luaGVyaXREZWZhdWx0cyhfc2V0RGVmYXVsdHModGwudmFycy5kZWZhdWx0cywge1xuICAgICAgICAgIGVhc2U6IFwibm9uZVwiXG4gICAgICAgIH0pKTtcblxuICAgICAgICBzdGFnZ2VyID8gcGFyc2VkVGFyZ2V0cy5mb3JFYWNoKGZ1bmN0aW9uICh0LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGtleWZyYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChmcmFtZSwgaikge1xuICAgICAgICAgICAgcmV0dXJuIHRsLnRvKHQsIGZyYW1lLCBqID8gXCI+XCIgOiBpICogc3RhZ2dlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pIDoga2V5ZnJhbWVzLmZvckVhY2goZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRsLnRvKHBhcnNlZFRhcmdldHMsIGZyYW1lLCBcIj5cIik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbCA9IHBhcnNlZFRhcmdldHMubGVuZ3RoO1xuICAgICAgICBzdGFnZ2VyRnVuYyA9IHN0YWdnZXIgPyBkaXN0cmlidXRlKHN0YWdnZXIpIDogX2VtcHR5RnVuYztcblxuICAgICAgICBpZiAoX2lzT2JqZWN0KHN0YWdnZXIpKSB7XG4gICAgICAgICAgLy91c2VycyBjYW4gcGFzcyBpbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0L29uQ29tcGxldGUgaW4gdGhlIHN0YWdnZXIgb2JqZWN0LiBUaGVzZSBzaG91bGQgZmlyZSB3aXRoIGVhY2ggaW5kaXZpZHVhbCB0d2Vlbi5cbiAgICAgICAgICBmb3IgKHAgaW4gc3RhZ2dlcikge1xuICAgICAgICAgICAgaWYgKH5fc3RhZ2dlclR3ZWVuUHJvcHMuaW5kZXhPZihwKSkge1xuICAgICAgICAgICAgICBzdGFnZ2VyVmFyc1RvTWVyZ2UgfHwgKHN0YWdnZXJWYXJzVG9NZXJnZSA9IHt9KTtcbiAgICAgICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlW3BdID0gc3RhZ2dlcltwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29weSA9IHt9O1xuXG4gICAgICAgICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgICAgICAgIGlmIChfc3RhZ2dlclByb3BzVG9Ta2lwLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAgICAgICAgIGNvcHlbcF0gPSB2YXJzW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvcHkuc3RhZ2dlciA9IDA7XG4gICAgICAgICAgeW95b0Vhc2UgJiYgKGNvcHkueW95b0Vhc2UgPSB5b3lvRWFzZSk7XG4gICAgICAgICAgc3RhZ2dlclZhcnNUb01lcmdlICYmIF9tZXJnZShjb3B5LCBzdGFnZ2VyVmFyc1RvTWVyZ2UpO1xuICAgICAgICAgIGN1clRhcmdldCA9IHBhcnNlZFRhcmdldHNbaV07IC8vZG9uJ3QganVzdCBjb3B5IGR1cmF0aW9uIG9yIGRlbGF5IGJlY2F1c2UgaWYgdGhleSdyZSBhIHN0cmluZyBvciBmdW5jdGlvbiwgd2UnZCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcCBiZWNhdXNlIF9pc0Z1bmNPclN0cmluZygpIHdvdWxkIGV2YWx1YXRlIGFzIHRydWUgaW4gdGhlIGNoaWxkIHR3ZWVucywgZW50ZXJpbmcgdGhpcyBsb29wLCBldGMuIFNvIHdlIHBhcnNlIHRoZSB2YWx1ZSBzdHJhaWdodCBmcm9tIHZhcnMgYW5kIGRlZmF1bHQgdG8gMC5cblxuICAgICAgICAgIGNvcHkuZHVyYXRpb24gPSArX3BhcnNlRnVuY09yU3RyaW5nKGR1cmF0aW9uLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cyk7XG4gICAgICAgICAgY29weS5kZWxheSA9ICgrX3BhcnNlRnVuY09yU3RyaW5nKGRlbGF5LCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMyksIGksIGN1clRhcmdldCwgcGFyc2VkVGFyZ2V0cykgfHwgMCkgLSBfdGhpczMuX2RlbGF5O1xuXG4gICAgICAgICAgaWYgKCFzdGFnZ2VyICYmIGwgPT09IDEgJiYgY29weS5kZWxheSkge1xuICAgICAgICAgICAgLy8gaWYgc29tZW9uZSBkb2VzIGRlbGF5OlwicmFuZG9tKDEsIDUpXCIsIHJlcGVhdDotMSwgZm9yIGV4YW1wbGUsIHRoZSBkZWxheSBzaG91bGRuJ3QgYmUgaW5zaWRlIHRoZSByZXBlYXQuXG4gICAgICAgICAgICBfdGhpczMuX2RlbGF5ID0gZGVsYXkgPSBjb3B5LmRlbGF5O1xuICAgICAgICAgICAgX3RoaXMzLl9zdGFydCArPSBkZWxheTtcbiAgICAgICAgICAgIGNvcHkuZGVsYXkgPSAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRsLnRvKGN1clRhcmdldCwgY29weSwgc3RhZ2dlckZ1bmMoaSwgY3VyVGFyZ2V0LCBwYXJzZWRUYXJnZXRzKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0bC5kdXJhdGlvbigpID8gZHVyYXRpb24gPSBkZWxheSA9IDAgOiBfdGhpczMudGltZWxpbmUgPSAwOyAvLyBpZiB0aGUgdGltZWxpbmUncyBkdXJhdGlvbiBpcyAwLCB3ZSBkb24ndCBuZWVkIGEgdGltZWxpbmUgaW50ZXJuYWxseSFcbiAgICAgIH1cblxuICAgICAgZHVyYXRpb24gfHwgX3RoaXMzLmR1cmF0aW9uKGR1cmF0aW9uID0gdGwuZHVyYXRpb24oKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMy50aW1lbGluZSA9IDA7IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3VwcyAobm8gZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbilcbiAgICB9XG5cbiAgICBpZiAob3ZlcndyaXRlID09PSB0cnVlICYmICFfc3VwcHJlc3NPdmVyd3JpdGVzKSB7XG4gICAgICBfb3ZlcndyaXRpbmdUd2VlbiA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKTtcblxuICAgICAgX2dsb2JhbFRpbWVsaW5lLmtpbGxUd2VlbnNPZihwYXJzZWRUYXJnZXRzKTtcblxuICAgICAgX292ZXJ3cml0aW5nVHdlZW4gPSAwO1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKHBhcmVudCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBwb3NpdGlvbik7XG5cbiAgICB2YXJzLnJldmVyc2VkICYmIF90aGlzMy5yZXZlcnNlKCk7XG4gICAgdmFycy5wYXVzZWQgJiYgX3RoaXMzLnBhdXNlZCh0cnVlKTtcblxuICAgIGlmIChpbW1lZGlhdGVSZW5kZXIgfHwgIWR1cmF0aW9uICYmICFrZXlmcmFtZXMgJiYgX3RoaXMzLl9zdGFydCA9PT0gX3JvdW5kUHJlY2lzZShwYXJlbnQuX3RpbWUpICYmIF9pc05vdEZhbHNlKGltbWVkaWF0ZVJlbmRlcikgJiYgX2hhc05vUGF1c2VkQW5jZXN0b3JzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMzKSkgJiYgcGFyZW50LmRhdGEgIT09IFwibmVzdGVkXCIpIHtcbiAgICAgIF90aGlzMy5fdFRpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXG4gICAgICBfdGhpczMucmVuZGVyKE1hdGgubWF4KDAsIC1kZWxheSkpOyAvL2luIGNhc2UgZGVsYXkgaXMgbmVnYXRpdmVcblxuICAgIH1cblxuICAgIHNjcm9sbFRyaWdnZXIgJiYgX3Njcm9sbFRyaWdnZXIoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczMpLCBzY3JvbGxUcmlnZ2VyKTtcbiAgICByZXR1cm4gX3RoaXMzO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBUd2Vlbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcbiAgICB2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuICAgICAgICB0RHVyID0gdGhpcy5fdER1cixcbiAgICAgICAgZHVyID0gdGhpcy5fZHVyLFxuICAgICAgICB0VGltZSA9IHRvdGFsVGltZSA+IHREdXIgLSBfdGlueU51bSAmJiB0b3RhbFRpbWUgPj0gMCA/IHREdXIgOiB0b3RhbFRpbWUgPCBfdGlueU51bSA/IDAgOiB0b3RhbFRpbWUsXG4gICAgICAgIHRpbWUsXG4gICAgICAgIHB0LFxuICAgICAgICBpdGVyYXRpb24sXG4gICAgICAgIGN5Y2xlRHVyYXRpb24sXG4gICAgICAgIHByZXZJdGVyYXRpb24sXG4gICAgICAgIGlzWW95byxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHRpbWVsaW5lLFxuICAgICAgICB5b3lvRWFzZTtcblxuICAgIGlmICghZHVyKSB7XG4gICAgICBfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4odGhpcywgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAodFRpbWUgIT09IHRoaXMuX3RUaW1lIHx8ICF0b3RhbFRpbWUgfHwgZm9yY2UgfHwgIXRoaXMuX2luaXR0ZWQgJiYgdGhpcy5fdFRpbWUgfHwgdGhpcy5fc3RhcnRBdCAmJiB0aGlzLl96VGltZSA8IDAgIT09IHRvdGFsVGltZSA8IDApIHtcbiAgICAgIC8vdGhpcyBzZW5zZXMgaWYgd2UncmUgY3Jvc3Npbmcgb3ZlciB0aGUgc3RhcnQgdGltZSwgaW4gd2hpY2ggY2FzZSB3ZSBtdXN0IHJlY29yZCBfelRpbWUgYW5kIGZvcmNlIHRoZSByZW5kZXIsIGJ1dCB3ZSBkbyBpdCBpbiB0aGlzIGxlbmd0aHkgY29uZGl0aW9uYWwgd2F5IGZvciBwZXJmb3JtYW5jZSByZWFzb25zICh1c3VhbGx5IHdlIGNhbiBza2lwIHRoZSBjYWxjdWxhdGlvbnMpOiB0aGlzLl9pbml0dGVkICYmICh0aGlzLl96VGltZSA8IDApICE9PSAodG90YWxUaW1lIDwgMClcbiAgICAgIHRpbWUgPSB0VGltZTtcbiAgICAgIHRpbWVsaW5lID0gdGhpcy50aW1lbGluZTtcblxuICAgICAgaWYgKHRoaXMuX3JlcGVhdCkge1xuICAgICAgICAvL2FkanVzdCB0aGUgdGltZSBmb3IgcmVwZWF0cyBhbmQgeW95b3NcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGR1ciArIHRoaXMuX3JEZWxheTtcblxuICAgICAgICBpZiAodGhpcy5fcmVwZWF0IDwgLTEgJiYgdG90YWxUaW1lIDwgMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvdGFsVGltZShjeWNsZUR1cmF0aW9uICogMTAwICsgdG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGltZSA9IF9yb3VuZFByZWNpc2UodFRpbWUgJSBjeWNsZUR1cmF0aW9uKTsgLy9yb3VuZCB0byBhdm9pZCBmbG9hdGluZyBwb2ludCBlcnJvcnMuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblxuICAgICAgICBpZiAodFRpbWUgPT09IHREdXIpIHtcbiAgICAgICAgICAvLyB0aGUgdER1ciA9PT0gdFRpbWUgaXMgZm9yIGVkZ2UgY2FzZXMgd2hlcmUgdGhlcmUncyBhIGxlbmd0aHkgZGVjaW1hbCBvbiB0aGUgZHVyYXRpb24gYW5kIGl0IG1heSByZWFjaCB0aGUgdmVyeSBlbmQgYnV0IHRoZSB0aW1lIGlzIHJlbmRlcmVkIGFzIG5vdC1xdWl0ZS10aGVyZSAocmVtZW1iZXIsIHREdXIgaXMgcm91bmRlZCB0byA0IGRlY2ltYWxzIHdoZXJlYXMgZHVyIGlzbid0KVxuICAgICAgICAgIGl0ZXJhdGlvbiA9IHRoaXMuX3JlcGVhdDtcbiAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbiA9IH5+KHRUaW1lIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgICBpZiAoaXRlcmF0aW9uICYmIGl0ZXJhdGlvbiA9PT0gdFRpbWUgLyBjeWNsZUR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aW1lID0gZHVyO1xuICAgICAgICAgICAgaXRlcmF0aW9uLS07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGltZSA+IGR1ciAmJiAodGltZSA9IGR1cik7XG4gICAgICAgIH1cblxuICAgICAgICBpc1lveW8gPSB0aGlzLl95b3lvICYmIGl0ZXJhdGlvbiAmIDE7XG5cbiAgICAgICAgaWYgKGlzWW95bykge1xuICAgICAgICAgIHlveW9FYXNlID0gdGhpcy5feUVhc2U7XG4gICAgICAgICAgdGltZSA9IGR1ciAtIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2SXRlcmF0aW9uID0gX2FuaW1hdGlvbkN5Y2xlKHRoaXMuX3RUaW1lLCBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlICYmIHRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgICAvL2NvdWxkIGJlIGR1cmluZyB0aGUgcmVwZWF0RGVsYXkgcGFydC4gTm8gbmVlZCB0byByZW5kZXIgYW5kIGZpcmUgY2FsbGJhY2tzLlxuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gcHJldkl0ZXJhdGlvbikge1xuICAgICAgICAgIHRpbWVsaW5lICYmIHRoaXMuX3lFYXNlICYmIF9wcm9wYWdhdGVZb3lvRWFzZSh0aW1lbGluZSwgaXNZb3lvKTsgLy9yZXBlYXRSZWZyZXNoIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIGlmICh0aGlzLnZhcnMucmVwZWF0UmVmcmVzaCAmJiAhaXNZb3lvICYmICF0aGlzLl9sb2NrKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrID0gZm9yY2UgPSAxOyAvL2ZvcmNlLCBvdGhlcndpc2UgaWYgbGF6eSBpcyB0cnVlLCB0aGUgX2F0dGVtcHRJbml0VHdlZW4oKSB3aWxsIHJldHVybiBhbmQgd2UnbGwganVtcCBvdXQgYW5kIGdldCBjYXVnaHQgYm91bmNpbmcgb24gZWFjaCB0aWNrLlxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlcihfcm91bmRQcmVjaXNlKGN5Y2xlRHVyYXRpb24gKiBpdGVyYXRpb24pLCB0cnVlKS5pbnZhbGlkYXRlKCkuX2xvY2sgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcbiAgICAgICAgaWYgKF9hdHRlbXB0SW5pdFR3ZWVuKHRoaXMsIHRvdGFsVGltZSA8IDAgPyB0b3RhbFRpbWUgOiB0aW1lLCBmb3JjZSwgc3VwcHJlc3NFdmVudHMpKSB7XG4gICAgICAgICAgdGhpcy5fdFRpbWUgPSAwOyAvLyBpbiBjb25zdHJ1Y3RvciBpZiBpbW1lZGlhdGVSZW5kZXIgaXMgdHJ1ZSwgd2Ugc2V0IF90VGltZSB0byAtX3RpbnlOdW0gdG8gaGF2ZSB0aGUgcGxheWhlYWQgY3Jvc3MgdGhlIHN0YXJ0aW5nIHBvaW50IGJ1dCB3ZSBjYW4ndCBsZWF2ZSBfdFRpbWUgYXMgYSBuZWdhdGl2ZSBudW1iZXIuXG5cbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkdXIgIT09IHRoaXMuX2R1cikge1xuICAgICAgICAgIC8vIHdoaWxlIGluaXR0aW5nLCBhIHBsdWdpbiBsaWtlIEluZXJ0aWFQbHVnaW4gbWlnaHQgYWx0ZXIgdGhlIGR1cmF0aW9uLCBzbyByZXJ1biBmcm9tIHRoZSBzdGFydCB0byBlbnN1cmUgZXZlcnl0aGluZyByZW5kZXJzIGFzIGl0IHNob3VsZC5cbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXIodG90YWxUaW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3RUaW1lID0gdFRpbWU7XG4gICAgICB0aGlzLl90aW1lID0gdGltZTtcblxuICAgICAgaWYgKCF0aGlzLl9hY3QgJiYgdGhpcy5fdHMpIHtcbiAgICAgICAgdGhpcy5fYWN0ID0gMTsgLy9hcyBsb25nIGFzIGl0J3Mgbm90IHBhdXNlZCwgZm9yY2UgaXQgdG8gYmUgYWN0aXZlIHNvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBpbmRlcGVuZGVudCBvZiB0aGUgcGFyZW50IHRpbWVsaW5lLCBpdCdsbCBiZSBmb3JjZWQgdG8gcmUtcmVuZGVyIG9uIHRoZSBuZXh0IHRpY2suXG5cbiAgICAgICAgdGhpcy5fbGF6eSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF0aW8gPSByYXRpbyA9ICh5b3lvRWFzZSB8fCB0aGlzLl9lYXNlKSh0aW1lIC8gZHVyKTtcblxuICAgICAgaWYgKHRoaXMuX2Zyb20pIHtcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvID0gMSAtIHJhdGlvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZSAmJiAhcHJldlRpbWUgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uU3RhcnRcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RUaW1lICE9PSB0VGltZSkge1xuICAgICAgICAgIC8vIGluIGNhc2UgdGhlIG9uU3RhcnQgdHJpZ2dlcmVkIGEgcmVuZGVyIGF0IGEgZGlmZmVyZW50IHNwb3QsIGVqZWN0LiBMaWtlIGlmIHNvbWVvbmUgZGlkIGFuaW1hdGlvbi5wYXVzZSgwLjUpIG9yIHNvbWV0aGluZyBpbnNpZGUgdGhlIG9uU3RhcnQuXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHQgPSB0aGlzLl9wdDtcblxuICAgICAgd2hpbGUgKHB0KSB7XG4gICAgICAgIHB0LnIocmF0aW8sIHB0LmQpO1xuICAgICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgICAgfVxuXG4gICAgICB0aW1lbGluZSAmJiB0aW1lbGluZS5yZW5kZXIodG90YWxUaW1lIDwgMCA/IHRvdGFsVGltZSA6ICF0aW1lICYmIGlzWW95byA/IC1fdGlueU51bSA6IHRpbWVsaW5lLl9kdXIgKiByYXRpbywgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB8fCB0aGlzLl9zdGFydEF0ICYmICh0aGlzLl96VGltZSA9IHRvdGFsVGltZSk7XG5cbiAgICAgIGlmICh0aGlzLl9vblVwZGF0ZSAmJiAhc3VwcHJlc3NFdmVudHMpIHtcbiAgICAgICAgdG90YWxUaW1lIDwgMCAmJiB0aGlzLl9zdGFydEF0ICYmIHRoaXMuX3N0YXJ0QXQucmVuZGVyKHRvdGFsVGltZSwgdHJ1ZSwgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXG4gICAgICAgIF9jYWxsYmFjayh0aGlzLCBcIm9uVXBkYXRlXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXBlYXQgJiYgaXRlcmF0aW9uICE9PSBwcmV2SXRlcmF0aW9uICYmIHRoaXMudmFycy5vblJlcGVhdCAmJiAhc3VwcHJlc3NFdmVudHMgJiYgdGhpcy5wYXJlbnQgJiYgX2NhbGxiYWNrKHRoaXMsIFwib25SZXBlYXRcIik7XG5cbiAgICAgIGlmICgodFRpbWUgPT09IHRoaXMuX3REdXIgfHwgIXRUaW1lKSAmJiB0aGlzLl90VGltZSA9PT0gdFRpbWUpIHtcbiAgICAgICAgdG90YWxUaW1lIDwgMCAmJiB0aGlzLl9zdGFydEF0ICYmICF0aGlzLl9vblVwZGF0ZSAmJiB0aGlzLl9zdGFydEF0LnJlbmRlcih0b3RhbFRpbWUsIHRydWUsIHRydWUpO1xuICAgICAgICAodG90YWxUaW1lIHx8ICFkdXIpICYmICh0VGltZSA9PT0gdGhpcy5fdER1ciAmJiB0aGlzLl90cyA+IDAgfHwgIXRUaW1lICYmIHRoaXMuX3RzIDwgMCkgJiYgX3JlbW92ZUZyb21QYXJlbnQodGhpcywgMSk7IC8vIGRvbid0IHJlbW92ZSBpZiB3ZSdyZSByZW5kZXJpbmcgYXQgZXhhY3RseSBhIHRpbWUgb2YgMCwgYXMgdGhlcmUgY291bGQgYmUgYXV0b1JldmVydCB2YWx1ZXMgdGhhdCBzaG91bGQgZ2V0IHNldCBvbiB0aGUgbmV4dCB0aWNrIChpZiB0aGUgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBiZXlvbmQgdGhlIHN0YXJ0VGltZSwgbmVnYXRpdmUgdG90YWxUaW1lKS4gRG9uJ3QgcmVtb3ZlIGlmIHRoZSB0aW1lbGluZSBpcyByZXZlcnNlZCBhbmQgdGhlIHBsYXloZWFkIGlzbid0IGF0IDAsIG90aGVyd2lzZSB0bC5wcm9ncmVzcygxKS5yZXZlcnNlKCkgd29uJ3Qgd29yay4gT25seSByZW1vdmUgaWYgdGhlIHBsYXloZWFkIGlzIGF0IHRoZSBlbmQgYW5kIHRpbWVTY2FsZSBpcyBwb3NpdGl2ZSwgb3IgaWYgdGhlIHBsYXloZWFkIGlzIGF0IDAgYW5kIHRoZSB0aW1lU2NhbGUgaXMgbmVnYXRpdmUuXG5cbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50cyAmJiAhKHRvdGFsVGltZSA8IDAgJiYgIXByZXZUaW1lKSAmJiAodFRpbWUgfHwgcHJldlRpbWUpKSB7XG4gICAgICAgICAgLy8gaWYgcHJldlRpbWUgYW5kIHRUaW1lIGFyZSB6ZXJvLCB3ZSBzaG91bGRuJ3QgZmlyZSB0aGUgb25SZXZlcnNlQ29tcGxldGUuIFRoaXMgY291bGQgaGFwcGVuIGlmIHlvdSBnc2FwLnRvKC4uLiB7cGF1c2VkOnRydWV9KS5wbGF5KCk7XG4gICAgICAgICAgX2NhbGxiYWNrKHRoaXMsIHRUaW1lID09PSB0RHVyID8gXCJvbkNvbXBsZXRlXCIgOiBcIm9uUmV2ZXJzZUNvbXBsZXRlXCIsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5fcHJvbSAmJiAhKHRUaW1lIDwgdER1ciAmJiB0aGlzLnRpbWVTY2FsZSgpID4gMCkgJiYgdGhpcy5fcHJvbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvMy50YXJnZXRzID0gZnVuY3Rpb24gdGFyZ2V0cygpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0cztcbiAgfTtcblxuICBfcHJvdG8zLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMuX3B0ID0gdGhpcy5fb3AgPSB0aGlzLl9zdGFydEF0ID0gdGhpcy5fb25VcGRhdGUgPSB0aGlzLl9sYXp5ID0gdGhpcy5yYXRpbyA9IDA7XG4gICAgdGhpcy5fcHRMb29rdXAgPSBbXTtcbiAgICB0aGlzLnRpbWVsaW5lICYmIHRoaXMudGltZWxpbmUuaW52YWxpZGF0ZSgpO1xuICAgIHJldHVybiBfQW5pbWF0aW9uMi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90bzMua2lsbCA9IGZ1bmN0aW9uIGtpbGwodGFyZ2V0cywgdmFycykge1xuICAgIGlmICh2YXJzID09PSB2b2lkIDApIHtcbiAgICAgIHZhcnMgPSBcImFsbFwiO1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0cyAmJiAoIXZhcnMgfHwgdmFycyA9PT0gXCJhbGxcIikpIHtcbiAgICAgIHRoaXMuX2xhenkgPSB0aGlzLl9wdCA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyBfaW50ZXJydXB0KHRoaXMpIDogdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xuICAgICAgdmFyIHREdXIgPSB0aGlzLnRpbWVsaW5lLnRvdGFsRHVyYXRpb24oKTtcbiAgICAgIHRoaXMudGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHZhcnMsIF9vdmVyd3JpdGluZ1R3ZWVuICYmIF9vdmVyd3JpdGluZ1R3ZWVuLnZhcnMub3ZlcndyaXRlICE9PSB0cnVlKS5fZmlyc3QgfHwgX2ludGVycnVwdCh0aGlzKTsgLy8gaWYgbm90aGluZyBpcyBsZWZ0IHR3ZWVuaW5nLCBpbnRlcnJ1cHQuXG5cbiAgICAgIHRoaXMucGFyZW50ICYmIHREdXIgIT09IHRoaXMudGltZWxpbmUudG90YWxEdXJhdGlvbigpICYmIF9zZXREdXJhdGlvbih0aGlzLCB0aGlzLl9kdXIgKiB0aGlzLnRpbWVsaW5lLl90RHVyIC8gdER1ciwgMCwgMSk7IC8vIGlmIGEgbmVzdGVkIHR3ZWVuIGlzIGtpbGxlZCB0aGF0IGNoYW5nZXMgdGhlIGR1cmF0aW9uLCBpdCBzaG91bGQgYWZmZWN0IHRoaXMgdHdlZW4ncyBkdXJhdGlvbi4gV2UgbXVzdCB1c2UgdGhlIHJhdGlvLCB0aG91Z2gsIGJlY2F1c2Ugc29tZXRpbWVzIHRoZSBpbnRlcm5hbCB0aW1lbGluZSBpcyBzdHJldGNoZWQgbGlrZSBmb3Iga2V5ZnJhbWVzIHdoZXJlIHRoZXkgZG9uJ3QgYWxsIGFkZCB1cCB0byB3aGF0ZXZlciB0aGUgcGFyZW50IHR3ZWVuJ3MgZHVyYXRpb24gd2FzIHNldCB0by5cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZFRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuICAgICAgICBraWxsaW5nVGFyZ2V0cyA9IHRhcmdldHMgPyB0b0FycmF5KHRhcmdldHMpIDogcGFyc2VkVGFyZ2V0cyxcbiAgICAgICAgcHJvcFR3ZWVuTG9va3VwID0gdGhpcy5fcHRMb29rdXAsXG4gICAgICAgIGZpcnN0UFQgPSB0aGlzLl9wdCxcbiAgICAgICAgb3ZlcndyaXR0ZW5Qcm9wcyxcbiAgICAgICAgY3VyTG9va3VwLFxuICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHAsXG4gICAgICAgIHB0LFxuICAgICAgICBpO1xuXG4gICAgaWYgKCghdmFycyB8fCB2YXJzID09PSBcImFsbFwiKSAmJiBfYXJyYXlzTWF0Y2gocGFyc2VkVGFyZ2V0cywga2lsbGluZ1RhcmdldHMpKSB7XG4gICAgICB2YXJzID09PSBcImFsbFwiICYmICh0aGlzLl9wdCA9IDApO1xuICAgICAgcmV0dXJuIF9pbnRlcnJ1cHQodGhpcyk7XG4gICAgfVxuXG4gICAgb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX29wID0gdGhpcy5fb3AgfHwgW107XG5cbiAgICBpZiAodmFycyAhPT0gXCJhbGxcIikge1xuICAgICAgLy9zbyBwZW9wbGUgY2FuIHBhc3MgaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lc1xuICAgICAgaWYgKF9pc1N0cmluZyh2YXJzKSkge1xuICAgICAgICBwID0ge307XG5cbiAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHBbbmFtZV0gPSAxO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJzID0gcDtcbiAgICAgIH1cblxuICAgICAgdmFycyA9IF9hZGRBbGlhc2VzVG9WYXJzKHBhcnNlZFRhcmdldHMsIHZhcnMpO1xuICAgIH1cblxuICAgIGkgPSBwYXJzZWRUYXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmICh+a2lsbGluZ1RhcmdldHMuaW5kZXhPZihwYXJzZWRUYXJnZXRzW2ldKSkge1xuICAgICAgICBjdXJMb29rdXAgPSBwcm9wVHdlZW5Mb29rdXBbaV07XG5cbiAgICAgICAgaWYgKHZhcnMgPT09IFwiYWxsXCIpIHtcbiAgICAgICAgICBvdmVyd3JpdHRlblByb3BzW2ldID0gdmFycztcbiAgICAgICAgICBwcm9wcyA9IGN1ckxvb2t1cDtcbiAgICAgICAgICBjdXJPdmVyd3JpdGVQcm9wcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IG92ZXJ3cml0dGVuUHJvcHNbaV0gfHwge307XG4gICAgICAgICAgcHJvcHMgPSB2YXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChwIGluIHByb3BzKSB7XG4gICAgICAgICAgcHQgPSBjdXJMb29rdXAgJiYgY3VyTG9va3VwW3BdO1xuXG4gICAgICAgICAgaWYgKHB0KSB7XG4gICAgICAgICAgICBpZiAoIShcImtpbGxcIiBpbiBwdC5kKSB8fCBwdC5kLmtpbGwocCkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtKHRoaXMsIHB0LCBcIl9wdFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIGN1ckxvb2t1cFtwXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VyT3ZlcndyaXRlUHJvcHMgIT09IFwiYWxsXCIpIHtcbiAgICAgICAgICAgIGN1ck92ZXJ3cml0ZVByb3BzW3BdID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbml0dGVkICYmICF0aGlzLl9wdCAmJiBmaXJzdFBUICYmIF9pbnRlcnJ1cHQodGhpcyk7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgVHdlZW4udG8gPSBmdW5jdGlvbiB0byh0YXJnZXRzLCB2YXJzKSB7XG4gICAgcmV0dXJuIG5ldyBUd2Vlbih0YXJnZXRzLCB2YXJzLCBhcmd1bWVudHNbMl0pO1xuICB9O1xuXG4gIFR3ZWVuLmZyb20gPSBmdW5jdGlvbiBmcm9tKHRhcmdldHMsIHZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgxLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24gZGVsYXllZENhbGwoZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIG5ldyBUd2VlbihjYWxsYmFjaywgMCwge1xuICAgICAgaW1tZWRpYXRlUmVuZGVyOiBmYWxzZSxcbiAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgb3ZlcndyaXRlOiBmYWxzZSxcbiAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgIG9uQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGU6IGNhbGxiYWNrLFxuICAgICAgb25Db21wbGV0ZVBhcmFtczogcGFyYW1zLFxuICAgICAgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6IHBhcmFtcyxcbiAgICAgIGNhbGxiYWNrU2NvcGU6IHNjb3BlXG4gICAgfSk7XG4gIH07XG5cbiAgVHdlZW4uZnJvbVRvID0gZnVuY3Rpb24gZnJvbVRvKHRhcmdldHMsIGZyb21WYXJzLCB0b1ZhcnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVR3ZWVuVHlwZSgyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIFR3ZWVuLnNldCA9IGZ1bmN0aW9uIHNldCh0YXJnZXRzLCB2YXJzKSB7XG4gICAgdmFycy5kdXJhdGlvbiA9IDA7XG4gICAgdmFycy5yZXBlYXREZWxheSB8fCAodmFycy5yZXBlYXQgPSAwKTtcbiAgICByZXR1cm4gbmV3IFR3ZWVuKHRhcmdldHMsIHZhcnMpO1xuICB9O1xuXG4gIFR3ZWVuLmtpbGxUd2VlbnNPZiA9IGZ1bmN0aW9uIGtpbGxUd2VlbnNPZih0YXJnZXRzLCBwcm9wcywgb25seUFjdGl2ZSkge1xuICAgIHJldHVybiBfZ2xvYmFsVGltZWxpbmUua2lsbFR3ZWVuc09mKHRhcmdldHMsIHByb3BzLCBvbmx5QWN0aXZlKTtcbiAgfTtcblxuICByZXR1cm4gVHdlZW47XG59KEFuaW1hdGlvbik7XG5cbl9zZXREZWZhdWx0cyhUd2Vlbi5wcm90b3R5cGUsIHtcbiAgX3RhcmdldHM6IFtdLFxuICBfbGF6eTogMCxcbiAgX3N0YXJ0QXQ6IDAsXG4gIF9vcDogMCxcbiAgX29uSW5pdDogMFxufSk7IC8vYWRkIHRoZSBwZXJ0aW5lbnQgdGltZWxpbmUgbWV0aG9kcyB0byBUd2VlbiBpbnN0YW5jZXMgc28gdGhhdCB1c2VycyBjYW4gY2hhaW4gY29udmVuaWVudGx5IGFuZCBjcmVhdGUgYSB0aW1lbGluZSBhdXRvbWF0aWNhbGx5LiAocmVtb3ZlZCBkdWUgdG8gY29uY2VybnMgdGhhdCBpdCdkIHVsdGltYXRlbHkgYWRkIHRvIG1vcmUgY29uZnVzaW9uIGVzcGVjaWFsbHkgZm9yIGJlZ2lubmVycylcbi8vIF9mb3JFYWNoTmFtZShcInRvLGZyb20sZnJvbVRvLHNldCxjYWxsLGFkZCxhZGRMYWJlbCxhZGRQYXVzZVwiLCBuYW1lID0+IHtcbi8vIFx0VHdlZW4ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4vLyBcdFx0bGV0IHRsID0gbmV3IFRpbWVsaW5lKCk7XG4vLyBcdFx0cmV0dXJuIF9hZGRUb1RpbWVsaW5lKHRsLCB0aGlzKVtuYW1lXS5hcHBseSh0bCwgdG9BcnJheShhcmd1bWVudHMpKTtcbi8vIFx0fVxuLy8gfSk7XG4vL2ZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LiBMZXZlcmFnZSB0aGUgdGltZWxpbmUgY2FsbHMuXG5cblxuX2ZvckVhY2hOYW1lKFwic3RhZ2dlclRvLHN0YWdnZXJGcm9tLHN0YWdnZXJGcm9tVG9cIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgVHdlZW5bbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRsID0gbmV3IFRpbWVsaW5lKCksXG4gICAgICAgIHBhcmFtcyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICBwYXJhbXMuc3BsaWNlKG5hbWUgPT09IFwic3RhZ2dlckZyb21Ub1wiID8gNSA6IDQsIDAsIDApO1xuICAgIHJldHVybiB0bFtuYW1lXS5hcHBseSh0bCwgcGFyYW1zKTtcbiAgfTtcbn0pO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQUk9QVFdFRU5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG52YXIgX3NldHRlclBsYWluID0gZnVuY3Rpb24gX3NldHRlclBsYWluKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJGdW5jID0gZnVuY3Rpb24gX3NldHRlckZ1bmModGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV0odmFsdWUpO1xufSxcbiAgICBfc2V0dGVyRnVuY1dpdGhQYXJhbSA9IGZ1bmN0aW9uIF9zZXR0ZXJGdW5jV2l0aFBhcmFtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhKSB7XG4gIHJldHVybiB0YXJnZXRbcHJvcGVydHldKGRhdGEuZnAsIHZhbHVlKTtcbn0sXG4gICAgX3NldHRlckF0dHJpYnV0ZSA9IGZ1bmN0aW9uIF9zZXR0ZXJBdHRyaWJ1dGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zZXRBdHRyaWJ1dGUocHJvcGVydHksIHZhbHVlKTtcbn0sXG4gICAgX2dldFNldHRlciA9IGZ1bmN0aW9uIF9nZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gX2lzRnVuY3Rpb24odGFyZ2V0W3Byb3BlcnR5XSkgPyBfc2V0dGVyRnVuYyA6IF9pc1VuZGVmaW5lZCh0YXJnZXRbcHJvcGVydHldKSAmJiB0YXJnZXQuc2V0QXR0cmlidXRlID8gX3NldHRlckF0dHJpYnV0ZSA6IF9zZXR0ZXJQbGFpbjtcbn0sXG4gICAgX3JlbmRlclBsYWluID0gZnVuY3Rpb24gX3JlbmRlclBsYWluKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDAwMCkgLyAxMDAwMDAwLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckJvb2xlYW4gPSBmdW5jdGlvbiBfcmVuZGVyQm9vbGVhbihyYXRpbywgZGF0YSkge1xuICByZXR1cm4gZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsICEhKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSwgZGF0YSk7XG59LFxuICAgIF9yZW5kZXJDb21wbGV4U3RyaW5nID0gZnVuY3Rpb24gX3JlbmRlckNvbXBsZXhTdHJpbmcocmF0aW8sIGRhdGEpIHtcbiAgdmFyIHB0ID0gZGF0YS5fcHQsXG4gICAgICBzID0gXCJcIjtcblxuICBpZiAoIXJhdGlvICYmIGRhdGEuYikge1xuICAgIC8vYiA9IGJlZ2lubmluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5iO1xuICB9IGVsc2UgaWYgKHJhdGlvID09PSAxICYmIGRhdGEuZSkge1xuICAgIC8vZSA9IGVuZGluZyBzdHJpbmdcbiAgICBzID0gZGF0YS5lO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChwdCkge1xuICAgICAgcyA9IHB0LnAgKyAocHQubSA/IHB0Lm0ocHQucyArIHB0LmMgKiByYXRpbykgOiBNYXRoLnJvdW5kKChwdC5zICsgcHQuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwKSArIHM7IC8vd2UgdXNlIHRoZSBcInBcIiBwcm9wZXJ0eSBmb3IgdGhlIHRleHQgaW5iZXR3ZWVuIChsaWtlIGEgc3VmZml4KS4gQW5kIGluIHRoZSBjb250ZXh0IG9mIGEgY29tcGxleCBzdHJpbmcsIHRoZSBtb2RpZmllciAobSkgaXMgdHlwaWNhbGx5IGp1c3QgTWF0aC5yb3VuZCgpLCBsaWtlIGZvciBSR0IgY29sb3JzLlxuXG4gICAgICBwdCA9IHB0Ll9uZXh0O1xuICAgIH1cblxuICAgIHMgKz0gZGF0YS5jOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgY2h1bmsgb2Ygbm9uLW51bWVyaWMgdGV4dC5cbiAgfVxuXG4gIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCBzLCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlclByb3BUd2VlbnMgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFR3ZWVucyhyYXRpbywgZGF0YSkge1xuICB2YXIgcHQgPSBkYXRhLl9wdDtcblxuICB3aGlsZSAocHQpIHtcbiAgICBwdC5yKHJhdGlvLCBwdC5kKTtcbiAgICBwdCA9IHB0Ll9uZXh0O1xuICB9XG59LFxuICAgIF9hZGRQbHVnaW5Nb2RpZmllciA9IGZ1bmN0aW9uIF9hZGRQbHVnaW5Nb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcbiAgICBwdC5wID09PSBwcm9wZXJ0eSAmJiBwdC5tb2RpZmllcihtb2RpZmllciwgdHdlZW4sIHRhcmdldCk7XG4gICAgcHQgPSBuZXh0O1xuICB9XG59LFxuICAgIF9raWxsUHJvcFR3ZWVuc09mID0gZnVuY3Rpb24gX2tpbGxQcm9wVHdlZW5zT2YocHJvcGVydHkpIHtcbiAgdmFyIHB0ID0gdGhpcy5fcHQsXG4gICAgICBoYXNOb25EZXBlbmRlbnRSZW1haW5pbmcsXG4gICAgICBuZXh0O1xuXG4gIHdoaWxlIChwdCkge1xuICAgIG5leHQgPSBwdC5fbmV4dDtcblxuICAgIGlmIChwdC5wID09PSBwcm9wZXJ0eSAmJiAhcHQub3AgfHwgcHQub3AgPT09IHByb3BlcnR5KSB7XG4gICAgICBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0odGhpcywgcHQsIFwiX3B0XCIpO1xuICAgIH0gZWxzZSBpZiAoIXB0LmRlcCkge1xuICAgICAgaGFzTm9uRGVwZW5kZW50UmVtYWluaW5nID0gMTtcbiAgICB9XG5cbiAgICBwdCA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gIWhhc05vbkRlcGVuZGVudFJlbWFpbmluZztcbn0sXG4gICAgX3NldHRlcldpdGhNb2RpZmllciA9IGZ1bmN0aW9uIF9zZXR0ZXJXaXRoTW9kaWZpZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEpIHtcbiAgZGF0YS5tU2V0KHRhcmdldCwgcHJvcGVydHksIGRhdGEubS5jYWxsKGRhdGEudHdlZW4sIHZhbHVlLCBkYXRhLm10KSwgZGF0YSk7XG59LFxuICAgIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkgPSBmdW5jdGlvbiBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5KHBhcmVudCkge1xuICB2YXIgcHQgPSBwYXJlbnQuX3B0LFxuICAgICAgbmV4dCxcbiAgICAgIHB0MixcbiAgICAgIGZpcnN0LFxuICAgICAgbGFzdDsgLy9zb3J0cyB0aGUgUHJvcFR3ZWVuIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByaW9yaXR5IGJlY2F1c2Ugc29tZSBwbHVnaW5zIG5lZWQgdG8gZG8gdGhlaXIgd29yayBhZnRlciBBTEwgb2YgdGhlIFByb3BUd2VlbnMgd2VyZSBjcmVhdGVkIChsaWtlIFJvdW5kUHJvcHNQbHVnaW4gYW5kIE1vZGlmaWVyc1BsdWdpbilcblxuICB3aGlsZSAocHQpIHtcbiAgICBuZXh0ID0gcHQuX25leHQ7XG4gICAgcHQyID0gZmlyc3Q7XG5cbiAgICB3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG4gICAgICBwdDIgPSBwdDIuX25leHQ7XG4gICAgfVxuXG4gICAgaWYgKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkge1xuICAgICAgcHQuX3ByZXYuX25leHQgPSBwdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlyc3QgPSBwdDtcbiAgICB9XG5cbiAgICBpZiAocHQuX25leHQgPSBwdDIpIHtcbiAgICAgIHB0Mi5fcHJldiA9IHB0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gcHQ7XG4gICAgfVxuXG4gICAgcHQgPSBuZXh0O1xuICB9XG5cbiAgcGFyZW50Ll9wdCA9IGZpcnN0O1xufTsgLy9Qcm9wVHdlZW4ga2V5OiB0ID0gdGFyZ2V0LCBwID0gcHJvcCwgciA9IHJlbmRlcmVyLCBkID0gZGF0YSwgcyA9IHN0YXJ0LCBjID0gY2hhbmdlLCBvcCA9IG92ZXJ3cml0ZVByb3BlcnR5IChPTkxZIHBvcHVsYXRlZCB3aGVuIGl0J3MgZGlmZmVyZW50IHRoYW4gcCksIHByID0gcHJpb3JpdHksIF9uZXh0L19wcmV2IGZvciB0aGUgbGlua2VkIGxpc3Qgc2libGluZ3MsIHNldCA9IHNldHRlciwgbSA9IG1vZGlmaWVyLCBtU2V0ID0gbW9kaWZpZXJTZXR0ZXIgKHRoZSBvcmlnaW5hbCBzZXR0ZXIsIGJlZm9yZSBhIG1vZGlmaWVyIHdhcyBhZGRlZClcblxuXG5leHBvcnQgdmFyIFByb3BUd2VlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb3BUd2VlbihuZXh0LCB0YXJnZXQsIHByb3AsIHN0YXJ0LCBjaGFuZ2UsIHJlbmRlcmVyLCBkYXRhLCBzZXR0ZXIsIHByaW9yaXR5KSB7XG4gICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgIHRoaXMucyA9IHN0YXJ0O1xuICAgIHRoaXMuYyA9IGNoYW5nZTtcbiAgICB0aGlzLnAgPSBwcm9wO1xuICAgIHRoaXMuciA9IHJlbmRlcmVyIHx8IF9yZW5kZXJQbGFpbjtcbiAgICB0aGlzLmQgPSBkYXRhIHx8IHRoaXM7XG4gICAgdGhpcy5zZXQgPSBzZXR0ZXIgfHwgX3NldHRlclBsYWluO1xuICAgIHRoaXMucHIgPSBwcmlvcml0eSB8fCAwO1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xuXG4gICAgaWYgKG5leHQpIHtcbiAgICAgIG5leHQuX3ByZXYgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gUHJvcFR3ZWVuLnByb3RvdHlwZTtcblxuICBfcHJvdG80Lm1vZGlmaWVyID0gZnVuY3Rpb24gbW9kaWZpZXIoZnVuYywgdHdlZW4sIHRhcmdldCkge1xuICAgIHRoaXMubVNldCA9IHRoaXMubVNldCB8fCB0aGlzLnNldDsgLy9pbiBjYXNlIGl0IHdhcyBhbHJlYWR5IHNldCAoYSBQcm9wVHdlZW4gY2FuIG9ubHkgaGF2ZSBvbmUgbW9kaWZpZXIpXG5cbiAgICB0aGlzLnNldCA9IF9zZXR0ZXJXaXRoTW9kaWZpZXI7XG4gICAgdGhpcy5tID0gZnVuYztcbiAgICB0aGlzLm10ID0gdGFyZ2V0OyAvL21vZGlmaWVyIHRhcmdldFxuXG4gICAgdGhpcy50d2VlbiA9IHR3ZWVuO1xuICB9O1xuXG4gIHJldHVybiBQcm9wVHdlZW47XG59KCk7IC8vSW5pdGlhbGl6YXRpb24gdGFza3NcblxuX2ZvckVhY2hOYW1lKF9jYWxsYmFja05hbWVzICsgXCJwYXJlbnQsZHVyYXRpb24sZWFzZSxkZWxheSxvdmVyd3JpdGUscnVuQmFja3dhcmRzLHN0YXJ0QXQseW95byxpbW1lZGlhdGVSZW5kZXIscmVwZWF0LHJlcGVhdERlbGF5LGRhdGEscGF1c2VkLHJldmVyc2VkLGxhenksY2FsbGJhY2tTY29wZSxzdHJpbmdGaWx0ZXIsaWQseW95b0Vhc2Usc3RhZ2dlcixpbmhlcml0LHJlcGVhdFJlZnJlc2gsa2V5ZnJhbWVzLGF1dG9SZXZlcnQsc2Nyb2xsVHJpZ2dlclwiLCBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gX3Jlc2VydmVkUHJvcHNbbmFtZV0gPSAxO1xufSk7XG5cbl9nbG9iYWxzLlR3ZWVuTWF4ID0gX2dsb2JhbHMuVHdlZW5MaXRlID0gVHdlZW47XG5fZ2xvYmFscy5UaW1lbGluZUxpdGUgPSBfZ2xvYmFscy5UaW1lbGluZU1heCA9IFRpbWVsaW5lO1xuX2dsb2JhbFRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKHtcbiAgc29ydENoaWxkcmVuOiBmYWxzZSxcbiAgZGVmYXVsdHM6IF9kZWZhdWx0cyxcbiAgYXV0b1JlbW92ZUNoaWxkcmVuOiB0cnVlLFxuICBpZDogXCJyb290XCIsXG4gIHNtb290aENoaWxkVGltaW5nOiB0cnVlXG59KTtcbl9jb25maWcuc3RyaW5nRmlsdGVyID0gX2NvbG9yU3RyaW5nRmlsdGVyO1xuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBHU0FQXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbnZhciBfZ3NhcCA9IHtcbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2luKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICByZXR1cm4gX2NyZWF0ZVBsdWdpbihjb25maWcpO1xuICAgIH0pO1xuICB9LFxuICB0aW1lbGluZTogZnVuY3Rpb24gdGltZWxpbmUodmFycykge1xuICAgIHJldHVybiBuZXcgVGltZWxpbmUodmFycyk7XG4gIH0sXG4gIGdldFR3ZWVuc09mOiBmdW5jdGlvbiBnZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRUd2VlbnNPZih0YXJnZXRzLCBvbmx5QWN0aXZlKTtcbiAgfSxcbiAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpIHtcbiAgICBfaXNTdHJpbmcodGFyZ2V0KSAmJiAodGFyZ2V0ID0gdG9BcnJheSh0YXJnZXQpWzBdKTsgLy9pbiBjYXNlIHNlbGVjdG9yIHRleHQgb3IgYW4gYXJyYXkgaXMgcGFzc2VkIGluXG5cbiAgICB2YXIgZ2V0dGVyID0gX2dldENhY2hlKHRhcmdldCB8fCB7fSkuZ2V0LFxuICAgICAgICBmb3JtYXQgPSB1bml0ID8gX3Bhc3NUaHJvdWdoIDogX251bWVyaWNJZlBvc3NpYmxlO1xuXG4gICAgdW5pdCA9PT0gXCJuYXRpdmVcIiAmJiAodW5pdCA9IFwiXCIpO1xuICAgIHJldHVybiAhdGFyZ2V0ID8gdGFyZ2V0IDogIXByb3BlcnR5ID8gZnVuY3Rpb24gKHByb3BlcnR5LCB1bml0LCB1bmNhY2hlKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgICB9IDogZm9ybWF0KChfcGx1Z2luc1twcm9wZXJ0eV0gJiYgX3BsdWdpbnNbcHJvcGVydHldLmdldCB8fCBnZXR0ZXIpKHRhcmdldCwgcHJvcGVydHksIHVuaXQsIHVuY2FjaGUpKTtcbiAgfSxcbiAgcXVpY2tTZXR0ZXI6IGZ1bmN0aW9uIHF1aWNrU2V0dGVyKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHtcbiAgICB0YXJnZXQgPSB0b0FycmF5KHRhcmdldCk7XG5cbiAgICBpZiAodGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBzZXR0ZXJzID0gdGFyZ2V0Lm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gZ3NhcC5xdWlja1NldHRlcih0LCBwcm9wZXJ0eSwgdW5pdCk7XG4gICAgICB9KSxcbiAgICAgICAgICBsID0gc2V0dGVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpID0gbDtcblxuICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgc2V0dGVyc1tpXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0WzBdIHx8IHt9O1xuXG4gICAgdmFyIFBsdWdpbiA9IF9wbHVnaW5zW3Byb3BlcnR5XSxcbiAgICAgICAgY2FjaGUgPSBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgICAgcCA9IGNhY2hlLmhhcm5lc3MgJiYgKGNhY2hlLmhhcm5lc3MuYWxpYXNlcyB8fCB7fSlbcHJvcGVydHldIHx8IHByb3BlcnR5LFxuICAgICAgICAvLyBpbiBjYXNlIGl0J3MgYW4gYWxpYXMsIGxpa2UgXCJyb3RhdGVcIiBmb3IgXCJyb3RhdGlvblwiLlxuICAgIHNldHRlciA9IFBsdWdpbiA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFyIHAgPSBuZXcgUGx1Z2luKCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgPSAwO1xuICAgICAgcC5pbml0KHRhcmdldCwgdW5pdCA/IHZhbHVlICsgdW5pdCA6IHZhbHVlLCBfcXVpY2tUd2VlbiwgMCwgW3RhcmdldF0pO1xuICAgICAgcC5yZW5kZXIoMSwgcCk7XG4gICAgICBfcXVpY2tUd2Vlbi5fcHQgJiYgX3JlbmRlclByb3BUd2VlbnMoMSwgX3F1aWNrVHdlZW4pO1xuICAgIH0gOiBjYWNoZS5zZXQodGFyZ2V0LCBwKTtcblxuICAgIHJldHVybiBQbHVnaW4gPyBzZXR0ZXIgOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBzZXR0ZXIodGFyZ2V0LCBwLCB1bml0ID8gdmFsdWUgKyB1bml0IDogdmFsdWUsIGNhY2hlLCAxKTtcbiAgICB9O1xuICB9LFxuICBpc1R3ZWVuaW5nOiBmdW5jdGlvbiBpc1R3ZWVuaW5nKHRhcmdldHMpIHtcbiAgICByZXR1cm4gX2dsb2JhbFRpbWVsaW5lLmdldFR3ZWVuc09mKHRhcmdldHMsIHRydWUpLmxlbmd0aCA+IDA7XG4gIH0sXG4gIGRlZmF1bHRzOiBmdW5jdGlvbiBkZWZhdWx0cyh2YWx1ZSkge1xuICAgIHZhbHVlICYmIHZhbHVlLmVhc2UgJiYgKHZhbHVlLmVhc2UgPSBfcGFyc2VFYXNlKHZhbHVlLmVhc2UsIF9kZWZhdWx0cy5lYXNlKSk7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2RlZmF1bHRzLCB2YWx1ZSB8fCB7fSk7XG4gIH0sXG4gIGNvbmZpZzogZnVuY3Rpb24gY29uZmlnKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9tZXJnZURlZXAoX2NvbmZpZywgdmFsdWUgfHwge30pO1xuICB9LFxuICByZWdpc3RlckVmZmVjdDogZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoX3JlZjMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdCxcbiAgICAgICAgcGx1Z2lucyA9IF9yZWYzLnBsdWdpbnMsXG4gICAgICAgIGRlZmF1bHRzID0gX3JlZjMuZGVmYXVsdHMsXG4gICAgICAgIGV4dGVuZFRpbWVsaW5lID0gX3JlZjMuZXh0ZW5kVGltZWxpbmU7XG4gICAgKHBsdWdpbnMgfHwgXCJcIikuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbk5hbWUpIHtcbiAgICAgIHJldHVybiBwbHVnaW5OYW1lICYmICFfcGx1Z2luc1twbHVnaW5OYW1lXSAmJiAhX2dsb2JhbHNbcGx1Z2luTmFtZV0gJiYgX3dhcm4obmFtZSArIFwiIGVmZmVjdCByZXF1aXJlcyBcIiArIHBsdWdpbk5hbWUgKyBcIiBwbHVnaW4uXCIpO1xuICAgIH0pO1xuXG4gICAgX2VmZmVjdHNbbmFtZV0gPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycywgdGwpIHtcbiAgICAgIHJldHVybiBlZmZlY3QodG9BcnJheSh0YXJnZXRzKSwgX3NldERlZmF1bHRzKHZhcnMgfHwge30sIGRlZmF1bHRzKSwgdGwpO1xuICAgIH07XG5cbiAgICBpZiAoZXh0ZW5kVGltZWxpbmUpIHtcbiAgICAgIFRpbWVsaW5lLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICh0YXJnZXRzLCB2YXJzLCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoX2VmZmVjdHNbbmFtZV0odGFyZ2V0cywgX2lzT2JqZWN0KHZhcnMpID8gdmFycyA6IChwb3NpdGlvbiA9IHZhcnMpICYmIHt9LCB0aGlzKSwgcG9zaXRpb24pO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIHJlZ2lzdGVyRWFzZTogZnVuY3Rpb24gcmVnaXN0ZXJFYXNlKG5hbWUsIGVhc2UpIHtcbiAgICBfZWFzZU1hcFtuYW1lXSA9IF9wYXJzZUVhc2UoZWFzZSk7XG4gIH0sXG4gIHBhcnNlRWFzZTogZnVuY3Rpb24gcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfcGFyc2VFYXNlKGVhc2UsIGRlZmF1bHRFYXNlKSA6IF9lYXNlTWFwO1xuICB9LFxuICBnZXRCeUlkOiBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIF9nbG9iYWxUaW1lbGluZS5nZXRCeUlkKGlkKTtcbiAgfSxcbiAgZXhwb3J0Um9vdDogZnVuY3Rpb24gZXhwb3J0Um9vdCh2YXJzLCBpbmNsdWRlRGVsYXllZENhbGxzKSB7XG4gICAgaWYgKHZhcnMgPT09IHZvaWQgMCkge1xuICAgICAgdmFycyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB0bCA9IG5ldyBUaW1lbGluZSh2YXJzKSxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG5leHQ7XG4gICAgdGwuc21vb3RoQ2hpbGRUaW1pbmcgPSBfaXNOb3RGYWxzZSh2YXJzLnNtb290aENoaWxkVGltaW5nKTtcblxuICAgIF9nbG9iYWxUaW1lbGluZS5yZW1vdmUodGwpO1xuXG4gICAgdGwuX2RwID0gMDsgLy9vdGhlcndpc2UgaXQnbGwgZ2V0IHJlLWFjdGl2YXRlZCB3aGVuIGFkZGluZyBjaGlsZHJlbiBhbmQgYmUgcmUtaW50cm9kdWNlZCBpbnRvIF9nbG9iYWxUaW1lbGluZSdzIGxpbmtlZCBsaXN0ICh0aGVuIGFkZGVkIHRvIGl0c2VsZikuXG5cbiAgICB0bC5fdGltZSA9IHRsLl90VGltZSA9IF9nbG9iYWxUaW1lbGluZS5fdGltZTtcbiAgICBjaGlsZCA9IF9nbG9iYWxUaW1lbGluZS5fZmlyc3Q7XG5cbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIG5leHQgPSBjaGlsZC5fbmV4dDtcblxuICAgICAgaWYgKGluY2x1ZGVEZWxheWVkQ2FsbHMgfHwgISghY2hpbGQuX2R1ciAmJiBjaGlsZCBpbnN0YW5jZW9mIFR3ZWVuICYmIGNoaWxkLnZhcnMub25Db21wbGV0ZSA9PT0gY2hpbGQuX3RhcmdldHNbMF0pKSB7XG4gICAgICAgIF9hZGRUb1RpbWVsaW5lKHRsLCBjaGlsZCwgY2hpbGQuX3N0YXJ0IC0gY2hpbGQuX2RlbGF5KTtcbiAgICAgIH1cblxuICAgICAgY2hpbGQgPSBuZXh0O1xuICAgIH1cblxuICAgIF9hZGRUb1RpbWVsaW5lKF9nbG9iYWxUaW1lbGluZSwgdGwsIDApO1xuXG4gICAgcmV0dXJuIHRsO1xuICB9LFxuICB1dGlsczoge1xuICAgIHdyYXA6IHdyYXAsXG4gICAgd3JhcFlveW86IHdyYXBZb3lvLFxuICAgIGRpc3RyaWJ1dGU6IGRpc3RyaWJ1dGUsXG4gICAgcmFuZG9tOiByYW5kb20sXG4gICAgc25hcDogc25hcCxcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICBnZXRVbml0OiBnZXRVbml0LFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBzcGxpdENvbG9yOiBzcGxpdENvbG9yLFxuICAgIHRvQXJyYXk6IHRvQXJyYXksXG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIG1hcFJhbmdlOiBtYXBSYW5nZSxcbiAgICBwaXBlOiBwaXBlLFxuICAgIHVuaXRpemU6IHVuaXRpemUsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgIHNodWZmbGU6IHNodWZmbGVcbiAgfSxcbiAgaW5zdGFsbDogX2luc3RhbGwsXG4gIGVmZmVjdHM6IF9lZmZlY3RzLFxuICB0aWNrZXI6IF90aWNrZXIsXG4gIHVwZGF0ZVJvb3Q6IFRpbWVsaW5lLnVwZGF0ZVJvb3QsXG4gIHBsdWdpbnM6IF9wbHVnaW5zLFxuICBnbG9iYWxUaW1lbGluZTogX2dsb2JhbFRpbWVsaW5lLFxuICBjb3JlOiB7XG4gICAgUHJvcFR3ZWVuOiBQcm9wVHdlZW4sXG4gICAgZ2xvYmFsczogX2FkZEdsb2JhbCxcbiAgICBUd2VlbjogVHdlZW4sXG4gICAgVGltZWxpbmU6IFRpbWVsaW5lLFxuICAgIEFuaW1hdGlvbjogQW5pbWF0aW9uLFxuICAgIGdldENhY2hlOiBfZ2V0Q2FjaGUsXG4gICAgX3JlbW92ZUxpbmtlZExpc3RJdGVtOiBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0sXG4gICAgc3VwcHJlc3NPdmVyd3JpdGVzOiBmdW5jdGlvbiBzdXBwcmVzc092ZXJ3cml0ZXModmFsdWUpIHtcbiAgICAgIHJldHVybiBfc3VwcHJlc3NPdmVyd3JpdGVzID0gdmFsdWU7XG4gICAgfVxuICB9XG59O1xuXG5fZm9yRWFjaE5hbWUoXCJ0byxmcm9tLGZyb21UbyxkZWxheWVkQ2FsbCxzZXQsa2lsbFR3ZWVuc09mXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBfZ3NhcFtuYW1lXSA9IFR3ZWVuW25hbWVdO1xufSk7XG5cbl90aWNrZXIuYWRkKFRpbWVsaW5lLnVwZGF0ZVJvb3QpO1xuXG5fcXVpY2tUd2VlbiA9IF9nc2FwLnRvKHt9LCB7XG4gIGR1cmF0aW9uOiAwXG59KTsgLy8gLS0tLSBFWFRSQSBQTFVHSU5TIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBfZ2V0UGx1Z2luUHJvcFR3ZWVuID0gZnVuY3Rpb24gX2dldFBsdWdpblByb3BUd2VlbihwbHVnaW4sIHByb3ApIHtcbiAgdmFyIHB0ID0gcGx1Z2luLl9wdDtcblxuICB3aGlsZSAocHQgJiYgcHQucCAhPT0gcHJvcCAmJiBwdC5vcCAhPT0gcHJvcCAmJiBwdC5mcCAhPT0gcHJvcCkge1xuICAgIHB0ID0gcHQuX25leHQ7XG4gIH1cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9hZGRNb2RpZmllcnMgPSBmdW5jdGlvbiBfYWRkTW9kaWZpZXJzKHR3ZWVuLCBtb2RpZmllcnMpIHtcbiAgdmFyIHRhcmdldHMgPSB0d2Vlbi5fdGFyZ2V0cyxcbiAgICAgIHAsXG4gICAgICBpLFxuICAgICAgcHQ7XG5cbiAgZm9yIChwIGluIG1vZGlmaWVycykge1xuICAgIGkgPSB0YXJnZXRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHB0ID0gdHdlZW4uX3B0TG9va3VwW2ldW3BdO1xuXG4gICAgICBpZiAocHQgJiYgKHB0ID0gcHQuZCkpIHtcbiAgICAgICAgaWYgKHB0Ll9wdCkge1xuICAgICAgICAgIC8vIGlzIGEgcGx1Z2luXG4gICAgICAgICAgcHQgPSBfZ2V0UGx1Z2luUHJvcFR3ZWVuKHB0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB0ICYmIHB0Lm1vZGlmaWVyICYmIHB0Lm1vZGlmaWVyKG1vZGlmaWVyc1twXSwgdHdlZW4sIHRhcmdldHNbaV0sIHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfYnVpbGRNb2RpZmllclBsdWdpbiA9IGZ1bmN0aW9uIF9idWlsZE1vZGlmaWVyUGx1Z2luKG5hbWUsIG1vZGlmaWVyKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICByYXdWYXJzOiAxLFxuICAgIC8vZG9uJ3QgcHJlLXByb2Nlc3MgZnVuY3Rpb24tYmFzZWQgdmFsdWVzIG9yIFwicmFuZG9tKClcIiBzdHJpbmdzLlxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YXJzLCB0d2Vlbikge1xuICAgICAgdHdlZW4uX29uSW5pdCA9IGZ1bmN0aW9uICh0d2Vlbikge1xuICAgICAgICB2YXIgdGVtcCwgcDtcblxuICAgICAgICBpZiAoX2lzU3RyaW5nKHZhcnMpKSB7XG4gICAgICAgICAgdGVtcCA9IHt9O1xuXG4gICAgICAgICAgX2ZvckVhY2hOYW1lKHZhcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGVtcFtuYW1lXSA9IDE7XG4gICAgICAgICAgfSk7IC8vaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgdG8gcm91bmRQcm9wcywgbGlrZSBcIngseVwiLCB3ZSByb3VuZCB0byB3aG9sZSBudW1iZXJzLlxuXG5cbiAgICAgICAgICB2YXJzID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RpZmllcikge1xuICAgICAgICAgIHRlbXAgPSB7fTtcblxuICAgICAgICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICAgICAgICB0ZW1wW3BdID0gbW9kaWZpZXIodmFyc1twXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFycyA9IHRlbXA7XG4gICAgICAgIH1cblxuICAgICAgICBfYWRkTW9kaWZpZXJzKHR3ZWVuLCB2YXJzKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTsgLy9yZWdpc3RlciBjb3JlIHBsdWdpbnNcblxuXG5leHBvcnQgdmFyIGdzYXAgPSBfZ3NhcC5yZWdpc3RlclBsdWdpbih7XG4gIG5hbWU6IFwiYXR0clwiLFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHAsIHB0O1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIHB0ID0gdGhpcy5hZGQodGFyZ2V0LCBcInNldEF0dHJpYnV0ZVwiLCAodGFyZ2V0LmdldEF0dHJpYnV0ZShwKSB8fCAwKSArIFwiXCIsIHZhcnNbcF0sIGluZGV4LCB0YXJnZXRzLCAwLCAwLCBwKTtcbiAgICAgIHB0ICYmIChwdC5vcCA9IHApO1xuXG4gICAgICB0aGlzLl9wcm9wcy5wdXNoKHApO1xuICAgIH1cbiAgfVxufSwge1xuICBuYW1lOiBcImVuZEFycmF5XCIsXG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQodGFyZ2V0LCB2YWx1ZSkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5hZGQodGFyZ2V0LCBpLCB0YXJnZXRbaV0gfHwgMCwgdmFsdWVbaV0pO1xuICAgIH1cbiAgfVxufSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJyb3VuZFByb3BzXCIsIF9yb3VuZE1vZGlmaWVyKSwgX2J1aWxkTW9kaWZpZXJQbHVnaW4oXCJtb2RpZmllcnNcIiksIF9idWlsZE1vZGlmaWVyUGx1Z2luKFwic25hcFwiLCBzbmFwKSkgfHwgX2dzYXA7IC8vdG8gcHJldmVudCB0aGUgY29yZSBwbHVnaW5zIGZyb20gYmVpbmcgZHJvcHBlZCB2aWEgYWdncmVzc2l2ZSB0cmVlIHNoYWtpbmcsIHdlIG11c3QgaW5jbHVkZSB0aGVtIGluIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBpbiB0aGlzIHdheS5cblxuVHdlZW4udmVyc2lvbiA9IFRpbWVsaW5lLnZlcnNpb24gPSBnc2FwLnZlcnNpb24gPSBcIjMuOC4wXCI7XG5fY29yZVJlYWR5ID0gMTtcbl93aW5kb3dFeGlzdHMoKSAmJiBfd2FrZSgpO1xudmFyIFBvd2VyMCA9IF9lYXNlTWFwLlBvd2VyMCxcbiAgICBQb3dlcjEgPSBfZWFzZU1hcC5Qb3dlcjEsXG4gICAgUG93ZXIyID0gX2Vhc2VNYXAuUG93ZXIyLFxuICAgIFBvd2VyMyA9IF9lYXNlTWFwLlBvd2VyMyxcbiAgICBQb3dlcjQgPSBfZWFzZU1hcC5Qb3dlcjQsXG4gICAgTGluZWFyID0gX2Vhc2VNYXAuTGluZWFyLFxuICAgIFF1YWQgPSBfZWFzZU1hcC5RdWFkLFxuICAgIEN1YmljID0gX2Vhc2VNYXAuQ3ViaWMsXG4gICAgUXVhcnQgPSBfZWFzZU1hcC5RdWFydCxcbiAgICBRdWludCA9IF9lYXNlTWFwLlF1aW50LFxuICAgIFN0cm9uZyA9IF9lYXNlTWFwLlN0cm9uZyxcbiAgICBFbGFzdGljID0gX2Vhc2VNYXAuRWxhc3RpYyxcbiAgICBCYWNrID0gX2Vhc2VNYXAuQmFjayxcbiAgICBTdGVwcGVkRWFzZSA9IF9lYXNlTWFwLlN0ZXBwZWRFYXNlLFxuICAgIEJvdW5jZSA9IF9lYXNlTWFwLkJvdW5jZSxcbiAgICBTaW5lID0gX2Vhc2VNYXAuU2luZSxcbiAgICBFeHBvID0gX2Vhc2VNYXAuRXhwbyxcbiAgICBDaXJjID0gX2Vhc2VNYXAuQ2lyYztcbmV4cG9ydCB7IFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYyB9O1xuZXhwb3J0IHsgVHdlZW4gYXMgVHdlZW5NYXgsIFR3ZWVuIGFzIFR3ZWVuTGl0ZSwgVGltZWxpbmUgYXMgVGltZWxpbmVNYXgsIFRpbWVsaW5lIGFzIFRpbWVsaW5lTGl0ZSwgZ3NhcCBhcyBkZWZhdWx0LCB3cmFwLCB3cmFwWW95bywgZGlzdHJpYnV0ZSwgcmFuZG9tLCBzbmFwLCBub3JtYWxpemUsIGdldFVuaXQsIGNsYW1wLCBzcGxpdENvbG9yLCB0b0FycmF5LCBzZWxlY3RvciwgbWFwUmFuZ2UsIHBpcGUsIHVuaXRpemUsIGludGVycG9sYXRlLCBzaHVmZmxlIH07IC8vZXhwb3J0IHNvbWUgaW50ZXJuYWwgbWV0aG9kcy9vcm9qZWN0cyBmb3IgdXNlIGluIENTU1BsdWdpbiBzbyB0aGF0IHdlIGNhbiBleHRlcm5hbGl6ZSB0aGF0IGZpbGUgYW5kIGFsbG93IGN1c3RvbSBidWlsZHMgdGhhdCBleGNsdWRlIGl0LlxuXG5leHBvcnQgeyBfZ2V0UHJvcGVydHksIF9udW1FeHAsIF9udW1XaXRoVW5pdEV4cCwgX2lzU3RyaW5nLCBfaXNVbmRlZmluZWQsIF9yZW5kZXJDb21wbGV4U3RyaW5nLCBfcmVsRXhwLCBfc2V0RGVmYXVsdHMsIF9yZW1vdmVMaW5rZWRMaXN0SXRlbSwgX2ZvckVhY2hOYW1lLCBfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5LCBfY29sb3JTdHJpbmdGaWx0ZXIsIF9yZXBsYWNlUmFuZG9tLCBfY2hlY2tQbHVnaW4sIF9wbHVnaW5zLCBfdGlja2VyLCBfY29uZmlnLCBfcm91bmRNb2RpZmllciwgX3JvdW5kLCBfbWlzc2luZ1BsdWdpbiwgX2dldFNldHRlciwgX2dldENhY2hlLCBfY29sb3JFeHAgfTsiLCIvKiFcbiAqIENTU1BsdWdpbiAzLjguMFxuICogaHR0cHM6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMDgtMjAyMSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgYWdyZWVtZW50IGlzc3VlZCB3aXRoIHRoYXQgbWVtYmVyc2hpcC5cbiAqIEBhdXRob3I6IEphY2sgRG95bGUsIGphY2tAZ3JlZW5zb2NrLmNvbVxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IGdzYXAsIF9nZXRQcm9wZXJ0eSwgX251bUV4cCwgX251bVdpdGhVbml0RXhwLCBnZXRVbml0LCBfaXNTdHJpbmcsIF9pc1VuZGVmaW5lZCwgX3JlbmRlckNvbXBsZXhTdHJpbmcsIF9yZWxFeHAsIF9mb3JFYWNoTmFtZSwgX3NvcnRQcm9wVHdlZW5zQnlQcmlvcml0eSwgX2NvbG9yU3RyaW5nRmlsdGVyLCBfY2hlY2tQbHVnaW4sIF9yZXBsYWNlUmFuZG9tLCBfcGx1Z2lucywgR1NDYWNoZSwgUHJvcFR3ZWVuLCBfY29uZmlnLCBfdGlja2VyLCBfcm91bmQsIF9taXNzaW5nUGx1Z2luLCBfZ2V0U2V0dGVyLCBfZ2V0Q2FjaGUsIF9jb2xvckV4cCwgX3NldERlZmF1bHRzLCBfcmVtb3ZlTGlua2VkTGlzdEl0ZW0gLy9mb3IgdGhlIGNvbW1lbnRlZC1vdXQgY2xhc3NOYW1lIGZlYXR1cmUuXG59IGZyb20gXCIuL2dzYXAtY29yZS5qc1wiO1xuXG52YXIgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbGVtZW50LFxuICAgIF9wbHVnaW5Jbml0dGVkLFxuICAgIF90ZW1wRGl2LFxuICAgIF90ZW1wRGl2U3R5bGVyLFxuICAgIF9yZWNlbnRTZXR0ZXJQbHVnaW4sXG4gICAgX3dpbmRvd0V4aXN0cyA9IGZ1bmN0aW9uIF93aW5kb3dFeGlzdHMoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiO1xufSxcbiAgICBfdHJhbnNmb3JtUHJvcHMgPSB7fSxcbiAgICBfUkFEMkRFRyA9IDE4MCAvIE1hdGguUEksXG4gICAgX0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuICAgIF9hdGFuMiA9IE1hdGguYXRhbjIsXG4gICAgX2JpZ051bSA9IDFlOCxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX2hvcml6b250YWxFeHAgPSAvKD86bGVmdHxyaWdodHx3aWR0aHxtYXJnaW58cGFkZGluZ3x4KS9pLFxuICAgIF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXVxcUy8sXG4gICAgX3Byb3BlcnR5QWxpYXNlcyA9IHtcbiAgYXV0b0FscGhhOiBcIm9wYWNpdHksdmlzaWJpbGl0eVwiLFxuICBzY2FsZTogXCJzY2FsZVgsc2NhbGVZXCIsXG4gIGFscGhhOiBcIm9wYWNpdHlcIlxufSxcbiAgICBfcmVuZGVyQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJDU1NQcm9wKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgTWF0aC5yb3VuZCgoZGF0YS5zICsgZGF0YS5jICogcmF0aW8pICogMTAwMDApIC8gMTAwMDAgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyUHJvcFdpdGhFbmQgPSBmdW5jdGlvbiBfcmVuZGVyUHJvcFdpdGhFbmQocmF0aW8sIGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEuc2V0KGRhdGEudCwgZGF0YS5wLCByYXRpbyA9PT0gMSA/IGRhdGEuZSA6IE1hdGgucm91bmQoKGRhdGEucyArIGRhdGEuYyAqIHJhdGlvKSAqIDEwMDAwKSAvIDEwMDAwICsgZGF0YS51LCBkYXRhKTtcbn0sXG4gICAgX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nID0gZnVuY3Rpb24gX3JlbmRlckNTU1Byb3BXaXRoQmVnaW5uaW5nKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBNYXRoLnJvdW5kKChkYXRhLnMgKyBkYXRhLmMgKiByYXRpbykgKiAxMDAwMCkgLyAxMDAwMCArIGRhdGEudSA6IGRhdGEuYiwgZGF0YSk7XG59LFxuICAgIC8vaWYgdW5pdHMgY2hhbmdlLCB3ZSBuZWVkIGEgd2F5IHRvIHJlbmRlciB0aGUgb3JpZ2luYWwgdW5pdC92YWx1ZSB3aGVuIHRoZSB0d2VlbiBnb2VzIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZyAocmF0aW86MClcbl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCA9IGZ1bmN0aW9uIF9yZW5kZXJSb3VuZGVkQ1NTUHJvcChyYXRpbywgZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLnMgKyBkYXRhLmMgKiByYXRpbztcbiAgZGF0YS5zZXQoZGF0YS50LCBkYXRhLnAsIH5+KHZhbHVlICsgKHZhbHVlIDwgMCA/IC0uNSA6IC41KSkgKyBkYXRhLnUsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gPyBkYXRhLmUgOiBkYXRhLmIsIGRhdGEpO1xufSxcbiAgICBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA9IGZ1bmN0aW9uIF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlT25seUF0RW5kKHJhdGlvLCBkYXRhKSB7XG4gIHJldHVybiBkYXRhLnNldChkYXRhLnQsIGRhdGEucCwgcmF0aW8gIT09IDEgPyBkYXRhLmIgOiBkYXRhLmUsIGRhdGEpO1xufSxcbiAgICBfc2V0dGVyQ1NTU3R5bGUgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTU3R5bGUodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgcmV0dXJuIHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlckNTU1Byb3AgPSBmdW5jdGlvbiBfc2V0dGVyQ1NTUHJvcCh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5LCB2YWx1ZSk7XG59LFxuICAgIF9zZXR0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfc2V0dGVyVHJhbnNmb3JtKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiB0YXJnZXQuX2dzYXBbcHJvcGVydHldID0gdmFsdWU7XG59LFxuICAgIF9zZXR0ZXJTY2FsZSA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZSh0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gdGFyZ2V0Ll9nc2FwLnNjYWxlWCA9IHRhcmdldC5fZ3NhcC5zY2FsZVkgPSB2YWx1ZTtcbn0sXG4gICAgX3NldHRlclNjYWxlV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJTY2FsZVdpdGhSZW5kZXIodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIGRhdGEsIHJhdGlvKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgY2FjaGUuc2NhbGVYID0gY2FjaGUuc2NhbGVZID0gdmFsdWU7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybShyYXRpbywgY2FjaGUpO1xufSxcbiAgICBfc2V0dGVyVHJhbnNmb3JtV2l0aFJlbmRlciA9IGZ1bmN0aW9uIF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCBkYXRhLCByYXRpbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXA7XG4gIGNhY2hlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0ocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3RyYW5zZm9ybVByb3AgPSBcInRyYW5zZm9ybVwiLFxuICAgIF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX3RyYW5zZm9ybVByb3AgKyBcIk9yaWdpblwiLFxuICAgIF9zdXBwb3J0czNELFxuICAgIF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQodHlwZSwgbnMpIHtcbiAgdmFyIGUgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKChucyB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIikucmVwbGFjZSgvXmh0dHBzLywgXCJodHRwXCIpLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIHNlcnZlcnMgc3dhcCBpbiBodHRwcyBmb3IgaHR0cCBpbiB0aGUgbmFtZXNwYWNlIHdoaWNoIGNhbiBicmVhayB0aGluZ3MsIG1ha2luZyBcInN0eWxlXCIgaW5hY2Nlc3NpYmxlLlxuXG4gIHJldHVybiBlLnN0eWxlID8gZSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy9zb21lIGVudmlyb25tZW50cyB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIGVsZW1lbnQncyBzdHlsZSB3aGVuIGNyZWF0ZWQgd2l0aCBhIG5hbWVzcGFjZSBpbiB3aGljaCBjYXNlIHdlIGRlZmF1bHQgdG8gdGhlIHN0YW5kYXJkIGNyZWF0ZUVsZW1lbnQoKSB0byB3b3JrIGFyb3VuZCB0aGUgaXNzdWUuIEFsc28gbm90ZSB0aGF0IHdoZW4gR1NBUCBpcyBlbWJlZGRlZCBkaXJlY3RseSBpbnNpZGUgYW4gU1ZHIGZpbGUsIGNyZWF0ZUVsZW1lbnQoKSB3b24ndCBhbGxvdyBhY2Nlc3MgdG8gdGhlIHN0eWxlIG9iamVjdCBpbiBGaXJlZm94IChzZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDIxNS1wcm9ibGVtLXVzaW5nLXR3ZWVubWF4LWluLXN0YW5kYWxvbmUtc2VsZi1jb250YWluaW5nLXN2Zy1maWxlLWVyci1jYW5ub3Qtc2V0LXByb3BlcnR5LWNzc3RleHQtb2YtdW5kZWZpbmVkLykuXG59LFxuICAgIF9nZXRDb21wdXRlZFByb3BlcnR5ID0gZnVuY3Rpb24gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgc2tpcFByZWZpeEZhbGxiYWNrKSB7XG4gIHZhciBjcyA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KTtcbiAgcmV0dXJuIGNzW3Byb3BlcnR5XSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHx8ICFza2lwUHJlZml4RmFsbGJhY2sgJiYgX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfY2hlY2tQcm9wUHJlZml4KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSwgMSkgfHwgXCJcIjsgLy9jc3MgdmFyaWFibGVzIG1heSBub3QgbmVlZCBjYXBzIHN3YXBwZWQgb3V0IGZvciBkYXNoZXMgYW5kIGxvd2VyY2FzZS5cbn0sXG4gICAgX3ByZWZpeGVzID0gXCJPLE1veixtcyxNcyxXZWJraXRcIi5zcGxpdChcIixcIiksXG4gICAgX2NoZWNrUHJvcFByZWZpeCA9IGZ1bmN0aW9uIF9jaGVja1Byb3BQcmVmaXgocHJvcGVydHksIGVsZW1lbnQsIHByZWZlclByZWZpeCkge1xuICB2YXIgZSA9IGVsZW1lbnQgfHwgX3RlbXBEaXYsXG4gICAgICBzID0gZS5zdHlsZSxcbiAgICAgIGkgPSA1O1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBzICYmICFwcmVmZXJQcmVmaXgpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cblxuICBwcm9wZXJ0eSA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc3Vic3RyKDEpO1xuXG4gIHdoaWxlIChpLS0gJiYgIShfcHJlZml4ZXNbaV0gKyBwcm9wZXJ0eSBpbiBzKSkge31cblxuICByZXR1cm4gaSA8IDAgPyBudWxsIDogKGkgPT09IDMgPyBcIm1zXCIgOiBpID49IDAgPyBfcHJlZml4ZXNbaV0gOiBcIlwiKSArIHByb3BlcnR5O1xufSxcbiAgICBfaW5pdENvcmUgPSBmdW5jdGlvbiBfaW5pdENvcmUoKSB7XG4gIGlmIChfd2luZG93RXhpc3RzKCkgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgX3dpbiA9IHdpbmRvdztcbiAgICBfZG9jID0gX3dpbi5kb2N1bWVudDtcbiAgICBfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIikgfHwge1xuICAgICAgc3R5bGU6IHt9XG4gICAgfTtcbiAgICBfdGVtcERpdlN0eWxlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChfdHJhbnNmb3JtUHJvcCk7XG4gICAgX3RyYW5zZm9ybU9yaWdpblByb3AgPSBfdHJhbnNmb3JtUHJvcCArIFwiT3JpZ2luXCI7XG4gICAgX3RlbXBEaXYuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyLXdpZHRoOjA7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjphYnNvbHV0ZTtwYWRkaW5nOjBcIjsgLy9tYWtlIHN1cmUgdG8gb3ZlcnJpZGUgY2VydGFpbiBwcm9wZXJ0aWVzIHRoYXQgbWF5IGNvbnRhbWluYXRlIG1lYXN1cmVtZW50cywgaW4gY2FzZSB0aGUgdXNlciBoYXMgb3ZlcnJlYWNoaW5nIHN0eWxlIHNoZWV0cy5cblxuICAgIF9zdXBwb3J0czNEID0gISFfY2hlY2tQcm9wUHJlZml4KFwicGVyc3BlY3RpdmVcIik7XG4gICAgX3BsdWdpbkluaXR0ZWQgPSAxO1xuICB9XG59LFxuICAgIF9nZXRCQm94SGFjayA9IGZ1bmN0aW9uIF9nZXRCQm94SGFjayhzd2FwSWZQb3NzaWJsZSkge1xuICAvL3dvcmtzIGFyb3VuZCBpc3N1ZXMgaW4gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB0aGF0IGRvbid0IGNvcnJlY3RseSByZXBvcnQgZ2V0QkJveCgpIG9uIFNWRyBlbGVtZW50cyBpbnNpZGUgYSA8ZGVmcz4gZWxlbWVudCBhbmQvb3IgPG1hc2s+LiBXZSB0cnkgY3JlYXRpbmcgYW4gU1ZHLCBhZGRpbmcgaXQgdG8gdGhlIGRvY3VtZW50RWxlbWVudCBhbmQgdG9zcyB0aGUgZWxlbWVudCBpbiB0aGVyZSBzbyB0aGF0IGl0J3MgZGVmaW5pdGVseSBwYXJ0IG9mIHRoZSByZW5kZXJpbmcgdHJlZSwgdGhlbiBncmFiIHRoZSBiYm94IGFuZCBpZiBpdCB3b3Jrcywgd2UgYWN0dWFsbHkgc3dhcCBvdXQgdGhlIG9yaWdpbmFsIGdldEJCb3goKSBtZXRob2QgZm9yIG91ciBvd24gdGhhdCBkb2VzIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW5ldmVyIGdldEJCb3ggaXMgbmVlZGVkLiBUaGlzIGhlbHBzIGVuc3VyZSB0aGF0IHBlcmZvcm1hbmNlIGlzIG9wdGltYWwgKG9ubHkgZG8gYWxsIHRoZXNlIGV4dHJhIHN0ZXBzIHdoZW4gYWJzb2x1dGVseSBuZWNlc3NhcnkuLi5tb3N0IGVsZW1lbnRzIGRvbid0IG5lZWQgaXQpLlxuICB2YXIgc3ZnID0gX2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgdGhpcy5vd25lclNWR0VsZW1lbnQgJiYgdGhpcy5vd25lclNWR0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwieG1sbnNcIikgfHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKSxcbiAgICAgIG9sZFBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSxcbiAgICAgIG9sZFNpYmxpbmcgPSB0aGlzLm5leHRTaWJsaW5nLFxuICAgICAgb2xkQ1NTID0gdGhpcy5zdHlsZS5jc3NUZXh0LFxuICAgICAgYmJveDtcblxuICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gIHN2Zy5hcHBlbmRDaGlsZCh0aGlzKTtcbiAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gIGlmIChzd2FwSWZQb3NzaWJsZSkge1xuICAgIHRyeSB7XG4gICAgICBiYm94ID0gdGhpcy5nZXRCQm94KCk7XG4gICAgICB0aGlzLl9nc2FwQkJveCA9IHRoaXMuZ2V0QkJveDsgLy9zdG9yZSB0aGUgb3JpZ2luYWxcblxuICAgICAgdGhpcy5nZXRCQm94ID0gX2dldEJCb3hIYWNrO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0gZWxzZSBpZiAodGhpcy5fZ3NhcEJCb3gpIHtcbiAgICBiYm94ID0gdGhpcy5fZ3NhcEJCb3goKTtcbiAgfVxuXG4gIGlmIChvbGRQYXJlbnQpIHtcbiAgICBpZiAob2xkU2libGluZykge1xuICAgICAgb2xkUGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBvbGRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkUGFyZW50LmFwcGVuZENoaWxkKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cbiAgdGhpcy5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTO1xuICByZXR1cm4gYmJveDtcbn0sXG4gICAgX2dldEF0dHJpYnV0ZUZhbGxiYWNrcyA9IGZ1bmN0aW9uIF9nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBhdHRyaWJ1dGVzQXJyYXkpIHtcbiAgdmFyIGkgPSBhdHRyaWJ1dGVzQXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGFyZ2V0Lmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVzQXJyYXlbaV0pO1xuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0QkJveCA9IGZ1bmN0aW9uIF9nZXRCQm94KHRhcmdldCkge1xuICB2YXIgYm91bmRzO1xuXG4gIHRyeSB7XG4gICAgYm91bmRzID0gdGFyZ2V0LmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgYm91bmRzID0gX2dldEJCb3hIYWNrLmNhbGwodGFyZ2V0LCB0cnVlKTtcbiAgfVxuXG4gIGJvdW5kcyAmJiAoYm91bmRzLndpZHRoIHx8IGJvdW5kcy5oZWlnaHQpIHx8IHRhcmdldC5nZXRCQm94ID09PSBfZ2V0QkJveEhhY2sgfHwgKGJvdW5kcyA9IF9nZXRCQm94SGFjay5jYWxsKHRhcmdldCwgdHJ1ZSkpOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCkgbWlzcmVwb3J0IHRoZSBib3VuZHMgaWYgdGhlIGVsZW1lbnQgaGFzIHplcm8gd2lkdGggYW5kIGhlaWdodCAoaXQganVzdCBhc3N1bWVzIGl0J3MgYXQgeDowLCB5OjApLCB0aHVzIHdlIG5lZWQgdG8gbWFudWFsbHkgZ3JhYiB0aGUgcG9zaXRpb24gaW4gdGhhdCBjYXNlLlxuXG4gIHJldHVybiBib3VuZHMgJiYgIWJvdW5kcy53aWR0aCAmJiAhYm91bmRzLnggJiYgIWJvdW5kcy55ID8ge1xuICAgIHg6ICtfZ2V0QXR0cmlidXRlRmFsbGJhY2tzKHRhcmdldCwgW1wieFwiLCBcImN4XCIsIFwieDFcIl0pIHx8IDAsXG4gICAgeTogK19nZXRBdHRyaWJ1dGVGYWxsYmFja3ModGFyZ2V0LCBbXCJ5XCIsIFwiY3lcIiwgXCJ5MVwiXSkgfHwgMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSA6IGJvdW5kcztcbn0sXG4gICAgX2lzU1ZHID0gZnVuY3Rpb24gX2lzU1ZHKGUpIHtcbiAgcmV0dXJuICEhKGUuZ2V0Q1RNICYmICghZS5wYXJlbnROb2RlIHx8IGUub3duZXJTVkdFbGVtZW50KSAmJiBfZ2V0QkJveChlKSk7XG59LFxuICAgIC8vcmVwb3J0cyBpZiB0aGUgZWxlbWVudCBpcyBhbiBTVkcgb24gd2hpY2ggZ2V0QkJveCgpIGFjdHVhbGx5IHdvcmtzXG5fcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGU7XG5cbiAgICBpZiAocHJvcGVydHkgaW4gX3RyYW5zZm9ybVByb3BzICYmIHByb3BlcnR5ICE9PSBfdHJhbnNmb3JtT3JpZ2luUHJvcCkge1xuICAgICAgcHJvcGVydHkgPSBfdHJhbnNmb3JtUHJvcDtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcbiAgICAgIGlmIChwcm9wZXJ0eS5zdWJzdHIoMCwgMikgPT09IFwibXNcIiB8fCBwcm9wZXJ0eS5zdWJzdHIoMCwgNikgPT09IFwid2Via2l0XCIpIHtcbiAgICAgICAgLy9NaWNyb3NvZnQgYW5kIHNvbWUgV2Via2l0IGJyb3dzZXJzIGRvbid0IGNvbmZvcm0gdG8gdGhlIHN0YW5kYXJkIG9mIGNhcGl0YWxpemluZyB0aGUgZmlyc3QgcHJlZml4IGNoYXJhY3Rlciwgc28gd2UgYWRqdXN0IHNvIHRoYXQgd2hlbiB3ZSBwcmVmaXggdGhlIGNhcHMgd2l0aCBhIGRhc2gsIGl0J3MgY29ycmVjdCAob3RoZXJ3aXNlIGl0J2QgYmUgXCJtcy10cmFuc2Zvcm1cIiBpbnN0ZWFkIG9mIFwiLW1zLXRyYW5zZm9ybVwiIGZvciBJRTksIGZvciBleGFtcGxlKVxuICAgICAgICBwcm9wZXJ0eSA9IFwiLVwiICsgcHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5LnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcbiAgICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59LFxuICAgIF9hZGROb25Ud2VlbmluZ1BUID0gZnVuY3Rpb24gX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBiZWdpbm5pbmcsIGVuZCwgb25seVNldEF0RW5kKSB7XG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgMCwgMSwgb25seVNldEF0RW5kID8gX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQgOiBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZSk7XG4gIHBsdWdpbi5fcHQgPSBwdDtcbiAgcHQuYiA9IGJlZ2lubmluZztcbiAgcHQuZSA9IGVuZDtcblxuICBwbHVnaW4uX3Byb3BzLnB1c2gocHJvcGVydHkpO1xuXG4gIHJldHVybiBwdDtcbn0sXG4gICAgX25vbkNvbnZlcnRpYmxlVW5pdHMgPSB7XG4gIGRlZzogMSxcbiAgcmFkOiAxLFxuICB0dXJuOiAxXG59LFxuICAgIC8vdGFrZXMgYSBzaW5nbGUgdmFsdWUgbGlrZSAyMHB4IGFuZCBjb252ZXJ0cyBpdCB0byB0aGUgdW5pdCBzcGVjaWZpZWQsIGxpa2UgXCIlXCIsIHJldHVybmluZyBvbmx5IHRoZSBudW1lcmljIGFtb3VudC5cbl9jb252ZXJ0VG9Vbml0ID0gZnVuY3Rpb24gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIHVuaXQpIHtcbiAgdmFyIGN1clZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCxcbiAgICAgIGN1clVuaXQgPSAodmFsdWUgKyBcIlwiKS50cmltKCkuc3Vic3RyKChjdXJWYWx1ZSArIFwiXCIpLmxlbmd0aCkgfHwgXCJweFwiLFxuICAgICAgLy8gc29tZSBicm93c2VycyBsZWF2ZSBleHRyYSB3aGl0ZXNwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgQ1NTIHZhcmlhYmxlcywgaGVuY2UgdGhlIG5lZWQgdG8gdHJpbSgpXG4gIHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG4gICAgICBob3Jpem9udGFsID0gX2hvcml6b250YWxFeHAudGVzdChwcm9wZXJ0eSksXG4gICAgICBpc1Jvb3RTVkcgPSB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiLFxuICAgICAgbWVhc3VyZVByb3BlcnR5ID0gKGlzUm9vdFNWRyA/IFwiY2xpZW50XCIgOiBcIm9mZnNldFwiKSArIChob3Jpem9udGFsID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIiksXG4gICAgICBhbW91bnQgPSAxMDAsXG4gICAgICB0b1BpeGVscyA9IHVuaXQgPT09IFwicHhcIixcbiAgICAgIHRvUGVyY2VudCA9IHVuaXQgPT09IFwiJVwiLFxuICAgICAgcHgsXG4gICAgICBwYXJlbnQsXG4gICAgICBjYWNoZSxcbiAgICAgIGlzU1ZHO1xuXG4gIGlmICh1bml0ID09PSBjdXJVbml0IHx8ICFjdXJWYWx1ZSB8fCBfbm9uQ29udmVydGlibGVVbml0c1t1bml0XSB8fCBfbm9uQ29udmVydGlibGVVbml0c1tjdXJVbml0XSkge1xuICAgIHJldHVybiBjdXJWYWx1ZTtcbiAgfVxuXG4gIGN1clVuaXQgIT09IFwicHhcIiAmJiAhdG9QaXhlbHMgJiYgKGN1clZhbHVlID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUsIFwicHhcIikpO1xuICBpc1NWRyA9IHRhcmdldC5nZXRDVE0gJiYgX2lzU1ZHKHRhcmdldCk7XG5cbiAgaWYgKCh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldIHx8IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikpKSB7XG4gICAgcHggPSBpc1NWRyA/IHRhcmdldC5nZXRCQm94KClbaG9yaXpvbnRhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCJdIDogdGFyZ2V0W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgcmV0dXJuIF9yb3VuZCh0b1BlcmNlbnQgPyBjdXJWYWx1ZSAvIHB4ICogYW1vdW50IDogY3VyVmFsdWUgLyAxMDAgKiBweCk7XG4gIH1cblxuICBzdHlsZVtob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0gPSBhbW91bnQgKyAodG9QaXhlbHMgPyBjdXJVbml0IDogdW5pdCk7XG4gIHBhcmVudCA9IH5wcm9wZXJ0eS5pbmRleE9mKFwiYWRpdXNcIikgfHwgdW5pdCA9PT0gXCJlbVwiICYmIHRhcmdldC5hcHBlbmRDaGlsZCAmJiAhaXNSb290U1ZHID8gdGFyZ2V0IDogdGFyZ2V0LnBhcmVudE5vZGU7XG5cbiAgaWYgKGlzU1ZHKSB7XG4gICAgcGFyZW50ID0gKHRhcmdldC5vd25lclNWR0VsZW1lbnQgfHwge30pLnBhcmVudE5vZGU7XG4gIH1cblxuICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IF9kb2MgfHwgIXBhcmVudC5hcHBlbmRDaGlsZCkge1xuICAgIHBhcmVudCA9IF9kb2MuYm9keTtcbiAgfVxuXG4gIGNhY2hlID0gcGFyZW50Ll9nc2FwO1xuXG4gIGlmIChjYWNoZSAmJiB0b1BlcmNlbnQgJiYgY2FjaGUud2lkdGggJiYgaG9yaXpvbnRhbCAmJiBjYWNoZS50aW1lID09PSBfdGlja2VyLnRpbWUpIHtcbiAgICByZXR1cm4gX3JvdW5kKGN1clZhbHVlIC8gY2FjaGUud2lkdGggKiBhbW91bnQpO1xuICB9IGVsc2Uge1xuICAgICh0b1BlcmNlbnQgfHwgY3VyVW5pdCA9PT0gXCIlXCIpICYmIChzdHlsZS5wb3NpdGlvbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJwb3NpdGlvblwiKSk7XG4gICAgcGFyZW50ID09PSB0YXJnZXQgJiYgKHN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIik7IC8vIGxpa2UgZm9yIGJvcmRlclJhZGl1cywgaWYgaXQncyBhICUgd2UgbXVzdCBoYXZlIGl0IHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgaXRzZWxmIGJ1dCB0aGF0IG1heSBub3QgaGF2ZSBwb3NpdGlvbjogcmVsYXRpdmUgb3IgcG9zaXRpb246IGFic29sdXRlIGluIHdoaWNoIGNhc2UgaXQnZCBnbyB1cCB0aGUgY2hhaW4gdW50aWwgaXQgZmluZHMgaXRzIG9mZnNldFBhcmVudCAoYmFkKS4gcG9zaXRpb246IHN0YXRpYyBwcm90ZWN0cyBhZ2FpbnN0IHRoYXQuXG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHB4ID0gX3RlbXBEaXZbbWVhc3VyZVByb3BlcnR5XTtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuICAgIHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gICAgaWYgKGhvcml6b250YWwgJiYgdG9QZXJjZW50KSB7XG4gICAgICBjYWNoZSA9IF9nZXRDYWNoZShwYXJlbnQpO1xuICAgICAgY2FjaGUudGltZSA9IF90aWNrZXIudGltZTtcbiAgICAgIGNhY2hlLndpZHRoID0gcGFyZW50W21lYXN1cmVQcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yb3VuZCh0b1BpeGVscyA/IHB4ICogY3VyVmFsdWUgLyBhbW91bnQgOiBweCAmJiBjdXJWYWx1ZSA/IGFtb3VudCAvIHB4ICogY3VyVmFsdWUgOiAwKTtcbn0sXG4gICAgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdW5pdCwgdW5jYWNoZSkge1xuICB2YXIgdmFsdWU7XG4gIF9wbHVnaW5Jbml0dGVkIHx8IF9pbml0Q29yZSgpO1xuXG4gIGlmIChwcm9wZXJ0eSBpbiBfcHJvcGVydHlBbGlhc2VzICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgcHJvcGVydHkgPSBfcHJvcGVydHlBbGlhc2VzW3Byb3BlcnR5XTtcblxuICAgIGlmICh+cHJvcGVydHkuaW5kZXhPZihcIixcIikpIHtcbiAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkuc3BsaXQoXCIsXCIpWzBdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfdHJhbnNmb3JtUHJvcHNbcHJvcGVydHldICYmIHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgdmFsdWUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKTtcbiAgICB2YWx1ZSA9IHByb3BlcnR5ICE9PSBcInRyYW5zZm9ybU9yaWdpblwiID8gdmFsdWVbcHJvcGVydHldIDogdmFsdWUuc3ZnID8gdmFsdWUub3JpZ2luIDogX2ZpcnN0VHdvT25seShfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSkgKyBcIiBcIiArIHZhbHVlLnpPcmlnaW4gKyBcInB4XCI7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSB0YXJnZXQuc3R5bGVbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJhdXRvXCIgfHwgdW5jYWNoZSB8fCB+KHZhbHVlICsgXCJcIikuaW5kZXhPZihcImNhbGMoXCIpKSB7XG4gICAgICB2YWx1ZSA9IF9zcGVjaWFsUHJvcHNbcHJvcGVydHldICYmIF9zcGVjaWFsUHJvcHNbcHJvcGVydHldKHRhcmdldCwgcHJvcGVydHksIHVuaXQpIHx8IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpIHx8IF9nZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5KSB8fCAocHJvcGVydHkgPT09IFwib3BhY2l0eVwiID8gMSA6IDApOyAvLyBub3RlOiBzb21lIGJyb3dzZXJzLCBsaWtlIEZpcmVmb3gsIGRvbid0IHJlcG9ydCBib3JkZXJSYWRpdXMgY29ycmVjdGx5ISBJbnN0ZWFkLCBpdCBvbmx5IHJlcG9ydHMgZXZlcnkgY29ybmVyIGxpa2UgIGJvcmRlclRvcExlZnRSYWRpdXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5pdCAmJiAhfih2YWx1ZSArIFwiXCIpLnRyaW0oKS5pbmRleE9mKFwiIFwiKSA/IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlLCB1bml0KSArIHVuaXQgOiB2YWx1ZTtcbn0sXG4gICAgX3R3ZWVuQ29tcGxleENTU1N0cmluZyA9IGZ1bmN0aW9uIF90d2VlbkNvbXBsZXhDU1NTdHJpbmcodGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kKSB7XG4gIC8vbm90ZTogd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA9PT0gXCJub25lXCIpIHtcbiAgICAvLyBzb21lIGJyb3dzZXJzIGxpa2UgU2FmYXJpIGFjdHVhbGx5IFBSRUZFUiB0aGUgcHJlZml4ZWQgcHJvcGVydHkgYW5kIG1pcy1yZXBvcnQgdGhlIHVucHJlZml4ZWQgdmFsdWUgbGlrZSBjbGlwUGF0aCAoQlVHKS4gSW4gb3RoZXIgd29yZHMsIGV2ZW4gdGhvdWdoIGNsaXBQYXRoIGV4aXN0cyBpbiB0aGUgc3R5bGUgKFwiY2xpcFBhdGhcIiBpbiB0YXJnZXQuc3R5bGUpIGFuZCBpdCdzIHNldCBpbiB0aGUgQ1NTIHByb3Blcmx5IChhbG9uZyB3aXRoIC13ZWJraXQtY2xpcC1wYXRoKSwgU2FmYXJpIHJlcG9ydHMgY2xpcFBhdGggYXMgXCJub25lXCIgd2hlcmVhcyBXZWJraXRDbGlwUGF0aCByZXBvcnRzIGFjY3VyYXRlbHkgbGlrZSBcImVsbGlwc2UoMTAwJSAwJSBhdCA1MCUgMCUpXCIsIHNvIGluIHRoaXMgY2FzZSB3ZSBtdXN0IFNXSVRDSCB0byB1c2luZyB0aGUgcHJlZml4ZWQgcHJvcGVydHkgaW5zdGVhZC4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMTgzMTAtY2xpcHBhdGgtZG9lc250LXdvcmstb24taW9zL1xuICAgIHZhciBwID0gX2NoZWNrUHJvcFByZWZpeChwcm9wLCB0YXJnZXQsIDEpLFxuICAgICAgICBzID0gcCAmJiBfZ2V0Q29tcHV0ZWRQcm9wZXJ0eSh0YXJnZXQsIHAsIDEpO1xuXG4gICAgaWYgKHMgJiYgcyAhPT0gc3RhcnQpIHtcbiAgICAgIHByb3AgPSBwO1xuICAgICAgc3RhcnQgPSBzO1xuICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gXCJib3JkZXJDb2xvclwiKSB7XG4gICAgICBzdGFydCA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgXCJib3JkZXJUb3BDb2xvclwiKTsgLy8gRmlyZWZveCBidWc6IGFsd2F5cyByZXBvcnRzIFwiYm9yZGVyQ29sb3JcIiBhcyBcIlwiLCBzbyB3ZSBtdXN0IGZhbGwgYmFjayB0byBib3JkZXJUb3BDb2xvci4gU2VlIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9mb3J1bXMvdG9waWMvMjQ1ODMtaG93LXRvLXJldHVybi1jb2xvcnMtdGhhdC1pLWhhZC1hZnRlci1yZXZlcnNlL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIHRhcmdldC5zdHlsZSwgcHJvcCwgMCwgMSwgX3JlbmRlckNvbXBsZXhTdHJpbmcpLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgbWF0Y2hJbmRleCA9IDAsXG4gICAgICBhLFxuICAgICAgcmVzdWx0LFxuICAgICAgc3RhcnRWYWx1ZXMsXG4gICAgICBzdGFydE51bSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgIGVuZFZhbHVlLFxuICAgICAgZW5kTnVtLFxuICAgICAgY2h1bmssXG4gICAgICBlbmRVbml0LFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBlbmRWYWx1ZXM7XG4gIHB0LmIgPSBzdGFydDtcbiAgcHQuZSA9IGVuZDtcbiAgc3RhcnQgKz0gXCJcIjsgLy9lbnN1cmUgdmFsdWVzIGFyZSBzdHJpbmdzXG5cbiAgZW5kICs9IFwiXCI7XG5cbiAgaWYgKGVuZCA9PT0gXCJhdXRvXCIpIHtcbiAgICB0YXJnZXQuc3R5bGVbcHJvcF0gPSBlbmQ7XG4gICAgZW5kID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB8fCBlbmQ7XG4gICAgdGFyZ2V0LnN0eWxlW3Byb3BdID0gc3RhcnQ7XG4gIH1cblxuICBhID0gW3N0YXJ0LCBlbmRdO1xuXG4gIF9jb2xvclN0cmluZ0ZpbHRlcihhKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLiBJZiBjb2xvcnMgYXJlIGZvdW5kLCBpdCByZXR1cm5zIHRydWUgYW5kIHRoZW4gd2UgbXVzdCBtYXRjaCB3aGVyZSB0aGUgY29sb3Igc2hvd3MgdXAgb3JkZXItd2lzZSBiZWNhdXNlIGZvciB0aGluZ3MgbGlrZSBib3hTaGFkb3csIHNvbWV0aW1lcyB0aGUgYnJvd3NlciBwcm92aWRlcyB0aGUgY29tcHV0ZWQgdmFsdWVzIHdpdGggdGhlIGNvbG9yIEZJUlNULCBidXQgdGhlIHVzZXIgcHJvdmlkZXMgaXQgd2l0aCB0aGUgY29sb3IgTEFTVCwgc28gZmxpcCB0aGVtIGlmIG5lY2Vzc2FyeS4gU2FtZSBmb3IgZHJvcC1zaGFkb3coKS5cblxuXG4gIHN0YXJ0ID0gYVswXTtcbiAgZW5kID0gYVsxXTtcbiAgc3RhcnRWYWx1ZXMgPSBzdGFydC5tYXRjaChfbnVtV2l0aFVuaXRFeHApIHx8IFtdO1xuICBlbmRWYWx1ZXMgPSBlbmQubWF0Y2goX251bVdpdGhVbml0RXhwKSB8fCBbXTtcblxuICBpZiAoZW5kVmFsdWVzLmxlbmd0aCkge1xuICAgIHdoaWxlIChyZXN1bHQgPSBfbnVtV2l0aFVuaXRFeHAuZXhlYyhlbmQpKSB7XG4gICAgICBlbmRWYWx1ZSA9IHJlc3VsdFswXTtcbiAgICAgIGNodW5rID0gZW5kLnN1YnN0cmluZyhpbmRleCwgcmVzdWx0LmluZGV4KTtcblxuICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgIGNvbG9yID0gKGNvbG9yICsgMSkgJSA1O1xuICAgICAgfSBlbHNlIGlmIChjaHVuay5zdWJzdHIoLTUpID09PSBcInJnYmEoXCIgfHwgY2h1bmsuc3Vic3RyKC01KSA9PT0gXCJoc2xhKFwiKSB7XG4gICAgICAgIGNvbG9yID0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZFZhbHVlICE9PSAoc3RhcnRWYWx1ZSA9IHN0YXJ0VmFsdWVzW21hdGNoSW5kZXgrK10gfHwgXCJcIikpIHtcbiAgICAgICAgc3RhcnROdW0gPSBwYXJzZUZsb2F0KHN0YXJ0VmFsdWUpIHx8IDA7XG4gICAgICAgIHN0YXJ0VW5pdCA9IHN0YXJ0VmFsdWUuc3Vic3RyKChzdGFydE51bSArIFwiXCIpLmxlbmd0aCk7XG4gICAgICAgIHJlbGF0aXZlID0gZW5kVmFsdWUuY2hhckF0KDEpID09PSBcIj1cIiA/ICsoZW5kVmFsdWUuY2hhckF0KDApICsgXCIxXCIpIDogMDtcblxuICAgICAgICBpZiAocmVsYXRpdmUpIHtcbiAgICAgICAgICBlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgICBlbmRVbml0ID0gZW5kVmFsdWUuc3Vic3RyKChlbmROdW0gKyBcIlwiKS5sZW5ndGgpO1xuICAgICAgICBpbmRleCA9IF9udW1XaXRoVW5pdEV4cC5sYXN0SW5kZXggLSBlbmRVbml0Lmxlbmd0aDtcblxuICAgICAgICBpZiAoIWVuZFVuaXQpIHtcbiAgICAgICAgICAvL2lmIHNvbWV0aGluZyBsaWtlIFwicGVyc3BlY3RpdmU6MzAwXCIgaXMgcGFzc2VkIGluIGFuZCB3ZSBtdXN0IGFkZCBhIHVuaXQgdG8gdGhlIGVuZFxuICAgICAgICAgIGVuZFVuaXQgPSBlbmRVbml0IHx8IF9jb25maWcudW5pdHNbcHJvcF0gfHwgc3RhcnRVbml0O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSBlbmQubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgKz0gZW5kVW5pdDtcbiAgICAgICAgICAgIHB0LmUgKz0gZW5kVW5pdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRVbml0ICE9PSBlbmRVbml0KSB7XG4gICAgICAgICAgc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHByb3AsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIHx8IDA7XG4gICAgICAgIH0gLy90aGVzZSBuZXN0ZWQgUHJvcFR3ZWVucyBhcmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IC0gd2UnbGwgbmV2ZXIgYWN0dWFsbHkgY2FsbCBhIHJlbmRlciBvciBzZXR0ZXIgbWV0aG9kIG9uIHRoZW0uIFdlJ2xsIGp1c3QgbG9vcCB0aHJvdWdoIHRoZW0gaW4gdGhlIHBhcmVudCBjb21wbGV4IHN0cmluZyBQcm9wVHdlZW4ncyByZW5kZXIgbWV0aG9kLlxuXG5cbiAgICAgICAgcHQuX3B0ID0ge1xuICAgICAgICAgIF9uZXh0OiBwdC5fcHQsXG4gICAgICAgICAgcDogY2h1bmsgfHwgbWF0Y2hJbmRleCA9PT0gMSA/IGNodW5rIDogXCIsXCIsXG4gICAgICAgICAgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG4gICAgICAgICAgczogc3RhcnROdW0sXG4gICAgICAgICAgYzogcmVsYXRpdmUgPyByZWxhdGl2ZSAqIGVuZE51bSA6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgICAgIG06IGNvbG9yICYmIGNvbG9yIDwgNCB8fCBwcm9wID09PSBcInpJbmRleFwiID8gTWF0aC5yb3VuZCA6IDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwdC5jID0gaW5kZXggPCBlbmQubGVuZ3RoID8gZW5kLnN1YnN0cmluZyhpbmRleCwgZW5kLmxlbmd0aCkgOiBcIlwiOyAvL3dlIHVzZSB0aGUgXCJjXCIgb2YgdGhlIFByb3BUd2VlbiB0byBzdG9yZSB0aGUgZmluYWwgcGFydCBvZiB0aGUgc3RyaW5nIChhZnRlciB0aGUgbGFzdCBudW1iZXIpXG4gIH0gZWxzZSB7XG4gICAgcHQuciA9IHByb3AgPT09IFwiZGlzcGxheVwiICYmIGVuZCA9PT0gXCJub25lXCIgPyBfcmVuZGVyTm9uVHdlZW5pbmdWYWx1ZU9ubHlBdEVuZCA6IF9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlO1xuICB9XG5cbiAgX3JlbEV4cC50ZXN0KGVuZCkgJiYgKHB0LmUgPSAwKTsgLy9pZiB0aGUgZW5kIHN0cmluZyBjb250YWlucyByZWxhdGl2ZSB2YWx1ZXMgb3IgZHluYW1pYyByYW5kb20oLi4uKSB2YWx1ZXMsIGRlbGV0ZSB0aGUgZW5kIGl0IHNvIHRoYXQgb24gdGhlIGZpbmFsIHJlbmRlciB3ZSBkb24ndCBhY3R1YWxseSBzZXQgaXQgdG8gdGhlIHN0cmluZyB3aXRoICs9IG9yIC09IGNoYXJhY3RlcnMgKGZvcmNlcyBpdCB0byB1c2UgdGhlIGNhbGN1bGF0ZWQgdmFsdWUpLlxuXG4gIHRoaXMuX3B0ID0gcHQ7IC8vc3RhcnQgdGhlIGxpbmtlZCBsaXN0IHdpdGggdGhpcyBuZXcgUHJvcFR3ZWVuLiBSZW1lbWJlciwgd2UgY2FsbCBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwocGx1Z2luSW5zdGFuY2UuLi4pIHRvIGVuc3VyZSB0aGF0IGl0J3Mgc2NvcGVkIHByb3Blcmx5LiBXZSBtYXkgY2FsbCBpdCBmcm9tIHdpdGhpbiBhbm90aGVyIHBsdWdpbiB0b28sIHRodXMgXCJ0aGlzXCIgd291bGQgcmVmZXIgdG8gdGhlIHBsdWdpbi5cblxuICByZXR1cm4gcHQ7XG59LFxuICAgIF9rZXl3b3JkVG9QZXJjZW50ID0ge1xuICB0b3A6IFwiMCVcIixcbiAgYm90dG9tOiBcIjEwMCVcIixcbiAgbGVmdDogXCIwJVwiLFxuICByaWdodDogXCIxMDAlXCIsXG4gIGNlbnRlcjogXCI1MCVcIlxufSxcbiAgICBfY29udmVydEtleXdvcmRzVG9QZXJjZW50YWdlcyA9IGZ1bmN0aW9uIF9jb252ZXJ0S2V5d29yZHNUb1BlcmNlbnRhZ2VzKHZhbHVlKSB7XG4gIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiIFwiKSxcbiAgICAgIHggPSBzcGxpdFswXSxcbiAgICAgIHkgPSBzcGxpdFsxXSB8fCBcIjUwJVwiO1xuXG4gIGlmICh4ID09PSBcInRvcFwiIHx8IHggPT09IFwiYm90dG9tXCIgfHwgeSA9PT0gXCJsZWZ0XCIgfHwgeSA9PT0gXCJyaWdodFwiKSB7XG4gICAgLy90aGUgdXNlciBwcm92aWRlZCB0aGVtIGluIHRoZSB3cm9uZyBvcmRlciwgc28gZmxpcCB0aGVtXG4gICAgdmFsdWUgPSB4O1xuICAgIHggPSB5O1xuICAgIHkgPSB2YWx1ZTtcbiAgfVxuXG4gIHNwbGl0WzBdID0gX2tleXdvcmRUb1BlcmNlbnRbeF0gfHwgeDtcbiAgc3BsaXRbMV0gPSBfa2V5d29yZFRvUGVyY2VudFt5XSB8fCB5O1xuICByZXR1cm4gc3BsaXQuam9pbihcIiBcIik7XG59LFxuICAgIF9yZW5kZXJDbGVhclByb3BzID0gZnVuY3Rpb24gX3JlbmRlckNsZWFyUHJvcHMocmF0aW8sIGRhdGEpIHtcbiAgaWYgKGRhdGEudHdlZW4gJiYgZGF0YS50d2Vlbi5fdGltZSA9PT0gZGF0YS50d2Vlbi5fZHVyKSB7XG4gICAgdmFyIHRhcmdldCA9IGRhdGEudCxcbiAgICAgICAgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gICAgICAgIHByb3BzID0gZGF0YS51LFxuICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcCxcbiAgICAgICAgcHJvcCxcbiAgICAgICAgY2xlYXJUcmFuc2Zvcm1zLFxuICAgICAgICBpO1xuXG4gICAgaWYgKHByb3BzID09PSBcImFsbFwiIHx8IHByb3BzID09PSB0cnVlKSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gXCJcIjtcbiAgICAgIGNsZWFyVHJhbnNmb3JtcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuICAgICAgaSA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKC0taSA+IC0xKSB7XG4gICAgICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgICAgICBpZiAoX3RyYW5zZm9ybVByb3BzW3Byb3BdKSB7XG4gICAgICAgICAgY2xlYXJUcmFuc2Zvcm1zID0gMTtcbiAgICAgICAgICBwcm9wID0gcHJvcCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIiA/IF90cmFuc2Zvcm1PcmlnaW5Qcm9wIDogX3RyYW5zZm9ybVByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBwcm9wKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xlYXJUcmFuc2Zvcm1zKSB7XG4gICAgICBfcmVtb3ZlUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICBjYWNoZS5zdmcgJiYgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblxuICAgICAgICBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTsgLy8gZm9yY2UgYWxsIHRoZSBjYWNoZWQgdmFsdWVzIGJhY2sgdG8gXCJub3JtYWxcIi9pZGVudGl0eSwgb3RoZXJ3aXNlIGlmIHRoZXJlJ3MgYW5vdGhlciB0d2VlbiB0aGF0J3MgYWxyZWFkeSBzZXQgdG8gcmVuZGVyIHRyYW5zZm9ybXMgb24gdGhpcyBlbGVtZW50LCBpdCBjb3VsZCBkaXNwbGF5IHRoZSB3cm9uZyB2YWx1ZXMuXG5cblxuICAgICAgICBjYWNoZS51bmNhY2hlID0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sXG4gICAgLy8gbm90ZTogc3BlY2lhbFByb3BzIHNob3VsZCByZXR1cm4gMSBpZiAoYW5kIG9ubHkgaWYpIHRoZXkgaGF2ZSBhIG5vbi16ZXJvIHByaW9yaXR5LiBJdCBpbmRpY2F0ZXMgd2UgbmVlZCB0byBzb3J0IHRoZSBsaW5rZWQgbGlzdC5cbl9zcGVjaWFsUHJvcHMgPSB7XG4gIGNsZWFyUHJvcHM6IGZ1bmN0aW9uIGNsZWFyUHJvcHMocGx1Z2luLCB0YXJnZXQsIHByb3BlcnR5LCBlbmRWYWx1ZSwgdHdlZW4pIHtcbiAgICBpZiAodHdlZW4uZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7XG4gICAgICB2YXIgcHQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIHByb3BlcnR5LCAwLCAwLCBfcmVuZGVyQ2xlYXJQcm9wcyk7XG4gICAgICBwdC51ID0gZW5kVmFsdWU7XG4gICAgICBwdC5wciA9IC0xMDtcbiAgICAgIHB0LnR3ZWVuID0gdHdlZW47XG5cbiAgICAgIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICAvKiBjbGFzc05hbWUgZmVhdHVyZSAoYWJvdXQgMC40a2IgZ3ppcHBlZCkuXG4gICwgY2xhc3NOYW1lKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgZW5kVmFsdWUsIHR3ZWVuKSB7XG4gIFx0bGV0IF9yZW5kZXJDbGFzc05hbWUgPSAocmF0aW8sIGRhdGEpID0+IHtcbiAgXHRcdFx0ZGF0YS5jc3MucmVuZGVyKHJhdGlvLCBkYXRhLmNzcyk7XG4gIFx0XHRcdGlmICghcmF0aW8gfHwgcmF0aW8gPT09IDEpIHtcbiAgXHRcdFx0XHRsZXQgaW5saW5lID0gZGF0YS5ybXYsXG4gIFx0XHRcdFx0XHR0YXJnZXQgPSBkYXRhLnQsXG4gIFx0XHRcdFx0XHRwO1xuICBcdFx0XHRcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCByYXRpbyA/IGRhdGEuZSA6IGRhdGEuYik7XG4gIFx0XHRcdFx0Zm9yIChwIGluIGlubGluZSkge1xuICBcdFx0XHRcdFx0X3JlbW92ZVByb3BlcnR5KHRhcmdldCwgcCk7XG4gIFx0XHRcdFx0fVxuICBcdFx0XHR9XG4gIFx0XHR9LFxuICBcdFx0X2dldEFsbFN0eWxlcyA9ICh0YXJnZXQpID0+IHtcbiAgXHRcdFx0bGV0IHN0eWxlcyA9IHt9LFxuICBcdFx0XHRcdGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLFxuICBcdFx0XHRcdHA7XG4gIFx0XHRcdGZvciAocCBpbiBjb21wdXRlZCkge1xuICBcdFx0XHRcdGlmIChpc05hTihwKSAmJiBwICE9PSBcImNzc1RleHRcIiAmJiBwICE9PSBcImxlbmd0aFwiKSB7XG4gIFx0XHRcdFx0XHRzdHlsZXNbcF0gPSBjb21wdXRlZFtwXTtcbiAgXHRcdFx0XHR9XG4gIFx0XHRcdH1cbiAgXHRcdFx0X3NldERlZmF1bHRzKHN0eWxlcywgX3BhcnNlVHJhbnNmb3JtKHRhcmdldCwgMSkpO1xuICBcdFx0XHRyZXR1cm4gc3R5bGVzO1xuICBcdFx0fSxcbiAgXHRcdHN0YXJ0Q2xhc3NMaXN0ID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLFxuICBcdFx0c3R5bGUgPSB0YXJnZXQuc3R5bGUsXG4gIFx0XHRjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCxcbiAgXHRcdGNhY2hlID0gdGFyZ2V0Ll9nc2FwLFxuICBcdFx0Y2xhc3NQVCA9IGNhY2hlLmNsYXNzUFQsXG4gIFx0XHRpbmxpbmVUb1JlbW92ZUF0RW5kID0ge30sXG4gIFx0XHRkYXRhID0ge3Q6dGFyZ2V0LCBwbHVnaW46cGx1Z2luLCBybXY6aW5saW5lVG9SZW1vdmVBdEVuZCwgYjpzdGFydENsYXNzTGlzdCwgZTooZW5kVmFsdWUuY2hhckF0KDEpICE9PSBcIj1cIikgPyBlbmRWYWx1ZSA6IHN0YXJ0Q2xhc3NMaXN0LnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgKyBcIig/IVtcXFxcdy1dKVwiKSwgXCJcIikgKyAoKGVuZFZhbHVlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlbmRWYWx1ZS5zdWJzdHIoMikgOiBcIlwiKX0sXG4gIFx0XHRjaGFuZ2luZ1ZhcnMgPSB7fSxcbiAgXHRcdHN0YXJ0VmFycyA9IF9nZXRBbGxTdHlsZXModGFyZ2V0KSxcbiAgXHRcdHRyYW5zZm9ybVJlbGF0ZWQgPSAvKHRyYW5zZm9ybXxwZXJzcGVjdGl2ZSkvaSxcbiAgXHRcdGVuZFZhcnMsIHA7XG4gIFx0aWYgKGNsYXNzUFQpIHtcbiAgXHRcdGNsYXNzUFQucigxLCBjbGFzc1BULmQpO1xuICBcdFx0X3JlbW92ZUxpbmtlZExpc3RJdGVtKGNsYXNzUFQuZC5wbHVnaW4sIGNsYXNzUFQsIFwiX3B0XCIpO1xuICBcdH1cbiAgXHR0YXJnZXQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgZGF0YS5lKTtcbiAgXHRlbmRWYXJzID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIHRydWUpO1xuICBcdHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBzdGFydENsYXNzTGlzdCk7XG4gIFx0Zm9yIChwIGluIGVuZFZhcnMpIHtcbiAgXHRcdGlmIChlbmRWYXJzW3BdICE9PSBzdGFydFZhcnNbcF0gJiYgIXRyYW5zZm9ybVJlbGF0ZWQudGVzdChwKSkge1xuICBcdFx0XHRjaGFuZ2luZ1ZhcnNbcF0gPSBlbmRWYXJzW3BdO1xuICBcdFx0XHRpZiAoIXN0eWxlW3BdICYmIHN0eWxlW3BdICE9PSBcIjBcIikge1xuICBcdFx0XHRcdGlubGluZVRvUmVtb3ZlQXRFbmRbcF0gPSAxO1xuICBcdFx0XHR9XG4gIFx0XHR9XG4gIFx0fVxuICBcdGNhY2hlLmNsYXNzUFQgPSBwbHVnaW4uX3B0ID0gbmV3IFByb3BUd2VlbihwbHVnaW4uX3B0LCB0YXJnZXQsIFwiY2xhc3NOYW1lXCIsIDAsIDAsIF9yZW5kZXJDbGFzc05hbWUsIGRhdGEsIDAsIC0xMSk7XG4gIFx0aWYgKHN0eWxlLmNzc1RleHQgIT09IGNzc1RleHQpIHsgLy9vbmx5IGFwcGx5IGlmIHRoaW5ncyBjaGFuZ2UuIE90aGVyd2lzZSwgaW4gY2FzZXMgbGlrZSBhIGJhY2tncm91bmQtaW1hZ2UgdGhhdCdzIHB1bGxlZCBkeW5hbWljYWxseSwgaXQgY291bGQgY2F1c2UgYSByZWZyZXNoLiBTZWUgaHR0cHM6Ly9ncmVlbnNvY2suY29tL2ZvcnVtcy90b3BpYy8yMDM2OC1wb3NzaWJsZS1nc2FwLWJ1Zy1zd2l0Y2hpbmctY2xhc3NuYW1lcy1pbi1jaHJvbWUvLlxuICBcdFx0c3R5bGUuY3NzVGV4dCA9IGNzc1RleHQ7IC8vd2UgcmVjb3JkZWQgY3NzVGV4dCBiZWZvcmUgd2Ugc3dhcHBlZCBjbGFzc2VzIGFuZCByYW4gX2dldEFsbFN0eWxlcygpIGJlY2F1c2UgaW4gY2FzZXMgd2hlbiBhIGNsYXNzTmFtZSB0d2VlbiBpcyBvdmVyd3JpdHRlbiwgd2UgcmVtb3ZlIGFsbCB0aGUgcmVsYXRlZCB0d2VlbmluZyBwcm9wZXJ0aWVzIGZyb20gdGhhdCBjbGFzcyBjaGFuZ2UgKG90aGVyd2lzZSBjbGFzcy1zcGVjaWZpYyBzdHVmZiBjYW4ndCBvdmVycmlkZSBwcm9wZXJ0aWVzIHdlJ3ZlIGRpcmVjdGx5IHNldCBvbiB0aGUgdGFyZ2V0J3Mgc3R5bGUgb2JqZWN0IGR1ZSB0byBzcGVjaWZpY2l0eSkuXG4gIFx0fVxuICBcdF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIHRydWUpOyAvL3RvIGNsZWFyIHRoZSBjYWNoaW5nIG9mIHRyYW5zZm9ybXNcbiAgXHRkYXRhLmNzcyA9IG5ldyBnc2FwLnBsdWdpbnMuY3NzKCk7XG4gIFx0ZGF0YS5jc3MuaW5pdCh0YXJnZXQsIGNoYW5naW5nVmFycywgdHdlZW4pO1xuICBcdHBsdWdpbi5fcHJvcHMucHVzaCguLi5kYXRhLmNzcy5fcHJvcHMpO1xuICBcdHJldHVybiAxO1xuICB9XG4gICovXG5cbn0sXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVFJBTlNGT1JNU1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuX2lkZW50aXR5MkRNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF0sXG4gICAgX3JvdGF0aW9uYWxQcm9wZXJ0aWVzID0ge30sXG4gICAgX2lzTnVsbFRyYW5zZm9ybSA9IGZ1bmN0aW9uIF9pc051bGxUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiIHx8IHZhbHVlID09PSBcIm5vbmVcIiB8fCAhdmFsdWU7XG59LFxuICAgIF9nZXRDb21wdXRlZFRyYW5zZm9ybU1hdHJpeEFzQXJyYXkgPSBmdW5jdGlvbiBfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5KHRhcmdldCkge1xuICB2YXIgbWF0cml4U3RyaW5nID0gX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCk7XG5cbiAgcmV0dXJuIF9pc051bGxUcmFuc2Zvcm0obWF0cml4U3RyaW5nKSA/IF9pZGVudGl0eTJETWF0cml4IDogbWF0cml4U3RyaW5nLnN1YnN0cig3KS5tYXRjaChfbnVtRXhwKS5tYXAoX3JvdW5kKTtcbn0sXG4gICAgX2dldE1hdHJpeCA9IGZ1bmN0aW9uIF9nZXRNYXRyaXgodGFyZ2V0LCBmb3JjZTJEKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBfZ2V0Q2FjaGUodGFyZ2V0KSxcbiAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpLFxuICAgICAgcGFyZW50LFxuICAgICAgbmV4dFNpYmxpbmcsXG4gICAgICB0ZW1wLFxuICAgICAgYWRkZWRUb0RPTTtcblxuICBpZiAoY2FjaGUuc3ZnICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIikpIHtcbiAgICB0ZW1wID0gdGFyZ2V0LnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkubWF0cml4OyAvL2Vuc3VyZXMgdGhhdCBldmVuIGNvbXBsZXggdmFsdWVzIGxpa2UgXCJ0cmFuc2xhdGUoNTAsNjApIHJvdGF0ZSgxMzUsMCwwKVwiIGFyZSBwYXJzZWQgYmVjYXVzZSBpdCBtYXNoZXMgaXQgaW50byBhIG1hdHJpeC5cblxuICAgIG1hdHJpeCA9IFt0ZW1wLmEsIHRlbXAuYiwgdGVtcC5jLCB0ZW1wLmQsIHRlbXAuZSwgdGVtcC5mXTtcbiAgICByZXR1cm4gbWF0cml4LmpvaW4oXCIsXCIpID09PSBcIjEsMCwwLDEsMCwwXCIgPyBfaWRlbnRpdHkyRE1hdHJpeCA6IG1hdHJpeDtcbiAgfSBlbHNlIGlmIChtYXRyaXggPT09IF9pZGVudGl0eTJETWF0cml4ICYmICF0YXJnZXQub2Zmc2V0UGFyZW50ICYmIHRhcmdldCAhPT0gX2RvY0VsZW1lbnQgJiYgIWNhY2hlLnN2Zykge1xuICAgIC8vbm90ZTogaWYgb2Zmc2V0UGFyZW50IGlzIG51bGwsIHRoYXQgbWVhbnMgdGhlIGVsZW1lbnQgaXNuJ3QgaW4gdGhlIG5vcm1hbCBkb2N1bWVudCBmbG93LCBsaWtlIGlmIGl0IGhhcyBkaXNwbGF5Om5vbmUgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgaGFzIGRpc3BsYXk6bm9uZSkuIEZpcmVmb3ggcmV0dXJucyBudWxsIGZvciBnZXRDb21wdXRlZFN0eWxlKCkgaWYgdGhlIGVsZW1lbnQgaXMgaW4gYW4gaWZyYW1lIHRoYXQgaGFzIGRpc3BsYXk6bm9uZS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTQ4Mzk3XG4gICAgLy9icm93c2VycyBkb24ndCByZXBvcnQgdHJhbnNmb3JtcyBhY2N1cmF0ZWx5IHVubGVzcyB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGFuZCBoYXMgYSBkaXNwbGF5IHZhbHVlIHRoYXQncyBub3QgXCJub25lXCIuIEZpcmVmb3ggYW5kIE1pY3Jvc29mdCBicm93c2VycyBoYXZlIGEgcGFydGlhbCBidWcgd2hlcmUgdGhleSdsbCByZXBvcnQgdHJhbnNmb3JtcyBldmVuIGlmIGRpc3BsYXk6bm9uZSBCVVQgbm90IGFueSBwZXJjZW50YWdlLWJhc2VkIHZhbHVlcyBsaWtlIHRyYW5zbGF0ZSgtNTAlLCA4cHgpIHdpbGwgYmUgcmVwb3J0ZWQgYXMgaWYgaXQncyB0cmFuc2xhdGUoMCwgOHB4KS5cbiAgICB0ZW1wID0gc3R5bGUuZGlzcGxheTtcbiAgICBzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHBhcmVudCA9IHRhcmdldC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKCFwYXJlbnQgfHwgIXRhcmdldC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgIC8vIG5vdGU6IGluIDMuMy4wIHdlIHN3aXRjaGVkIHRhcmdldC5vZmZzZXRQYXJlbnQgdG8gX2RvYy5ib2R5LmNvbnRhaW5zKHRhcmdldCkgdG8gYXZvaWQgW3NvbWV0aW1lcyB1bm5lY2Vzc2FyeV0gTXV0YXRpb25PYnNlcnZlciBjYWxscyBidXQgdGhhdCB3YXNuJ3QgYWRlcXVhdGUgYmVjYXVzZSB0aGVyZSBhcmUgZWRnZSBjYXNlcyB3aGVyZSBuZXN0ZWQgcG9zaXRpb246IGZpeGVkIGVsZW1lbnRzIG5lZWQgdG8gZ2V0IHJlcGFyZW50ZWQgdG8gYWNjdXJhdGVseSBzZW5zZSB0cmFuc2Zvcm1zLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyZWVuc29jay9HU0FQL2lzc3Vlcy8zODggYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmVlbnNvY2svR1NBUC9pc3N1ZXMvMzc1XG4gICAgICBhZGRlZFRvRE9NID0gMTsgLy9mbGFnXG5cbiAgICAgIG5leHRTaWJsaW5nID0gdGFyZ2V0Lm5leHRTaWJsaW5nO1xuXG4gICAgICBfZG9jRWxlbWVudC5hcHBlbmRDaGlsZCh0YXJnZXQpOyAvL3dlIG11c3QgYWRkIGl0IHRvIHRoZSBET00gaW4gb3JkZXIgdG8gZ2V0IHZhbHVlcyBwcm9wZXJseVxuXG4gICAgfVxuXG4gICAgbWF0cml4ID0gX2dldENvbXB1dGVkVHJhbnNmb3JtTWF0cml4QXNBcnJheSh0YXJnZXQpO1xuICAgIHRlbXAgPyBzdHlsZS5kaXNwbGF5ID0gdGVtcCA6IF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIFwiZGlzcGxheVwiKTtcblxuICAgIGlmIChhZGRlZFRvRE9NKSB7XG4gICAgICBuZXh0U2libGluZyA/IHBhcmVudC5pbnNlcnRCZWZvcmUodGFyZ2V0LCBuZXh0U2libGluZykgOiBwYXJlbnQgPyBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KSA6IF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZvcmNlMkQgJiYgbWF0cml4Lmxlbmd0aCA+IDYgPyBbbWF0cml4WzBdLCBtYXRyaXhbMV0sIG1hdHJpeFs0XSwgbWF0cml4WzVdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMTNdXSA6IG1hdHJpeDtcbn0sXG4gICAgX2FwcGx5U1ZHT3JpZ2luID0gZnVuY3Rpb24gX2FwcGx5U1ZHT3JpZ2luKHRhcmdldCwgb3JpZ2luLCBvcmlnaW5Jc0Fic29sdXRlLCBzbW9vdGgsIG1hdHJpeEFycmF5LCBwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbykge1xuICB2YXIgY2FjaGUgPSB0YXJnZXQuX2dzYXAsXG4gICAgICBtYXRyaXggPSBtYXRyaXhBcnJheSB8fCBfZ2V0TWF0cml4KHRhcmdldCwgdHJ1ZSksXG4gICAgICB4T3JpZ2luT2xkID0gY2FjaGUueE9yaWdpbiB8fCAwLFxuICAgICAgeU9yaWdpbk9sZCA9IGNhY2hlLnlPcmlnaW4gfHwgMCxcbiAgICAgIHhPZmZzZXRPbGQgPSBjYWNoZS54T2Zmc2V0IHx8IDAsXG4gICAgICB5T2Zmc2V0T2xkID0gY2FjaGUueU9mZnNldCB8fCAwLFxuICAgICAgYSA9IG1hdHJpeFswXSxcbiAgICAgIGIgPSBtYXRyaXhbMV0sXG4gICAgICBjID0gbWF0cml4WzJdLFxuICAgICAgZCA9IG1hdHJpeFszXSxcbiAgICAgIHR4ID0gbWF0cml4WzRdLFxuICAgICAgdHkgPSBtYXRyaXhbNV0sXG4gICAgICBvcmlnaW5TcGxpdCA9IG9yaWdpbi5zcGxpdChcIiBcIiksXG4gICAgICB4T3JpZ2luID0gcGFyc2VGbG9hdChvcmlnaW5TcGxpdFswXSkgfHwgMCxcbiAgICAgIHlPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpblNwbGl0WzFdKSB8fCAwLFxuICAgICAgYm91bmRzLFxuICAgICAgZGV0ZXJtaW5hbnQsXG4gICAgICB4LFxuICAgICAgeTtcblxuICBpZiAoIW9yaWdpbklzQWJzb2x1dGUpIHtcbiAgICBib3VuZHMgPSBfZ2V0QkJveCh0YXJnZXQpO1xuICAgIHhPcmlnaW4gPSBib3VuZHMueCArICh+b3JpZ2luU3BsaXRbMF0uaW5kZXhPZihcIiVcIikgPyB4T3JpZ2luIC8gMTAwICogYm91bmRzLndpZHRoIDogeE9yaWdpbik7XG4gICAgeU9yaWdpbiA9IGJvdW5kcy55ICsgKH4ob3JpZ2luU3BsaXRbMV0gfHwgb3JpZ2luU3BsaXRbMF0pLmluZGV4T2YoXCIlXCIpID8geU9yaWdpbiAvIDEwMCAqIGJvdW5kcy5oZWlnaHQgOiB5T3JpZ2luKTtcbiAgfSBlbHNlIGlmIChtYXRyaXggIT09IF9pZGVudGl0eTJETWF0cml4ICYmIChkZXRlcm1pbmFudCA9IGEgKiBkIC0gYiAqIGMpKSB7XG4gICAgLy9pZiBpdCdzIHplcm8gKGxpa2UgaWYgc2NhbGVYIGFuZCBzY2FsZVkgYXJlIHplcm8pLCBza2lwIGl0IHRvIGF2b2lkIGVycm9ycyB3aXRoIGRpdmlkaW5nIGJ5IHplcm8uXG4gICAgeCA9IHhPcmlnaW4gKiAoZCAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoLWMgLyBkZXRlcm1pbmFudCkgKyAoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50O1xuICAgIHkgPSB4T3JpZ2luICogKC1iIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqIChhIC8gZGV0ZXJtaW5hbnQpIC0gKGEgKiB0eSAtIGIgKiB0eCkgLyBkZXRlcm1pbmFudDtcbiAgICB4T3JpZ2luID0geDtcbiAgICB5T3JpZ2luID0geTtcbiAgfVxuXG4gIGlmIChzbW9vdGggfHwgc21vb3RoICE9PSBmYWxzZSAmJiBjYWNoZS5zbW9vdGgpIHtcbiAgICB0eCA9IHhPcmlnaW4gLSB4T3JpZ2luT2xkO1xuICAgIHR5ID0geU9yaWdpbiAtIHlPcmlnaW5PbGQ7XG4gICAgY2FjaGUueE9mZnNldCA9IHhPZmZzZXRPbGQgKyAodHggKiBhICsgdHkgKiBjKSAtIHR4O1xuICAgIGNhY2hlLnlPZmZzZXQgPSB5T2Zmc2V0T2xkICsgKHR4ICogYiArIHR5ICogZCkgLSB0eTtcbiAgfSBlbHNlIHtcbiAgICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIH1cblxuICBjYWNoZS54T3JpZ2luID0geE9yaWdpbjtcbiAgY2FjaGUueU9yaWdpbiA9IHlPcmlnaW47XG4gIGNhY2hlLnNtb290aCA9ICEhc21vb3RoO1xuICBjYWNoZS5vcmlnaW4gPSBvcmlnaW47XG4gIGNhY2hlLm9yaWdpbklzQWJzb2x1dGUgPSAhIW9yaWdpbklzQWJzb2x1dGU7XG4gIHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBcIjBweCAwcHhcIjsgLy9vdGhlcndpc2UsIGlmIHNvbWVvbmUgc2V0cyAgYW4gb3JpZ2luIHZpYSBDU1MsIGl0IHdpbGwgbGlrZWx5IGludGVyZmVyZSB3aXRoIHRoZSBTVkcgdHJhbnNmb3JtIGF0dHJpYnV0ZSBvbmVzIChiZWNhdXNlIHJlbWVtYmVyLCB3ZSdyZSBiYWtpbmcgdGhlIG9yaWdpbiBpbnRvIHRoZSBtYXRyaXgoKSB2YWx1ZSkuXG5cbiAgaWYgKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvKSB7XG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInhPcmlnaW5cIiwgeE9yaWdpbk9sZCwgeE9yaWdpbik7XG5cbiAgICBfYWRkTm9uVHdlZW5pbmdQVChwbHVnaW5Ub0FkZFByb3BUd2VlbnNUbywgY2FjaGUsIFwieU9yaWdpblwiLCB5T3JpZ2luT2xkLCB5T3JpZ2luKTtcblxuICAgIF9hZGROb25Ud2VlbmluZ1BUKHBsdWdpblRvQWRkUHJvcFR3ZWVuc1RvLCBjYWNoZSwgXCJ4T2Zmc2V0XCIsIHhPZmZzZXRPbGQsIGNhY2hlLnhPZmZzZXQpO1xuXG4gICAgX2FkZE5vblR3ZWVuaW5nUFQocGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8sIGNhY2hlLCBcInlPZmZzZXRcIiwgeU9mZnNldE9sZCwgY2FjaGUueU9mZnNldCk7XG4gIH1cblxuICB0YXJnZXQuc2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIsIHhPcmlnaW4gKyBcIiBcIiArIHlPcmlnaW4pO1xufSxcbiAgICBfcGFyc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB1bmNhY2hlKSB7XG4gIHZhciBjYWNoZSA9IHRhcmdldC5fZ3NhcCB8fCBuZXcgR1NDYWNoZSh0YXJnZXQpO1xuXG4gIGlmIChcInhcIiBpbiBjYWNoZSAmJiAhdW5jYWNoZSAmJiAhY2FjaGUudW5jYWNoZSkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGludmVydGVkU2NhbGVYID0gY2FjaGUuc2NhbGVYIDwgMCxcbiAgICAgIHB4ID0gXCJweFwiLFxuICAgICAgZGVnID0gXCJkZWdcIixcbiAgICAgIG9yaWdpbiA9IF9nZXRDb21wdXRlZFByb3BlcnR5KHRhcmdldCwgX3RyYW5zZm9ybU9yaWdpblByb3ApIHx8IFwiMFwiLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB6LFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZLFxuICAgICAgcm90YXRpb24sXG4gICAgICByb3RhdGlvblgsXG4gICAgICByb3RhdGlvblksXG4gICAgICBza2V3WCxcbiAgICAgIHNrZXdZLFxuICAgICAgcGVyc3BlY3RpdmUsXG4gICAgICB4T3JpZ2luLFxuICAgICAgeU9yaWdpbixcbiAgICAgIG1hdHJpeCxcbiAgICAgIGFuZ2xlLFxuICAgICAgY29zLFxuICAgICAgc2luLFxuICAgICAgYSxcbiAgICAgIGIsXG4gICAgICBjLFxuICAgICAgZCxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHQxLFxuICAgICAgdDIsXG4gICAgICB0MyxcbiAgICAgIGExMyxcbiAgICAgIGEyMyxcbiAgICAgIGEzMyxcbiAgICAgIGE0MixcbiAgICAgIGE0MyxcbiAgICAgIGEzMjtcbiAgeCA9IHkgPSB6ID0gcm90YXRpb24gPSByb3RhdGlvblggPSByb3RhdGlvblkgPSBza2V3WCA9IHNrZXdZID0gcGVyc3BlY3RpdmUgPSAwO1xuICBzY2FsZVggPSBzY2FsZVkgPSAxO1xuICBjYWNoZS5zdmcgPSAhISh0YXJnZXQuZ2V0Q1RNICYmIF9pc1NWRyh0YXJnZXQpKTtcbiAgbWF0cml4ID0gX2dldE1hdHJpeCh0YXJnZXQsIGNhY2hlLnN2Zyk7XG5cbiAgaWYgKGNhY2hlLnN2Zykge1xuICAgIHQxID0gKCFjYWNoZS51bmNhY2hlIHx8IG9yaWdpbiA9PT0gXCIwcHggMHB4XCIpICYmICF1bmNhY2hlICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7IC8vIGlmIG9yaWdpbiBpcyAwLDAgYW5kIGNhY2hlLnVuY2FjaGUgaXMgdHJ1ZSwgbGV0IHRoZSByZWNvcmRlZCBkYXRhLXN2Zy1vcmlnaW4gc3RheS4gT3RoZXJ3aXNlLCB3aGVuZXZlciB3ZSBzZXQgY2FjaGUudW5jYWNoZSB0byB0cnVlLCB3ZSdkIG5lZWQgdG8gc2V0IGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gKGNhY2hlLnhPcmlnaW4gLSBiYm94LngpICsgXCJweCBcIiArIChjYWNoZS55T3JpZ2luIC0gYmJveC55KSArIFwicHhcIi4gUmVtZW1iZXIsIHRvIHdvcmsgYXJvdW5kIGJyb3dzZXIgaW5jb25zaXN0ZW5jaWVzIHdlIGFsd2F5cyBmb3JjZSBTVkcgZWxlbWVudHMnIHRyYW5zZm9ybU9yaWdpbiB0byAwLDAgYW5kIG9mZnNldCB0aGUgdHJhbnNsYXRpb24gYWNjb3JkaW5nbHkuXG5cbiAgICBfYXBwbHlTVkdPcmlnaW4odGFyZ2V0LCB0MSB8fCBvcmlnaW4sICEhdDEgfHwgY2FjaGUub3JpZ2luSXNBYnNvbHV0ZSwgY2FjaGUuc21vb3RoICE9PSBmYWxzZSwgbWF0cml4KTtcbiAgfVxuXG4gIHhPcmlnaW4gPSBjYWNoZS54T3JpZ2luIHx8IDA7XG4gIHlPcmlnaW4gPSBjYWNoZS55T3JpZ2luIHx8IDA7XG5cbiAgaWYgKG1hdHJpeCAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcbiAgICBhID0gbWF0cml4WzBdOyAvL2ExMVxuXG4gICAgYiA9IG1hdHJpeFsxXTsgLy9hMjFcblxuICAgIGMgPSBtYXRyaXhbMl07IC8vYTMxXG5cbiAgICBkID0gbWF0cml4WzNdOyAvL2E0MVxuXG4gICAgeCA9IGExMiA9IG1hdHJpeFs0XTtcbiAgICB5ID0gYTIyID0gbWF0cml4WzVdOyAvLzJEIG1hdHJpeFxuXG4gICAgaWYgKG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgIHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICAgIHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcbiAgICAgIHJvdGF0aW9uID0gYSB8fCBiID8gX2F0YW4yKGIsIGEpICogX1JBRDJERUcgOiAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXG4gICAgICBza2V3WCA9IGMgfHwgZCA/IF9hdGFuMihjLCBkKSAqIF9SQUQyREVHICsgcm90YXRpb24gOiAwO1xuICAgICAgc2tld1ggJiYgKHNjYWxlWSAqPSBNYXRoLmFicyhNYXRoLmNvcyhza2V3WCAqIF9ERUcyUkFEKSkpO1xuXG4gICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgIHggLT0geE9yaWdpbiAtICh4T3JpZ2luICogYSArIHlPcmlnaW4gKiBjKTtcbiAgICAgICAgeSAtPSB5T3JpZ2luIC0gKHhPcmlnaW4gKiBiICsgeU9yaWdpbiAqIGQpO1xuICAgICAgfSAvLzNEIG1hdHJpeFxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGEzMiA9IG1hdHJpeFs2XTtcbiAgICAgIGE0MiA9IG1hdHJpeFs3XTtcbiAgICAgIGExMyA9IG1hdHJpeFs4XTtcbiAgICAgIGEyMyA9IG1hdHJpeFs5XTtcbiAgICAgIGEzMyA9IG1hdHJpeFsxMF07XG4gICAgICBhNDMgPSBtYXRyaXhbMTFdO1xuICAgICAgeCA9IG1hdHJpeFsxMl07XG4gICAgICB5ID0gbWF0cml4WzEzXTtcbiAgICAgIHogPSBtYXRyaXhbMTRdO1xuICAgICAgYW5nbGUgPSBfYXRhbjIoYTMyLCBhMzMpO1xuICAgICAgcm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRzsgLy9yb3RhdGlvblhcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG4gICAgICAgIHQxID0gYTEyICogY29zICsgYTEzICogc2luO1xuICAgICAgICB0MiA9IGEyMiAqIGNvcyArIGEyMyAqIHNpbjtcbiAgICAgICAgdDMgPSBhMzIgKiBjb3MgKyBhMzMgKiBzaW47XG4gICAgICAgIGExMyA9IGExMiAqIC1zaW4gKyBhMTMgKiBjb3M7XG4gICAgICAgIGEyMyA9IGEyMiAqIC1zaW4gKyBhMjMgKiBjb3M7XG4gICAgICAgIGEzMyA9IGEzMiAqIC1zaW4gKyBhMzMgKiBjb3M7XG4gICAgICAgIGE0MyA9IGE0MiAqIC1zaW4gKyBhNDMgKiBjb3M7XG4gICAgICAgIGExMiA9IHQxO1xuICAgICAgICBhMjIgPSB0MjtcbiAgICAgICAgYTMyID0gdDM7XG4gICAgICB9IC8vcm90YXRpb25ZXG5cblxuICAgICAgYW5nbGUgPSBfYXRhbjIoLWMsIGEzMyk7XG4gICAgICByb3RhdGlvblkgPSBhbmdsZSAqIF9SQUQyREVHO1xuXG4gICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgY29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgdDEgPSBhICogY29zIC0gYTEzICogc2luO1xuICAgICAgICB0MiA9IGIgKiBjb3MgLSBhMjMgKiBzaW47XG4gICAgICAgIHQzID0gYyAqIGNvcyAtIGEzMyAqIHNpbjtcbiAgICAgICAgYTQzID0gZCAqIHNpbiArIGE0MyAqIGNvcztcbiAgICAgICAgYSA9IHQxO1xuICAgICAgICBiID0gdDI7XG4gICAgICAgIGMgPSB0MztcbiAgICAgIH0gLy9yb3RhdGlvblpcblxuXG4gICAgICBhbmdsZSA9IF9hdGFuMihiLCBhKTtcbiAgICAgIHJvdGF0aW9uID0gYW5nbGUgKiBfUkFEMkRFRztcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0MSA9IGEgKiBjb3MgKyBiICogc2luO1xuICAgICAgICB0MiA9IGExMiAqIGNvcyArIGEyMiAqIHNpbjtcbiAgICAgICAgYiA9IGIgKiBjb3MgLSBhICogc2luO1xuICAgICAgICBhMjIgPSBhMjIgKiBjb3MgLSBhMTIgKiBzaW47XG4gICAgICAgIGEgPSB0MTtcbiAgICAgICAgYTEyID0gdDI7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3RhdGlvblggJiYgTWF0aC5hYnMocm90YXRpb25YKSArIE1hdGguYWJzKHJvdGF0aW9uKSA+IDM1OS45KSB7XG4gICAgICAgIC8vd2hlbiByb3RhdGlvblkgaXMgc2V0LCBpdCB3aWxsIG9mdGVuIGJlIHBhcnNlZCBhcyAxODAgZGVncmVlcyBkaWZmZXJlbnQgdGhhbiBpdCBzaG91bGQgYmUsIGFuZCByb3RhdGlvblggYW5kIHJvdGF0aW9uIGJvdGggYmVpbmcgMTgwIChpdCBsb29rcyB0aGUgc2FtZSksIHNvIHdlIGFkanVzdCBmb3IgdGhhdCBoZXJlLlxuICAgICAgICByb3RhdGlvblggPSByb3RhdGlvbiA9IDA7XG4gICAgICAgIHJvdGF0aW9uWSA9IDE4MCAtIHJvdGF0aW9uWTtcbiAgICAgIH1cblxuICAgICAgc2NhbGVYID0gX3JvdW5kKE1hdGguc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpKTtcbiAgICAgIHNjYWxlWSA9IF9yb3VuZChNYXRoLnNxcnQoYTIyICogYTIyICsgYTMyICogYTMyKSk7XG4gICAgICBhbmdsZSA9IF9hdGFuMihhMTIsIGEyMik7XG4gICAgICBza2V3WCA9IE1hdGguYWJzKGFuZ2xlKSA+IDAuMDAwMiA/IGFuZ2xlICogX1JBRDJERUcgOiAwO1xuICAgICAgcGVyc3BlY3RpdmUgPSBhNDMgPyAxIC8gKGE0MyA8IDAgPyAtYTQzIDogYTQzKSA6IDA7XG4gICAgfVxuXG4gICAgaWYgKGNhY2hlLnN2Zykge1xuICAgICAgLy9zZW5zZSBpZiB0aGVyZSBhcmUgQ1NTIHRyYW5zZm9ybXMgYXBwbGllZCBvbiBhbiBTVkcgZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlIG11c3Qgb3ZlcndyaXRlIHRoZW0gd2hlbiByZW5kZXJpbmcuIFRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGlzIG1vcmUgcmVsaWFibGUgY3Jvc3MtYnJvd3NlciwgYnV0IHdlIGNhbid0IGp1c3QgcmVtb3ZlIHRoZSBDU1Mgb25lcyBiZWNhdXNlIHRoZXkgbWF5IGJlIGFwcGxpZWQgaW4gYSBDU1MgcnVsZSBzb21ld2hlcmUgKG5vdCBqdXN0IGlubGluZSkuXG4gICAgICB0MSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG4gICAgICBjYWNoZS5mb3JjZUNTUyA9IHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJcIikgfHwgIV9pc051bGxUcmFuc2Zvcm0oX2dldENvbXB1dGVkUHJvcGVydHkodGFyZ2V0LCBfdHJhbnNmb3JtUHJvcCkpO1xuICAgICAgdDEgJiYgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0MSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKE1hdGguYWJzKHNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHNrZXdYKSA8IDI3MCkge1xuICAgIGlmIChpbnZlcnRlZFNjYWxlWCkge1xuICAgICAgc2NhbGVYICo9IC0xO1xuICAgICAgc2tld1ggKz0gcm90YXRpb24gPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgICByb3RhdGlvbiArPSByb3RhdGlvbiA8PSAwID8gMTgwIDogLTE4MDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGVZICo9IC0xO1xuICAgICAgc2tld1ggKz0gc2tld1ggPD0gMCA/IDE4MCA6IC0xODA7XG4gICAgfVxuICB9XG5cbiAgY2FjaGUueCA9IHggLSAoKGNhY2hlLnhQZXJjZW50ID0geCAmJiAoY2FjaGUueFBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldFdpZHRoIC8gMikgPT09IE1hdGgucm91bmQoLXgpID8gLTUwIDogMCkpKSA/IHRhcmdldC5vZmZzZXRXaWR0aCAqIGNhY2hlLnhQZXJjZW50IC8gMTAwIDogMCkgKyBweDtcbiAgY2FjaGUueSA9IHkgLSAoKGNhY2hlLnlQZXJjZW50ID0geSAmJiAoY2FjaGUueVBlcmNlbnQgfHwgKE1hdGgucm91bmQodGFyZ2V0Lm9mZnNldEhlaWdodCAvIDIpID09PSBNYXRoLnJvdW5kKC15KSA/IC01MCA6IDApKSkgPyB0YXJnZXQub2Zmc2V0SGVpZ2h0ICogY2FjaGUueVBlcmNlbnQgLyAxMDAgOiAwKSArIHB4O1xuICBjYWNoZS56ID0geiArIHB4O1xuICBjYWNoZS5zY2FsZVggPSBfcm91bmQoc2NhbGVYKTtcbiAgY2FjaGUuc2NhbGVZID0gX3JvdW5kKHNjYWxlWSk7XG4gIGNhY2hlLnJvdGF0aW9uID0gX3JvdW5kKHJvdGF0aW9uKSArIGRlZztcbiAgY2FjaGUucm90YXRpb25YID0gX3JvdW5kKHJvdGF0aW9uWCkgKyBkZWc7XG4gIGNhY2hlLnJvdGF0aW9uWSA9IF9yb3VuZChyb3RhdGlvblkpICsgZGVnO1xuICBjYWNoZS5za2V3WCA9IHNrZXdYICsgZGVnO1xuICBjYWNoZS5za2V3WSA9IHNrZXdZICsgZGVnO1xuICBjYWNoZS50cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlICsgcHg7XG5cbiAgaWYgKGNhY2hlLnpPcmlnaW4gPSBwYXJzZUZsb2F0KG9yaWdpbi5zcGxpdChcIiBcIilbMl0pIHx8IDApIHtcbiAgICBzdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBfZmlyc3RUd29Pbmx5KG9yaWdpbik7XG4gIH1cblxuICBjYWNoZS54T2Zmc2V0ID0gY2FjaGUueU9mZnNldCA9IDA7XG4gIGNhY2hlLmZvcmNlM0QgPSBfY29uZmlnLmZvcmNlM0Q7XG4gIGNhY2hlLnJlbmRlclRyYW5zZm9ybSA9IGNhY2hlLnN2ZyA/IF9yZW5kZXJTVkdUcmFuc2Zvcm1zIDogX3N1cHBvcnRzM0QgPyBfcmVuZGVyQ1NTVHJhbnNmb3JtcyA6IF9yZW5kZXJOb24zRFRyYW5zZm9ybXM7XG4gIGNhY2hlLnVuY2FjaGUgPSAwO1xuICByZXR1cm4gY2FjaGU7XG59LFxuICAgIF9maXJzdFR3b09ubHkgPSBmdW5jdGlvbiBfZmlyc3RUd29Pbmx5KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgPSB2YWx1ZS5zcGxpdChcIiBcIikpWzBdICsgXCIgXCIgKyB2YWx1ZVsxXTtcbn0sXG4gICAgLy9mb3IgaGFuZGxpbmcgdHJhbnNmb3JtT3JpZ2luIHZhbHVlcywgc3RyaXBwaW5nIG91dCB0aGUgM3JkIGRpbWVuc2lvblxuX2FkZFB4VHJhbnNsYXRlID0gZnVuY3Rpb24gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgc3RhcnQsIHZhbHVlKSB7XG4gIHZhciB1bml0ID0gZ2V0VW5pdChzdGFydCk7XG4gIHJldHVybiBfcm91bmQocGFyc2VGbG9hdChzdGFydCkgKyBwYXJzZUZsb2F0KF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ4XCIsIHZhbHVlICsgXCJweFwiLCB1bml0KSkpICsgdW5pdDtcbn0sXG4gICAgX3JlbmRlck5vbjNEVHJhbnNmb3JtcyA9IGZ1bmN0aW9uIF9yZW5kZXJOb24zRFRyYW5zZm9ybXMocmF0aW8sIGNhY2hlKSB7XG4gIGNhY2hlLnogPSBcIjBweFwiO1xuICBjYWNoZS5yb3RhdGlvblkgPSBjYWNoZS5yb3RhdGlvblggPSBcIjBkZWdcIjtcbiAgY2FjaGUuZm9yY2UzRCA9IDA7XG5cbiAgX3JlbmRlckNTU1RyYW5zZm9ybXMocmF0aW8sIGNhY2hlKTtcbn0sXG4gICAgX3plcm9EZWcgPSBcIjBkZWdcIixcbiAgICBfemVyb1B4ID0gXCIwcHhcIixcbiAgICBfZW5kUGFyZW50aGVzaXMgPSBcIikgXCIsXG4gICAgX3JlbmRlckNTU1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyQ1NTVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYgPSBjYWNoZSB8fCB0aGlzLFxuICAgICAgeFBlcmNlbnQgPSBfcmVmLnhQZXJjZW50LFxuICAgICAgeVBlcmNlbnQgPSBfcmVmLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnksXG4gICAgICB6ID0gX3JlZi56LFxuICAgICAgcm90YXRpb24gPSBfcmVmLnJvdGF0aW9uLFxuICAgICAgcm90YXRpb25ZID0gX3JlZi5yb3RhdGlvblksXG4gICAgICByb3RhdGlvblggPSBfcmVmLnJvdGF0aW9uWCxcbiAgICAgIHNrZXdYID0gX3JlZi5za2V3WCxcbiAgICAgIHNrZXdZID0gX3JlZi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgc2NhbGVZID0gX3JlZi5zY2FsZVksXG4gICAgICB0cmFuc2Zvcm1QZXJzcGVjdGl2ZSA9IF9yZWYudHJhbnNmb3JtUGVyc3BlY3RpdmUsXG4gICAgICBmb3JjZTNEID0gX3JlZi5mb3JjZTNELFxuICAgICAgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICB6T3JpZ2luID0gX3JlZi56T3JpZ2luLFxuICAgICAgdHJhbnNmb3JtcyA9IFwiXCIsXG4gICAgICB1c2UzRCA9IGZvcmNlM0QgPT09IFwiYXV0b1wiICYmIHJhdGlvICYmIHJhdGlvICE9PSAxIHx8IGZvcmNlM0QgPT09IHRydWU7IC8vIFNhZmFyaSBoYXMgYSBidWcgdGhhdCBjYXVzZXMgaXQgbm90IHRvIHJlbmRlciAzRCB0cmFuc2Zvcm0tb3JpZ2luIHZhbHVlcyBwcm9wZXJseSwgc28gd2UgZm9yY2UgdGhlIHogb3JpZ2luIHRvIDAsIHJlY29yZCBpdCBpbiB0aGUgY2FjaGUsIGFuZCB0aGVuIGRvIHRoZSBtYXRoIGhlcmUgdG8gb2Zmc2V0IHRoZSB0cmFuc2xhdGUgdmFsdWVzIGFjY29yZGluZ2x5IChiYXNpY2FsbHkgZG8gdGhlIDNEIHRyYW5zZm9ybS1vcmlnaW4gcGFydCBtYW51YWxseSlcblxuXG4gIGlmICh6T3JpZ2luICYmIChyb3RhdGlvblggIT09IF96ZXJvRGVnIHx8IHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpKSB7XG4gICAgdmFyIGFuZ2xlID0gcGFyc2VGbG9hdChyb3RhdGlvblkpICogX0RFRzJSQUQsXG4gICAgICAgIGExMyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgYTMzID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjb3M7XG5cbiAgICBhbmdsZSA9IHBhcnNlRmxvYXQocm90YXRpb25YKSAqIF9ERUcyUkFEO1xuICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICB4ID0gX2FkZFB4VHJhbnNsYXRlKHRhcmdldCwgeCwgYTEzICogY29zICogLXpPcmlnaW4pO1xuICAgIHkgPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB5LCAtTWF0aC5zaW4oYW5nbGUpICogLXpPcmlnaW4pO1xuICAgIHogPSBfYWRkUHhUcmFuc2xhdGUodGFyZ2V0LCB6LCBhMzMgKiBjb3MgKiAtek9yaWdpbiArIHpPcmlnaW4pO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybVBlcnNwZWN0aXZlICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInBlcnNwZWN0aXZlKFwiICsgdHJhbnNmb3JtUGVyc3BlY3RpdmUgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwidHJhbnNsYXRlKFwiICsgeFBlcmNlbnQgKyBcIiUsIFwiICsgeVBlcmNlbnQgKyBcIiUpIFwiO1xuICB9XG5cbiAgaWYgKHVzZTNEIHx8IHggIT09IF96ZXJvUHggfHwgeSAhPT0gX3plcm9QeCB8fCB6ICE9PSBfemVyb1B4KSB7XG4gICAgdHJhbnNmb3JtcyArPSB6ICE9PSBfemVyb1B4IHx8IHVzZTNEID8gXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIFwiICsgeiArIFwiKSBcIiA6IFwidHJhbnNsYXRlKFwiICsgeCArIFwiLCBcIiArIHkgKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAocm90YXRpb24gIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgaWYgKHJvdGF0aW9uWSAhPT0gX3plcm9EZWcpIHtcbiAgICB0cmFuc2Zvcm1zICs9IFwicm90YXRlWShcIiArIHJvdGF0aW9uWSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChyb3RhdGlvblggIT09IF96ZXJvRGVnKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInJvdGF0ZVgoXCIgKyByb3RhdGlvblggKyBfZW5kUGFyZW50aGVzaXM7XG4gIH1cblxuICBpZiAoc2tld1ggIT09IF96ZXJvRGVnIHx8IHNrZXdZICE9PSBfemVyb0RlZykge1xuICAgIHRyYW5zZm9ybXMgKz0gXCJza2V3KFwiICsgc2tld1ggKyBcIiwgXCIgKyBza2V3WSArIF9lbmRQYXJlbnRoZXNpcztcbiAgfVxuXG4gIGlmIChzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxKSB7XG4gICAgdHJhbnNmb3JtcyArPSBcInNjYWxlKFwiICsgc2NhbGVYICsgXCIsIFwiICsgc2NhbGVZICsgX2VuZFBhcmVudGhlc2lzO1xuICB9XG5cbiAgdGFyZ2V0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXMgfHwgXCJ0cmFuc2xhdGUoMCwgMClcIjtcbn0sXG4gICAgX3JlbmRlclNWR1RyYW5zZm9ybXMgPSBmdW5jdGlvbiBfcmVuZGVyU1ZHVHJhbnNmb3JtcyhyYXRpbywgY2FjaGUpIHtcbiAgdmFyIF9yZWYyID0gY2FjaGUgfHwgdGhpcyxcbiAgICAgIHhQZXJjZW50ID0gX3JlZjIueFBlcmNlbnQsXG4gICAgICB5UGVyY2VudCA9IF9yZWYyLnlQZXJjZW50LFxuICAgICAgeCA9IF9yZWYyLngsXG4gICAgICB5ID0gX3JlZjIueSxcbiAgICAgIHJvdGF0aW9uID0gX3JlZjIucm90YXRpb24sXG4gICAgICBza2V3WCA9IF9yZWYyLnNrZXdYLFxuICAgICAgc2tld1kgPSBfcmVmMi5za2V3WSxcbiAgICAgIHNjYWxlWCA9IF9yZWYyLnNjYWxlWCxcbiAgICAgIHNjYWxlWSA9IF9yZWYyLnNjYWxlWSxcbiAgICAgIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgIHhPcmlnaW4gPSBfcmVmMi54T3JpZ2luLFxuICAgICAgeU9yaWdpbiA9IF9yZWYyLnlPcmlnaW4sXG4gICAgICB4T2Zmc2V0ID0gX3JlZjIueE9mZnNldCxcbiAgICAgIHlPZmZzZXQgPSBfcmVmMi55T2Zmc2V0LFxuICAgICAgZm9yY2VDU1MgPSBfcmVmMi5mb3JjZUNTUyxcbiAgICAgIHR4ID0gcGFyc2VGbG9hdCh4KSxcbiAgICAgIHR5ID0gcGFyc2VGbG9hdCh5KSxcbiAgICAgIGExMSxcbiAgICAgIGEyMSxcbiAgICAgIGExMixcbiAgICAgIGEyMixcbiAgICAgIHRlbXA7XG5cbiAgcm90YXRpb24gPSBwYXJzZUZsb2F0KHJvdGF0aW9uKTtcbiAgc2tld1ggPSBwYXJzZUZsb2F0KHNrZXdYKTtcbiAgc2tld1kgPSBwYXJzZUZsb2F0KHNrZXdZKTtcblxuICBpZiAoc2tld1kpIHtcbiAgICAvL2ZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAxMCBkZWdyZWVzLlxuICAgIHNrZXdZID0gcGFyc2VGbG9hdChza2V3WSk7XG4gICAgc2tld1ggKz0gc2tld1k7XG4gICAgcm90YXRpb24gKz0gc2tld1k7XG4gIH1cblxuICBpZiAocm90YXRpb24gfHwgc2tld1gpIHtcbiAgICByb3RhdGlvbiAqPSBfREVHMlJBRDtcbiAgICBza2V3WCAqPSBfREVHMlJBRDtcbiAgICBhMTEgPSBNYXRoLmNvcyhyb3RhdGlvbikgKiBzY2FsZVg7XG4gICAgYTIxID0gTWF0aC5zaW4ocm90YXRpb24pICogc2NhbGVYO1xuICAgIGExMiA9IE1hdGguc2luKHJvdGF0aW9uIC0gc2tld1gpICogLXNjYWxlWTtcbiAgICBhMjIgPSBNYXRoLmNvcyhyb3RhdGlvbiAtIHNrZXdYKSAqIHNjYWxlWTtcblxuICAgIGlmIChza2V3WCkge1xuICAgICAgc2tld1kgKj0gX0RFRzJSQUQ7XG4gICAgICB0ZW1wID0gTWF0aC50YW4oc2tld1ggLSBza2V3WSk7XG4gICAgICB0ZW1wID0gTWF0aC5zcXJ0KDEgKyB0ZW1wICogdGVtcCk7XG4gICAgICBhMTIgKj0gdGVtcDtcbiAgICAgIGEyMiAqPSB0ZW1wO1xuXG4gICAgICBpZiAoc2tld1kpIHtcbiAgICAgICAgdGVtcCA9IE1hdGgudGFuKHNrZXdZKTtcbiAgICAgICAgdGVtcCA9IE1hdGguc3FydCgxICsgdGVtcCAqIHRlbXApO1xuICAgICAgICBhMTEgKj0gdGVtcDtcbiAgICAgICAgYTIxICo9IHRlbXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYTExID0gX3JvdW5kKGExMSk7XG4gICAgYTIxID0gX3JvdW5kKGEyMSk7XG4gICAgYTEyID0gX3JvdW5kKGExMik7XG4gICAgYTIyID0gX3JvdW5kKGEyMik7XG4gIH0gZWxzZSB7XG4gICAgYTExID0gc2NhbGVYO1xuICAgIGEyMiA9IHNjYWxlWTtcbiAgICBhMjEgPSBhMTIgPSAwO1xuICB9XG5cbiAgaWYgKHR4ICYmICF+KHggKyBcIlwiKS5pbmRleE9mKFwicHhcIikgfHwgdHkgJiYgIX4oeSArIFwiXCIpLmluZGV4T2YoXCJweFwiKSkge1xuICAgIHR4ID0gX2NvbnZlcnRUb1VuaXQodGFyZ2V0LCBcInhcIiwgeCwgXCJweFwiKTtcbiAgICB0eSA9IF9jb252ZXJ0VG9Vbml0KHRhcmdldCwgXCJ5XCIsIHksIFwicHhcIik7XG4gIH1cblxuICBpZiAoeE9yaWdpbiB8fCB5T3JpZ2luIHx8IHhPZmZzZXQgfHwgeU9mZnNldCkge1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeE9yaWdpbiAtICh4T3JpZ2luICogYTExICsgeU9yaWdpbiAqIGExMikgKyB4T2Zmc2V0KTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlPcmlnaW4gLSAoeE9yaWdpbiAqIGEyMSArIHlPcmlnaW4gKiBhMjIpICsgeU9mZnNldCk7XG4gIH1cblxuICBpZiAoeFBlcmNlbnQgfHwgeVBlcmNlbnQpIHtcbiAgICAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIHRyYW5zbGF0aW9uIHRvIHNpbXVsYXRlIGl0LlxuICAgIHRlbXAgPSB0YXJnZXQuZ2V0QkJveCgpO1xuICAgIHR4ID0gX3JvdW5kKHR4ICsgeFBlcmNlbnQgLyAxMDAgKiB0ZW1wLndpZHRoKTtcbiAgICB0eSA9IF9yb3VuZCh0eSArIHlQZXJjZW50IC8gMTAwICogdGVtcC5oZWlnaHQpO1xuICB9XG5cbiAgdGVtcCA9IFwibWF0cml4KFwiICsgYTExICsgXCIsXCIgKyBhMjEgKyBcIixcIiArIGExMiArIFwiLFwiICsgYTIyICsgXCIsXCIgKyB0eCArIFwiLFwiICsgdHkgKyBcIilcIjtcbiAgdGFyZ2V0LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB0ZW1wKTtcbiAgZm9yY2VDU1MgJiYgKHRhcmdldC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0ZW1wKTsgLy9zb21lIGJyb3dzZXJzIHByaW9yaXRpemUgQ1NTIHRyYW5zZm9ybXMgb3ZlciB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZS4gV2hlbiB3ZSBzZW5zZSB0aGF0IHRoZSB1c2VyIGhhcyBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkLCB3ZSBtdXN0IG92ZXJ3cml0ZSB0aGVtIHRoaXMgd2F5IChvdGhlcndpc2Ugc29tZSBicm93c2VyIHNpbXBseSB3b24ndCByZW5kZXIgdGhlICB0cmFuc2Zvcm0gYXR0cmlidXRlIGNoYW5nZXMhKVxufSxcbiAgICBfYWRkUm90YXRpb25hbFByb3BUd2VlbiA9IGZ1bmN0aW9uIF9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuKHBsdWdpbiwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGVuZFZhbHVlLCByZWxhdGl2ZSkge1xuICB2YXIgY2FwID0gMzYwLFxuICAgICAgaXNTdHJpbmcgPSBfaXNTdHJpbmcoZW5kVmFsdWUpLFxuICAgICAgZW5kTnVtID0gcGFyc2VGbG9hdChlbmRWYWx1ZSkgKiAoaXNTdHJpbmcgJiYgfmVuZFZhbHVlLmluZGV4T2YoXCJyYWRcIikgPyBfUkFEMkRFRyA6IDEpLFxuICAgICAgY2hhbmdlID0gcmVsYXRpdmUgPyBlbmROdW0gKiByZWxhdGl2ZSA6IGVuZE51bSAtIHN0YXJ0TnVtLFxuICAgICAgZmluYWxWYWx1ZSA9IHN0YXJ0TnVtICsgY2hhbmdlICsgXCJkZWdcIixcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHB0O1xuXG4gIGlmIChpc1N0cmluZykge1xuICAgIGRpcmVjdGlvbiA9IGVuZFZhbHVlLnNwbGl0KFwiX1wiKVsxXTtcblxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwic2hvcnRcIikge1xuICAgICAgY2hhbmdlICU9IGNhcDtcblxuICAgICAgaWYgKGNoYW5nZSAhPT0gY2hhbmdlICUgKGNhcCAvIDIpKSB7XG4gICAgICAgIGNoYW5nZSArPSBjaGFuZ2UgPCAwID8gY2FwIDogLWNhcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlyZWN0aW9uID09PSBcImN3XCIgJiYgY2hhbmdlIDwgMCkge1xuICAgICAgY2hhbmdlID0gKGNoYW5nZSArIGNhcCAqIF9iaWdOdW0pICUgY2FwIC0gfn4oY2hhbmdlIC8gY2FwKSAqIGNhcDtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJjY3dcIiAmJiBjaGFuZ2UgPiAwKSB7XG4gICAgICBjaGFuZ2UgPSAoY2hhbmdlIC0gY2FwICogX2JpZ051bSkgJSBjYXAgLSB+fihjaGFuZ2UgLyBjYXApICogY2FwO1xuICAgIH1cbiAgfVxuXG4gIHBsdWdpbi5fcHQgPSBwdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgdGFyZ2V0LCBwcm9wZXJ0eSwgc3RhcnROdW0sIGNoYW5nZSwgX3JlbmRlclByb3BXaXRoRW5kKTtcbiAgcHQuZSA9IGZpbmFsVmFsdWU7XG4gIHB0LnUgPSBcImRlZ1wiO1xuXG4gIHBsdWdpbi5fcHJvcHMucHVzaChwcm9wZXJ0eSk7XG5cbiAgcmV0dXJuIHB0O1xufSxcbiAgICBfYXNzaWduID0gZnVuY3Rpb24gX2Fzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAvLyBJbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IGhhdmUgT2JqZWN0LmFzc2lnbigpLCBzbyB3ZSByZWNyZWF0ZSBpdCBoZXJlLlxuICBmb3IgKHZhciBwIGluIHNvdXJjZSkge1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59LFxuICAgIF9hZGRSYXdUcmFuc2Zvcm1QVHMgPSBmdW5jdGlvbiBfYWRkUmF3VHJhbnNmb3JtUFRzKHBsdWdpbiwgdHJhbnNmb3JtcywgdGFyZ2V0KSB7XG4gIC8vZm9yIGhhbmRsaW5nIGNhc2VzIHdoZXJlIHNvbWVvbmUgcGFzc2VzIGluIGEgd2hvbGUgdHJhbnNmb3JtIHN0cmluZywgbGlrZSB0cmFuc2Zvcm06IFwic2NhbGUoMiwgMykgcm90YXRlKDIwZGVnKSB0cmFuc2xhdGVZKDMwZW0pXCJcbiAgdmFyIHN0YXJ0Q2FjaGUgPSBfYXNzaWduKHt9LCB0YXJnZXQuX2dzYXApLFxuICAgICAgZXhjbHVkZSA9IFwicGVyc3BlY3RpdmUsZm9yY2UzRCx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luXCIsXG4gICAgICBzdHlsZSA9IHRhcmdldC5zdHlsZSxcbiAgICAgIGVuZENhY2hlLFxuICAgICAgcCxcbiAgICAgIHN0YXJ0VmFsdWUsXG4gICAgICBlbmRWYWx1ZSxcbiAgICAgIHN0YXJ0TnVtLFxuICAgICAgZW5kTnVtLFxuICAgICAgc3RhcnRVbml0LFxuICAgICAgZW5kVW5pdDtcblxuICBpZiAoc3RhcnRDYWNoZS5zdmcpIHtcbiAgICBzdGFydFZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwiXCIpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybXM7XG4gICAgZW5kQ2FjaGUgPSBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCAxKTtcblxuICAgIF9yZW1vdmVQcm9wZXJ0eSh0YXJnZXQsIF90cmFuc2Zvcm1Qcm9wKTtcblxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgc3RhcnRWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnRWYWx1ZSA9IGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KVtfdHJhbnNmb3JtUHJvcF07XG4gICAgc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtcztcbiAgICBlbmRDYWNoZSA9IF9wYXJzZVRyYW5zZm9ybSh0YXJnZXQsIDEpO1xuICAgIHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IHN0YXJ0VmFsdWU7XG4gIH1cblxuICBmb3IgKHAgaW4gX3RyYW5zZm9ybVByb3BzKSB7XG4gICAgc3RhcnRWYWx1ZSA9IHN0YXJ0Q2FjaGVbcF07XG4gICAgZW5kVmFsdWUgPSBlbmRDYWNoZVtwXTtcblxuICAgIGlmIChzdGFydFZhbHVlICE9PSBlbmRWYWx1ZSAmJiBleGNsdWRlLmluZGV4T2YocCkgPCAwKSB7XG4gICAgICAvL3R3ZWVuaW5nIHRvIG5vIHBlcnNwZWN0aXZlIGdpdmVzIHZlcnkgdW5pbnR1aXRpdmUgcmVzdWx0cyAtIGp1c3Qga2VlcCB0aGUgc2FtZSBwZXJzcGVjdGl2ZSBpbiB0aGF0IGNhc2UuXG4gICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgZW5kVW5pdCA9IGdldFVuaXQoZW5kVmFsdWUpO1xuICAgICAgc3RhcnROdW0gPSBzdGFydFVuaXQgIT09IGVuZFVuaXQgPyBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpIDogcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuICAgICAgcGx1Z2luLl9wdCA9IG5ldyBQcm9wVHdlZW4ocGx1Z2luLl9wdCwgZW5kQ2FjaGUsIHAsIHN0YXJ0TnVtLCBlbmROdW0gLSBzdGFydE51bSwgX3JlbmRlckNTU1Byb3ApO1xuICAgICAgcGx1Z2luLl9wdC51ID0gZW5kVW5pdCB8fCAwO1xuXG4gICAgICBwbHVnaW4uX3Byb3BzLnB1c2gocCk7XG4gICAgfVxuICB9XG5cbiAgX2Fzc2lnbihlbmRDYWNoZSwgc3RhcnRDYWNoZSk7XG59OyAvLyBoYW5kbGUgc3BsaXR0aW5nIGFwYXJ0IHBhZGRpbmcsIG1hcmdpbiwgYm9yZGVyV2lkdGgsIGFuZCBib3JkZXJSYWRpdXMgaW50byB0aGVpciA0IGNvbXBvbmVudHMuIEZpcmVmb3gsIGZvciBleGFtcGxlLCB3b24ndCByZXBvcnQgYm9yZGVyUmFkaXVzIGNvcnJlY3RseSAtIGl0IHdpbGwgb25seSBkbyBib3JkZXJUb3BMZWZ0UmFkaXVzIGFuZCB0aGUgb3RoZXIgY29ybmVycy4gV2UgYWxzbyB3YW50IHRvIGhhbmRsZSBwYWRkaW5nVG9wLCBtYXJnaW5MZWZ0LCBib3JkZXJSaWdodFdpZHRoLCBldGMuXG5cblxuX2ZvckVhY2hOYW1lKFwicGFkZGluZyxtYXJnaW4sV2lkdGgsUmFkaXVzXCIsIGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICB2YXIgdCA9IFwiVG9wXCIsXG4gICAgICByID0gXCJSaWdodFwiLFxuICAgICAgYiA9IFwiQm90dG9tXCIsXG4gICAgICBsID0gXCJMZWZ0XCIsXG4gICAgICBwcm9wcyA9IChpbmRleCA8IDMgPyBbdCwgciwgYiwgbF0gOiBbdCArIGwsIHQgKyByLCBiICsgciwgYiArIGxdKS5tYXAoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gaW5kZXggPCAyID8gbmFtZSArIHNpZGUgOiBcImJvcmRlclwiICsgc2lkZSArIG5hbWU7XG4gIH0pO1xuXG4gIF9zcGVjaWFsUHJvcHNbaW5kZXggPiAxID8gXCJib3JkZXJcIiArIG5hbWUgOiBuYW1lXSA9IGZ1bmN0aW9uIChwbHVnaW4sIHRhcmdldCwgcHJvcGVydHksIGVuZFZhbHVlLCB0d2Vlbikge1xuICAgIHZhciBhLCB2YXJzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCA0KSB7XG4gICAgICAvLyBnZXR0ZXIsIHBhc3NlZCB0YXJnZXQsIHByb3BlcnR5LCBhbmQgdW5pdCAoZnJvbSBfZ2V0KCkpXG4gICAgICBhID0gcHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiBfZ2V0KHBsdWdpbiwgcHJvcCwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgICB2YXJzID0gYS5qb2luKFwiIFwiKTtcbiAgICAgIHJldHVybiB2YXJzLnNwbGl0KGFbMF0pLmxlbmd0aCA9PT0gNSA/IGFbMF0gOiB2YXJzO1xuICAgIH1cblxuICAgIGEgPSAoZW5kVmFsdWUgKyBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgdmFycyA9IHt9O1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3AsIGkpIHtcbiAgICAgIHJldHVybiB2YXJzW3Byb3BdID0gYVtpXSA9IGFbaV0gfHwgYVsoaSAtIDEpIC8gMiB8IDBdO1xuICAgIH0pO1xuICAgIHBsdWdpbi5pbml0KHRhcmdldCwgdmFycywgdHdlZW4pO1xuICB9O1xufSk7XG5cbmV4cG9ydCB2YXIgQ1NTUGx1Z2luID0ge1xuICBuYW1lOiBcImNzc1wiLFxuICByZWdpc3RlcjogX2luaXRDb3JlLFxuICB0YXJnZXRUZXN0OiBmdW5jdGlvbiB0YXJnZXRUZXN0KHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuc3R5bGUgJiYgdGFyZ2V0Lm5vZGVUeXBlO1xuICB9LFxuICBpbml0OiBmdW5jdGlvbiBpbml0KHRhcmdldCwgdmFycywgdHdlZW4sIGluZGV4LCB0YXJnZXRzKSB7XG4gICAgdmFyIHByb3BzID0gdGhpcy5fcHJvcHMsXG4gICAgICAgIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuICAgICAgICBzdGFydEF0ID0gdHdlZW4udmFycy5zdGFydEF0LFxuICAgICAgICBzdGFydFZhbHVlLFxuICAgICAgICBlbmRWYWx1ZSxcbiAgICAgICAgZW5kTnVtLFxuICAgICAgICBzdGFydE51bSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc3BlY2lhbFByb3AsXG4gICAgICAgIHAsXG4gICAgICAgIHN0YXJ0VW5pdCxcbiAgICAgICAgZW5kVW5pdCxcbiAgICAgICAgcmVsYXRpdmUsXG4gICAgICAgIGlzVHJhbnNmb3JtUmVsYXRlZCxcbiAgICAgICAgdHJhbnNmb3JtUHJvcFR3ZWVuLFxuICAgICAgICBjYWNoZSxcbiAgICAgICAgc21vb3RoLFxuICAgICAgICBoYXNQcmlvcml0eTtcbiAgICBfcGx1Z2luSW5pdHRlZCB8fCBfaW5pdENvcmUoKTtcblxuICAgIGZvciAocCBpbiB2YXJzKSB7XG4gICAgICBpZiAocCA9PT0gXCJhdXRvUm91bmRcIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZW5kVmFsdWUgPSB2YXJzW3BdO1xuXG4gICAgICBpZiAoX3BsdWdpbnNbcF0gJiYgX2NoZWNrUGx1Z2luKHAsIHZhcnMsIHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSkge1xuICAgICAgICAvLyBwbHVnaW5zXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gdHlwZW9mIGVuZFZhbHVlO1xuICAgICAgc3BlY2lhbFByb3AgPSBfc3BlY2lhbFByb3BzW3BdO1xuXG4gICAgICBpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGVuZFZhbHVlID0gZW5kVmFsdWUuY2FsbCh0d2VlbiwgaW5kZXgsIHRhcmdldCwgdGFyZ2V0cyk7XG4gICAgICAgIHR5cGUgPSB0eXBlb2YgZW5kVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIH5lbmRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSkge1xuICAgICAgICBlbmRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKGVuZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwZWNpYWxQcm9wKSB7XG4gICAgICAgIHNwZWNpYWxQcm9wKHRoaXMsIHRhcmdldCwgcCwgZW5kVmFsdWUsIHR3ZWVuKSAmJiAoaGFzUHJpb3JpdHkgPSAxKTtcbiAgICAgIH0gZWxzZSBpZiAocC5zdWJzdHIoMCwgMikgPT09IFwiLS1cIikge1xuICAgICAgICAvL0NTUyB2YXJpYWJsZVxuICAgICAgICBzdGFydFZhbHVlID0gKGdldENvbXB1dGVkU3R5bGUodGFyZ2V0KS5nZXRQcm9wZXJ0eVZhbHVlKHApICsgXCJcIikudHJpbSgpO1xuICAgICAgICBlbmRWYWx1ZSArPSBcIlwiO1xuICAgICAgICBfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblxuICAgICAgICBpZiAoIV9jb2xvckV4cC50ZXN0KHN0YXJ0VmFsdWUpKSB7XG4gICAgICAgICAgLy8gY29sb3JzIGRvbid0IGhhdmUgdW5pdHNcbiAgICAgICAgICBzdGFydFVuaXQgPSBnZXRVbml0KHN0YXJ0VmFsdWUpO1xuICAgICAgICAgIGVuZFVuaXQgPSBnZXRVbml0KGVuZFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVuZFVuaXQgPyBzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgKHN0YXJ0VmFsdWUgPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpICsgZW5kVW5pdCkgOiBzdGFydFVuaXQgJiYgKGVuZFZhbHVlICs9IHN0YXJ0VW5pdCk7XG4gICAgICAgIHRoaXMuYWRkKHN0eWxlLCBcInNldFByb3BlcnR5XCIsIHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBpbmRleCwgdGFyZ2V0cywgMCwgMCwgcCk7XG4gICAgICAgIHByb3BzLnB1c2gocCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHN0YXJ0QXQgJiYgcCBpbiBzdGFydEF0KSB7XG4gICAgICAgICAgLy8gaW4gY2FzZSBzb21lb25lIGhhcmQtY29kZXMgYSBjb21wbGV4IHZhbHVlIGFzIHRoZSBzdGFydCwgbGlrZSB0b3A6IFwiY2FsYygydmggLyAyKVwiLiBXaXRob3V0IHRoaXMsIGl0J2QgdXNlIHRoZSBjb21wdXRlZCB2YWx1ZSAoYWx3YXlzIGluIHB4KVxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSB0eXBlb2Ygc3RhcnRBdFtwXSA9PT0gXCJmdW5jdGlvblwiID8gc3RhcnRBdFtwXS5jYWxsKHR3ZWVuLCBpbmRleCwgdGFyZ2V0LCB0YXJnZXRzKSA6IHN0YXJ0QXRbcF07XG4gICAgICAgICAgcCBpbiBfY29uZmlnLnVuaXRzICYmICFnZXRVbml0KHN0YXJ0VmFsdWUpICYmIChzdGFydFZhbHVlICs9IF9jb25maWcudW5pdHNbcF0pOyAvLyBmb3IgY2FzZXMgd2hlbiBzb21lb25lIHBhc3NlcyBpbiBhIHVuaXRsZXNzIHZhbHVlIGxpa2Uge3g6IDEwMH07IGlmIHdlIHRyeSBzZXR0aW5nIHRyYW5zbGF0ZSgxMDAsIDBweCkgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICAgIF9pc1N0cmluZyhzdGFydFZhbHVlKSAmJiB+c3RhcnRWYWx1ZS5pbmRleE9mKFwicmFuZG9tKFwiKSAmJiAoc3RhcnRWYWx1ZSA9IF9yZXBsYWNlUmFuZG9tKHN0YXJ0VmFsdWUpKTtcbiAgICAgICAgICAoc3RhcnRWYWx1ZSArIFwiXCIpLmNoYXJBdCgxKSA9PT0gXCI9XCIgJiYgKHN0YXJ0VmFsdWUgPSBfZ2V0KHRhcmdldCwgcCkpOyAvLyBjYW4ndCB3b3JrIHdpdGggcmVsYXRpdmUgdmFsdWVzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IF9nZXQodGFyZ2V0LCBwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0TnVtID0gcGFyc2VGbG9hdChzdGFydFZhbHVlKTtcbiAgICAgICAgcmVsYXRpdmUgPSB0eXBlID09PSBcInN0cmluZ1wiICYmIGVuZFZhbHVlLmNoYXJBdCgxKSA9PT0gXCI9XCIgPyArKGVuZFZhbHVlLmNoYXJBdCgwKSArIFwiMVwiKSA6IDA7XG4gICAgICAgIHJlbGF0aXZlICYmIChlbmRWYWx1ZSA9IGVuZFZhbHVlLnN1YnN0cigyKSk7XG4gICAgICAgIGVuZE51bSA9IHBhcnNlRmxvYXQoZW5kVmFsdWUpO1xuXG4gICAgICAgIGlmIChwIGluIF9wcm9wZXJ0eUFsaWFzZXMpIHtcbiAgICAgICAgICBpZiAocCA9PT0gXCJhdXRvQWxwaGFcIikge1xuICAgICAgICAgICAgLy9zcGVjaWFsIGNhc2Ugd2hlcmUgd2UgY29udHJvbCB0aGUgdmlzaWJpbGl0eSBhbG9uZyB3aXRoIG9wYWNpdHkuIFdlIHN0aWxsIGFsbG93IHRoZSBvcGFjaXR5IHZhbHVlIHRvIHBhc3MgdGhyb3VnaCBhbmQgZ2V0IHR3ZWVuZWQuXG4gICAgICAgICAgICBpZiAoc3RhcnROdW0gPT09IDEgJiYgX2dldCh0YXJnZXQsIFwidmlzaWJpbGl0eVwiKSA9PT0gXCJoaWRkZW5cIiAmJiBlbmROdW0pIHtcbiAgICAgICAgICAgICAgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcbiAgICAgICAgICAgICAgc3RhcnROdW0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgXCJ2aXNpYmlsaXR5XCIsIHN0YXJ0TnVtID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiLCBlbmROdW0gPyBcImluaGVyaXRcIiA6IFwiaGlkZGVuXCIsICFlbmROdW0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwICE9PSBcInNjYWxlXCIgJiYgcCAhPT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcF07XG4gICAgICAgICAgICB+cC5pbmRleE9mKFwiLFwiKSAmJiAocCA9IHAuc3BsaXQoXCIsXCIpWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpc1RyYW5zZm9ybVJlbGF0ZWQgPSBwIGluIF90cmFuc2Zvcm1Qcm9wczsgLy8tLS0gVFJBTlNGT1JNLVJFTEFURUQgLS0tXG5cbiAgICAgICAgaWYgKGlzVHJhbnNmb3JtUmVsYXRlZCkge1xuICAgICAgICAgIGlmICghdHJhbnNmb3JtUHJvcFR3ZWVuKSB7XG4gICAgICAgICAgICBjYWNoZSA9IHRhcmdldC5fZ3NhcDtcbiAgICAgICAgICAgIGNhY2hlLnJlbmRlclRyYW5zZm9ybSAmJiAhdmFycy5wYXJzZVRyYW5zZm9ybSB8fCBfcGFyc2VUcmFuc2Zvcm0odGFyZ2V0LCB2YXJzLnBhcnNlVHJhbnNmb3JtKTsgLy8gaWYsIGZvciBleGFtcGxlLCBnc2FwLnNldCguLi4ge3RyYW5zZm9ybTpcInRyYW5zbGF0ZVgoNTB2dylcIn0pLCB0aGUgX2dldCgpIGNhbGwgZG9lc24ndCBwYXJzZSB0aGUgdHJhbnNmb3JtLCB0aHVzIGNhY2hlLnJlbmRlclRyYW5zZm9ybSB3b24ndCBiZSBzZXQgeWV0IHNvIGZvcmNlIHRoZSBwYXJzaW5nIG9mIHRoZSB0cmFuc2Zvcm0gaGVyZS5cblxuICAgICAgICAgICAgc21vb3RoID0gdmFycy5zbW9vdGhPcmlnaW4gIT09IGZhbHNlICYmIGNhY2hlLnNtb290aDtcbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2VlbiA9IHRoaXMuX3B0ID0gbmV3IFByb3BUd2Vlbih0aGlzLl9wdCwgc3R5bGUsIF90cmFuc2Zvcm1Qcm9wLCAwLCAxLCBjYWNoZS5yZW5kZXJUcmFuc2Zvcm0sIGNhY2hlLCAwLCAtMSk7IC8vdGhlIGZpcnN0IHRpbWUgdGhyb3VnaCwgY3JlYXRlIHRoZSByZW5kZXJpbmcgUHJvcFR3ZWVuIHNvIHRoYXQgaXQgcnVucyBMQVNUIChpbiB0aGUgbGlua2VkIGxpc3QsIHdlIGtlZXAgYWRkaW5nIHRvIHRoZSBiZWdpbm5pbmcpXG5cbiAgICAgICAgICAgIHRyYW5zZm9ybVByb3BUd2Vlbi5kZXAgPSAxOyAvL2ZsYWcgaXQgYXMgZGVwZW5kZW50IHNvIHRoYXQgaWYgdGhpbmdzIGdldCBraWxsZWQvb3ZlcndyaXR0ZW4gYW5kIHRoaXMgaXMgdGhlIG9ubHkgUHJvcFR3ZWVuIGxlZnQsIHdlIGNhbiBzYWZlbHkga2lsbCB0aGUgd2hvbGUgdHdlZW4uXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHAgPT09IFwic2NhbGVcIikge1xuICAgICAgICAgICAgdGhpcy5fcHQgPSBuZXcgUHJvcFR3ZWVuKHRoaXMuX3B0LCBjYWNoZSwgXCJzY2FsZVlcIiwgY2FjaGUuc2NhbGVZLCAocmVsYXRpdmUgPyByZWxhdGl2ZSAqIGVuZE51bSA6IGVuZE51bSAtIGNhY2hlLnNjYWxlWSkgfHwgMCk7XG4gICAgICAgICAgICBwcm9wcy5wdXNoKFwic2NhbGVZXCIsIHApO1xuICAgICAgICAgICAgcCArPSBcIlhcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIGVuZFZhbHVlID0gX2NvbnZlcnRLZXl3b3Jkc1RvUGVyY2VudGFnZXMoZW5kVmFsdWUpOyAvL2luIGNhc2Ugc29tZXRoaW5nIGxpa2UgXCJsZWZ0IHRvcFwiIG9yIFwiYm90dG9tIHJpZ2h0XCIgaXMgcGFzc2VkIGluLiBDb252ZXJ0IHRvIHBlcmNlbnRhZ2VzLlxuXG4gICAgICAgICAgICBpZiAoY2FjaGUuc3ZnKSB7XG4gICAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAwLCBzbW9vdGgsIDAsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZW5kVW5pdCA9IHBhcnNlRmxvYXQoZW5kVmFsdWUuc3BsaXQoXCIgXCIpWzJdKSB8fCAwOyAvL2hhbmRsZSB0aGUgek9yaWdpbiBzZXBhcmF0ZWx5IVxuXG4gICAgICAgICAgICAgIGVuZFVuaXQgIT09IGNhY2hlLnpPcmlnaW4gJiYgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwiek9yaWdpblwiLCBjYWNoZS56T3JpZ2luLCBlbmRVbml0KTtcblxuICAgICAgICAgICAgICBfYWRkTm9uVHdlZW5pbmdQVCh0aGlzLCBzdHlsZSwgcCwgX2ZpcnN0VHdvT25seShzdGFydFZhbHVlKSwgX2ZpcnN0VHdvT25seShlbmRWYWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwic3ZnT3JpZ2luXCIpIHtcbiAgICAgICAgICAgIF9hcHBseVNWR09yaWdpbih0YXJnZXQsIGVuZFZhbHVlLCAxLCBzbW9vdGgsIDAsIHRoaXMpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgaW4gX3JvdGF0aW9uYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfYWRkUm90YXRpb25hbFByb3BUd2Vlbih0aGlzLCBjYWNoZSwgcCwgc3RhcnROdW0sIGVuZFZhbHVlLCByZWxhdGl2ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocCA9PT0gXCJzbW9vdGhPcmlnaW5cIikge1xuICAgICAgICAgICAgX2FkZE5vblR3ZWVuaW5nUFQodGhpcywgY2FjaGUsIFwic21vb3RoXCIsIGNhY2hlLnNtb290aCwgZW5kVmFsdWUpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHAgPT09IFwiZm9yY2UzRFwiKSB7XG4gICAgICAgICAgICBjYWNoZVtwXSA9IGVuZFZhbHVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICAgICAgICBfYWRkUmF3VHJhbnNmb3JtUFRzKHRoaXMsIGVuZFZhbHVlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShwIGluIHN0eWxlKSkge1xuICAgICAgICAgIHAgPSBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNUcmFuc2Zvcm1SZWxhdGVkIHx8IChlbmROdW0gfHwgZW5kTnVtID09PSAwKSAmJiAoc3RhcnROdW0gfHwgc3RhcnROdW0gPT09IDApICYmICFfY29tcGxleEV4cC50ZXN0KGVuZFZhbHVlKSAmJiBwIGluIHN0eWxlKSB7XG4gICAgICAgICAgc3RhcnRVbml0ID0gKHN0YXJ0VmFsdWUgKyBcIlwiKS5zdWJzdHIoKHN0YXJ0TnVtICsgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICBlbmROdW0gfHwgKGVuZE51bSA9IDApOyAvLyBwcm90ZWN0IGFnYWluc3QgTmFOXG5cbiAgICAgICAgICBlbmRVbml0ID0gZ2V0VW5pdChlbmRWYWx1ZSkgfHwgKHAgaW4gX2NvbmZpZy51bml0cyA/IF9jb25maWcudW5pdHNbcF0gOiBzdGFydFVuaXQpO1xuICAgICAgICAgIHN0YXJ0VW5pdCAhPT0gZW5kVW5pdCAmJiAoc3RhcnROdW0gPSBfY29udmVydFRvVW5pdCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUsIGVuZFVuaXQpKTtcbiAgICAgICAgICB0aGlzLl9wdCA9IG5ldyBQcm9wVHdlZW4odGhpcy5fcHQsIGlzVHJhbnNmb3JtUmVsYXRlZCA/IGNhY2hlIDogc3R5bGUsIHAsIHN0YXJ0TnVtLCByZWxhdGl2ZSA/IHJlbGF0aXZlICogZW5kTnVtIDogZW5kTnVtIC0gc3RhcnROdW0sICFpc1RyYW5zZm9ybVJlbGF0ZWQgJiYgKGVuZFVuaXQgPT09IFwicHhcIiB8fCBwID09PSBcInpJbmRleFwiKSAmJiB2YXJzLmF1dG9Sb3VuZCAhPT0gZmFsc2UgPyBfcmVuZGVyUm91bmRlZENTU1Byb3AgOiBfcmVuZGVyQ1NTUHJvcCk7XG4gICAgICAgICAgdGhpcy5fcHQudSA9IGVuZFVuaXQgfHwgMDtcblxuICAgICAgICAgIGlmIChzdGFydFVuaXQgIT09IGVuZFVuaXQgJiYgZW5kVW5pdCAhPT0gXCIlXCIpIHtcbiAgICAgICAgICAgIC8vd2hlbiB0aGUgdHdlZW4gZ29lcyBhbGwgdGhlIHdheSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcsIHdlIG5lZWQgdG8gcmV2ZXJ0IGl0IHRvIHRoZSBPTEQvT1JJR0lOQUwgdmFsdWUgKHdpdGggdGhvc2UgdW5pdHMpLiBXZSByZWNvcmQgdGhhdCBhcyBhIFwiYlwiIChiZWdpbm5pbmcpIHByb3BlcnR5IGFuZCBwb2ludCB0byBhIHJlbmRlciBtZXRob2QgdGhhdCBoYW5kbGVzIHRoYXQuIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG4gICAgICAgICAgICB0aGlzLl9wdC5iID0gc3RhcnRWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3B0LnIgPSBfcmVuZGVyQ1NTUHJvcFdpdGhCZWdpbm5pbmc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEocCBpbiBzdHlsZSkpIHtcbiAgICAgICAgICBpZiAocCBpbiB0YXJnZXQpIHtcbiAgICAgICAgICAgIC8vbWF5YmUgaXQncyBub3QgYSBzdHlsZSAtIGl0IGNvdWxkIGJlIGEgcHJvcGVydHkgYWRkZWQgZGlyZWN0bHkgdG8gYW4gZWxlbWVudCBpbiB3aGljaCBjYXNlIHdlJ2xsIHRyeSB0byBhbmltYXRlIHRoYXQuXG4gICAgICAgICAgICB0aGlzLmFkZCh0YXJnZXQsIHAsIHN0YXJ0VmFsdWUgfHwgdGFyZ2V0W3BdLCBlbmRWYWx1ZSwgaW5kZXgsIHRhcmdldHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbWlzc2luZ1BsdWdpbihwLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdHdlZW5Db21wbGV4Q1NTU3RyaW5nLmNhbGwodGhpcywgdGFyZ2V0LCBwLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGhhc1ByaW9yaXR5ICYmIF9zb3J0UHJvcFR3ZWVuc0J5UHJpb3JpdHkodGhpcyk7XG4gIH0sXG4gIGdldDogX2dldCxcbiAgYWxpYXNlczogX3Byb3BlcnR5QWxpYXNlcyxcbiAgZ2V0U2V0dGVyOiBmdW5jdGlvbiBnZXRTZXR0ZXIodGFyZ2V0LCBwcm9wZXJ0eSwgcGx1Z2luKSB7XG4gICAgLy9yZXR1cm5zIGEgc2V0dGVyIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0YXJnZXQsIHByb3BlcnR5LCB2YWx1ZSBhbmQgYXBwbGllcyBpdCBhY2NvcmRpbmdseS4gUmVtZW1iZXIsIHByb3BlcnRpZXMgbGlrZSBcInhcIiBhcmVuJ3QgYXMgc2ltcGxlIGFzIHRhcmdldC5zdHlsZS5wcm9wZXJ0eSA9IHZhbHVlIGJlY2F1c2UgdGhleSd2ZSBnb3QgdG8gYmUgYXBwbGllZCB0byBhIHByb3h5IG9iamVjdCBhbmQgdGhlbiBtZXJnZWQgaW50byBhIHRyYW5zZm9ybSBzdHJpbmcgaW4gYSByZW5kZXJlci5cbiAgICB2YXIgcCA9IF9wcm9wZXJ0eUFsaWFzZXNbcHJvcGVydHldO1xuICAgIHAgJiYgcC5pbmRleE9mKFwiLFwiKSA8IDAgJiYgKHByb3BlcnR5ID0gcCk7XG4gICAgcmV0dXJuIHByb3BlcnR5IGluIF90cmFuc2Zvcm1Qcm9wcyAmJiBwcm9wZXJ0eSAhPT0gX3RyYW5zZm9ybU9yaWdpblByb3AgJiYgKHRhcmdldC5fZ3NhcC54IHx8IF9nZXQodGFyZ2V0LCBcInhcIikpID8gcGx1Z2luICYmIF9yZWNlbnRTZXR0ZXJQbHVnaW4gPT09IHBsdWdpbiA/IHByb3BlcnR5ID09PSBcInNjYWxlXCIgPyBfc2V0dGVyU2NhbGUgOiBfc2V0dGVyVHJhbnNmb3JtIDogKF9yZWNlbnRTZXR0ZXJQbHVnaW4gPSBwbHVnaW4gfHwge30pICYmIChwcm9wZXJ0eSA9PT0gXCJzY2FsZVwiID8gX3NldHRlclNjYWxlV2l0aFJlbmRlciA6IF9zZXR0ZXJUcmFuc2Zvcm1XaXRoUmVuZGVyKSA6IHRhcmdldC5zdHlsZSAmJiAhX2lzVW5kZWZpbmVkKHRhcmdldC5zdHlsZVtwcm9wZXJ0eV0pID8gX3NldHRlckNTU1N0eWxlIDogfnByb3BlcnR5LmluZGV4T2YoXCItXCIpID8gX3NldHRlckNTU1Byb3AgOiBfZ2V0U2V0dGVyKHRhcmdldCwgcHJvcGVydHkpO1xuICB9LFxuICBjb3JlOiB7XG4gICAgX3JlbW92ZVByb3BlcnR5OiBfcmVtb3ZlUHJvcGVydHksXG4gICAgX2dldE1hdHJpeDogX2dldE1hdHJpeFxuICB9XG59O1xuZ3NhcC51dGlscy5jaGVja1ByZWZpeCA9IF9jaGVja1Byb3BQcmVmaXg7XG5cbihmdW5jdGlvbiAocG9zaXRpb25BbmRTY2FsZSwgcm90YXRpb24sIG90aGVycywgYWxpYXNlcykge1xuICB2YXIgYWxsID0gX2ZvckVhY2hOYW1lKHBvc2l0aW9uQW5kU2NhbGUgKyBcIixcIiArIHJvdGF0aW9uICsgXCIsXCIgKyBvdGhlcnMsIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgX3RyYW5zZm9ybVByb3BzW25hbWVdID0gMTtcbiAgfSk7XG5cbiAgX2ZvckVhY2hOYW1lKHJvdGF0aW9uLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIF9jb25maWcudW5pdHNbbmFtZV0gPSBcImRlZ1wiO1xuICAgIF9yb3RhdGlvbmFsUHJvcGVydGllc1tuYW1lXSA9IDE7XG4gIH0pO1xuXG4gIF9wcm9wZXJ0eUFsaWFzZXNbYWxsWzEzXV0gPSBwb3NpdGlvbkFuZFNjYWxlICsgXCIsXCIgKyByb3RhdGlvbjtcblxuICBfZm9yRWFjaE5hbWUoYWxpYXNlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3BsaXQgPSBuYW1lLnNwbGl0KFwiOlwiKTtcbiAgICBfcHJvcGVydHlBbGlhc2VzW3NwbGl0WzFdXSA9IGFsbFtzcGxpdFswXV07XG4gIH0pO1xufSkoXCJ4LHkseixzY2FsZSxzY2FsZVgsc2NhbGVZLHhQZXJjZW50LHlQZXJjZW50XCIsIFwicm90YXRpb24scm90YXRpb25YLHJvdGF0aW9uWSxza2V3WCxza2V3WVwiLCBcInRyYW5zZm9ybSx0cmFuc2Zvcm1PcmlnaW4sc3ZnT3JpZ2luLGZvcmNlM0Qsc21vb3RoT3JpZ2luLHRyYW5zZm9ybVBlcnNwZWN0aXZlXCIsIFwiMDp0cmFuc2xhdGVYLDE6dHJhbnNsYXRlWSwyOnRyYW5zbGF0ZVosODpyb3RhdGUsODpyb3RhdGlvblosODpyb3RhdGVaLDk6cm90YXRlWCwxMDpyb3RhdGVZXCIpO1xuXG5fZm9yRWFjaE5hbWUoXCJ4LHkseix0b3AscmlnaHQsYm90dG9tLGxlZnQsd2lkdGgsaGVpZ2h0LGZvbnRTaXplLHBhZGRpbmcsbWFyZ2luLHBlcnNwZWN0aXZlXCIsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIF9jb25maWcudW5pdHNbbmFtZV0gPSBcInB4XCI7XG59KTtcblxuZ3NhcC5yZWdpc3RlclBsdWdpbihDU1NQbHVnaW4pO1xuZXhwb3J0IHsgQ1NTUGx1Z2luIGFzIGRlZmF1bHQsIF9nZXRCQm94LCBfY3JlYXRlRWxlbWVudCwgX2NoZWNrUHJvcFByZWZpeCBhcyBjaGVja1ByZWZpeCB9OyIsImltcG9ydCB7IGdzYXAsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgUG93ZXI0LCBMaW5lYXIsIFF1YWQsIEN1YmljLCBRdWFydCwgUXVpbnQsIFN0cm9uZywgRWxhc3RpYywgQmFjaywgU3RlcHBlZEVhc2UsIEJvdW5jZSwgU2luZSwgRXhwbywgQ2lyYywgVHdlZW5MaXRlLCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4IH0gZnJvbSBcIi4vZ3NhcC1jb3JlLmpzXCI7XG5pbXBvcnQgeyBDU1NQbHVnaW4gfSBmcm9tIFwiLi9DU1NQbHVnaW4uanNcIjtcbnZhciBnc2FwV2l0aENTUyA9IGdzYXAucmVnaXN0ZXJQbHVnaW4oQ1NTUGx1Z2luKSB8fCBnc2FwLFxuICAgIC8vIHRvIHByb3RlY3QgZnJvbSB0cmVlIHNoYWtpbmdcblR3ZWVuTWF4V2l0aENTUyA9IGdzYXBXaXRoQ1NTLmNvcmUuVHdlZW47XG5leHBvcnQgeyBnc2FwV2l0aENTUyBhcyBnc2FwLCBnc2FwV2l0aENTUyBhcyBkZWZhdWx0LCBDU1NQbHVnaW4sIFR3ZWVuTWF4V2l0aENTUyBhcyBUd2Vlbk1heCwgVHdlZW5MaXRlLCBUaW1lbGluZU1heCwgVGltZWxpbmVMaXRlLCBQb3dlcjAsIFBvd2VyMSwgUG93ZXIyLCBQb3dlcjMsIFBvd2VyNCwgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIEVsYXN0aWMsIEJhY2ssIFN0ZXBwZWRFYXNlLCBCb3VuY2UsIFNpbmUsIEV4cG8sIENpcmMgfTsiLCIvKiFcbiAqIFNjcm9sbFRyaWdnZXIgMy44LjBcbiAqIGh0dHBzOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAyMDA4LTIwMjEsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHBzOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgZ3NhcCxcbiAgICBfY29yZUluaXR0ZWQsXG4gICAgX3dpbixcbiAgICBfZG9jLFxuICAgIF9kb2NFbCxcbiAgICBfYm9keSxcbiAgICBfcm9vdCxcbiAgICBfcmVzaXplRGVsYXksXG4gICAgX3JhZixcbiAgICBfcmVxdWVzdCxcbiAgICBfdG9BcnJheSxcbiAgICBfY2xhbXAsXG4gICAgX3RpbWUyLFxuICAgIF9zeW5jSW50ZXJ2YWwsXG4gICAgX3JlZnJlc2hpbmcsXG4gICAgX3BvaW50ZXJJc0Rvd24sXG4gICAgX3RyYW5zZm9ybVByb3AsXG4gICAgX2ksXG4gICAgX3ByZXZXaWR0aCxcbiAgICBfcHJldkhlaWdodCxcbiAgICBfYXV0b1JlZnJlc2gsXG4gICAgX3NvcnQsXG4gICAgX3N1cHByZXNzT3ZlcndyaXRlcyxcbiAgICBfaWdub3JlUmVzaXplLFxuICAgIF9saW1pdENhbGxiYWNrcyxcbiAgICAvLyBpZiB0cnVlLCB3ZSdsbCBvbmx5IHRyaWdnZXIgY2FsbGJhY2tzIGlmIHRoZSBhY3RpdmUgc3RhdGUgdG9nZ2xlcywgc28gaWYgeW91IHNjcm9sbCBpbW1lZGlhdGVseSBwYXN0IGJvdGggdGhlIHN0YXJ0IGFuZCBlbmQgcG9zaXRpb25zIG9mIGEgU2Nyb2xsVHJpZ2dlciAodGh1cyBpbmFjdGl2ZSB0byBpbmFjdGl2ZSksIG5laXRoZXIgaXRzIG9uRW50ZXIgbm9yIG9uTGVhdmUgd2lsbCBiZSBjYWxsZWQuIFRoaXMgaXMgdXNlZnVsIGR1cmluZyBzdGFydHVwLlxuX3N0YXJ0dXAgPSAxLFxuICAgIF9wcm94aWVzID0gW10sXG4gICAgX3Njcm9sbGVycyA9IFtdLFxuICAgIF9nZXRUaW1lID0gRGF0ZS5ub3csXG4gICAgX3RpbWUxID0gX2dldFRpbWUoKSxcbiAgICBfbGFzdFNjcm9sbFRpbWUgPSAwLFxuICAgIF9lbmFibGVkID0gMSxcbiAgICBfcGFzc1Rocm91Z2ggPSBmdW5jdGlvbiBfcGFzc1Rocm91Z2godikge1xuICByZXR1cm4gdjtcbn0sXG4gICAgX2dldFRhcmdldCA9IGZ1bmN0aW9uIF9nZXRUYXJnZXQodCkge1xuICByZXR1cm4gX3RvQXJyYXkodClbMF0gfHwgKF9pc1N0cmluZyh0KSA/IGNvbnNvbGUud2FybihcIkVsZW1lbnQgbm90IGZvdW5kOlwiLCB0KSA6IG51bGwpO1xufSxcbiAgICBfcm91bmQgPSBmdW5jdGlvbiBfcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxMDAwMDApIC8gMTAwMDAwIHx8IDA7XG59LFxuICAgIF93aW5kb3dFeGlzdHMgPSBmdW5jdGlvbiBfd2luZG93RXhpc3RzKCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbn0sXG4gICAgX2dldEdTQVAgPSBmdW5jdGlvbiBfZ2V0R1NBUCgpIHtcbiAgcmV0dXJuIGdzYXAgfHwgX3dpbmRvd0V4aXN0cygpICYmIChnc2FwID0gd2luZG93LmdzYXApICYmIGdzYXAucmVnaXN0ZXJQbHVnaW4gJiYgZ3NhcDtcbn0sXG4gICAgX2lzVmlld3BvcnQgPSBmdW5jdGlvbiBfaXNWaWV3cG9ydChlKSB7XG4gIHJldHVybiAhIX5fcm9vdC5pbmRleE9mKGUpO1xufSxcbiAgICBfZ2V0UHJveHlQcm9wID0gZnVuY3Rpb24gX2dldFByb3h5UHJvcChlbGVtZW50LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgJiYgX3Byb3hpZXNbX3Byb3hpZXMuaW5kZXhPZihlbGVtZW50KSArIDFdW3Byb3BlcnR5XTtcbn0sXG4gICAgX2dldFNjcm9sbEZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2Nyb2xsRnVuYyhlbGVtZW50LCBfcmVmKSB7XG4gIHZhciBzID0gX3JlZi5zLFxuICAgICAgc2MgPSBfcmVmLnNjO1xuXG4gIC8vIHdlIHN0b3JlIHRoZSBzY3JvbGxlciBmdW5jdGlvbnMgaW4gYSBhbHRlcm5hdGluZyBzZXF1ZW5jZWQgQXJyYXkgbGlrZSBbZWxlbWVudCwgdmVydGljYWxTY3JvbGxGdW5jLCBob3Jpem9udGFsU2Nyb2xsRnVuYywgLi4uXSBzbyB0aGF0IHdlIGNhbiBtaW5pbWl6ZSBtZW1vcnksIG1heGltaXplIHBlcmZvcm1hbmNlLCBhbmQgd2UgYWxzbyByZWNvcmQgdGhlIGxhc3QgcG9zaXRpb24gYXMgYSBcIi5yZWNcIiBwcm9wZXJ0eSBpbiBvcmRlciB0byByZXZlcnQgdG8gdGhhdCBhZnRlciByZWZyZXNoaW5nIHRvIGVuc3VyZSB0aGluZ3MgZG9uJ3Qgc2hpZnQgYXJvdW5kLlxuICB2YXIgaSA9IF9zY3JvbGxlcnMuaW5kZXhPZihlbGVtZW50KSxcbiAgICAgIG9mZnNldCA9IHNjID09PSBfdmVydGljYWwuc2MgPyAxIDogMjtcblxuICAhfmkgJiYgKGkgPSBfc2Nyb2xsZXJzLnB1c2goZWxlbWVudCkgLSAxKTtcbiAgcmV0dXJuIF9zY3JvbGxlcnNbaSArIG9mZnNldF0gfHwgKF9zY3JvbGxlcnNbaSArIG9mZnNldF0gPSBfZ2V0UHJveHlQcm9wKGVsZW1lbnQsIHMpIHx8IChfaXNWaWV3cG9ydChlbGVtZW50KSA/IHNjIDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBlbGVtZW50W3NdID0gdmFsdWUgOiBlbGVtZW50W3NdO1xuICB9KSk7XG59LFxuICAgIF9nZXRCb3VuZHNGdW5jID0gZnVuY3Rpb24gX2dldEJvdW5kc0Z1bmMoZWxlbWVudCkge1xuICByZXR1cm4gX2dldFByb3h5UHJvcChlbGVtZW50LCBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiKSB8fCAoX2lzVmlld3BvcnQoZWxlbWVudCkgPyBmdW5jdGlvbiAoKSB7XG4gICAgX3dpbk9mZnNldHMud2lkdGggPSBfd2luLmlubmVyV2lkdGg7XG4gICAgX3dpbk9mZnNldHMuaGVpZ2h0ID0gX3dpbi5pbm5lckhlaWdodDtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gIH0pO1xufSxcbiAgICBfZ2V0U2l6ZUZ1bmMgPSBmdW5jdGlvbiBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIF9yZWYyKSB7XG4gIHZhciBkID0gX3JlZjIuZCxcbiAgICAgIGQyID0gX3JlZjIuZDIsXG4gICAgICBhID0gX3JlZjIuYTtcbiAgcmV0dXJuIChhID0gX2dldFByb3h5UHJvcChzY3JvbGxlciwgXCJnZXRCb3VuZGluZ0NsaWVudFJlY3RcIikpID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhKClbZF07XG4gIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChpc1ZpZXdwb3J0ID8gX3dpbltcImlubmVyXCIgKyBkMl0gOiBzY3JvbGxlcltcImNsaWVudFwiICsgZDJdKSB8fCAwO1xuICB9O1xufSxcbiAgICBfZ2V0T2Zmc2V0c0Z1bmMgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0c0Z1bmMoZWxlbWVudCwgaXNWaWV3cG9ydCkge1xuICByZXR1cm4gIWlzVmlld3BvcnQgfHwgfl9wcm94aWVzLmluZGV4T2YoZWxlbWVudCkgPyBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3dpbk9mZnNldHM7XG4gIH07XG59LFxuICAgIF9tYXhTY3JvbGwgPSBmdW5jdGlvbiBfbWF4U2Nyb2xsKGVsZW1lbnQsIF9yZWYzKSB7XG4gIHZhciBzID0gX3JlZjMucyxcbiAgICAgIGQyID0gX3JlZjMuZDIsXG4gICAgICBkID0gX3JlZjMuZCxcbiAgICAgIGEgPSBfcmVmMy5hO1xuICByZXR1cm4gKHMgPSBcInNjcm9sbFwiICsgZDIpICYmIChhID0gX2dldFByb3h5UHJvcChlbGVtZW50LCBzKSkgPyBhKCkgLSBfZ2V0Qm91bmRzRnVuYyhlbGVtZW50KSgpW2RdIDogX2lzVmlld3BvcnQoZWxlbWVudCkgPyAoX2JvZHlbc10gfHwgX2RvY0VsW3NdKSAtIChfd2luW1wiaW5uZXJcIiArIGQyXSB8fCBfZG9jRWxbXCJjbGllbnRcIiArIGQyXSB8fCBfYm9keVtcImNsaWVudFwiICsgZDJdKSA6IGVsZW1lbnRbc10gLSBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl07XG59LFxuICAgIF9pdGVyYXRlQXV0b1JlZnJlc2ggPSBmdW5jdGlvbiBfaXRlcmF0ZUF1dG9SZWZyZXNoKGZ1bmMsIGV2ZW50cykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IF9hdXRvUmVmcmVzaC5sZW5ndGg7IGkgKz0gMykge1xuICAgICghZXZlbnRzIHx8IH5ldmVudHMuaW5kZXhPZihfYXV0b1JlZnJlc2hbaSArIDFdKSkgJiYgZnVuYyhfYXV0b1JlZnJlc2hbaV0sIF9hdXRvUmVmcmVzaFtpICsgMV0sIF9hdXRvUmVmcmVzaFtpICsgMl0pO1xuICB9XG59LFxuICAgIF9pc1N0cmluZyA9IGZ1bmN0aW9uIF9pc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiO1xufSxcbiAgICBfaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn0sXG4gICAgX2lzTnVtYmVyID0gZnVuY3Rpb24gX2lzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCI7XG59LFxuICAgIF9pc09iamVjdCA9IGZ1bmN0aW9uIF9pc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufSxcbiAgICBfY2FsbElmRnVuYyA9IGZ1bmN0aW9uIF9jYWxsSWZGdW5jKHZhbHVlKSB7XG4gIHJldHVybiBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgdmFsdWUoKTtcbn0sXG4gICAgX2NvbWJpbmVGdW5jID0gZnVuY3Rpb24gX2NvbWJpbmVGdW5jKGYxLCBmMikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQxID0gX2NhbGxJZkZ1bmMoZjEpLFxuICAgICAgICByZXN1bHQyID0gX2NhbGxJZkZ1bmMoZjIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9jYWxsSWZGdW5jKHJlc3VsdDEpO1xuXG4gICAgICBfY2FsbElmRnVuYyhyZXN1bHQyKTtcbiAgICB9O1xuICB9O1xufSxcbiAgICBfZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHJldmVyc2VkLCBwYXVzZSkge1xuICByZXR1cm4gYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcyhyZXZlcnNlZCA/IDAgOiAxKSAmJiBwYXVzZSAmJiBhbmltYXRpb24ucGF1c2UoKTtcbn0sXG4gICAgX2NhbGxiYWNrID0gZnVuY3Rpb24gX2NhbGxiYWNrKHNlbGYsIGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGZ1bmMoc2VsZik7XG4gIHJlc3VsdCAmJiByZXN1bHQudG90YWxUaW1lICYmIChzZWxmLmNhbGxiYWNrQW5pbWF0aW9uID0gcmVzdWx0KTtcbn0sXG4gICAgX2FicyA9IE1hdGguYWJzLFxuICAgIF9zY3JvbGxMZWZ0ID0gXCJzY3JvbGxMZWZ0XCIsXG4gICAgX3Njcm9sbFRvcCA9IFwic2Nyb2xsVG9wXCIsXG4gICAgX2xlZnQgPSBcImxlZnRcIixcbiAgICBfdG9wID0gXCJ0b3BcIixcbiAgICBfcmlnaHQgPSBcInJpZ2h0XCIsXG4gICAgX2JvdHRvbSA9IFwiYm90dG9tXCIsXG4gICAgX3dpZHRoID0gXCJ3aWR0aFwiLFxuICAgIF9oZWlnaHQgPSBcImhlaWdodFwiLFxuICAgIF9SaWdodCA9IFwiUmlnaHRcIixcbiAgICBfTGVmdCA9IFwiTGVmdFwiLFxuICAgIF9Ub3AgPSBcIlRvcFwiLFxuICAgIF9Cb3R0b20gPSBcIkJvdHRvbVwiLFxuICAgIF9wYWRkaW5nID0gXCJwYWRkaW5nXCIsXG4gICAgX21hcmdpbiA9IFwibWFyZ2luXCIsXG4gICAgX1dpZHRoID0gXCJXaWR0aFwiLFxuICAgIF9IZWlnaHQgPSBcIkhlaWdodFwiLFxuICAgIF9weCA9IFwicHhcIixcbiAgICBfaG9yaXpvbnRhbCA9IHtcbiAgczogX3Njcm9sbExlZnQsXG4gIHA6IF9sZWZ0LFxuICBwMjogX0xlZnQsXG4gIG9zOiBfcmlnaHQsXG4gIG9zMjogX1JpZ2h0LFxuICBkOiBfd2lkdGgsXG4gIGQyOiBfV2lkdGgsXG4gIGE6IFwieFwiLFxuICBzYzogZnVuY3Rpb24gc2ModmFsdWUpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IF93aW4uc2Nyb2xsVG8odmFsdWUsIF92ZXJ0aWNhbC5zYygpKSA6IF93aW4ucGFnZVhPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsTGVmdF0gfHwgX2RvY0VsW19zY3JvbGxMZWZ0XSB8fCBfYm9keVtfc2Nyb2xsTGVmdF0gfHwgMDtcbiAgfVxufSxcbiAgICBfdmVydGljYWwgPSB7XG4gIHM6IF9zY3JvbGxUb3AsXG4gIHA6IF90b3AsXG4gIHAyOiBfVG9wLFxuICBvczogX2JvdHRvbSxcbiAgb3MyOiBfQm90dG9tLFxuICBkOiBfaGVpZ2h0LFxuICBkMjogX0hlaWdodCxcbiAgYTogXCJ5XCIsXG4gIG9wOiBfaG9yaXpvbnRhbCxcbiAgc2M6IGZ1bmN0aW9uIHNjKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfd2luLnNjcm9sbFRvKF9ob3Jpem9udGFsLnNjKCksIHZhbHVlKSA6IF93aW4ucGFnZVlPZmZzZXQgfHwgX2RvY1tfc2Nyb2xsVG9wXSB8fCBfZG9jRWxbX3Njcm9sbFRvcF0gfHwgX2JvZHlbX3Njcm9sbFRvcF0gfHwgMDtcbiAgfVxufSxcbiAgICBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIF93aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0sXG4gICAgX21ha2VQb3NpdGlvbmFibGUgPSBmdW5jdGlvbiBfbWFrZVBvc2l0aW9uYWJsZShlbGVtZW50KSB7XG4gIC8vIGlmIHRoZSBlbGVtZW50IGFscmVhZHkgaGFzIHBvc2l0aW9uOiBhYnNvbHV0ZSBvciBmaXhlZCwgbGVhdmUgdGhhdCwgb3RoZXJ3aXNlIG1ha2UgaXQgcG9zaXRpb246IHJlbGF0aXZlXG4gIHZhciBwb3NpdGlvbiA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uO1xuXG4gIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgPyBwb3NpdGlvbiA6IFwicmVsYXRpdmVcIjtcbn0sXG4gICAgX3NldERlZmF1bHRzID0gZnVuY3Rpb24gX3NldERlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHtcbiAgZm9yICh2YXIgcCBpbiBkZWZhdWx0cykge1xuICAgIHAgaW4gb2JqIHx8IChvYmpbcF0gPSBkZWZhdWx0c1twXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSxcbiAgICBfZ2V0Qm91bmRzID0gZnVuY3Rpb24gX2dldEJvdW5kcyhlbGVtZW50LCB3aXRob3V0VHJhbnNmb3Jtcykge1xuICB2YXIgdHdlZW4gPSB3aXRob3V0VHJhbnNmb3JtcyAmJiBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtfdHJhbnNmb3JtUHJvcF0gIT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiYgZ3NhcC50byhlbGVtZW50LCB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHhQZXJjZW50OiAwLFxuICAgIHlQZXJjZW50OiAwLFxuICAgIHJvdGF0aW9uOiAwLFxuICAgIHJvdGF0aW9uWDogMCxcbiAgICByb3RhdGlvblk6IDAsXG4gICAgc2NhbGU6IDEsXG4gICAgc2tld1g6IDAsXG4gICAgc2tld1k6IDBcbiAgfSkucHJvZ3Jlc3MoMSksXG4gICAgICBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB0d2VlbiAmJiB0d2Vlbi5wcm9ncmVzcygwKS5raWxsKCk7XG4gIHJldHVybiBib3VuZHM7XG59LFxuICAgIF9nZXRTaXplID0gZnVuY3Rpb24gX2dldFNpemUoZWxlbWVudCwgX3JlZjQpIHtcbiAgdmFyIGQyID0gX3JlZjQuZDI7XG4gIHJldHVybiBlbGVtZW50W1wib2Zmc2V0XCIgKyBkMl0gfHwgZWxlbWVudFtcImNsaWVudFwiICsgZDJdIHx8IDA7XG59LFxuICAgIF9nZXRMYWJlbFJhdGlvQXJyYXkgPSBmdW5jdGlvbiBfZ2V0TGFiZWxSYXRpb0FycmF5KHRpbWVsaW5lKSB7XG4gIHZhciBhID0gW10sXG4gICAgICBsYWJlbHMgPSB0aW1lbGluZS5sYWJlbHMsXG4gICAgICBkdXJhdGlvbiA9IHRpbWVsaW5lLmR1cmF0aW9uKCksXG4gICAgICBwO1xuXG4gIGZvciAocCBpbiBsYWJlbHMpIHtcbiAgICBhLnB1c2gobGFiZWxzW3BdIC8gZHVyYXRpb24pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59LFxuICAgIF9nZXRDbG9zZXN0TGFiZWwgPSBmdW5jdGlvbiBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGdzYXAudXRpbHMuc25hcChfZ2V0TGFiZWxSYXRpb0FycmF5KGFuaW1hdGlvbiksIHZhbHVlKTtcbiAgfTtcbn0sXG4gICAgX3NuYXBEaXJlY3Rpb25hbCA9IGZ1bmN0aW9uIF9zbmFwRGlyZWN0aW9uYWwoc25hcEluY3JlbWVudE9yQXJyYXkpIHtcbiAgdmFyIHNuYXAgPSBnc2FwLnV0aWxzLnNuYXAoc25hcEluY3JlbWVudE9yQXJyYXkpLFxuICAgICAgYSA9IEFycmF5LmlzQXJyYXkoc25hcEluY3JlbWVudE9yQXJyYXkpICYmIHNuYXBJbmNyZW1lbnRPckFycmF5LnNsaWNlKDApLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSAtIGI7XG4gIH0pO1xuICByZXR1cm4gYSA/IGZ1bmN0aW9uICh2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuIHNuYXAodmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICB2YWx1ZSAtPSAxZS00OyAvLyB0byBhdm9pZCByb3VuZGluZyBlcnJvcnMuIElmIHdlJ3JlIHRvbyBzdHJpY3QsIGl0IG1pZ2h0IHNuYXAgZm9yd2FyZCwgdGhlbiBpbW1lZGlhdGVseSBhZ2FpbiwgYW5kIGFnYWluLlxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYVtpXSA+PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBhW2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhW2kgLSAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IGEubGVuZ3RoO1xuICAgICAgdmFsdWUgKz0gMWUtNDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBpZiAoYVtpXSA8PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBhW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFbMF07XG4gIH0gOiBmdW5jdGlvbiAodmFsdWUsIGRpcmVjdGlvbikge1xuICAgIHZhciBzbmFwcGVkID0gc25hcCh2YWx1ZSk7XG4gICAgcmV0dXJuICFkaXJlY3Rpb24gfHwgTWF0aC5hYnMoc25hcHBlZCAtIHZhbHVlKSA8IDAuMDAxIHx8IHNuYXBwZWQgLSB2YWx1ZSA8IDAgPT09IGRpcmVjdGlvbiA8IDAgPyBzbmFwcGVkIDogc25hcChkaXJlY3Rpb24gPCAwID8gdmFsdWUgLSBzbmFwSW5jcmVtZW50T3JBcnJheSA6IHZhbHVlICsgc25hcEluY3JlbWVudE9yQXJyYXkpO1xuICB9O1xufSxcbiAgICBfZ2V0TGFiZWxBdERpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRMYWJlbEF0RGlyZWN0aW9uKHRpbWVsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIHN0KSB7XG4gICAgcmV0dXJuIF9zbmFwRGlyZWN0aW9uYWwoX2dldExhYmVsUmF0aW9BcnJheSh0aW1lbGluZSkpKHZhbHVlLCBzdC5kaXJlY3Rpb24pO1xuICB9O1xufSxcbiAgICBfbXVsdGlMaXN0ZW5lciA9IGZ1bmN0aW9uIF9tdWx0aUxpc3RlbmVyKGZ1bmMsIGVsZW1lbnQsIHR5cGVzLCBjYWxsYmFjaykge1xuICByZXR1cm4gdHlwZXMuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4gZnVuYyhlbGVtZW50LCB0eXBlLCBjYWxsYmFjayk7XG4gIH0pO1xufSxcbiAgICBfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBfYWRkTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYykge1xuICByZXR1cm4gZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xufSxcbiAgICBfcmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiBfcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgdHlwZSwgZnVuYykge1xuICByZXR1cm4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmMpO1xufSxcbiAgICBfbWFya2VyRGVmYXVsdHMgPSB7XG4gIHN0YXJ0Q29sb3I6IFwiZ3JlZW5cIixcbiAgZW5kQ29sb3I6IFwicmVkXCIsXG4gIGluZGVudDogMCxcbiAgZm9udFNpemU6IFwiMTZweFwiLFxuICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG59LFxuICAgIF9kZWZhdWx0cyA9IHtcbiAgdG9nZ2xlQWN0aW9uczogXCJwbGF5XCIsXG4gIGFudGljaXBhdGVQaW46IDBcbn0sXG4gICAgX2tleXdvcmRzID0ge1xuICB0b3A6IDAsXG4gIGxlZnQ6IDAsXG4gIGNlbnRlcjogMC41LFxuICBib3R0b206IDEsXG4gIHJpZ2h0OiAxXG59LFxuICAgIF9vZmZzZXRUb1B4ID0gZnVuY3Rpb24gX29mZnNldFRvUHgodmFsdWUsIHNpemUpIHtcbiAgaWYgKF9pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgZXFJbmRleCA9IHZhbHVlLmluZGV4T2YoXCI9XCIpLFxuICAgICAgICByZWxhdGl2ZSA9IH5lcUluZGV4ID8gKyh2YWx1ZS5jaGFyQXQoZXFJbmRleCAtIDEpICsgMSkgKiBwYXJzZUZsb2F0KHZhbHVlLnN1YnN0cihlcUluZGV4ICsgMSkpIDogMDtcblxuICAgIGlmICh+ZXFJbmRleCkge1xuICAgICAgdmFsdWUuaW5kZXhPZihcIiVcIikgPiBlcUluZGV4ICYmIChyZWxhdGl2ZSAqPSBzaXplIC8gMTAwKTtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIGVxSW5kZXggLSAxKTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHJlbGF0aXZlICsgKHZhbHVlIGluIF9rZXl3b3JkcyA/IF9rZXl3b3Jkc1t2YWx1ZV0gKiBzaXplIDogfnZhbHVlLmluZGV4T2YoXCIlXCIpID8gcGFyc2VGbG9hdCh2YWx1ZSkgKiBzaXplIC8gMTAwIDogcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59LFxuICAgIF9jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiBfY3JlYXRlTWFya2VyKHR5cGUsIG5hbWUsIGNvbnRhaW5lciwgZGlyZWN0aW9uLCBfcmVmNSwgb2Zmc2V0LCBtYXRjaFdpZHRoRWwsIGNvbnRhaW5lckFuaW1hdGlvbikge1xuICB2YXIgc3RhcnRDb2xvciA9IF9yZWY1LnN0YXJ0Q29sb3IsXG4gICAgICBlbmRDb2xvciA9IF9yZWY1LmVuZENvbG9yLFxuICAgICAgZm9udFNpemUgPSBfcmVmNS5mb250U2l6ZSxcbiAgICAgIGluZGVudCA9IF9yZWY1LmluZGVudCxcbiAgICAgIGZvbnRXZWlnaHQgPSBfcmVmNS5mb250V2VpZ2h0O1xuXG4gIHZhciBlID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgdXNlRml4ZWRQb3NpdGlvbiA9IF9pc1ZpZXdwb3J0KGNvbnRhaW5lcikgfHwgX2dldFByb3h5UHJvcChjb250YWluZXIsIFwicGluVHlwZVwiKSA9PT0gXCJmaXhlZFwiLFxuICAgICAgaXNTY3JvbGxlciA9IHR5cGUuaW5kZXhPZihcInNjcm9sbGVyXCIpICE9PSAtMSxcbiAgICAgIHBhcmVudCA9IHVzZUZpeGVkUG9zaXRpb24gPyBfYm9keSA6IGNvbnRhaW5lcixcbiAgICAgIGlzU3RhcnQgPSB0eXBlLmluZGV4T2YoXCJzdGFydFwiKSAhPT0gLTEsXG4gICAgICBjb2xvciA9IGlzU3RhcnQgPyBzdGFydENvbG9yIDogZW5kQ29sb3IsXG4gICAgICBjc3MgPSBcImJvcmRlci1jb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC1zaXplOlwiICsgZm9udFNpemUgKyBcIjtjb2xvcjpcIiArIGNvbG9yICsgXCI7Zm9udC13ZWlnaHQ6XCIgKyBmb250V2VpZ2h0ICsgXCI7cG9pbnRlci1ldmVudHM6bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZixBcmlhbDt6LWluZGV4OjEwMDA7cGFkZGluZzo0cHggOHB4O2JvcmRlci13aWR0aDowO2JvcmRlci1zdHlsZTpzb2xpZDtcIjtcblxuICBjc3MgKz0gXCJwb3NpdGlvbjpcIiArICgoaXNTY3JvbGxlciB8fCBjb250YWluZXJBbmltYXRpb24pICYmIHVzZUZpeGVkUG9zaXRpb24gPyBcImZpeGVkO1wiIDogXCJhYnNvbHV0ZTtcIik7XG4gIChpc1Njcm9sbGVyIHx8IGNvbnRhaW5lckFuaW1hdGlvbiB8fCAhdXNlRml4ZWRQb3NpdGlvbikgJiYgKGNzcyArPSAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyBfcmlnaHQgOiBfYm90dG9tKSArIFwiOlwiICsgKG9mZnNldCArIHBhcnNlRmxvYXQoaW5kZW50KSkgKyBcInB4O1wiKTtcbiAgbWF0Y2hXaWR0aEVsICYmIChjc3MgKz0gXCJib3gtc2l6aW5nOmJvcmRlci1ib3g7dGV4dC1hbGlnbjpsZWZ0O3dpZHRoOlwiICsgbWF0Y2hXaWR0aEVsLm9mZnNldFdpZHRoICsgXCJweDtcIik7XG4gIGUuX2lzU3RhcnQgPSBpc1N0YXJ0O1xuICBlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZ3NhcC1tYXJrZXItXCIgKyB0eXBlICsgKG5hbWUgPyBcIiBtYXJrZXItXCIgKyBuYW1lIDogXCJcIikpO1xuICBlLnN0eWxlLmNzc1RleHQgPSBjc3M7XG4gIGUuaW5uZXJUZXh0ID0gbmFtZSB8fCBuYW1lID09PSAwID8gdHlwZSArIFwiLVwiICsgbmFtZSA6IHR5cGU7XG4gIHBhcmVudC5jaGlsZHJlblswXSA/IHBhcmVudC5pbnNlcnRCZWZvcmUoZSwgcGFyZW50LmNoaWxkcmVuWzBdKSA6IHBhcmVudC5hcHBlbmRDaGlsZChlKTtcbiAgZS5fb2Zmc2V0ID0gZVtcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcblxuICBfcG9zaXRpb25NYXJrZXIoZSwgMCwgZGlyZWN0aW9uLCBpc1N0YXJ0KTtcblxuICByZXR1cm4gZTtcbn0sXG4gICAgX3Bvc2l0aW9uTWFya2VyID0gZnVuY3Rpb24gX3Bvc2l0aW9uTWFya2VyKG1hcmtlciwgc3RhcnQsIGRpcmVjdGlvbiwgZmxpcHBlZCkge1xuICB2YXIgdmFycyA9IHtcbiAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgfSxcbiAgICAgIHNpZGUgPSBkaXJlY3Rpb25bZmxpcHBlZCA/IFwib3MyXCIgOiBcInAyXCJdLFxuICAgICAgb3Bwb3NpdGVTaWRlID0gZGlyZWN0aW9uW2ZsaXBwZWQgPyBcInAyXCIgOiBcIm9zMlwiXTtcbiAgbWFya2VyLl9pc0ZsaXBwZWQgPSBmbGlwcGVkO1xuICB2YXJzW2RpcmVjdGlvbi5hICsgXCJQZXJjZW50XCJdID0gZmxpcHBlZCA/IC0xMDAgOiAwO1xuICB2YXJzW2RpcmVjdGlvbi5hXSA9IGZsaXBwZWQgPyBcIjFweFwiIDogMDtcbiAgdmFyc1tcImJvcmRlclwiICsgc2lkZSArIF9XaWR0aF0gPSAxO1xuICB2YXJzW1wiYm9yZGVyXCIgKyBvcHBvc2l0ZVNpZGUgKyBfV2lkdGhdID0gMDtcbiAgdmFyc1tkaXJlY3Rpb24ucF0gPSBzdGFydCArIFwicHhcIjtcbiAgZ3NhcC5zZXQobWFya2VyLCB2YXJzKTtcbn0sXG4gICAgX3RyaWdnZXJzID0gW10sXG4gICAgX2lkcyA9IHt9LFxuICAgIF9zeW5jID0gZnVuY3Rpb24gX3N5bmMoKSB7XG4gIHJldHVybiBfZ2V0VGltZSgpIC0gX2xhc3RTY3JvbGxUaW1lID4gMjAgJiYgX3VwZGF0ZUFsbCgpO1xufSxcbiAgICBfb25TY3JvbGwgPSBmdW5jdGlvbiBfb25TY3JvbGwoKSB7XG4gIHZhciB0aW1lID0gX2dldFRpbWUoKTtcblxuICBpZiAoX2xhc3RTY3JvbGxUaW1lICE9PSB0aW1lKSB7XG4gICAgX3VwZGF0ZUFsbCgpO1xuXG4gICAgX2xhc3RTY3JvbGxUaW1lIHx8IF9kaXNwYXRjaChcInNjcm9sbFN0YXJ0XCIpO1xuICAgIF9sYXN0U2Nyb2xsVGltZSA9IHRpbWU7XG4gIH0gZWxzZSBpZiAoIV9yZXF1ZXN0KSB7XG4gICAgX3JlcXVlc3QgPSBfcmFmKF91cGRhdGVBbGwpO1xuICB9XG59LFxuICAgIF9vblJlc2l6ZSA9IGZ1bmN0aW9uIF9vblJlc2l6ZSgpIHtcbiAgcmV0dXJuICFfcmVmcmVzaGluZyAmJiAhX2lnbm9yZVJlc2l6ZSAmJiAhX2RvYy5mdWxsc2NyZWVuRWxlbWVudCAmJiBfcmVzaXplRGVsYXkucmVzdGFydCh0cnVlKTtcbn0sXG4gICAgLy8gaWdub3JlIHJlc2l6ZXMgdHJpZ2dlcmVkIGJ5IHJlZnJlc2goKVxuX2xpc3RlbmVycyA9IHt9LFxuICAgIF9lbXB0eUFycmF5ID0gW10sXG4gICAgX21lZGlhID0gW10sXG4gICAgX2NyZWF0aW5nTWVkaWEsXG4gICAgLy8gd2hlbiBTY3JvbGxUcmlnZ2VyLm1hdGNoTWVkaWEoKSBpcyBjYWxsZWQsIHdlIHJlY29yZCB0aGUgY3VycmVudCBtZWRpYSBrZXkgaGVyZSAobGlrZSBcIihtaW4td2lkdGg6IDgwMHB4KVwiKSBzbyB0aGF0IHdlIGNhbiBhc3NpZ24gaXQgdG8gZXZlcnl0aGluZyB0aGF0J3MgY3JlYXRlZCBkdXJpbmcgdGhhdCBjYWxsLiBUaGVuIHdlIGNhbiByZXZlcnQganVzdCB0aG9zZSB3aGVuIG5lY2Vzc2FyeS4gSW4gdGhlIFNjcm9sbFRyaWdnZXIncyBpbml0KCkgY2FsbCwgdGhlIF9jcmVhdGluZ01lZGlhIGlzIHJlY29yZGVkIGFzIGEgXCJtZWRpYVwiIHByb3BlcnR5IG9uIHRoZSBpbnN0YW5jZS5cbl9sYXN0TWVkaWFUaWNrLFxuICAgIF9vbk1lZGlhQ2hhbmdlID0gZnVuY3Rpb24gX29uTWVkaWFDaGFuZ2UoZSkge1xuICB2YXIgdGljayA9IGdzYXAudGlja2VyLmZyYW1lLFxuICAgICAgbWF0Y2hlcyA9IFtdLFxuICAgICAgaSA9IDAsXG4gICAgICBpbmRleDtcblxuICBpZiAoX2xhc3RNZWRpYVRpY2sgIT09IHRpY2sgfHwgX3N0YXJ0dXApIHtcbiAgICBfcmV2ZXJ0QWxsKCk7XG5cbiAgICBmb3IgKDsgaSA8IF9tZWRpYS5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgaW5kZXggPSBfd2luLm1hdGNoTWVkaWEoX21lZGlhW2ldKS5tYXRjaGVzO1xuXG4gICAgICBpZiAoaW5kZXggIT09IF9tZWRpYVtpICsgM10pIHtcbiAgICAgICAgLy8gbm90ZTogc29tZSBicm93c2VycyBmaXJlIHRoZSBtYXRjaE1lZGlhIGV2ZW50IG11bHRpcGxlIHRpbWVzLCBsaWtlIHdoZW4gZ29pbmcgZnVsbCBzY3JlZW4sIHNvIHdlIHNob3VsZG4ndCBjYWxsIHRoZSBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcy4gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgYWxyZWFkeSBtYXRjaGVkLlxuICAgICAgICBfbWVkaWFbaSArIDNdID0gaW5kZXg7XG4gICAgICAgIGluZGV4ID8gbWF0Y2hlcy5wdXNoKGkpIDogX3JldmVydEFsbCgxLCBfbWVkaWFbaV0pIHx8IF9pc0Z1bmN0aW9uKF9tZWRpYVtpICsgMl0pICYmIF9tZWRpYVtpICsgMl0oKTsgLy8gRmlyZWZveCBkb2Vzbid0IHVwZGF0ZSB0aGUgXCJtYXRjaGVzXCIgcHJvcGVydHkgb2YgdGhlIE1lZGlhUXVlcnlMaXN0IG9iamVjdCBjb3JyZWN0bHkgLSBpdCBvbmx5IGRvZXMgc28gYXMgaXQgY2FsbHMgaXRzIGNoYW5nZSBoYW5kbGVyIC0gc28gd2UgbXVzdCByZS1jcmVhdGUgYSBtZWRpYSBxdWVyeSBoZXJlIHRvIGVuc3VyZSBpdCdzIGFjY3VyYXRlLlxuICAgICAgfVxuICAgIH1cblxuICAgIF9yZXZlcnRSZWNvcmRlZCgpOyAvLyBpbiBjYXNlIGtpbGxpbmcvcmV2ZXJ0aW5nIGFueSBvZiB0aGUgYW5pbWF0aW9ucyBhY3R1YWxseSBhZGRlZCBpbmxpbmUgc3R5bGVzIGJhY2suXG5cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbmRleCA9IG1hdGNoZXNbaV07XG4gICAgICBfY3JlYXRpbmdNZWRpYSA9IF9tZWRpYVtpbmRleF07XG4gICAgICBfbWVkaWFbaW5kZXggKyAyXSA9IF9tZWRpYVtpbmRleCArIDFdKGUpO1xuICAgIH1cblxuICAgIF9jcmVhdGluZ01lZGlhID0gMDtcbiAgICBfY29yZUluaXR0ZWQgJiYgX3JlZnJlc2hBbGwoMCwgMSk7XG4gICAgX2xhc3RNZWRpYVRpY2sgPSB0aWNrO1xuXG4gICAgX2Rpc3BhdGNoKFwibWF0Y2hNZWRpYVwiKTtcbiAgfVxufSxcbiAgICBfc29mdFJlZnJlc2ggPSBmdW5jdGlvbiBfc29mdFJlZnJlc2goKSB7XG4gIHJldHVybiBfcmVtb3ZlTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJzY3JvbGxFbmRcIiwgX3NvZnRSZWZyZXNoKSB8fCBfcmVmcmVzaEFsbCh0cnVlKTtcbn0sXG4gICAgX2Rpc3BhdGNoID0gZnVuY3Rpb24gX2Rpc3BhdGNoKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnNbdHlwZV0gJiYgX2xpc3RlbmVyc1t0eXBlXS5tYXAoZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZigpO1xuICB9KSB8fCBfZW1wdHlBcnJheTtcbn0sXG4gICAgX3NhdmVkU3R5bGVzID0gW10sXG4gICAgLy8gd2hlbiBTY3JvbGxUcmlnZ2VyLnNhdmVTdHlsZXMoKSBpcyBjYWxsZWQsIHRoZSBpbmxpbmUgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiB0aGlzIEFycmF5IGluIGEgc2VxdWVudGlhbCBmb3JtYXQgbGlrZSBbZWxlbWVudCwgY3NzVGV4dCwgZ3NDYWNoZSwgbWVkaWFdLiBUaGlzIGtlZXBzIGl0IHZlcnkgbWVtb3J5LWVmZmljaWVudCBhbmQgZmFzdCB0byBpdGVyYXRlIHRocm91Z2guXG5fcmV2ZXJ0UmVjb3JkZWQgPSBmdW5jdGlvbiBfcmV2ZXJ0UmVjb3JkZWQobWVkaWEpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBfc2F2ZWRTdHlsZXMubGVuZ3RoOyBpICs9IDUpIHtcbiAgICBpZiAoIW1lZGlhIHx8IF9zYXZlZFN0eWxlc1tpICsgNF0gPT09IG1lZGlhKSB7XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uc3R5bGUuY3NzVGV4dCA9IF9zYXZlZFN0eWxlc1tpICsgMV07XG4gICAgICBfc2F2ZWRTdHlsZXNbaV0uZ2V0QkJveCAmJiBfc2F2ZWRTdHlsZXNbaV0uc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIF9zYXZlZFN0eWxlc1tpICsgMl0gfHwgXCJcIik7XG4gICAgICBfc2F2ZWRTdHlsZXNbaSArIDNdLnVuY2FjaGUgPSAxO1xuICAgIH1cbiAgfVxufSxcbiAgICBfcmV2ZXJ0QWxsID0gZnVuY3Rpb24gX3JldmVydEFsbChraWxsLCBtZWRpYSkge1xuICB2YXIgdHJpZ2dlcjtcblxuICBmb3IgKF9pID0gMDsgX2kgPCBfdHJpZ2dlcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgdHJpZ2dlciA9IF90cmlnZ2Vyc1tfaV07XG5cbiAgICBpZiAoIW1lZGlhIHx8IHRyaWdnZXIubWVkaWEgPT09IG1lZGlhKSB7XG4gICAgICBpZiAoa2lsbCkge1xuICAgICAgICB0cmlnZ2VyLmtpbGwoMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmlnZ2VyLnJldmVydCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1lZGlhICYmIF9yZXZlcnRSZWNvcmRlZChtZWRpYSk7XG4gIG1lZGlhIHx8IF9kaXNwYXRjaChcInJldmVydFwiKTtcbn0sXG4gICAgX2NsZWFyU2Nyb2xsTWVtb3J5ID0gZnVuY3Rpb24gX2NsZWFyU2Nyb2xsTWVtb3J5KCkge1xuICByZXR1cm4gX3Njcm9sbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIChvYmoucmVjID0gMCk7XG4gIH0pO1xufSxcbiAgICAvLyB6ZXJvLW91dCBhbGwgdGhlIHJlY29yZGVkIHNjcm9sbCBwb3NpdGlvbnMuIERvbid0IHVzZSBfdHJpZ2dlcnMgYmVjYXVzZSBpZiwgZm9yIGV4YW1wbGUsIC5tYXRjaE1lZGlhKCkgaXMgdXNlZCB0byBjcmVhdGUgc29tZSBTY3JvbGxUcmlnZ2VycyBhbmQgdGhlbiB0aGUgdXNlciByZXNpemVzIGFuZCBpdCByZW1vdmVzIEFMTCBTY3JvbGxUcmlnZ2VycywgYW5kIHRoZW4gZ28gYmFjayB0byBhIHNpemUgd2hlcmUgdGhlcmUgYXJlIFNjcm9sbFRyaWdnZXJzLCBpdCB3b3VsZCBoYXZlIGtlcHQgdGhlIHBvc2l0aW9uKHMpIHNhdmVkIGZyb20gdGhlIGluaXRpYWwgc3RhdGUuXG5fcmVmcmVzaGluZ0FsbCxcbiAgICBfcmVmcmVzaEFsbCA9IGZ1bmN0aW9uIF9yZWZyZXNoQWxsKGZvcmNlLCBza2lwUmV2ZXJ0KSB7XG4gIGlmIChfbGFzdFNjcm9sbFRpbWUgJiYgIWZvcmNlKSB7XG4gICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBfcmVmcmVzaGluZ0FsbCA9IHRydWU7XG5cbiAgdmFyIHJlZnJlc2hJbml0cyA9IF9kaXNwYXRjaChcInJlZnJlc2hJbml0XCIpO1xuXG4gIF9zb3J0ICYmIFNjcm9sbFRyaWdnZXIuc29ydCgpO1xuICBza2lwUmV2ZXJ0IHx8IF9yZXZlcnRBbGwoKTtcblxuICBfdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0LnJlZnJlc2goKTtcbiAgfSk7IC8vIGRvbid0IGxvb3Agd2l0aCBfaSBiZWNhdXNlIGR1cmluZyBhIHJlZnJlc2goKSBzb21lb25lIGNvdWxkIGNhbGwgU2Nyb2xsVHJpZ2dlci51cGRhdGUoKSB3aGljaCB3b3VsZCBpdGVyYXRlIHRocm91Z2ggX2kgcmVzdWx0aW5nIGluIGEgc2tpcC5cblxuXG4gIHJlZnJlc2hJbml0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC5yZW5kZXIgJiYgcmVzdWx0LnJlbmRlcigtMSk7XG4gIH0pOyAvLyBpZiB0aGUgb25SZWZyZXNoSW5pdCgpIHJldHVybnMgYW4gYW5pbWF0aW9uICh0eXBpY2FsbHkgYSBnc2FwLnNldCgpKSwgcmV2ZXJ0IGl0LiBUaGlzIG1ha2VzIGl0IGVhc3kgdG8gcHV0IHRoaW5ncyBpbiBhIGNlcnRhaW4gc3BvdCBiZWZvcmUgcmVmcmVzaGluZyBmb3IgbWVhc3VyZW1lbnQgcHVycG9zZXMsIGFuZCB0aGVuIHB1dCB0aGluZ3MgYmFjay5cblxuICBfY2xlYXJTY3JvbGxNZW1vcnkoKTtcblxuICBfcmVzaXplRGVsYXkucGF1c2UoKTtcblxuICBfcmVmcmVzaGluZ0FsbCA9IGZhbHNlO1xuXG4gIF9kaXNwYXRjaChcInJlZnJlc2hcIik7XG59LFxuICAgIF9sYXN0U2Nyb2xsID0gMCxcbiAgICBfZGlyZWN0aW9uID0gMSxcbiAgICBfdXBkYXRlQWxsID0gZnVuY3Rpb24gX3VwZGF0ZUFsbCgpIHtcbiAgaWYgKCFfcmVmcmVzaGluZ0FsbCkge1xuICAgIHZhciBsID0gX3RyaWdnZXJzLmxlbmd0aCxcbiAgICAgICAgdGltZSA9IF9nZXRUaW1lKCksXG4gICAgICAgIHJlY29yZFZlbG9jaXR5ID0gdGltZSAtIF90aW1lMSA+PSA1MCxcbiAgICAgICAgc2Nyb2xsID0gbCAmJiBfdHJpZ2dlcnNbMF0uc2Nyb2xsKCk7XG5cbiAgICBfZGlyZWN0aW9uID0gX2xhc3RTY3JvbGwgPiBzY3JvbGwgPyAtMSA6IDE7XG4gICAgX2xhc3RTY3JvbGwgPSBzY3JvbGw7XG5cbiAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgIGlmIChfbGFzdFNjcm9sbFRpbWUgJiYgIV9wb2ludGVySXNEb3duICYmIHRpbWUgLSBfbGFzdFNjcm9sbFRpbWUgPiAyMDApIHtcbiAgICAgICAgX2xhc3RTY3JvbGxUaW1lID0gMDtcblxuICAgICAgICBfZGlzcGF0Y2goXCJzY3JvbGxFbmRcIik7XG4gICAgICB9XG5cbiAgICAgIF90aW1lMiA9IF90aW1lMTtcbiAgICAgIF90aW1lMSA9IHRpbWU7XG4gICAgfVxuXG4gICAgaWYgKF9kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBfaSA9IGw7XG5cbiAgICAgIHdoaWxlIChfaS0tID4gMCkge1xuICAgICAgICBfdHJpZ2dlcnNbX2ldICYmIF90cmlnZ2Vyc1tfaV0udXBkYXRlKDAsIHJlY29yZFZlbG9jaXR5KTtcbiAgICAgIH1cblxuICAgICAgX2RpcmVjdGlvbiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoX2kgPSAwOyBfaSA8IGw7IF9pKyspIHtcbiAgICAgICAgX3RyaWdnZXJzW19pXSAmJiBfdHJpZ2dlcnNbX2ldLnVwZGF0ZSgwLCByZWNvcmRWZWxvY2l0eSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3JlcXVlc3QgPSAwO1xuICB9XG59LFxuICAgIF9wcm9wTmFtZXNUb0NvcHkgPSBbX2xlZnQsIF90b3AsIF9ib3R0b20sIF9yaWdodCwgX21hcmdpbiArIF9Cb3R0b20sIF9tYXJnaW4gKyBfUmlnaHQsIF9tYXJnaW4gKyBfVG9wLCBfbWFyZ2luICsgX0xlZnQsIFwiZGlzcGxheVwiLCBcImZsZXhTaHJpbmtcIiwgXCJmbG9hdFwiLCBcInpJbmRleFwiLCBcImdyaWQtY29sdW1uLXN0YXJ0XCIsIFwiZ3JpZC1jb2x1bW4tZW5kXCIsIFwiZ3JpZC1yb3ctc3RhcnRcIiwgXCJncmlkLXJvdy1lbmRcIiwgXCJncmlkLWFyZWFcIiwgXCJqdXN0aWZ5LXNlbGZcIiwgXCJhbGlnbi1zZWxmXCIsIFwicGxhY2Utc2VsZlwiXSxcbiAgICBfc3RhdGVQcm9wcyA9IF9wcm9wTmFtZXNUb0NvcHkuY29uY2F0KFtfd2lkdGgsIF9oZWlnaHQsIFwiYm94U2l6aW5nXCIsIFwibWF4XCIgKyBfV2lkdGgsIFwibWF4XCIgKyBfSGVpZ2h0LCBcInBvc2l0aW9uXCIsIF9tYXJnaW4sIF9wYWRkaW5nLCBfcGFkZGluZyArIF9Ub3AsIF9wYWRkaW5nICsgX1JpZ2h0LCBfcGFkZGluZyArIF9Cb3R0b20sIF9wYWRkaW5nICsgX0xlZnRdKSxcbiAgICBfc3dhcFBpbk91dCA9IGZ1bmN0aW9uIF9zd2FwUGluT3V0KHBpbiwgc3BhY2VyLCBzdGF0ZSkge1xuICBfc2V0U3RhdGUoc3RhdGUpO1xuXG4gIHZhciBjYWNoZSA9IHBpbi5fZ3NhcDtcblxuICBpZiAoY2FjaGUuc3BhY2VySXNOYXRpdmUpIHtcbiAgICBfc2V0U3RhdGUoY2FjaGUuc3BhY2VyU3RhdGUpO1xuICB9IGVsc2UgaWYgKHBpbi5wYXJlbnROb2RlID09PSBzcGFjZXIpIHtcbiAgICB2YXIgcGFyZW50ID0gc3BhY2VyLnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHBpbiwgc3BhY2VyKTtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChzcGFjZXIpO1xuICAgIH1cbiAgfVxufSxcbiAgICBfc3dhcFBpbkluID0gZnVuY3Rpb24gX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MsIHNwYWNlclN0YXRlKSB7XG4gIGlmIChwaW4ucGFyZW50Tm9kZSAhPT0gc3BhY2VyKSB7XG4gICAgdmFyIGkgPSBfcHJvcE5hbWVzVG9Db3B5Lmxlbmd0aCxcbiAgICAgICAgc3BhY2VyU3R5bGUgPSBzcGFjZXIuc3R5bGUsXG4gICAgICAgIHBpblN0eWxlID0gcGluLnN0eWxlLFxuICAgICAgICBwO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgcCA9IF9wcm9wTmFtZXNUb0NvcHlbaV07XG4gICAgICBzcGFjZXJTdHlsZVtwXSA9IGNzW3BdO1xuICAgIH1cblxuICAgIHNwYWNlclN0eWxlLnBvc2l0aW9uID0gY3MucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiA/IFwiYWJzb2x1dGVcIiA6IFwicmVsYXRpdmVcIjtcbiAgICBjcy5kaXNwbGF5ID09PSBcImlubGluZVwiICYmIChzcGFjZXJTdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIik7XG4gICAgcGluU3R5bGVbX2JvdHRvbV0gPSBwaW5TdHlsZVtfcmlnaHRdID0gXCJhdXRvXCI7XG4gICAgc3BhY2VyU3R5bGUub3ZlcmZsb3cgPSBcInZpc2libGVcIjtcbiAgICBzcGFjZXJTdHlsZS5ib3hTaXppbmcgPSBcImJvcmRlci1ib3hcIjtcbiAgICBzcGFjZXJTdHlsZVtfd2lkdGhdID0gX2dldFNpemUocGluLCBfaG9yaXpvbnRhbCkgKyBfcHg7XG4gICAgc3BhY2VyU3R5bGVbX2hlaWdodF0gPSBfZ2V0U2l6ZShwaW4sIF92ZXJ0aWNhbCkgKyBfcHg7XG4gICAgc3BhY2VyU3R5bGVbX3BhZGRpbmddID0gcGluU3R5bGVbX21hcmdpbl0gPSBwaW5TdHlsZVtfdG9wXSA9IHBpblN0eWxlW19sZWZ0XSA9IFwiMFwiO1xuXG4gICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgIHBpblN0eWxlW193aWR0aF0gPSBwaW5TdHlsZVtcIm1heFwiICsgX1dpZHRoXSA9IGNzW193aWR0aF07XG4gICAgcGluU3R5bGVbX2hlaWdodF0gPSBwaW5TdHlsZVtcIm1heFwiICsgX0hlaWdodF0gPSBjc1tfaGVpZ2h0XTtcbiAgICBwaW5TdHlsZVtfcGFkZGluZ10gPSBjc1tfcGFkZGluZ107XG4gICAgcGluLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNwYWNlciwgcGluKTtcbiAgICBzcGFjZXIuYXBwZW5kQ2hpbGQocGluKTtcbiAgfVxufSxcbiAgICBfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG4gICAgX3NldFN0YXRlID0gZnVuY3Rpb24gX3NldFN0YXRlKHN0YXRlKSB7XG4gIGlmIChzdGF0ZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnQuc3R5bGUsXG4gICAgICAgIGwgPSBzdGF0ZS5sZW5ndGgsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBwLFxuICAgICAgICB2YWx1ZTtcbiAgICAoc3RhdGUudC5fZ3NhcCB8fCBnc2FwLmNvcmUuZ2V0Q2FjaGUoc3RhdGUudCkpLnVuY2FjaGUgPSAxOyAvLyBvdGhlcndpc2UgdHJhbnNmb3JtcyBtYXkgYmUgb2ZmXG5cbiAgICBmb3IgKDsgaSA8IGw7IGkgKz0gMikge1xuICAgICAgdmFsdWUgPSBzdGF0ZVtpICsgMV07XG4gICAgICBwID0gc3RhdGVbaV07XG5cbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzdHlsZVtwXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZVtwXSkge1xuICAgICAgICBzdHlsZS5yZW1vdmVQcm9wZXJ0eShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSxcbiAgICBfZ2V0U3RhdGUgPSBmdW5jdGlvbiBfZ2V0U3RhdGUoZWxlbWVudCkge1xuICAvLyByZXR1cm5zIGFuIEFycmF5IHdpdGggYWx0ZXJuYXRpbmcgdmFsdWVzIGxpa2UgW3Byb3BlcnR5LCB2YWx1ZSwgcHJvcGVydHksIHZhbHVlXSBhbmQgYSBcInRcIiBwcm9wZXJ0eSBwb2ludGluZyB0byB0aGUgdGFyZ2V0IChlbGVtZW50KS4gTWFrZXMgaXQgZmFzdCBhbmQgY2hlYXAuXG4gIHZhciBsID0gX3N0YXRlUHJvcHMubGVuZ3RoLFxuICAgICAgc3R5bGUgPSBlbGVtZW50LnN0eWxlLFxuICAgICAgc3RhdGUgPSBbXSxcbiAgICAgIGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3RhdGUucHVzaChfc3RhdGVQcm9wc1tpXSwgc3R5bGVbX3N0YXRlUHJvcHNbaV1dKTtcbiAgfVxuXG4gIHN0YXRlLnQgPSBlbGVtZW50O1xuICByZXR1cm4gc3RhdGU7XG59LFxuICAgIF9jb3B5U3RhdGUgPSBmdW5jdGlvbiBfY29weVN0YXRlKHN0YXRlLCBvdmVycmlkZSwgb21pdE9mZnNldHMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgbCA9IHN0YXRlLmxlbmd0aCxcbiAgICAgIGkgPSBvbWl0T2Zmc2V0cyA/IDggOiAwLFxuICAgICAgLy8gc2tpcCB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20gaWYgb21pdE9mZnNldHMgaXMgdHJ1ZVxuICBwO1xuXG4gIGZvciAoOyBpIDwgbDsgaSArPSAyKSB7XG4gICAgcCA9IHN0YXRlW2ldO1xuICAgIHJlc3VsdC5wdXNoKHAsIHAgaW4gb3ZlcnJpZGUgPyBvdmVycmlkZVtwXSA6IHN0YXRlW2kgKyAxXSk7XG4gIH1cblxuICByZXN1bHQudCA9IHN0YXRlLnQ7XG4gIHJldHVybiByZXN1bHQ7XG59LFxuICAgIF93aW5PZmZzZXRzID0ge1xuICBsZWZ0OiAwLFxuICB0b3A6IDBcbn0sXG4gICAgLy8gLy8gcG90ZW50aWFsIGZ1dHVyZSBmZWF0dXJlICg/KSBBbGxvdyB1c2VycyB0byBjYWxjdWxhdGUgd2hlcmUgYSB0cmlnZ2VyIGhpdHMgKHNjcm9sbCBwb3NpdGlvbikgbGlrZSBnZXRTY3JvbGxQb3NpdGlvbihcIiNpZFwiLCBcInRvcCBib3R0b21cIilcbi8vIF9nZXRTY3JvbGxQb3NpdGlvbiA9ICh0cmlnZ2VyLCBwb3NpdGlvbiwge3Njcm9sbGVyLCBjb250YWluZXJBbmltYXRpb24sIGhvcml6b250YWx9KSA9PiB7XG4vLyBcdHNjcm9sbGVyID0gX2dldFRhcmdldChzY3JvbGxlciB8fCBfd2luKTtcbi8vIFx0bGV0IGRpcmVjdGlvbiA9IGhvcml6b250YWwgPyBfaG9yaXpvbnRhbCA6IF92ZXJ0aWNhbCxcbi8vIFx0XHRpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQoc2Nyb2xsZXIpO1xuLy8gXHRfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbik7XG4vLyBcdHJldHVybiBfcGFyc2VQb3NpdGlvbihwb3NpdGlvbiwgX2dldFRhcmdldCh0cmlnZ2VyKSwgX2dldFNpemVGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0LCBkaXJlY3Rpb24pKCksIGRpcmVjdGlvbiwgX2dldFNjcm9sbEZ1bmMoc2Nyb2xsZXIsIGRpcmVjdGlvbikoKSwgMCwgMCwgMCwgX2dldE9mZnNldHNGdW5jKHNjcm9sbGVyLCBpc1ZpZXdwb3J0KSgpLCBpc1ZpZXdwb3J0ID8gMCA6IHBhcnNlRmxvYXQoX2dldENvbXB1dGVkU3R5bGUoc2Nyb2xsZXIpW1wiYm9yZGVyXCIgKyBkaXJlY3Rpb24ucDIgKyBfV2lkdGhdKSB8fCAwLCAwLCBjb250YWluZXJBbmltYXRpb24gPyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSA6IF9tYXhTY3JvbGwoc2Nyb2xsZXIpLCBjb250YWluZXJBbmltYXRpb24pO1xuLy8gfSxcbl9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24gX3BhcnNlUG9zaXRpb24odmFsdWUsIHRyaWdnZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCBzY3JvbGwsIG1hcmtlciwgbWFya2VyU2Nyb2xsZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgc2Nyb2xsZXJNYXgsIGNvbnRhaW5lckFuaW1hdGlvbikge1xuICBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgKHZhbHVlID0gdmFsdWUoc2VsZikpO1xuXG4gIGlmIChfaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLnN1YnN0cigwLCAzKSA9PT0gXCJtYXhcIikge1xuICAgIHZhbHVlID0gc2Nyb2xsZXJNYXggKyAodmFsdWUuY2hhckF0KDQpID09PSBcIj1cIiA/IF9vZmZzZXRUb1B4KFwiMFwiICsgdmFsdWUuc3Vic3RyKDMpLCBzY3JvbGxlclNpemUpIDogMCk7XG4gIH1cblxuICB2YXIgdGltZSA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi50aW1lKCkgOiAwLFxuICAgICAgcDEsXG4gICAgICBwMixcbiAgICAgIGVsZW1lbnQ7XG4gIGNvbnRhaW5lckFuaW1hdGlvbiAmJiBjb250YWluZXJBbmltYXRpb24uc2VlaygwKTtcblxuICBpZiAoIV9pc051bWJlcih2YWx1ZSkpIHtcbiAgICBfaXNGdW5jdGlvbih0cmlnZ2VyKSAmJiAodHJpZ2dlciA9IHRyaWdnZXIoc2VsZikpO1xuICAgIHZhciBvZmZzZXRzID0gdmFsdWUuc3BsaXQoXCIgXCIpLFxuICAgICAgICBib3VuZHMsXG4gICAgICAgIGxvY2FsT2Zmc2V0LFxuICAgICAgICBnbG9iYWxPZmZzZXQsXG4gICAgICAgIGRpc3BsYXk7XG4gICAgZWxlbWVudCA9IF9nZXRUYXJnZXQodHJpZ2dlcikgfHwgX2JvZHk7XG4gICAgYm91bmRzID0gX2dldEJvdW5kcyhlbGVtZW50KSB8fCB7fTtcblxuICAgIGlmICgoIWJvdW5kcyB8fCAhYm91bmRzLmxlZnQgJiYgIWJvdW5kcy50b3ApICYmIF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAvLyBpZiBkaXNwbGF5IGlzIFwibm9uZVwiLCBpdCB3b24ndCByZXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgcHJvcGVybHlcbiAgICAgIGRpc3BsYXkgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG4gICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgICAgZGlzcGxheSA/IGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXkgOiBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiZGlzcGxheVwiKTtcbiAgICB9XG5cbiAgICBsb2NhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMF0sIGJvdW5kc1tkaXJlY3Rpb24uZF0pO1xuICAgIGdsb2JhbE9mZnNldCA9IF9vZmZzZXRUb1B4KG9mZnNldHNbMV0gfHwgXCIwXCIsIHNjcm9sbGVyU2l6ZSk7XG4gICAgdmFsdWUgPSBib3VuZHNbZGlyZWN0aW9uLnBdIC0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLnBdIC0gYm9yZGVyV2lkdGggKyBsb2NhbE9mZnNldCArIHNjcm9sbCAtIGdsb2JhbE9mZnNldDtcbiAgICBtYXJrZXJTY3JvbGxlciAmJiBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIGdsb2JhbE9mZnNldCwgZGlyZWN0aW9uLCBzY3JvbGxlclNpemUgLSBnbG9iYWxPZmZzZXQgPCAyMCB8fCBtYXJrZXJTY3JvbGxlci5faXNTdGFydCAmJiBnbG9iYWxPZmZzZXQgPiAyMCk7XG4gICAgc2Nyb2xsZXJTaXplIC09IHNjcm9sbGVyU2l6ZSAtIGdsb2JhbE9mZnNldDsgLy8gYWRqdXN0IGZvciB0aGUgbWFya2VyXG4gIH0gZWxzZSBpZiAobWFya2VyU2Nyb2xsZXIpIHtcbiAgICBfcG9zaXRpb25NYXJrZXIobWFya2VyU2Nyb2xsZXIsIHNjcm9sbGVyU2l6ZSwgZGlyZWN0aW9uLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChtYXJrZXIpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB2YWx1ZSArIHNjcm9sbGVyU2l6ZSxcbiAgICAgICAgaXNTdGFydCA9IG1hcmtlci5faXNTdGFydDtcbiAgICBwMSA9IFwic2Nyb2xsXCIgKyBkaXJlY3Rpb24uZDI7XG5cbiAgICBfcG9zaXRpb25NYXJrZXIobWFya2VyLCBwb3NpdGlvbiwgZGlyZWN0aW9uLCBpc1N0YXJ0ICYmIHBvc2l0aW9uID4gMjAgfHwgIWlzU3RhcnQgJiYgKHVzZUZpeGVkUG9zaXRpb24gPyBNYXRoLm1heChfYm9keVtwMV0sIF9kb2NFbFtwMV0pIDogbWFya2VyLnBhcmVudE5vZGVbcDFdKSA8PSBwb3NpdGlvbiArIDEpO1xuXG4gICAgaWYgKHVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgIHNjcm9sbGVyQm91bmRzID0gX2dldEJvdW5kcyhtYXJrZXJTY3JvbGxlcik7XG4gICAgICB1c2VGaXhlZFBvc2l0aW9uICYmIChtYXJrZXIuc3R5bGVbZGlyZWN0aW9uLm9wLnBdID0gc2Nyb2xsZXJCb3VuZHNbZGlyZWN0aW9uLm9wLnBdIC0gZGlyZWN0aW9uLm9wLm0gLSBtYXJrZXIuX29mZnNldCArIF9weCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbnRhaW5lckFuaW1hdGlvbiAmJiBlbGVtZW50KSB7XG4gICAgcDEgPSBfZ2V0Qm91bmRzKGVsZW1lbnQpO1xuICAgIGNvbnRhaW5lckFuaW1hdGlvbi5zZWVrKHNjcm9sbGVyTWF4KTtcbiAgICBwMiA9IF9nZXRCb3VuZHMoZWxlbWVudCk7XG4gICAgY29udGFpbmVyQW5pbWF0aW9uLl9jYVNjcm9sbERpc3QgPSBwMVtkaXJlY3Rpb24ucF0gLSBwMltkaXJlY3Rpb24ucF07XG4gICAgdmFsdWUgPSB2YWx1ZSAvIGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0ICogc2Nyb2xsZXJNYXg7XG4gIH1cblxuICBjb250YWluZXJBbmltYXRpb24gJiYgY29udGFpbmVyQW5pbWF0aW9uLnNlZWsodGltZSk7XG4gIHJldHVybiBjb250YWluZXJBbmltYXRpb24gPyB2YWx1ZSA6IE1hdGgucm91bmQodmFsdWUpO1xufSxcbiAgICBfcHJlZml4RXhwID0gLyg/OndlYmtpdHxtb3p8bGVuZ3RofGNzc1RleHR8aW5zZXQpL2ksXG4gICAgX3JlcGFyZW50ID0gZnVuY3Rpb24gX3JlcGFyZW50KGVsZW1lbnQsIHBhcmVudCwgdG9wLCBsZWZ0KSB7XG4gIGlmIChlbGVtZW50LnBhcmVudE5vZGUgIT09IHBhcmVudCkge1xuICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGUsXG4gICAgICAgIHAsXG4gICAgICAgIGNzO1xuXG4gICAgaWYgKHBhcmVudCA9PT0gX2JvZHkpIHtcbiAgICAgIGVsZW1lbnQuX3N0T3JpZyA9IHN0eWxlLmNzc1RleHQ7IC8vIHJlY29yZCBvcmlnaW5hbCBpbmxpbmUgc3R5bGVzIHNvIHdlIGNhbiByZXZlcnQgdGhlbSBsYXRlclxuXG4gICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgICBmb3IgKHAgaW4gY3MpIHtcbiAgICAgICAgLy8gbXVzdCBjb3B5IGFsbCByZWxldmFudCBzdHlsZXMgdG8gZW5zdXJlIHRoYXQgbm90aGluZyBjaGFuZ2VzIHZpc3VhbGx5IHdoZW4gd2UgcmVwYXJlbnQgdG8gdGhlIDxib2R5Pi4gU2tpcCB0aGUgdmVuZG9yIHByZWZpeGVkIG9uZXMuXG4gICAgICAgIGlmICghK3AgJiYgIV9wcmVmaXhFeHAudGVzdChwKSAmJiBjc1twXSAmJiB0eXBlb2Ygc3R5bGVbcF0gPT09IFwic3RyaW5nXCIgJiYgcCAhPT0gXCIwXCIpIHtcbiAgICAgICAgICBzdHlsZVtwXSA9IGNzW3BdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0eWxlLnRvcCA9IHRvcDtcbiAgICAgIHN0eWxlLmxlZnQgPSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5jc3NUZXh0ID0gZWxlbWVudC5fc3RPcmlnO1xuICAgIH1cblxuICAgIGdzYXAuY29yZS5nZXRDYWNoZShlbGVtZW50KS51bmNhY2hlID0gMTtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH1cbn0sXG4gICAgLy8gX21lcmdlQW5pbWF0aW9ucyA9IGFuaW1hdGlvbnMgPT4ge1xuLy8gXHRsZXQgdGwgPSBnc2FwLnRpbWVsaW5lKHtzbW9vdGhDaGlsZFRpbWluZzogdHJ1ZX0pLnN0YXJ0VGltZShNYXRoLm1pbiguLi5hbmltYXRpb25zLm1hcChhID0+IGEuZ2xvYmFsVGltZSgwKSkpKTtcbi8vIFx0YW5pbWF0aW9ucy5mb3JFYWNoKGEgPT4ge2xldCB0aW1lID0gYS50b3RhbFRpbWUoKTsgdGwuYWRkKGEpOyBhLnRvdGFsVGltZSh0aW1lKTsgfSk7XG4vLyBcdHRsLnNtb290aENoaWxkVGltaW5nID0gZmFsc2U7XG4vLyBcdHJldHVybiB0bDtcbi8vIH0sXG4vLyByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byB0d2VlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGluIHRoZSBkaXJlY3Rpb24gcHJvdmlkZWQsIGFuZCB3aGVuIGRvaW5nIHNvIGl0J2xsIGFkZCBhIC50d2VlbiBwcm9wZXJ0eSB0byB0aGUgRlVOQ1RJT04gaXRzZWxmLCBhbmQgcmVtb3ZlIGl0IHdoZW4gdGhlIHR3ZWVuIGNvbXBsZXRlcyBvciBnZXRzIGtpbGxlZC4gVGhpcyBnaXZlcyB1cyBhIHdheSB0byBoYXZlIG11bHRpcGxlIFNjcm9sbFRyaWdnZXJzIHVzZSBhIGNlbnRyYWwgZnVuY3Rpb24gZm9yIGFueSBnaXZlbiBzY3JvbGxlciBhbmQgc2VlIGlmIHRoZXJlJ3MgYSBzY3JvbGwgdHdlZW4gcnVubmluZyAod2hpY2ggd291bGQgYWZmZWN0IGlmL2hvdyB0aGluZ3MgZ2V0IHVwZGF0ZWQpXG5fZ2V0VHdlZW5DcmVhdG9yID0gZnVuY3Rpb24gX2dldFR3ZWVuQ3JlYXRvcihzY3JvbGxlciwgZGlyZWN0aW9uKSB7XG4gIHZhciBnZXRTY3JvbGwgPSBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgIHByb3AgPSBcIl9zY3JvbGxcIiArIGRpcmVjdGlvbi5wMixcbiAgICAgIC8vIGFkZCBhIHR3ZWVuYWJsZSBwcm9wZXJ0eSB0byB0aGUgc2Nyb2xsZXIgdGhhdCdzIGEgZ2V0dGVyL3NldHRlciBmdW5jdGlvbiwgbGlrZSBfc2Nyb2xsVG9wIG9yIF9zY3JvbGxMZWZ0LiBUaGlzIHdheSwgaWYgc29tZW9uZSBkb2VzIGdzYXAua2lsbFR3ZWVuc09mKHNjcm9sbGVyKSBpdCdsbCBraWxsIHRoZSBzY3JvbGwgdHdlZW4uXG4gIGxhc3RTY3JvbGwxLFxuICAgICAgbGFzdFNjcm9sbDIsXG4gICAgICBnZXRUd2VlbiA9IGZ1bmN0aW9uIGdldFR3ZWVuKHNjcm9sbFRvLCB2YXJzLCBpbml0aWFsVmFsdWUsIGNoYW5nZTEsIGNoYW5nZTIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbixcbiAgICAgICAgb25Db21wbGV0ZSA9IHZhcnMub25Db21wbGV0ZSxcbiAgICAgICAgbW9kaWZpZXJzID0ge307XG4gICAgdHdlZW4gJiYgdHdlZW4ua2lsbCgpO1xuICAgIGxhc3RTY3JvbGwxID0gTWF0aC5yb3VuZChpbml0aWFsVmFsdWUpO1xuICAgIHZhcnNbcHJvcF0gPSBzY3JvbGxUbztcbiAgICB2YXJzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcblxuICAgIG1vZGlmaWVyc1twcm9wXSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBfcm91bmQoZ2V0U2Nyb2xsKCkpOyAvLyByb3VuZCBiZWNhdXNlIGluIHNvbWUgW3ZlcnkgdW5jb21tb25dIFdpbmRvd3MgZW52aXJvbm1lbnRzLCBpdCBjYW4gZ2V0IHJlcG9ydGVkIHdpdGggZGVjaW1hbHMgZXZlbiB0aG91Z2ggaXQgd2FzIHNldCB3aXRob3V0LlxuXG4gICAgICBpZiAodmFsdWUgIT09IGxhc3RTY3JvbGwxICYmIHZhbHVlICE9PSBsYXN0U2Nyb2xsMiAmJiBNYXRoLmFicyh2YWx1ZSAtIGxhc3RTY3JvbGwxKSA+IDIpIHtcbiAgICAgICAgLy8gaWYgdGhlIHVzZXIgc2Nyb2xscywga2lsbCB0aGUgdHdlZW4uIGlPUyBTYWZhcmkgaW50ZXJtaXR0ZW50bHkgbWlzcmVwb3J0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uLCBpdCBtYXkgYmUgdGhlIG1vc3QgcmVjZW50bHktc2V0IG9uZSBvciB0aGUgb25lIGJlZm9yZSB0aGF0ISBXaGVuIFNhZmFyaSBpcyB6b29tZWQgKENNRC0rKSwgaXQgb2Z0ZW4gbWlzcmVwb3J0cyBhcyAxIHBpeGVsIG9mZiB0b28hIFNvIGlmIHdlIHNldCB0aGUgc2Nyb2xsIHBvc2l0aW9uIHRvIDEyNSwgZm9yIGV4YW1wbGUsIGl0J2xsIGFjdHVhbGx5IHJlcG9ydCBpdCBhcyAxMjQuXG4gICAgICAgIHR3ZWVuLmtpbGwoKTtcbiAgICAgICAgZ2V0VHdlZW4udHdlZW4gPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBpbml0aWFsVmFsdWUgKyBjaGFuZ2UxICogdHdlZW4ucmF0aW8gKyBjaGFuZ2UyICogdHdlZW4ucmF0aW8gKiB0d2Vlbi5yYXRpbztcbiAgICAgIH1cblxuICAgICAgbGFzdFNjcm9sbDIgPSBsYXN0U2Nyb2xsMTtcbiAgICAgIHJldHVybiBsYXN0U2Nyb2xsMSA9IF9yb3VuZCh2YWx1ZSk7XG4gICAgfTtcblxuICAgIHZhcnMub25Db21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGdldFR3ZWVuLnR3ZWVuID0gMDtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZS5jYWxsKHR3ZWVuKTtcbiAgICB9O1xuXG4gICAgdHdlZW4gPSBnZXRUd2Vlbi50d2VlbiA9IGdzYXAudG8oc2Nyb2xsZXIsIHZhcnMpO1xuICAgIHJldHVybiB0d2VlbjtcbiAgfTtcblxuICBzY3JvbGxlcltwcm9wXSA9IGdldFNjcm9sbDtcbiAgc2Nyb2xsZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0VHdlZW4udHdlZW4gJiYgZ2V0VHdlZW4udHdlZW4ua2lsbCgpICYmIChnZXRUd2Vlbi50d2VlbiA9IDApO1xuICB9LCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTsgLy8gV2luZG93cyBtYWNoaW5lcyBoYW5kbGUgbW91c2V3aGVlbCBzY3JvbGxpbmcgaW4gY2h1bmtzIChsaWtlIFwiMyBsaW5lcyBwZXIgc2Nyb2xsXCIpIG1lYW5pbmcgdGhlIHR5cGljYWwgc3RyYXRlZ3kgZm9yIGNhbmNlbGxpbmcgdGhlIHNjcm9sbCBpc24ndCBhcyBzZW5zaXRpdmUuIEl0J3MgbXVjaCBtb3JlIGxpa2VseSB0byBtYXRjaCBvbmUgb2YgdGhlIHByZXZpb3VzIDIgc2Nyb2xsIGV2ZW50IHBvc2l0aW9ucy4gU28gd2Uga2lsbCBhbnkgc25hcHBpbmcgYXMgc29vbiBhcyB0aGVyZSdzIGEgd2hlZWwgZXZlbnQuXG5cbiAgcmV0dXJuIGdldFR3ZWVuO1xufTtcblxuX2hvcml6b250YWwub3AgPSBfdmVydGljYWw7XG5leHBvcnQgdmFyIFNjcm9sbFRyaWdnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY3JvbGxUcmlnZ2VyKHZhcnMsIGFuaW1hdGlvbikge1xuICAgIF9jb3JlSW5pdHRlZCB8fCBTY3JvbGxUcmlnZ2VyLnJlZ2lzdGVyKGdzYXApIHx8IGNvbnNvbGUud2FybihcIlBsZWFzZSBnc2FwLnJlZ2lzdGVyUGx1Z2luKFNjcm9sbFRyaWdnZXIpXCIpO1xuICAgIHRoaXMuaW5pdCh2YXJzLCBhbmltYXRpb24pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjcm9sbFRyaWdnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbml0ID0gZnVuY3Rpb24gaW5pdCh2YXJzLCBhbmltYXRpb24pIHtcbiAgICB0aGlzLnByb2dyZXNzID0gdGhpcy5zdGFydCA9IDA7XG4gICAgdGhpcy52YXJzICYmIHRoaXMua2lsbCgxKTsgLy8gaW4gY2FzZSBpdCdzIGJlaW5nIGluaXR0ZWQgYWdhaW5cblxuICAgIGlmICghX2VuYWJsZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlID0gdGhpcy5yZWZyZXNoID0gdGhpcy5raWxsID0gX3Bhc3NUaHJvdWdoO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhcnMgPSBfc2V0RGVmYXVsdHMoX2lzU3RyaW5nKHZhcnMpIHx8IF9pc051bWJlcih2YXJzKSB8fCB2YXJzLm5vZGVUeXBlID8ge1xuICAgICAgdHJpZ2dlcjogdmFyc1xuICAgIH0gOiB2YXJzLCBfZGVmYXVsdHMpO1xuXG4gICAgdmFyIF92YXJzID0gdmFycyxcbiAgICAgICAgb25VcGRhdGUgPSBfdmFycy5vblVwZGF0ZSxcbiAgICAgICAgdG9nZ2xlQ2xhc3MgPSBfdmFycy50b2dnbGVDbGFzcyxcbiAgICAgICAgaWQgPSBfdmFycy5pZCxcbiAgICAgICAgb25Ub2dnbGUgPSBfdmFycy5vblRvZ2dsZSxcbiAgICAgICAgb25SZWZyZXNoID0gX3ZhcnMub25SZWZyZXNoLFxuICAgICAgICBzY3J1YiA9IF92YXJzLnNjcnViLFxuICAgICAgICB0cmlnZ2VyID0gX3ZhcnMudHJpZ2dlcixcbiAgICAgICAgcGluID0gX3ZhcnMucGluLFxuICAgICAgICBwaW5TcGFjaW5nID0gX3ZhcnMucGluU3BhY2luZyxcbiAgICAgICAgaW52YWxpZGF0ZU9uUmVmcmVzaCA9IF92YXJzLmludmFsaWRhdGVPblJlZnJlc2gsXG4gICAgICAgIGFudGljaXBhdGVQaW4gPSBfdmFycy5hbnRpY2lwYXRlUGluLFxuICAgICAgICBvblNjcnViQ29tcGxldGUgPSBfdmFycy5vblNjcnViQ29tcGxldGUsXG4gICAgICAgIG9uU25hcENvbXBsZXRlID0gX3ZhcnMub25TbmFwQ29tcGxldGUsXG4gICAgICAgIG9uY2UgPSBfdmFycy5vbmNlLFxuICAgICAgICBzbmFwID0gX3ZhcnMuc25hcCxcbiAgICAgICAgcGluUmVwYXJlbnQgPSBfdmFycy5waW5SZXBhcmVudCxcbiAgICAgICAgcGluU3BhY2VyID0gX3ZhcnMucGluU3BhY2VyLFxuICAgICAgICBjb250YWluZXJBbmltYXRpb24gPSBfdmFycy5jb250YWluZXJBbmltYXRpb24sXG4gICAgICAgIGZhc3RTY3JvbGxFbmQgPSBfdmFycy5mYXN0U2Nyb2xsRW5kLFxuICAgICAgICBwcmV2ZW50T3ZlcmxhcHMgPSBfdmFycy5wcmV2ZW50T3ZlcmxhcHMsXG4gICAgICAgIGRpcmVjdGlvbiA9IHZhcnMuaG9yaXpvbnRhbCB8fCB2YXJzLmNvbnRhaW5lckFuaW1hdGlvbiAmJiB2YXJzLmhvcml6b250YWwgIT09IGZhbHNlID8gX2hvcml6b250YWwgOiBfdmVydGljYWwsXG4gICAgICAgIGlzVG9nZ2xlID0gIXNjcnViICYmIHNjcnViICE9PSAwLFxuICAgICAgICBzY3JvbGxlciA9IF9nZXRUYXJnZXQodmFycy5zY3JvbGxlciB8fCBfd2luKSxcbiAgICAgICAgc2Nyb2xsZXJDYWNoZSA9IGdzYXAuY29yZS5nZXRDYWNoZShzY3JvbGxlciksXG4gICAgICAgIGlzVmlld3BvcnQgPSBfaXNWaWV3cG9ydChzY3JvbGxlciksXG4gICAgICAgIHVzZUZpeGVkUG9zaXRpb24gPSAoXCJwaW5UeXBlXCIgaW4gdmFycyA/IHZhcnMucGluVHlwZSA6IF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwicGluVHlwZVwiKSB8fCBpc1ZpZXdwb3J0ICYmIFwiZml4ZWRcIikgPT09IFwiZml4ZWRcIixcbiAgICAgICAgY2FsbGJhY2tzID0gW3ZhcnMub25FbnRlciwgdmFycy5vbkxlYXZlLCB2YXJzLm9uRW50ZXJCYWNrLCB2YXJzLm9uTGVhdmVCYWNrXSxcbiAgICAgICAgdG9nZ2xlQWN0aW9ucyA9IGlzVG9nZ2xlICYmIHZhcnMudG9nZ2xlQWN0aW9ucy5zcGxpdChcIiBcIiksXG4gICAgICAgIG1hcmtlcnMgPSBcIm1hcmtlcnNcIiBpbiB2YXJzID8gdmFycy5tYXJrZXJzIDogX2RlZmF1bHRzLm1hcmtlcnMsXG4gICAgICAgIGJvcmRlcldpZHRoID0gaXNWaWV3cG9ydCA/IDAgOiBwYXJzZUZsb2F0KF9nZXRDb21wdXRlZFN0eWxlKHNjcm9sbGVyKVtcImJvcmRlclwiICsgZGlyZWN0aW9uLnAyICsgX1dpZHRoXSkgfHwgMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIG9uUmVmcmVzaEluaXQgPSB2YXJzLm9uUmVmcmVzaEluaXQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHZhcnMub25SZWZyZXNoSW5pdChzZWxmKTtcbiAgICB9LFxuICAgICAgICBnZXRTY3JvbGxlclNpemUgPSBfZ2V0U2l6ZUZ1bmMoc2Nyb2xsZXIsIGlzVmlld3BvcnQsIGRpcmVjdGlvbiksXG4gICAgICAgIGdldFNjcm9sbGVyT2Zmc2V0cyA9IF9nZXRPZmZzZXRzRnVuYyhzY3JvbGxlciwgaXNWaWV3cG9ydCksXG4gICAgICAgIGxhc3RTbmFwID0gMCxcbiAgICAgICAgc2Nyb2xsRnVuYyA9IF9nZXRTY3JvbGxGdW5jKHNjcm9sbGVyLCBkaXJlY3Rpb24pLFxuICAgICAgICB0d2VlblRvLFxuICAgICAgICBwaW5DYWNoZSxcbiAgICAgICAgc25hcEZ1bmMsXG4gICAgICAgIHNjcm9sbDEsXG4gICAgICAgIHNjcm9sbDIsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIG1hcmtlclN0YXJ0LFxuICAgICAgICBtYXJrZXJFbmQsXG4gICAgICAgIG1hcmtlclN0YXJ0VHJpZ2dlcixcbiAgICAgICAgbWFya2VyRW5kVHJpZ2dlcixcbiAgICAgICAgbWFya2VyVmFycyxcbiAgICAgICAgY2hhbmdlLFxuICAgICAgICBwaW5PcmlnaW5hbFN0YXRlLFxuICAgICAgICBwaW5BY3RpdmVTdGF0ZSxcbiAgICAgICAgcGluU3RhdGUsXG4gICAgICAgIHNwYWNlcixcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBwaW5HZXR0ZXIsXG4gICAgICAgIHBpblNldHRlcixcbiAgICAgICAgcGluU3RhcnQsXG4gICAgICAgIHBpbkNoYW5nZSxcbiAgICAgICAgc3BhY2luZ1N0YXJ0LFxuICAgICAgICBzcGFjZXJTdGF0ZSxcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIsXG4gICAgICAgIG1hcmtlckVuZFNldHRlcixcbiAgICAgICAgY3MsXG4gICAgICAgIHNuYXAxLFxuICAgICAgICBzbmFwMixcbiAgICAgICAgc2NydWJUd2VlbixcbiAgICAgICAgc2NydWJTbW9vdGgsXG4gICAgICAgIHNuYXBEdXJDbGFtcCxcbiAgICAgICAgc25hcERlbGF5ZWRDYWxsLFxuICAgICAgICBwcmV2UHJvZ3Jlc3MsXG4gICAgICAgIHByZXZTY3JvbGwsXG4gICAgICAgIHByZXZBbmltUHJvZ3Jlc3MsXG4gICAgICAgIGNhTWFya2VyU2V0dGVyO1xuXG4gICAgc2VsZi5tZWRpYSA9IF9jcmVhdGluZ01lZGlhO1xuICAgIGFudGljaXBhdGVQaW4gKj0gNDU7XG4gICAgc2VsZi5zY3JvbGxlciA9IHNjcm9sbGVyO1xuICAgIHNlbGYuc2Nyb2xsID0gY29udGFpbmVyQW5pbWF0aW9uID8gY29udGFpbmVyQW5pbWF0aW9uLnRpbWUuYmluZChjb250YWluZXJBbmltYXRpb24pIDogc2Nyb2xsRnVuYztcbiAgICBzY3JvbGwxID0gc2Nyb2xsRnVuYygpO1xuICAgIHNlbGYudmFycyA9IHZhcnM7XG4gICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uIHx8IHZhcnMuYW5pbWF0aW9uO1xuICAgIFwicmVmcmVzaFByaW9yaXR5XCIgaW4gdmFycyAmJiAoX3NvcnQgPSAxKTtcbiAgICBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsID0gc2Nyb2xsZXJDYWNoZS50d2VlblNjcm9sbCB8fCB7XG4gICAgICB0b3A6IF9nZXRUd2VlbkNyZWF0b3Ioc2Nyb2xsZXIsIF92ZXJ0aWNhbCksXG4gICAgICBsZWZ0OiBfZ2V0VHdlZW5DcmVhdG9yKHNjcm9sbGVyLCBfaG9yaXpvbnRhbClcbiAgICB9O1xuICAgIHNlbGYudHdlZW5UbyA9IHR3ZWVuVG8gPSBzY3JvbGxlckNhY2hlLnR3ZWVuU2Nyb2xsW2RpcmVjdGlvbi5wXTtcblxuICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgIGFuaW1hdGlvbi52YXJzLmxhenkgPSBmYWxzZTtcbiAgICAgIGFuaW1hdGlvbi5faW5pdHRlZCB8fCBhbmltYXRpb24udmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlICYmIHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9PSBmYWxzZSAmJiBhbmltYXRpb24ucmVuZGVyKDAsIHRydWUsIHRydWUpO1xuICAgICAgc2VsZi5hbmltYXRpb24gPSBhbmltYXRpb24ucGF1c2UoKTtcbiAgICAgIGFuaW1hdGlvbi5zY3JvbGxUcmlnZ2VyID0gc2VsZjtcbiAgICAgIHNjcnViU21vb3RoID0gX2lzTnVtYmVyKHNjcnViKSAmJiBzY3J1YjtcbiAgICAgIHNjcnViU21vb3RoICYmIChzY3J1YlR3ZWVuID0gZ3NhcC50byhhbmltYXRpb24sIHtcbiAgICAgICAgZWFzZTogXCJwb3dlcjNcIixcbiAgICAgICAgZHVyYXRpb246IHNjcnViU21vb3RoLFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKCkge1xuICAgICAgICAgIHJldHVybiBvblNjcnViQ29tcGxldGUgJiYgb25TY3J1YkNvbXBsZXRlKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICBzbmFwMSA9IDA7XG4gICAgICBpZCB8fCAoaWQgPSBhbmltYXRpb24udmFycy5pZCk7XG4gICAgfVxuXG4gICAgX3RyaWdnZXJzLnB1c2goc2VsZik7XG5cbiAgICBpZiAoc25hcCkge1xuICAgICAgaWYgKCFfaXNPYmplY3Qoc25hcCkgfHwgc25hcC5wdXNoKSB7XG4gICAgICAgIHNuYXAgPSB7XG4gICAgICAgICAgc25hcFRvOiBzbmFwXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIFwic2Nyb2xsQmVoYXZpb3JcIiBpbiBfYm9keS5zdHlsZSAmJiBnc2FwLnNldChpc1ZpZXdwb3J0ID8gW19ib2R5LCBfZG9jRWxdIDogc2Nyb2xsZXIsIHtcbiAgICAgICAgc2Nyb2xsQmVoYXZpb3I6IFwiYXV0b1wiXG4gICAgICB9KTsgLy8gc21vb3RoIHNjcm9sbGluZyBkb2Vzbid0IHdvcmsgd2l0aCBzbmFwLlxuXG4gICAgICBzbmFwRnVuYyA9IF9pc0Z1bmN0aW9uKHNuYXAuc25hcFRvKSA/IHNuYXAuc25hcFRvIDogc25hcC5zbmFwVG8gPT09IFwibGFiZWxzXCIgPyBfZ2V0Q2xvc2VzdExhYmVsKGFuaW1hdGlvbikgOiBzbmFwLnNuYXBUbyA9PT0gXCJsYWJlbHNEaXJlY3Rpb25hbFwiID8gX2dldExhYmVsQXREaXJlY3Rpb24oYW5pbWF0aW9uKSA6IHNuYXAuZGlyZWN0aW9uYWwgIT09IGZhbHNlID8gZnVuY3Rpb24gKHZhbHVlLCBzdCkge1xuICAgICAgICByZXR1cm4gX3NuYXBEaXJlY3Rpb25hbChzbmFwLnNuYXBUbykodmFsdWUsIHN0LmRpcmVjdGlvbik7XG4gICAgICB9IDogZ3NhcC51dGlscy5zbmFwKHNuYXAuc25hcFRvKTtcbiAgICAgIHNuYXBEdXJDbGFtcCA9IHNuYXAuZHVyYXRpb24gfHwge1xuICAgICAgICBtaW46IDAuMSxcbiAgICAgICAgbWF4OiAyXG4gICAgICB9O1xuICAgICAgc25hcER1ckNsYW1wID0gX2lzT2JqZWN0KHNuYXBEdXJDbGFtcCkgPyBfY2xhbXAoc25hcER1ckNsYW1wLm1pbiwgc25hcER1ckNsYW1wLm1heCkgOiBfY2xhbXAoc25hcER1ckNsYW1wLCBzbmFwRHVyQ2xhbXApO1xuICAgICAgc25hcERlbGF5ZWRDYWxsID0gZ3NhcC5kZWxheWVkQ2FsbChzbmFwLmRlbGF5IHx8IHNjcnViU21vb3RoIC8gMiB8fCAwLjEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPCAxMCAmJiAhX3BvaW50ZXJJc0Rvd24gJiYgbGFzdFNuYXAgIT09IHNjcm9sbEZ1bmMoKSkge1xuICAgICAgICAgIHZhciB0b3RhbFByb2dyZXNzID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBzZWxmLnByb2dyZXNzLFxuICAgICAgICAgICAgICB2ZWxvY2l0eSA9ICh0b3RhbFByb2dyZXNzIC0gc25hcDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogMTAwMCB8fCAwLFxuICAgICAgICAgICAgICBjaGFuZ2UxID0gZ3NhcC51dGlscy5jbGFtcCgtc2VsZi5wcm9ncmVzcywgMSAtIHNlbGYucHJvZ3Jlc3MsIF9hYnModmVsb2NpdHkgLyAyKSAqIHZlbG9jaXR5IC8gMC4xODUpLFxuICAgICAgICAgICAgICBuYXR1cmFsRW5kID0gc2VsZi5wcm9ncmVzcyArIChzbmFwLmluZXJ0aWEgPT09IGZhbHNlID8gMCA6IGNoYW5nZTEpLFxuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IF9jbGFtcCgwLCAxLCBzbmFwRnVuYyhuYXR1cmFsRW5kLCBzZWxmKSksXG4gICAgICAgICAgICAgIHNjcm9sbCA9IHNjcm9sbEZ1bmMoKSxcbiAgICAgICAgICAgICAgZW5kU2Nyb2xsID0gTWF0aC5yb3VuZChzdGFydCArIGVuZFZhbHVlICogY2hhbmdlKSxcbiAgICAgICAgICAgICAgX3NuYXAgPSBzbmFwLFxuICAgICAgICAgICAgICBvblN0YXJ0ID0gX3NuYXAub25TdGFydCxcbiAgICAgICAgICAgICAgX29uSW50ZXJydXB0ID0gX3NuYXAub25JbnRlcnJ1cHQsXG4gICAgICAgICAgICAgIF9vbkNvbXBsZXRlID0gX3NuYXAub25Db21wbGV0ZSxcbiAgICAgICAgICAgICAgdHdlZW4gPSB0d2VlblRvLnR3ZWVuO1xuXG4gICAgICAgICAgaWYgKHNjcm9sbCA8PSBlbmQgJiYgc2Nyb2xsID49IHN0YXJ0ICYmIGVuZFNjcm9sbCAhPT0gc2Nyb2xsKSB7XG4gICAgICAgICAgICBpZiAodHdlZW4gJiYgIXR3ZWVuLl9pbml0dGVkICYmIHR3ZWVuLmRhdGEgPD0gX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpKSB7XG4gICAgICAgICAgICAgIC8vIHRoZXJlJ3MgYW4gb3ZlcmxhcHBpbmcgc25hcCEgU28gd2UgbXVzdCBmaWd1cmUgb3V0IHdoaWNoIG9uZSBpcyBjbG9zZXIgYW5kIGxldCB0aGF0IHR3ZWVuIGxpdmUuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNuYXAuaW5lcnRpYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY2hhbmdlMSA9IGVuZFZhbHVlIC0gc2VsZi5wcm9ncmVzcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHdlZW5UbyhlbmRTY3JvbGwsIHtcbiAgICAgICAgICAgICAgZHVyYXRpb246IHNuYXBEdXJDbGFtcChfYWJzKE1hdGgubWF4KF9hYnMobmF0dXJhbEVuZCAtIHRvdGFsUHJvZ3Jlc3MpLCBfYWJzKGVuZFZhbHVlIC0gdG90YWxQcm9ncmVzcykpICogMC4xODUgLyB2ZWxvY2l0eSAvIDAuMDUgfHwgMCkpLFxuICAgICAgICAgICAgICBlYXNlOiBzbmFwLmVhc2UgfHwgXCJwb3dlcjNcIixcbiAgICAgICAgICAgICAgZGF0YTogX2FicyhlbmRTY3JvbGwgLSBzY3JvbGwpLFxuICAgICAgICAgICAgICAvLyByZWNvcmQgdGhlIGRpc3RhbmNlIHNvIHRoYXQgaWYgYW5vdGhlciBzbmFwIHR3ZWVuIG9jY3VycyAoY29uZmxpY3QpIHdlIGNhbiBwcmlvcml0aXplIHRoZSBjbG9zZXN0IHNuYXAuXG4gICAgICAgICAgICAgIG9uSW50ZXJydXB0OiBmdW5jdGlvbiBvbkludGVycnVwdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSkgJiYgX29uSW50ZXJydXB0ICYmIF9vbkludGVycnVwdChzZWxmKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgICBsYXN0U25hcCA9IHNjcm9sbEZ1bmMoKTtcbiAgICAgICAgICAgICAgICBzbmFwMSA9IHNuYXAyID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBzZWxmLnByb2dyZXNzO1xuICAgICAgICAgICAgICAgIG9uU25hcENvbXBsZXRlICYmIG9uU25hcENvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgICAgICAgIF9vbkNvbXBsZXRlICYmIF9vbkNvbXBsZXRlKHNlbGYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBzY3JvbGwsIGNoYW5nZTEgKiBjaGFuZ2UsIGVuZFNjcm9sbCAtIHNjcm9sbCAtIGNoYW5nZTEgKiBjaGFuZ2UpO1xuICAgICAgICAgICAgb25TdGFydCAmJiBvblN0YXJ0KHNlbGYsIHR3ZWVuVG8udHdlZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmlzQWN0aXZlKSB7XG4gICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgaWQgJiYgKF9pZHNbaWRdID0gc2VsZik7XG4gICAgdHJpZ2dlciA9IHNlbGYudHJpZ2dlciA9IF9nZXRUYXJnZXQodHJpZ2dlciB8fCBwaW4pO1xuICAgIHBpbiA9IHBpbiA9PT0gdHJ1ZSA/IHRyaWdnZXIgOiBfZ2V0VGFyZ2V0KHBpbik7XG4gICAgX2lzU3RyaW5nKHRvZ2dsZUNsYXNzKSAmJiAodG9nZ2xlQ2xhc3MgPSB7XG4gICAgICB0YXJnZXRzOiB0cmlnZ2VyLFxuICAgICAgY2xhc3NOYW1lOiB0b2dnbGVDbGFzc1xuICAgIH0pO1xuXG4gICAgaWYgKHBpbikge1xuICAgICAgcGluU3BhY2luZyA9PT0gZmFsc2UgfHwgcGluU3BhY2luZyA9PT0gX21hcmdpbiB8fCAocGluU3BhY2luZyA9ICFwaW5TcGFjaW5nICYmIF9nZXRDb21wdXRlZFN0eWxlKHBpbi5wYXJlbnROb2RlKS5kaXNwbGF5ID09PSBcImZsZXhcIiA/IGZhbHNlIDogX3BhZGRpbmcpOyAvLyBpZiB0aGUgcGFyZW50IGlzIGRpc3BsYXk6IGZsZXgsIGRvbid0IGFwcGx5IHBpblNwYWNpbmcgYnkgZGVmYXVsdC5cblxuICAgICAgc2VsZi5waW4gPSBwaW47XG4gICAgICB2YXJzLmZvcmNlM0QgIT09IGZhbHNlICYmIGdzYXAuc2V0KHBpbiwge1xuICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHBpbkNhY2hlID0gZ3NhcC5jb3JlLmdldENhY2hlKHBpbik7XG5cbiAgICAgIGlmICghcGluQ2FjaGUuc3BhY2VyKSB7XG4gICAgICAgIC8vIHJlY29yZCB0aGUgc3BhY2VyIGFuZCBwaW5PcmlnaW5hbFN0YXRlIG9uIHRoZSBjYWNoZSBpbiBjYXNlIHNvbWVvbmUgdHJpZXMgcGlubmluZyB0aGUgc2FtZSBlbGVtZW50IHdpdGggTVVMVElQTEUgU2Nyb2xsVHJpZ2dlcnMgLSB3ZSBkb24ndCB3YW50IHRvIGhhdmUgbXVsdGlwbGUgc3BhY2VycyBvciByZWNvcmQgdGhlIFwib3JpZ2luYWxcIiBwaW4gc3RhdGUgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhZmZlY3RlZCBieSBhbm90aGVyIFNjcm9sbFRyaWdnZXIuXG4gICAgICAgIGlmIChwaW5TcGFjZXIpIHtcbiAgICAgICAgICBwaW5TcGFjZXIgPSBfZ2V0VGFyZ2V0KHBpblNwYWNlcik7XG4gICAgICAgICAgcGluU3BhY2VyICYmICFwaW5TcGFjZXIubm9kZVR5cGUgJiYgKHBpblNwYWNlciA9IHBpblNwYWNlci5jdXJyZW50IHx8IHBpblNwYWNlci5uYXRpdmVFbGVtZW50KTsgLy8gZm9yIFJlYWN0ICYgQW5ndWxhclxuXG4gICAgICAgICAgcGluQ2FjaGUuc3BhY2VySXNOYXRpdmUgPSAhIXBpblNwYWNlcjtcbiAgICAgICAgICBwaW5TcGFjZXIgJiYgKHBpbkNhY2hlLnNwYWNlclN0YXRlID0gX2dldFN0YXRlKHBpblNwYWNlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGluQ2FjaGUuc3BhY2VyID0gc3BhY2VyID0gcGluU3BhY2VyIHx8IF9kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoXCJwaW4tc3BhY2VyXCIpO1xuICAgICAgICBpZCAmJiBzcGFjZXIuY2xhc3NMaXN0LmFkZChcInBpbi1zcGFjZXItXCIgKyBpZCk7XG4gICAgICAgIHBpbkNhY2hlLnBpblN0YXRlID0gcGluT3JpZ2luYWxTdGF0ZSA9IF9nZXRTdGF0ZShwaW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGluT3JpZ2luYWxTdGF0ZSA9IHBpbkNhY2hlLnBpblN0YXRlO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnNwYWNlciA9IHNwYWNlciA9IHBpbkNhY2hlLnNwYWNlcjtcbiAgICAgIGNzID0gX2dldENvbXB1dGVkU3R5bGUocGluKTtcbiAgICAgIHNwYWNpbmdTdGFydCA9IGNzW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyXTtcbiAgICAgIHBpbkdldHRlciA9IGdzYXAuZ2V0UHJvcGVydHkocGluKTtcbiAgICAgIHBpblNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIocGluLCBkaXJlY3Rpb24uYSwgX3B4KTsgLy8gcGluLmZpcnN0Q2hpbGQgJiYgIV9tYXhTY3JvbGwocGluLCBkaXJlY3Rpb24pICYmIChwaW4uc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiKTsgLy8gcHJvdGVjdHMgZnJvbSBjb2xsYXBzaW5nIG1hcmdpbnMsIGJ1dCBjYW4gaGF2ZSB1bmludGVuZGVkIGNvbnNlcXVlbmNlcyBhcyBkZW1vbnN0cmF0ZWQgaGVyZTogaHR0cHM6Ly9jb2RlcGVuLmlvL0dyZWVuU29jay9wZW4vMWU0MmM3YTczYmZhNDA5ZDJjZjFlMTg0ZTdhNDI0OGQgc28gaXQgd2FzIHJlbW92ZWQgaW4gZmF2b3Igb2YganVzdCB0ZWxsaW5nIHBlb3BsZSB0byBzZXQgdXAgdGhlaXIgQ1NTIHRvIGF2b2lkIHRoZSBjb2xsYXBzaW5nIG1hcmdpbnMgKG92ZXJmbG93OiBoaWRkZW4gfCBhdXRvIGlzIGp1c3Qgb25lIG9wdGlvbi4gQW5vdGhlciBpcyBib3JkZXItdG9wOiAxcHggc29saWQgdHJhbnNwYXJlbnQpLlxuXG4gICAgICBfc3dhcFBpbkluKHBpbiwgc3BhY2VyLCBjcyk7XG5cbiAgICAgIHBpblN0YXRlID0gX2dldFN0YXRlKHBpbik7XG4gICAgfVxuXG4gICAgaWYgKG1hcmtlcnMpIHtcbiAgICAgIG1hcmtlclZhcnMgPSBfaXNPYmplY3QobWFya2VycykgPyBfc2V0RGVmYXVsdHMobWFya2VycywgX21hcmtlckRlZmF1bHRzKSA6IF9tYXJrZXJEZWZhdWx0cztcbiAgICAgIG1hcmtlclN0YXJ0VHJpZ2dlciA9IF9jcmVhdGVNYXJrZXIoXCJzY3JvbGxlci1zdGFydFwiLCBpZCwgc2Nyb2xsZXIsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgMCk7XG4gICAgICBtYXJrZXJFbmRUcmlnZ2VyID0gX2NyZWF0ZU1hcmtlcihcInNjcm9sbGVyLWVuZFwiLCBpZCwgc2Nyb2xsZXIsIGRpcmVjdGlvbiwgbWFya2VyVmFycywgMCwgbWFya2VyU3RhcnRUcmlnZ2VyKTtcbiAgICAgIG9mZnNldCA9IG1hcmtlclN0YXJ0VHJpZ2dlcltcIm9mZnNldFwiICsgZGlyZWN0aW9uLm9wLmQyXTtcbiAgICAgIG1hcmtlclN0YXJ0ID0gX2NyZWF0ZU1hcmtlcihcInN0YXJ0XCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBtYXJrZXJFbmQgPSBfY3JlYXRlTWFya2VyKFwiZW5kXCIsIGlkLCBzY3JvbGxlciwgZGlyZWN0aW9uLCBtYXJrZXJWYXJzLCBvZmZzZXQsIDAsIGNvbnRhaW5lckFuaW1hdGlvbik7XG4gICAgICBjb250YWluZXJBbmltYXRpb24gJiYgKGNhTWFya2VyU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGRpcmVjdGlvbi5hLCBfcHgpKTtcblxuICAgICAgaWYgKCF1c2VGaXhlZFBvc2l0aW9uICYmICEoX3Byb3hpZXMubGVuZ3RoICYmIF9nZXRQcm94eVByb3Aoc2Nyb2xsZXIsIFwiZml4ZWRNYXJrZXJzXCIpID09PSB0cnVlKSkge1xuICAgICAgICBfbWFrZVBvc2l0aW9uYWJsZShpc1ZpZXdwb3J0ID8gX2JvZHkgOiBzY3JvbGxlcik7XG5cbiAgICAgICAgZ3NhcC5zZXQoW21hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0sIHtcbiAgICAgICAgICBmb3JjZTNEOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBtYXJrZXJTdGFydFNldHRlciA9IGdzYXAucXVpY2tTZXR0ZXIobWFya2VyU3RhcnRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgICAgbWFya2VyRW5kU2V0dGVyID0gZ3NhcC5xdWlja1NldHRlcihtYXJrZXJFbmRUcmlnZ2VyLCBkaXJlY3Rpb24uYSwgX3B4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyQW5pbWF0aW9uKSB7XG4gICAgICB2YXIgb2xkT25VcGRhdGUgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZSxcbiAgICAgICAgICBvbGRQYXJhbXMgPSBjb250YWluZXJBbmltYXRpb24udmFycy5vblVwZGF0ZVBhcmFtcztcbiAgICAgIGNvbnRhaW5lckFuaW1hdGlvbi5ldmVudENhbGxiYWNrKFwib25VcGRhdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZSgwLCAwLCAxKTtcbiAgICAgICAgb2xkT25VcGRhdGUgJiYgb2xkT25VcGRhdGUuYXBwbHkob2xkUGFyYW1zIHx8IFtdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbGYucHJldmlvdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RyaWdnZXJzW190cmlnZ2Vycy5pbmRleE9mKHNlbGYpIC0gMV07XG4gICAgfTtcblxuICAgIHNlbGYubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdHJpZ2dlcnNbX3RyaWdnZXJzLmluZGV4T2Yoc2VsZikgKyAxXTtcbiAgICB9O1xuXG4gICAgc2VsZi5yZXZlcnQgPSBmdW5jdGlvbiAocmV2ZXJ0KSB7XG4gICAgICB2YXIgciA9IHJldmVydCAhPT0gZmFsc2UgfHwgIXNlbGYuZW5hYmxlZCxcbiAgICAgICAgICBwcmV2UmVmcmVzaGluZyA9IF9yZWZyZXNoaW5nO1xuXG4gICAgICBpZiAociAhPT0gc2VsZi5pc1JldmVydGVkKSB7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgc2VsZi5zY3JvbGwucmVjIHx8IChzZWxmLnNjcm9sbC5yZWMgPSBzY3JvbGxGdW5jKCkpO1xuICAgICAgICAgIHByZXZTY3JvbGwgPSBNYXRoLm1heChzY3JvbGxGdW5jKCksIHNlbGYuc2Nyb2xsLnJlYyB8fCAwKTsgLy8gcmVjb3JkIHRoZSBzY3JvbGwgc28gd2UgY2FuIHJldmVydCBsYXRlciAocmVwb3NpdGlvbmluZy9waW5uaW5nIHRoaW5ncyBjYW4gYWZmZWN0IHNjcm9sbCBwb3NpdGlvbikuIEluIHRoZSBzdGF0aWMgcmVmcmVzaCgpIG1ldGhvZCwgd2UgZmlyc3QgcmVjb3JkIGFsbCB0aGUgc2Nyb2xsIHBvc2l0aW9ucyBhcyBhIHJlZmVyZW5jZS5cblxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3M7XG4gICAgICAgICAgcHJldkFuaW1Qcm9ncmVzcyA9IGFuaW1hdGlvbiAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlclN0YXJ0ICYmIFttYXJrZXJTdGFydCwgbWFya2VyRW5kLCBtYXJrZXJTdGFydFRyaWdnZXIsIG1hcmtlckVuZFRyaWdnZXJdLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5zdHlsZS5kaXNwbGF5ID0gciA/IFwibm9uZVwiIDogXCJibG9ja1wiO1xuICAgICAgICB9KTtcbiAgICAgICAgciAmJiAoX3JlZnJlc2hpbmcgPSAxKTtcbiAgICAgICAgc2VsZi51cGRhdGUocik7IC8vIG1ha2Ugc3VyZSB0aGUgcGluIGlzIGJhY2sgaW4gaXRzIG9yaWdpbmFsIHBvc2l0aW9uIHNvIHRoYXQgYWxsIHRoZSBtZWFzdXJlbWVudHMgYXJlIGNvcnJlY3QuXG5cbiAgICAgICAgX3JlZnJlc2hpbmcgPSBwcmV2UmVmcmVzaGluZztcbiAgICAgICAgcGluICYmIChyID8gX3N3YXBQaW5PdXQocGluLCBzcGFjZXIsIHBpbk9yaWdpbmFsU3RhdGUpIDogKCFwaW5SZXBhcmVudCB8fCAhc2VsZi5pc0FjdGl2ZSkgJiYgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgX2dldENvbXB1dGVkU3R5bGUocGluKSwgc3BhY2VyU3RhdGUpKTtcbiAgICAgICAgc2VsZi5pc1JldmVydGVkID0gcjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2VsZi5yZWZyZXNoID0gZnVuY3Rpb24gKHNvZnQsIGZvcmNlKSB7XG4gICAgICBpZiAoKF9yZWZyZXNoaW5nIHx8ICFzZWxmLmVuYWJsZWQpICYmICFmb3JjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW4gJiYgc29mdCAmJiBfbGFzdFNjcm9sbFRpbWUpIHtcbiAgICAgICAgX2FkZExpc3RlbmVyKFNjcm9sbFRyaWdnZXIsIFwic2Nyb2xsRW5kXCIsIF9zb2Z0UmVmcmVzaCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfcmVmcmVzaGluZyA9IDE7XG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ucGF1c2UoKTtcbiAgICAgIGludmFsaWRhdGVPblJlZnJlc2ggJiYgYW5pbWF0aW9uICYmIGFuaW1hdGlvbi5wcm9ncmVzcygwKS5pbnZhbGlkYXRlKCk7XG4gICAgICBzZWxmLmlzUmV2ZXJ0ZWQgfHwgc2VsZi5yZXZlcnQoKTtcblxuICAgICAgdmFyIHNpemUgPSBnZXRTY3JvbGxlclNpemUoKSxcbiAgICAgICAgICBzY3JvbGxlckJvdW5kcyA9IGdldFNjcm9sbGVyT2Zmc2V0cygpLFxuICAgICAgICAgIG1heCA9IGNvbnRhaW5lckFuaW1hdGlvbiA/IGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpIDogX21heFNjcm9sbChzY3JvbGxlciwgZGlyZWN0aW9uKSxcbiAgICAgICAgICBvZmZzZXQgPSAwLFxuICAgICAgICAgIG90aGVyUGluT2Zmc2V0ID0gMCxcbiAgICAgICAgICBwYXJzZWRFbmQgPSB2YXJzLmVuZCxcbiAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdmFycy5lbmRUcmlnZ2VyIHx8IHRyaWdnZXIsXG4gICAgICAgICAgcGFyc2VkU3RhcnQgPSB2YXJzLnN0YXJ0IHx8ICh2YXJzLnN0YXJ0ID09PSAwIHx8ICF0cmlnZ2VyID8gMCA6IHBpbiA/IFwiMCAwXCIgOiBcIjAgMTAwJVwiKSxcbiAgICAgICAgICBwaW5uZWRDb250YWluZXIgPSB2YXJzLnBpbm5lZENvbnRhaW5lciAmJiBfZ2V0VGFyZ2V0KHZhcnMucGlubmVkQ29udGFpbmVyKSxcbiAgICAgICAgICB0cmlnZ2VySW5kZXggPSB0cmlnZ2VyICYmIE1hdGgubWF4KDAsIF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpKSB8fCAwLFxuICAgICAgICAgIGkgPSB0cmlnZ2VySW5kZXgsXG4gICAgICAgICAgY3MsXG4gICAgICAgICAgYm91bmRzLFxuICAgICAgICAgIHNjcm9sbCxcbiAgICAgICAgICBpc1ZlcnRpY2FsLFxuICAgICAgICAgIG92ZXJyaWRlLFxuICAgICAgICAgIGN1clRyaWdnZXIsXG4gICAgICAgICAgY3VyUGluLFxuICAgICAgICAgIG9wcG9zaXRlU2Nyb2xsLFxuICAgICAgICAgIGluaXR0ZWQsXG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zO1xuXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIC8vIHVzZXIgbWlnaHQgdHJ5IHRvIHBpbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLCBzbyB3ZSBtdXN0IGZpbmQgYW55IHByaW9yIHRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZXZlcnQgdGhlbSwgYW5kIGRldGVybWluZSBob3cgbG9uZyB0aGV5J3JlIHBpbm5pbmcgc28gdGhhdCB3ZSBjYW4gb2Zmc2V0IHRoaW5ncyBhcHByb3ByaWF0ZWx5LiBNYWtlIHN1cmUgd2UgcmV2ZXJ0IGZyb20gbGFzdCB0byBmaXJzdCBzbyB0aGF0IHRoaW5ncyBcInJld2luZFwiIHByb3Blcmx5LlxuICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICBjdXJUcmlnZ2VyLmVuZCB8fCBjdXJUcmlnZ2VyLnJlZnJlc2goMCwgMSkgfHwgKF9yZWZyZXNoaW5nID0gMSk7IC8vIGlmIGl0J3MgYSB0aW1lbGluZS1iYXNlZCB0cmlnZ2VyIHRoYXQgaGFzbid0IGJlZW4gZnVsbHkgaW5pdGlhbGl6ZWQgeWV0IGJlY2F1c2UgaXQncyB3YWl0aW5nIGZvciAxIHRpY2ssIGp1c3QgZm9yY2UgdGhlIHJlZnJlc2goKSBoZXJlLCBvdGhlcndpc2UgaWYgaXQgY29udGFpbnMgYSBwaW4gdGhhdCdzIHN1cHBvc2VkIHRvIGFmZmVjdCBvdGhlciBTY3JvbGxUcmlnZ2VycyBmdXJ0aGVyIGRvd24gdGhlIHBhZ2UsIHRoZXkgd29uJ3QgYmUgYWRqdXN0ZWQgcHJvcGVybHkuXG5cbiAgICAgICAgY3VyUGluID0gY3VyVHJpZ2dlci5waW47XG5cbiAgICAgICAgaWYgKGN1clBpbiAmJiAoY3VyUGluID09PSB0cmlnZ2VyIHx8IGN1clBpbiA9PT0gcGluKSAmJiAhY3VyVHJpZ2dlci5pc1JldmVydGVkKSB7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zIHx8IChyZXZlcnRlZFBpbnMgPSBbXSk7XG4gICAgICAgICAgcmV2ZXJ0ZWRQaW5zLnVuc2hpZnQoY3VyVHJpZ2dlcik7IC8vIHdlJ2xsIHJldmVydCBmcm9tIGZpcnN0IHRvIGxhc3QgdG8gbWFrZSBzdXJlIHRoaW5ncyByZWFjaCB0aGVpciBlbmQgc3RhdGUgcHJvcGVybHlcblxuICAgICAgICAgIGN1clRyaWdnZXIucmV2ZXJ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX2lzRnVuY3Rpb24ocGFyc2VkU3RhcnQpICYmIChwYXJzZWRTdGFydCA9IHBhcnNlZFN0YXJ0KHNlbGYpKTtcbiAgICAgIHN0YXJ0ID0gX3BhcnNlUG9zaXRpb24ocGFyc2VkU3RhcnQsIHRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsRnVuYygpLCBtYXJrZXJTdGFydCwgbWFya2VyU3RhcnRUcmlnZ2VyLCBzZWxmLCBzY3JvbGxlckJvdW5kcywgYm9yZGVyV2lkdGgsIHVzZUZpeGVkUG9zaXRpb24sIG1heCwgY29udGFpbmVyQW5pbWF0aW9uKSB8fCAocGluID8gLTAuMDAxIDogMCk7XG4gICAgICBfaXNGdW5jdGlvbihwYXJzZWRFbmQpICYmIChwYXJzZWRFbmQgPSBwYXJzZWRFbmQoc2VsZikpO1xuXG4gICAgICBpZiAoX2lzU3RyaW5nKHBhcnNlZEVuZCkgJiYgIXBhcnNlZEVuZC5pbmRleE9mKFwiKz1cIikpIHtcbiAgICAgICAgaWYgKH5wYXJzZWRFbmQuaW5kZXhPZihcIiBcIikpIHtcbiAgICAgICAgICBwYXJzZWRFbmQgPSAoX2lzU3RyaW5nKHBhcnNlZFN0YXJ0KSA/IHBhcnNlZFN0YXJ0LnNwbGl0KFwiIFwiKVswXSA6IFwiXCIpICsgcGFyc2VkRW5kO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldCA9IF9vZmZzZXRUb1B4KHBhcnNlZEVuZC5zdWJzdHIoMiksIHNpemUpO1xuICAgICAgICAgIHBhcnNlZEVuZCA9IF9pc1N0cmluZyhwYXJzZWRTdGFydCkgPyBwYXJzZWRTdGFydCA6IHN0YXJ0ICsgb2Zmc2V0OyAvLyBfcGFyc2VQb3NpdGlvbiB3b24ndCBmYWN0b3IgaW4gdGhlIG9mZnNldCBpZiB0aGUgc3RhcnQgaXMgYSBudW1iZXIsIHNvIGRvIGl0IGhlcmUuXG5cbiAgICAgICAgICBwYXJzZWRFbmRUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbmQgPSBNYXRoLm1heChzdGFydCwgX3BhcnNlUG9zaXRpb24ocGFyc2VkRW5kIHx8IChwYXJzZWRFbmRUcmlnZ2VyID8gXCIxMDAlIDBcIiA6IG1heCksIHBhcnNlZEVuZFRyaWdnZXIsIHNpemUsIGRpcmVjdGlvbiwgc2Nyb2xsRnVuYygpICsgb2Zmc2V0LCBtYXJrZXJFbmQsIG1hcmtlckVuZFRyaWdnZXIsIHNlbGYsIHNjcm9sbGVyQm91bmRzLCBib3JkZXJXaWR0aCwgdXNlRml4ZWRQb3NpdGlvbiwgbWF4LCBjb250YWluZXJBbmltYXRpb24pKSB8fCAtMC4wMDE7XG4gICAgICBjaGFuZ2UgPSBlbmQgLSBzdGFydCB8fCAoc3RhcnQgLT0gMC4wMSkgJiYgMC4wMDE7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgICAgaSA9IHRyaWdnZXJJbmRleDtcblxuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjdXJUcmlnZ2VyID0gX3RyaWdnZXJzW2ldO1xuICAgICAgICBjdXJQaW4gPSBjdXJUcmlnZ2VyLnBpbjtcblxuICAgICAgICBpZiAoY3VyUGluICYmIGN1clRyaWdnZXIuc3RhcnQgLSBjdXJUcmlnZ2VyLl9waW5QdXNoIDwgc3RhcnQgJiYgIWNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAgIGNzID0gY3VyVHJpZ2dlci5lbmQgLSBjdXJUcmlnZ2VyLnN0YXJ0O1xuICAgICAgICAgIChjdXJQaW4gPT09IHRyaWdnZXIgfHwgY3VyUGluID09PSBwaW5uZWRDb250YWluZXIpICYmICFfaXNOdW1iZXIocGFyc2VkU3RhcnQpICYmIChvZmZzZXQgKz0gY3MpOyAvLyBudW1lcmljIHN0YXJ0IHZhbHVlcyBzaG91bGRuJ3QgYmUgb2Zmc2V0IGF0IGFsbCAtIHRyZWF0IHRoZW0gYXMgYWJzb2x1dGVcblxuICAgICAgICAgIGN1clBpbiA9PT0gcGluICYmIChvdGhlclBpbk9mZnNldCArPSBjcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhcnQgKz0gb2Zmc2V0O1xuICAgICAgZW5kICs9IG9mZnNldDtcbiAgICAgIHNlbGYuX3BpblB1c2ggPSBvdGhlclBpbk9mZnNldDtcblxuICAgICAgaWYgKG1hcmtlclN0YXJ0ICYmIG9mZnNldCkge1xuICAgICAgICAvLyBvZmZzZXQgdGhlIG1hcmtlcnMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGNzID0ge307XG4gICAgICAgIGNzW2RpcmVjdGlvbi5hXSA9IFwiKz1cIiArIG9mZnNldDtcbiAgICAgICAgcGlubmVkQ29udGFpbmVyICYmIChjc1tkaXJlY3Rpb24ucF0gPSBcIi09XCIgKyBzY3JvbGxGdW5jKCkpO1xuICAgICAgICBnc2FwLnNldChbbWFya2VyU3RhcnQsIG1hcmtlckVuZF0sIGNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbikge1xuICAgICAgICBjcyA9IF9nZXRDb21wdXRlZFN0eWxlKHBpbik7XG4gICAgICAgIGlzVmVydGljYWwgPSBkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbDtcbiAgICAgICAgc2Nyb2xsID0gc2Nyb2xsRnVuYygpOyAvLyByZWNhbGN1bGF0ZSBiZWNhdXNlIHRoZSB0cmlnZ2VycyBjYW4gYWZmZWN0IHRoZSBzY3JvbGxcblxuICAgICAgICBwaW5TdGFydCA9IHBhcnNlRmxvYXQocGluR2V0dGVyKGRpcmVjdGlvbi5hKSkgKyBvdGhlclBpbk9mZnNldDtcbiAgICAgICAgIW1heCAmJiBlbmQgPiAxICYmICgoaXNWaWV3cG9ydCA/IF9ib2R5IDogc2Nyb2xsZXIpLnN0eWxlW1wib3ZlcmZsb3ctXCIgKyBkaXJlY3Rpb24uYV0gPSBcInNjcm9sbFwiKTsgLy8gbWFrZXMgc3VyZSB0aGUgc2Nyb2xsZXIgaGFzIGEgc2Nyb2xsYmFyLCBvdGhlcndpc2UgaWYgc29tZXRoaW5nIGhhcyB3aWR0aDogMTAwJSwgZm9yIGV4YW1wbGUsIGl0IHdvdWxkIGJlIHRvbyBiaWcgKGV4Y2x1ZGUgdGhlIHNjcm9sbGJhcikuIFNlZSBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzI1MTgyLXNjcm9sbHRyaWdnZXItd2lkdGgtb2YtcGFnZS1pbmNyZWFzZS13aGVyZS1tYXJrZXJzLWFyZS1zZXQtdG8tZmFsc2UvXG5cbiAgICAgICAgX3N3YXBQaW5JbihwaW4sIHNwYWNlciwgY3MpO1xuXG4gICAgICAgIHBpblN0YXRlID0gX2dldFN0YXRlKHBpbik7IC8vIHRyYW5zZm9ybXMgd2lsbCBpbnRlcmZlcmUgd2l0aCB0aGUgdG9wL2xlZnQvcmlnaHQvYm90dG9tIHBsYWNlbWVudCwgc28gcmVtb3ZlIHRoZW0gdGVtcG9yYXJpbHkuIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGZhY3RvcnMgaW4gdHJhbnNmb3Jtcy5cblxuICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKHBpbiwgdHJ1ZSk7XG4gICAgICAgIG9wcG9zaXRlU2Nyb2xsID0gdXNlRml4ZWRQb3NpdGlvbiAmJiBfZ2V0U2Nyb2xsRnVuYyhzY3JvbGxlciwgaXNWZXJ0aWNhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKSgpO1xuXG4gICAgICAgIGlmIChwaW5TcGFjaW5nKSB7XG4gICAgICAgICAgc3BhY2VyU3RhdGUgPSBbcGluU3BhY2luZyArIGRpcmVjdGlvbi5vczIsIGNoYW5nZSArIG90aGVyUGluT2Zmc2V0ICsgX3B4XTtcbiAgICAgICAgICBzcGFjZXJTdGF0ZS50ID0gc3BhY2VyO1xuICAgICAgICAgIGkgPSBwaW5TcGFjaW5nID09PSBfcGFkZGluZyA/IF9nZXRTaXplKHBpbiwgZGlyZWN0aW9uKSArIGNoYW5nZSArIG90aGVyUGluT2Zmc2V0IDogMDtcbiAgICAgICAgICBpICYmIHNwYWNlclN0YXRlLnB1c2goZGlyZWN0aW9uLmQsIGkgKyBfcHgpOyAvLyBmb3IgYm94LXNpemluZzogYm9yZGVyLWJveCAobXVzdCBpbmNsdWRlIHBhZGRpbmcpLlxuXG4gICAgICAgICAgX3NldFN0YXRlKHNwYWNlclN0YXRlKTtcblxuICAgICAgICAgIHVzZUZpeGVkUG9zaXRpb24gJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgb3ZlcnJpZGUgPSB7XG4gICAgICAgICAgICB0b3A6IGJvdW5kcy50b3AgKyAoaXNWZXJ0aWNhbCA/IHNjcm9sbCAtIHN0YXJ0IDogb3Bwb3NpdGVTY3JvbGwpICsgX3B4LFxuICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnQgKyAoaXNWZXJ0aWNhbCA/IG9wcG9zaXRlU2Nyb2xsIDogc2Nyb2xsIC0gc3RhcnQpICsgX3B4LFxuICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImZpeGVkXCJcbiAgICAgICAgICB9O1xuICAgICAgICAgIG92ZXJyaWRlW193aWR0aF0gPSBvdmVycmlkZVtcIm1heFwiICsgX1dpZHRoXSA9IE1hdGguY2VpbChib3VuZHMud2lkdGgpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19oZWlnaHRdID0gb3ZlcnJpZGVbXCJtYXhcIiArIF9IZWlnaHRdID0gTWF0aC5jZWlsKGJvdW5kcy5oZWlnaHQpICsgX3B4O1xuICAgICAgICAgIG92ZXJyaWRlW19tYXJnaW5dID0gb3ZlcnJpZGVbX21hcmdpbiArIF9Ub3BdID0gb3ZlcnJpZGVbX21hcmdpbiArIF9SaWdodF0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0JvdHRvbV0gPSBvdmVycmlkZVtfbWFyZ2luICsgX0xlZnRdID0gXCIwXCI7XG4gICAgICAgICAgb3ZlcnJpZGVbX3BhZGRpbmddID0gY3NbX3BhZGRpbmddO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1RvcF0gPSBjc1tfcGFkZGluZyArIF9Ub3BdO1xuICAgICAgICAgIG92ZXJyaWRlW19wYWRkaW5nICsgX1JpZ2h0XSA9IGNzW19wYWRkaW5nICsgX1JpZ2h0XTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9Cb3R0b21dID0gY3NbX3BhZGRpbmcgKyBfQm90dG9tXTtcbiAgICAgICAgICBvdmVycmlkZVtfcGFkZGluZyArIF9MZWZ0XSA9IGNzW19wYWRkaW5nICsgX0xlZnRdO1xuICAgICAgICAgIHBpbkFjdGl2ZVN0YXRlID0gX2NvcHlTdGF0ZShwaW5PcmlnaW5hbFN0YXRlLCBvdmVycmlkZSwgcGluUmVwYXJlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICAgIC8vIHRoZSBhbmltYXRpb24gbWlnaHQgYmUgYWZmZWN0aW5nIHRoZSB0cmFuc2Zvcm0sIHNvIHdlIG11c3QganVtcCB0byB0aGUgZW5kLCBjaGVjayB0aGUgdmFsdWUsIGFuZCBjb21wZW5zYXRlIGFjY29yZGluZ2x5LiBPdGhlcndpc2UsIHdoZW4gaXQgYmVjb21lcyB1bnBpbm5lZCwgdGhlIHBpblNldHRlcigpIHdpbGwgZ2V0IHNldCB0byBhIHZhbHVlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHdoYXRldmVyIHRoZSBhbmltYXRpb24gZGlkLlxuICAgICAgICAgIGluaXR0ZWQgPSBhbmltYXRpb24uX2luaXR0ZWQ7IC8vIGlmIG5vdCwgd2UgbXVzdCBpbnZhbGlkYXRlKCkgYWZ0ZXIgdGhpcyBzdGVwLCBvdGhlcndpc2UgaXQgY291bGQgbG9jayBpbiBzdGFydGluZyB2YWx1ZXMgcHJlbWF0dXJlbHkuXG5cbiAgICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzKDEpO1xuXG4gICAgICAgICAgYW5pbWF0aW9uLnJlbmRlcihhbmltYXRpb24uZHVyYXRpb24oKSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgcGluQ2hhbmdlID0gcGluR2V0dGVyKGRpcmVjdGlvbi5hKSAtIHBpblN0YXJ0ICsgY2hhbmdlICsgb3RoZXJQaW5PZmZzZXQ7XG4gICAgICAgICAgY2hhbmdlICE9PSBwaW5DaGFuZ2UgJiYgcGluQWN0aXZlU3RhdGUuc3BsaWNlKHBpbkFjdGl2ZVN0YXRlLmxlbmd0aCAtIDIsIDIpOyAvLyB0cmFuc2Zvcm0gaXMgdGhlIGxhc3QgcHJvcGVydHkvdmFsdWUgc2V0IGluIHRoZSBzdGF0ZSBBcnJheS4gU2luY2UgdGhlIGFuaW1hdGlvbiBpcyBjb250cm9sbGluZyB0aGF0LCB3ZSBzaG91bGQgb21pdCBpdC5cblxuICAgICAgICAgIGFuaW1hdGlvbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgaW5pdHRlZCB8fCBhbmltYXRpb24uaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgX3N1cHByZXNzT3ZlcndyaXRlcygwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwaW5DaGFuZ2UgPSBjaGFuZ2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAmJiBzY3JvbGxGdW5jKCkgJiYgIWNvbnRhaW5lckFuaW1hdGlvbikge1xuICAgICAgICAvLyBpdCBtYXkgYmUgSU5TSURFIGEgcGlubmVkIGVsZW1lbnQsIHNvIHdhbGsgdXAgdGhlIHRyZWUgYW5kIGxvb2sgZm9yIGFueSBlbGVtZW50cyB3aXRoIF9waW5PZmZzZXQgdG8gY29tcGVuc2F0ZSBiZWNhdXNlIGFueXRoaW5nIHdpdGggcGluU3BhY2luZyB0aGF0J3MgYWxyZWFkeSBzY3JvbGxlZCB3b3VsZCB0aHJvdyBvZmYgdGhlIG1lYXN1cmVtZW50cyBpbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICBib3VuZHMgPSB0cmlnZ2VyLnBhcmVudE5vZGU7XG5cbiAgICAgICAgd2hpbGUgKGJvdW5kcyAmJiBib3VuZHMgIT09IF9ib2R5KSB7XG4gICAgICAgICAgaWYgKGJvdW5kcy5fcGluT2Zmc2V0KSB7XG4gICAgICAgICAgICBzdGFydCAtPSBib3VuZHMuX3Bpbk9mZnNldDtcbiAgICAgICAgICAgIGVuZCAtPSBib3VuZHMuX3Bpbk9mZnNldDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib3VuZHMgPSBib3VuZHMucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXZlcnRlZFBpbnMgJiYgcmV2ZXJ0ZWRQaW5zLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQucmV2ZXJ0KGZhbHNlKTtcbiAgICAgIH0pO1xuICAgICAgc2VsZi5zdGFydCA9IHN0YXJ0O1xuICAgICAgc2VsZi5lbmQgPSBlbmQ7XG4gICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IHNjcm9sbEZ1bmMoKTsgLy8gcmVzZXQgdmVsb2NpdHlcblxuICAgICAgaWYgKCFjb250YWluZXJBbmltYXRpb24pIHtcbiAgICAgICAgc2Nyb2xsMSA8IHByZXZTY3JvbGwgJiYgc2Nyb2xsRnVuYyhwcmV2U2Nyb2xsKTtcbiAgICAgICAgc2VsZi5zY3JvbGwucmVjID0gMDtcbiAgICAgIH1cblxuICAgICAgc2VsZi5yZXZlcnQoZmFsc2UpO1xuICAgICAgX3JlZnJlc2hpbmcgPSAwO1xuICAgICAgYW5pbWF0aW9uICYmIGlzVG9nZ2xlICYmIGFuaW1hdGlvbi5faW5pdHRlZCAmJiBhbmltYXRpb24ucHJvZ3Jlc3MoKSAhPT0gcHJldkFuaW1Qcm9ncmVzcyAmJiBhbmltYXRpb24ucHJvZ3Jlc3MocHJldkFuaW1Qcm9ncmVzcywgdHJ1ZSkucmVuZGVyKGFuaW1hdGlvbi50aW1lKCksIHRydWUsIHRydWUpOyAvLyBtdXN0IGZvcmNlIGEgcmUtcmVuZGVyIGJlY2F1c2UgaWYgc2F2ZVN0eWxlcygpIHdhcyB1c2VkIG9uIHRoZSB0YXJnZXQocyksIHRoZSBzdHlsZXMgY291bGQgaGF2ZSBiZWVuIHdpcGVkIG91dCBkdXJpbmcgdGhlIHJlZnJlc2goKS5cblxuICAgICAgaWYgKHByZXZQcm9ncmVzcyAhPT0gc2VsZi5wcm9ncmVzcykge1xuICAgICAgICAvLyBlbnN1cmVzIHRoYXQgdGhlIGRpcmVjdGlvbiBpcyBzZXQgcHJvcGVybHkgKHdoZW4gcmVmcmVzaGluZywgcHJvZ3Jlc3MgaXMgc2V0IGJhY2sgdG8gMCBpbml0aWFsbHksIHRoZW4gYmFjayBhZ2FpbiB0byB3aGVyZXZlciBpdCBuZWVkcyB0byBiZSkgYW5kIHRoYXQgY2FsbGJhY2tzIGFyZSB0cmlnZ2VyZWQuXG4gICAgICAgIGFuaW1hdGlvbiAmJiAhaXNUb2dnbGUgJiYgYW5pbWF0aW9uLnRvdGFsUHJvZ3Jlc3MocHJldlByb2dyZXNzLCB0cnVlKTsgLy8gdG8gYXZvaWQgaXNzdWVzIHdoZXJlIGFuaW1hdGlvbiBjYWxsYmFja3MgbGlrZSBvblN0YXJ0IGFyZW4ndCB0cmlnZ2VyZWQuXG5cbiAgICAgICAgc2VsZi5wcm9ncmVzcyA9IHByZXZQcm9ncmVzcztcbiAgICAgICAgc2VsZi51cGRhdGUoMCwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHBpbiAmJiBwaW5TcGFjaW5nICYmIChzcGFjZXIuX3Bpbk9mZnNldCA9IE1hdGgucm91bmQoc2VsZi5wcm9ncmVzcyAqIHBpbkNoYW5nZSkpO1xuICAgICAgb25SZWZyZXNoICYmIG9uUmVmcmVzaChzZWxmKTtcbiAgICB9O1xuXG4gICAgc2VsZi5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAoc2Nyb2xsRnVuYygpIC0gc2Nyb2xsMikgLyAoX2dldFRpbWUoKSAtIF90aW1lMikgKiAxMDAwIHx8IDA7XG4gICAgfTtcblxuICAgIHNlbGYuZW5kQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgX2VuZEFuaW1hdGlvbihzZWxmLmNhbGxiYWNrQW5pbWF0aW9uKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6ICFhbmltYXRpb24ucGF1c2VkKCkgPyBfZW5kQW5pbWF0aW9uKGFuaW1hdGlvbiwgYW5pbWF0aW9uLnJldmVyc2VkKCkpIDogaXNUb2dnbGUgfHwgX2VuZEFuaW1hdGlvbihhbmltYXRpb24sIHNlbGYuZGlyZWN0aW9uIDwgMCwgMSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VHJhaWxpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMuaW5kZXhPZihzZWxmKSxcbiAgICAgICAgICBhID0gc2VsZi5kaXJlY3Rpb24gPiAwID8gX3RyaWdnZXJzLnNsaWNlKDAsIGkpLnJldmVyc2UoKSA6IF90cmlnZ2Vycy5zbGljZShpICsgMSk7XG5cbiAgICAgIHJldHVybiBfaXNTdHJpbmcobmFtZSkgPyBhLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC52YXJzLnByZXZlbnRPdmVybGFwcyA9PT0gbmFtZTtcbiAgICAgIH0pIDogYTtcbiAgICB9O1xuXG4gICAgc2VsZi51cGRhdGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlY29yZFZlbG9jaXR5LCBmb3JjZUZha2UpIHtcbiAgICAgIGlmIChjb250YWluZXJBbmltYXRpb24gJiYgIWZvcmNlRmFrZSAmJiAhcmVzZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Nyb2xsID0gc2VsZi5zY3JvbGwoKSxcbiAgICAgICAgICBwID0gcmVzZXQgPyAwIDogKHNjcm9sbCAtIHN0YXJ0KSAvIGNoYW5nZSxcbiAgICAgICAgICBjbGlwcGVkID0gcCA8IDAgPyAwIDogcCA+IDEgPyAxIDogcCB8fCAwLFxuICAgICAgICAgIHByZXZQcm9ncmVzcyA9IHNlbGYucHJvZ3Jlc3MsXG4gICAgICAgICAgaXNBY3RpdmUsXG4gICAgICAgICAgd2FzQWN0aXZlLFxuICAgICAgICAgIHRvZ2dsZVN0YXRlLFxuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBzdGF0ZUNoYW5nZWQsXG4gICAgICAgICAgdG9nZ2xlZCxcbiAgICAgICAgICBpc0F0TWF4LFxuICAgICAgICAgIGlzVGFraW5nQWN0aW9uO1xuXG4gICAgICBpZiAocmVjb3JkVmVsb2NpdHkpIHtcbiAgICAgICAgc2Nyb2xsMiA9IHNjcm9sbDE7XG4gICAgICAgIHNjcm9sbDEgPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGxGdW5jKCkgOiBzY3JvbGw7XG5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICBzbmFwMiA9IHNuYXAxO1xuICAgICAgICAgIHNuYXAxID0gYW5pbWF0aW9uICYmICFpc1RvZ2dsZSA/IGFuaW1hdGlvbi50b3RhbFByb2dyZXNzKCkgOiBjbGlwcGVkO1xuICAgICAgICB9XG4gICAgICB9IC8vIGFudGljaXBhdGUgdGhlIHBpbm5pbmcgYSBmZXcgdGlja3MgYWhlYWQgb2YgdGltZSBiYXNlZCBvbiB2ZWxvY2l0eSB0byBhdm9pZCBhIHZpc3VhbCBnbGl0Y2ggZHVlIHRvIHRoZSBmYWN0IHRoYXQgbW9zdCBicm93c2VycyBkbyBzY3JvbGxpbmcgb24gYSBzZXBhcmF0ZSB0aHJlYWQgKG5vdCBzeW5jZWQgd2l0aCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpLlxuXG5cbiAgICAgIGFudGljaXBhdGVQaW4gJiYgIWNsaXBwZWQgJiYgcGluICYmICFfcmVmcmVzaGluZyAmJiAhX3N0YXJ0dXAgJiYgX2xhc3RTY3JvbGxUaW1lICYmIHN0YXJ0IDwgc2Nyb2xsICsgKHNjcm9sbCAtIHNjcm9sbDIpIC8gKF9nZXRUaW1lKCkgLSBfdGltZTIpICogYW50aWNpcGF0ZVBpbiAmJiAoY2xpcHBlZCA9IDAuMDAwMSk7XG5cbiAgICAgIGlmIChjbGlwcGVkICE9PSBwcmV2UHJvZ3Jlc3MgJiYgc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIGlzQWN0aXZlID0gc2VsZi5pc0FjdGl2ZSA9ICEhY2xpcHBlZCAmJiBjbGlwcGVkIDwgMTtcbiAgICAgICAgd2FzQWN0aXZlID0gISFwcmV2UHJvZ3Jlc3MgJiYgcHJldlByb2dyZXNzIDwgMTtcbiAgICAgICAgdG9nZ2xlZCA9IGlzQWN0aXZlICE9PSB3YXNBY3RpdmU7XG4gICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRvZ2dsZWQgfHwgISFjbGlwcGVkICE9PSAhIXByZXZQcm9ncmVzczsgLy8gY291bGQgZ28gZnJvbSBzdGFydCBhbGwgdGhlIHdheSB0byBlbmQsIHRodXMgaXQgZGlkbid0IHRvZ2dsZSBidXQgaXQgZGlkIGNoYW5nZSBzdGF0ZSBpbiBhIHNlbnNlIChtYXkgbmVlZCB0byBmaXJlIGEgY2FsbGJhY2spXG5cbiAgICAgICAgc2VsZi5kaXJlY3Rpb24gPSBjbGlwcGVkID4gcHJldlByb2dyZXNzID8gMSA6IC0xO1xuICAgICAgICBzZWxmLnByb2dyZXNzID0gY2xpcHBlZDtcblxuICAgICAgICBpZiAoc3RhdGVDaGFuZ2VkICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIHRvZ2dsZVN0YXRlID0gY2xpcHBlZCAmJiAhcHJldlByb2dyZXNzID8gMCA6IGNsaXBwZWQgPT09IDEgPyAxIDogcHJldlByb2dyZXNzID09PSAxID8gMiA6IDM7IC8vIDAgPSBlbnRlciwgMSA9IGxlYXZlLCAyID0gZW50ZXJCYWNrLCAzID0gbGVhdmVCYWNrICh3ZSBwcmlvcml0aXplIHRoZSBGSVJTVCBlbmNvdW50ZXIsIHRodXMgaWYgeW91IHNjcm9sbCByZWFsbHkgZmFzdCBwYXN0IHRoZSBvbkVudGVyIGFuZCBvbkxlYXZlIGluIG9uZSB0aWNrLCBpdCdkIHByaW9yaXRpemUgb25FbnRlci5cblxuICAgICAgICAgIGlmIChpc1RvZ2dsZSkge1xuICAgICAgICAgICAgYWN0aW9uID0gIXRvZ2dsZWQgJiYgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZSArIDFdICE9PSBcIm5vbmVcIiAmJiB0b2dnbGVBY3Rpb25zW3RvZ2dsZVN0YXRlICsgMV0gfHwgdG9nZ2xlQWN0aW9uc1t0b2dnbGVTdGF0ZV07IC8vIGlmIGl0IGRpZG4ndCB0b2dnbGUsIHRoYXQgbWVhbnMgaXQgc2hvdCByaWdodCBwYXN0IGFuZCBzaW5jZSB3ZSBwcmlvcml0aXplIHRoZSBcImVudGVyXCIgYWN0aW9uLCB3ZSBzaG91bGQgc3dpdGNoIHRvIHRoZSBcImxlYXZlXCIgaW4gdGhpcyBjYXNlIChidXQgb25seSBpZiBvbmUgaXMgZGVmaW5lZClcblxuICAgICAgICAgICAgaXNUYWtpbmdBY3Rpb24gPSBhbmltYXRpb24gJiYgKGFjdGlvbiA9PT0gXCJjb21wbGV0ZVwiIHx8IGFjdGlvbiA9PT0gXCJyZXNldFwiIHx8IGFjdGlvbiBpbiBhbmltYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZlbnRPdmVybGFwcyAmJiB0b2dnbGVkICYmIChpc1Rha2luZ0FjdGlvbiB8fCBzY3J1YiB8fCAhYW5pbWF0aW9uKSAmJiAoX2lzRnVuY3Rpb24ocHJldmVudE92ZXJsYXBzKSA/IHByZXZlbnRPdmVybGFwcyhzZWxmKSA6IHNlbGYuZ2V0VHJhaWxpbmcocHJldmVudE92ZXJsYXBzKS5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQuZW5kQW5pbWF0aW9uKCk7XG4gICAgICAgIH0pKTtcblxuICAgICAgICBpZiAoIWlzVG9nZ2xlKSB7XG4gICAgICAgICAgaWYgKHNjcnViVHdlZW4gJiYgIV9yZWZyZXNoaW5nICYmICFfc3RhcnR1cCkge1xuICAgICAgICAgICAgc2NydWJUd2Vlbi52YXJzLnRvdGFsUHJvZ3Jlc3MgPSBjbGlwcGVkO1xuICAgICAgICAgICAgc2NydWJUd2Vlbi5pbnZhbGlkYXRlKCkucmVzdGFydCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBhbmltYXRpb24udG90YWxQcm9ncmVzcyhjbGlwcGVkLCAhIV9yZWZyZXNoaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGluKSB7XG4gICAgICAgICAgcmVzZXQgJiYgcGluU3BhY2luZyAmJiAoc3BhY2VyLnN0eWxlW3BpblNwYWNpbmcgKyBkaXJlY3Rpb24ub3MyXSA9IHNwYWNpbmdTdGFydCk7XG5cbiAgICAgICAgICBpZiAoIXVzZUZpeGVkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHBpblNldHRlcihwaW5TdGFydCArIHBpbkNoYW5nZSAqIGNsaXBwZWQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgICBpc0F0TWF4ID0gIXJlc2V0ICYmIGNsaXBwZWQgPiBwcmV2UHJvZ3Jlc3MgJiYgZW5kICsgMSA+IHNjcm9sbCAmJiBzY3JvbGwgKyAxID49IF9tYXhTY3JvbGwoc2Nyb2xsZXIsIGRpcmVjdGlvbik7IC8vIGlmIGl0J3MgYXQgdGhlIFZFUlkgZW5kIG9mIHRoZSBwYWdlLCBkb24ndCBzd2l0Y2ggYXdheSBmcm9tIHBvc2l0aW9uOiBmaXhlZCBiZWNhdXNlIGl0J3MgcG9pbnRsZXNzIGFuZCBpdCBjb3VsZCBjYXVzZSBhIGJyaWVmIGZsYXNoIHdoZW4gdGhlIHVzZXIgc2Nyb2xscyBiYWNrIHVwICh3aGVuIGl0IGdldHMgcGlubmVkIGFnYWluKVxuXG4gICAgICAgICAgICBpZiAocGluUmVwYXJlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKCFyZXNldCAmJiAoaXNBY3RpdmUgfHwgaXNBdE1heCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gX2dldEJvdW5kcyhwaW4sIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBfb2Zmc2V0ID0gc2Nyb2xsIC0gc3RhcnQ7XG5cbiAgICAgICAgICAgICAgICBfcmVwYXJlbnQocGluLCBfYm9keSwgYm91bmRzLnRvcCArIChkaXJlY3Rpb24gPT09IF92ZXJ0aWNhbCA/IF9vZmZzZXQgOiAwKSArIF9weCwgYm91bmRzLmxlZnQgKyAoZGlyZWN0aW9uID09PSBfdmVydGljYWwgPyAwIDogX29mZnNldCkgKyBfcHgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9yZXBhcmVudChwaW4sIHNwYWNlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFN0YXRlKGlzQWN0aXZlIHx8IGlzQXRNYXggPyBwaW5BY3RpdmVTdGF0ZSA6IHBpblN0YXRlKTtcblxuICAgICAgICAgICAgcGluQ2hhbmdlICE9PSBjaGFuZ2UgJiYgY2xpcHBlZCA8IDEgJiYgaXNBY3RpdmUgfHwgcGluU2V0dGVyKHBpblN0YXJ0ICsgKGNsaXBwZWQgPT09IDEgJiYgIWlzQXRNYXggPyBwaW5DaGFuZ2UgOiAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc25hcCAmJiAhdHdlZW5Uby50d2VlbiAmJiAhX3JlZnJlc2hpbmcgJiYgIV9zdGFydHVwICYmIHNuYXBEZWxheWVkQ2FsbC5yZXN0YXJ0KHRydWUpO1xuICAgICAgICB0b2dnbGVDbGFzcyAmJiAodG9nZ2xlZCB8fCBvbmNlICYmIGNsaXBwZWQgJiYgKGNsaXBwZWQgPCAxIHx8ICFfbGltaXRDYWxsYmFja3MpKSAmJiBfdG9BcnJheSh0b2dnbGVDbGFzcy50YXJnZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3RbaXNBY3RpdmUgfHwgb25jZSA/IFwiYWRkXCIgOiBcInJlbW92ZVwiXSh0b2dnbGVDbGFzcy5jbGFzc05hbWUpO1xuICAgICAgICB9KTsgLy8gY2xhc3NlcyBjb3VsZCBhZmZlY3QgcG9zaXRpb25pbmcsIHNvIGRvIGl0IGV2ZW4gaWYgcmVzZXQgb3IgcmVmcmVzaGluZyBpcyB0cnVlLlxuXG4gICAgICAgIG9uVXBkYXRlICYmICFpc1RvZ2dsZSAmJiAhcmVzZXQgJiYgb25VcGRhdGUoc2VsZik7XG5cbiAgICAgICAgaWYgKHN0YXRlQ2hhbmdlZCAmJiAhX3JlZnJlc2hpbmcpIHtcbiAgICAgICAgICBpZiAoaXNUb2dnbGUpIHtcbiAgICAgICAgICAgIGlmIChpc1Rha2luZ0FjdGlvbikge1xuICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ucGF1c2UoKS50b3RhbFByb2dyZXNzKDEpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbiA9PT0gXCJyZXNldFwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlc3RhcnQodHJ1ZSkucGF1c2UoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLnJlc3RhcnQodHJ1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uW2FjdGlvbl0oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvblVwZGF0ZSAmJiBvblVwZGF0ZShzZWxmKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodG9nZ2xlZCB8fCAhX2xpbWl0Q2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBvbiBzdGFydHVwLCB0aGUgcGFnZSBjb3VsZCBiZSBzY3JvbGxlZCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBmaXJlIGNhbGxiYWNrcyB0aGF0IGRpZG4ndCB0b2dnbGUuIEZvciBleGFtcGxlIG9uRW50ZXIgc2hvdWxkbid0IGZpcmUgaWYgdGhlIFNjcm9sbFRyaWdnZXIgaXNuJ3QgYWN0dWFsbHkgZW50ZXJlZC5cbiAgICAgICAgICAgIG9uVG9nZ2xlICYmIHRvZ2dsZWQgJiYgX2NhbGxiYWNrKHNlbGYsIG9uVG9nZ2xlKTtcbiAgICAgICAgICAgIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0gJiYgX2NhbGxiYWNrKHNlbGYsIGNhbGxiYWNrc1t0b2dnbGVTdGF0ZV0pO1xuICAgICAgICAgICAgb25jZSAmJiAoY2xpcHBlZCA9PT0gMSA/IHNlbGYua2lsbChmYWxzZSwgMSkgOiBjYWxsYmFja3NbdG9nZ2xlU3RhdGVdID0gMCk7IC8vIGEgY2FsbGJhY2sgc2hvdWxkbid0IGJlIGNhbGxlZCBhZ2FpbiBpZiBvbmNlIGlzIHRydWUuXG5cbiAgICAgICAgICAgIGlmICghdG9nZ2xlZCkge1xuICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRvIGdvIGNvbXBsZXRlbHkgcGFzdCwgbGlrZSBmcm9tIGJlZm9yZSB0aGUgc3RhcnQgdG8gYWZ0ZXIgdGhlIGVuZCAob3IgdmljZS12ZXJzYSkgaW4gd2hpY2ggY2FzZSBCT1RIIGNhbGxiYWNrcyBzaG91bGQgYmUgZmlyZWQgaW4gdGhhdCBvcmRlclxuICAgICAgICAgICAgICB0b2dnbGVTdGF0ZSA9IGNsaXBwZWQgPT09IDEgPyAxIDogMztcbiAgICAgICAgICAgICAgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSAmJiBfY2FsbGJhY2soc2VsZiwgY2FsbGJhY2tzW3RvZ2dsZVN0YXRlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZhc3RTY3JvbGxFbmQgJiYgIWlzQWN0aXZlICYmIE1hdGguYWJzKHNlbGYuZ2V0VmVsb2NpdHkoKSkgPiAoX2lzTnVtYmVyKGZhc3RTY3JvbGxFbmQpID8gZmFzdFNjcm9sbEVuZCA6IDI1MDApKSB7XG4gICAgICAgICAgICBfZW5kQW5pbWF0aW9uKHNlbGYuY2FsbGJhY2tBbmltYXRpb24pO1xuXG4gICAgICAgICAgICBzY3J1YlR3ZWVuID8gc2NydWJUd2Vlbi5wcm9ncmVzcygxKSA6IF9lbmRBbmltYXRpb24oYW5pbWF0aW9uLCAhY2xpcHBlZCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzVG9nZ2xlICYmIG9uVXBkYXRlICYmICFfcmVmcmVzaGluZykge1xuICAgICAgICAgIG9uVXBkYXRlKHNlbGYpO1xuICAgICAgICB9XG4gICAgICB9IC8vIHVwZGF0ZSBhYnNvbHV0ZWx5LXBvc2l0aW9uZWQgbWFya2VycyAob25seSBpZiB0aGUgc2Nyb2xsZXIgaXNuJ3QgdGhlIHZpZXdwb3J0KVxuXG5cbiAgICAgIGlmIChtYXJrZXJFbmRTZXR0ZXIpIHtcbiAgICAgICAgdmFyIG4gPSBjb250YWluZXJBbmltYXRpb24gPyBzY3JvbGwgLyBjb250YWluZXJBbmltYXRpb24uZHVyYXRpb24oKSAqIChjb250YWluZXJBbmltYXRpb24uX2NhU2Nyb2xsRGlzdCB8fCAwKSA6IHNjcm9sbDtcbiAgICAgICAgbWFya2VyU3RhcnRTZXR0ZXIobiArIChtYXJrZXJTdGFydFRyaWdnZXIuX2lzRmxpcHBlZCA/IDEgOiAwKSk7XG4gICAgICAgIG1hcmtlckVuZFNldHRlcihuKTtcbiAgICAgIH1cblxuICAgICAgY2FNYXJrZXJTZXR0ZXIgJiYgY2FNYXJrZXJTZXR0ZXIoLXNjcm9sbCAvIGNvbnRhaW5lckFuaW1hdGlvbi5kdXJhdGlvbigpICogKGNvbnRhaW5lckFuaW1hdGlvbi5fY2FTY3JvbGxEaXN0IHx8IDApKTtcbiAgICB9O1xuXG4gICAgc2VsZi5lbmFibGUgPSBmdW5jdGlvbiAocmVzZXQsIHJlZnJlc2gpIHtcbiAgICAgIGlmICghc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHNlbGYuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgX2FkZExpc3RlbmVyKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgIF9hZGRMaXN0ZW5lcihzY3JvbGxlciwgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTtcblxuICAgICAgICBvblJlZnJlc2hJbml0ICYmIF9hZGRMaXN0ZW5lcihTY3JvbGxUcmlnZ2VyLCBcInJlZnJlc2hJbml0XCIsIG9uUmVmcmVzaEluaXQpO1xuXG4gICAgICAgIGlmIChyZXNldCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBzZWxmLnByb2dyZXNzID0gcHJldlByb2dyZXNzID0gMDtcbiAgICAgICAgICBzY3JvbGwxID0gc2Nyb2xsMiA9IGxhc3RTbmFwID0gc2Nyb2xsRnVuYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmcmVzaCAhPT0gZmFsc2UgJiYgc2VsZi5yZWZyZXNoKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZ2V0VHdlZW4gPSBmdW5jdGlvbiAoc25hcCkge1xuICAgICAgcmV0dXJuIHNuYXAgJiYgdHdlZW5UbyA/IHR3ZWVuVG8udHdlZW4gOiBzY3J1YlR3ZWVuO1xuICAgIH07XG5cbiAgICBzZWxmLmRpc2FibGUgPSBmdW5jdGlvbiAocmVzZXQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICBpZiAoc2VsZi5lbmFibGVkKSB7XG4gICAgICAgIHJlc2V0ICE9PSBmYWxzZSAmJiBzZWxmLnJldmVydCgpO1xuICAgICAgICBzZWxmLmVuYWJsZWQgPSBzZWxmLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGFsbG93QW5pbWF0aW9uIHx8IHNjcnViVHdlZW4gJiYgc2NydWJUd2Vlbi5wYXVzZSgpO1xuICAgICAgICBwcmV2U2Nyb2xsID0gMDtcbiAgICAgICAgcGluQ2FjaGUgJiYgKHBpbkNhY2hlLnVuY2FjaGUgPSAxKTtcbiAgICAgICAgb25SZWZyZXNoSW5pdCAmJiBfcmVtb3ZlTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoSW5pdFwiLCBvblJlZnJlc2hJbml0KTtcblxuICAgICAgICBpZiAoc25hcERlbGF5ZWRDYWxsKSB7XG4gICAgICAgICAgc25hcERlbGF5ZWRDYWxsLnBhdXNlKCk7XG4gICAgICAgICAgdHdlZW5Uby50d2VlbiAmJiB0d2VlblRvLnR3ZWVuLmtpbGwoKSAmJiAodHdlZW5Uby50d2VlbiA9IDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1ZpZXdwb3J0KSB7XG4gICAgICAgICAgdmFyIGkgPSBfdHJpZ2dlcnMubGVuZ3RoO1xuXG4gICAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKF90cmlnZ2Vyc1tpXS5zY3JvbGxlciA9PT0gc2Nyb2xsZXIgJiYgX3RyaWdnZXJzW2ldICE9PSBzZWxmKSB7XG4gICAgICAgICAgICAgIHJldHVybjsgLy9kb24ndCByZW1vdmUgdGhlIGxpc3RlbmVycyBpZiB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdHJpZ2dlcnMgcmVmZXJlbmNpbmcgaXQuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHNjcm9sbGVyLCBcInJlc2l6ZVwiLCBfb25SZXNpemUpO1xuXG4gICAgICAgICAgX3JlbW92ZUxpc3RlbmVyKHNjcm9sbGVyLCBcInNjcm9sbFwiLCBfb25TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYua2lsbCA9IGZ1bmN0aW9uIChyZXZlcnQsIGFsbG93QW5pbWF0aW9uKSB7XG4gICAgICBzZWxmLmRpc2FibGUocmV2ZXJ0LCBhbGxvd0FuaW1hdGlvbik7XG4gICAgICBzY3J1YlR3ZWVuICYmIHNjcnViVHdlZW4ua2lsbCgpO1xuICAgICAgaWQgJiYgZGVsZXRlIF9pZHNbaWRdO1xuXG4gICAgICB2YXIgaSA9IF90cmlnZ2Vycy5pbmRleE9mKHNlbGYpO1xuXG4gICAgICBfdHJpZ2dlcnMuc3BsaWNlKGksIDEpO1xuXG4gICAgICBpID09PSBfaSAmJiBfZGlyZWN0aW9uID4gMCAmJiBfaS0tOyAvLyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgcmVmcmVzaCgpIG9yIHVwZGF0ZSgpLCBzcGxpY2luZyB3b3VsZCBjYXVzZSBza2lwcyBpbiB0aGUgaW5kZXgsIHNvIGFkanVzdC4uLlxuICAgICAgLy8gaWYgbm8gb3RoZXIgU2Nyb2xsVHJpZ2dlciBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgc2Nyb2xsZXIgYXJlIGZvdW5kLCB3aXBlIG91dCBhbnkgcmVjb3JkZWQgc2Nyb2xsIHBvc2l0aW9uLiBPdGhlcndpc2UsIGluIGEgc2luZ2xlIHBhZ2UgYXBwbGljYXRpb24sIGZvciBleGFtcGxlLCBpdCBjb3VsZCBtYWludGFpbiBzY3JvbGwgcG9zaXRpb24gd2hlbiBpdCByZWFsbHkgc2hvdWxkbid0LlxuXG4gICAgICBpID0gMDtcblxuICAgICAgX3RyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgcmV0dXJuIHQuc2Nyb2xsZXIgPT09IHNlbGYuc2Nyb2xsZXIgJiYgKGkgPSAxKTtcbiAgICAgIH0pO1xuXG4gICAgICBpIHx8IChzZWxmLnNjcm9sbC5yZWMgPSAwKTtcblxuICAgICAgaWYgKGFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb24uc2Nyb2xsVHJpZ2dlciA9IG51bGw7XG4gICAgICAgIHJldmVydCAmJiBhbmltYXRpb24ucmVuZGVyKC0xKTtcbiAgICAgICAgYWxsb3dBbmltYXRpb24gfHwgYW5pbWF0aW9uLmtpbGwoKTtcbiAgICAgIH1cblxuICAgICAgbWFya2VyU3RhcnQgJiYgW21hcmtlclN0YXJ0LCBtYXJrZXJFbmQsIG1hcmtlclN0YXJ0VHJpZ2dlciwgbWFya2VyRW5kVHJpZ2dlcl0uZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICByZXR1cm4gbS5wYXJlbnROb2RlICYmIG0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGluKSB7XG4gICAgICAgIHBpbkNhY2hlICYmIChwaW5DYWNoZS51bmNhY2hlID0gMSk7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIF90cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgcmV0dXJuIHQucGluID09PSBwaW4gJiYgaSsrO1xuICAgICAgICB9KTtcblxuICAgICAgICBpIHx8IChwaW5DYWNoZS5zcGFjZXIgPSAwKTsgLy8gaWYgdGhlcmUgYXJlbid0IGFueSBtb3JlIFNjcm9sbFRyaWdnZXJzIHdpdGggdGhlIHNhbWUgcGluLCByZW1vdmUgdGhlIHNwYWNlciwgb3RoZXJ3aXNlIGl0IGNvdWxkIGJlIGNvbnRhbWluYXRlZCB3aXRoIG9sZC9zdGFsZSB2YWx1ZXMgaWYgdGhlIHVzZXIgcmUtY3JlYXRlcyBhIFNjcm9sbFRyaWdnZXIgZm9yIHRoZSBzYW1lIGVsZW1lbnQuXG4gICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYuZW5hYmxlKGZhbHNlLCBmYWxzZSk7XG4gICAgIWFuaW1hdGlvbiB8fCAhYW5pbWF0aW9uLmFkZCB8fCBjaGFuZ2UgPyBzZWxmLnJlZnJlc2goKSA6IGdzYXAuZGVsYXllZENhbGwoMC4wMSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0IHx8IGVuZCB8fCBzZWxmLnJlZnJlc2goKTtcbiAgICB9KSAmJiAoY2hhbmdlID0gMC4wMSkgJiYgKHN0YXJ0ID0gZW5kID0gMCk7IC8vIGlmIHRoZSBhbmltYXRpb24gaXMgYSB0aW1lbGluZSwgaXQgbWF5IG5vdCBoYXZlIGJlZW4gcG9wdWxhdGVkIHlldCwgc28gaXQgd291bGRuJ3QgcmVuZGVyIGF0IHRoZSBwcm9wZXIgcGxhY2Ugb24gdGhlIGZpcnN0IHJlZnJlc2goKSwgdGh1cyB3ZSBzaG91bGQgc2NoZWR1bGUgb25lIGZvciB0aGUgbmV4dCB0aWNrLiBJZiBcImNoYW5nZVwiIGlzIGRlZmluZWQsIHdlIGtub3cgaXQgbXVzdCBiZSByZS1lbmFibGluZywgdGh1cyB3ZSBjYW4gcmVmcmVzaCgpIHJpZ2h0IGF3YXkuXG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKGNvcmUpIHtcbiAgICBpZiAoIV9jb3JlSW5pdHRlZCkge1xuICAgICAgZ3NhcCA9IGNvcmUgfHwgX2dldEdTQVAoKTtcblxuICAgICAgaWYgKF93aW5kb3dFeGlzdHMoKSAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgX3dpbiA9IHdpbmRvdztcbiAgICAgICAgX2RvYyA9IGRvY3VtZW50O1xuICAgICAgICBfZG9jRWwgPSBfZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgX2JvZHkgPSBfZG9jLmJvZHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnc2FwKSB7XG4gICAgICAgIF90b0FycmF5ID0gZ3NhcC51dGlscy50b0FycmF5O1xuICAgICAgICBfY2xhbXAgPSBnc2FwLnV0aWxzLmNsYW1wO1xuICAgICAgICBfc3VwcHJlc3NPdmVyd3JpdGVzID0gZ3NhcC5jb3JlLnN1cHByZXNzT3ZlcndyaXRlcyB8fCBfcGFzc1Rocm91Z2g7XG4gICAgICAgIGdzYXAuY29yZS5nbG9iYWxzKFwiU2Nyb2xsVHJpZ2dlclwiLCBTY3JvbGxUcmlnZ2VyKTsgLy8gbXVzdCByZWdpc3RlciB0aGUgZ2xvYmFsIG1hbnVhbGx5IGJlY2F1c2UgaW4gSW50ZXJuZXQgRXhwbG9yZXIsIGZ1bmN0aW9ucyAoY2xhc3NlcykgZG9uJ3QgaGF2ZSBhIFwibmFtZVwiIHByb3BlcnR5LlxuXG4gICAgICAgIGlmIChfYm9keSkge1xuICAgICAgICAgIF9yYWYgPSBfd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZiwgMTYpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIoX3dpbiwgXCJ3aGVlbFwiLCBfb25TY3JvbGwpO1xuXG4gICAgICAgICAgX3Jvb3QgPSBbX3dpbiwgX2RvYywgX2RvY0VsLCBfYm9keV07XG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIoX2RvYywgXCJzY3JvbGxcIiwgX29uU2Nyb2xsKTsgLy8gc29tZSBicm93c2VycyAobGlrZSBDaHJvbWUpLCB0aGUgd2luZG93IHN0b3BzIGRpc3BhdGNoaW5nIHNjcm9sbCBldmVudHMgb24gdGhlIHdpbmRvdyBpZiB5b3Ugc2Nyb2xsIHJlYWxseSBmYXN0LCBidXQgaXQncyBjb25zaXN0ZW50IG9uIHRoZSBkb2N1bWVudCFcblxuXG4gICAgICAgICAgdmFyIGJvZHlTdHlsZSA9IF9ib2R5LnN0eWxlLFxuICAgICAgICAgICAgICBib3JkZXIgPSBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUsXG4gICAgICAgICAgICAgIGJvdW5kcztcbiAgICAgICAgICBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBcInNvbGlkXCI7IC8vIHdvcmtzIGFyb3VuZCBhbiBpc3N1ZSB3aGVyZSBhIG1hcmdpbiBvZiBhIGNoaWxkIGVsZW1lbnQgY291bGQgdGhyb3cgb2ZmIHRoZSBib3VuZHMgb2YgdGhlIF9ib2R5LCBtYWtpbmcgaXQgc2VlbSBsaWtlIHRoZXJlJ3MgYSBtYXJnaW4gd2hlbiB0aGVyZSBhY3R1YWxseSBpc24ndC4gVGhlIGJvcmRlciBlbnN1cmVzIHRoYXQgdGhlIGJvdW5kcyBhcmUgYWNjdXJhdGUuXG5cbiAgICAgICAgICBib3VuZHMgPSBfZ2V0Qm91bmRzKF9ib2R5KTtcbiAgICAgICAgICBfdmVydGljYWwubSA9IE1hdGgucm91bmQoYm91bmRzLnRvcCArIF92ZXJ0aWNhbC5zYygpKSB8fCAwOyAvLyBhY2NvbW1vZGF0ZSB0aGUgb2Zmc2V0IG9mIHRoZSA8Ym9keT4gY2F1c2VkIGJ5IG1hcmdpbnMgYW5kL29yIHBhZGRpbmdcblxuICAgICAgICAgIF9ob3Jpem9udGFsLm0gPSBNYXRoLnJvdW5kKGJvdW5kcy5sZWZ0ICsgX2hvcml6b250YWwuc2MoKSkgfHwgMDtcbiAgICAgICAgICBib3JkZXIgPyBib2R5U3R5bGUuYm9yZGVyVG9wU3R5bGUgPSBib3JkZXIgOiBib2R5U3R5bGUucmVtb3ZlUHJvcGVydHkoXCJib3JkZXItdG9wLXN0eWxlXCIpO1xuICAgICAgICAgIF9zeW5jSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChfc3luYywgMjAwKTtcbiAgICAgICAgICBnc2FwLmRlbGF5ZWRDYWxsKDAuNSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdGFydHVwID0gMDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF9hZGRMaXN0ZW5lcihfZG9jLCBcInRvdWNoY2FuY2VsXCIsIF9wYXNzVGhyb3VnaCk7IC8vIHNvbWUgb2xkZXIgQW5kcm9pZCBkZXZpY2VzIGludGVybWl0dGVudGx5IHN0b3AgZGlzcGF0Y2hpbmcgXCJ0b3VjaG1vdmVcIiBldmVudHMgaWYgd2UgZG9uJ3QgbGlzdGVuIGZvciBcInRvdWNoY2FuY2VsXCIgb24gdGhlIGRvY3VtZW50LlxuXG5cbiAgICAgICAgICBfYWRkTGlzdGVuZXIoX2JvZHksIFwidG91Y2hzdGFydFwiLCBfcGFzc1Rocm91Z2gpOyAvL3dvcmtzIGFyb3VuZCBTYWZhcmkgYnVnOiBodHRwczovL2dyZWVuc29jay5jb20vZm9ydW1zL3RvcGljLzIxNDUwLWRyYWdnYWJsZS1pbi1pZnJhbWUtb24tbW9iaWxlLWlzLWJ1Z2d5L1xuXG5cbiAgICAgICAgICBfbXVsdGlMaXN0ZW5lcihfYWRkTGlzdGVuZXIsIF9kb2MsIFwicG9pbnRlcmRvd24sdG91Y2hzdGFydCxtb3VzZWRvd25cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9wb2ludGVySXNEb3duID0gMTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIF9tdWx0aUxpc3RlbmVyKF9hZGRMaXN0ZW5lciwgX2RvYywgXCJwb2ludGVydXAsdG91Y2hlbmQsbW91c2V1cFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3BvaW50ZXJJc0Rvd24gPSAwO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RyYW5zZm9ybVByb3AgPSBnc2FwLnV0aWxzLmNoZWNrUHJlZml4KFwidHJhbnNmb3JtXCIpO1xuXG4gICAgICAgICAgX3N0YXRlUHJvcHMucHVzaChfdHJhbnNmb3JtUHJvcCk7XG5cbiAgICAgICAgICBfY29yZUluaXR0ZWQgPSBfZ2V0VGltZSgpO1xuICAgICAgICAgIF9yZXNpemVEZWxheSA9IGdzYXAuZGVsYXllZENhbGwoMC4yLCBfcmVmcmVzaEFsbCkucGF1c2UoKTtcbiAgICAgICAgICBfYXV0b1JlZnJlc2ggPSBbX2RvYywgXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB3ID0gX3dpbi5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGggPSBfd2luLmlubmVySGVpZ2h0O1xuXG4gICAgICAgICAgICBpZiAoX2RvYy5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgX3ByZXZXaWR0aCA9IHc7XG4gICAgICAgICAgICAgIF9wcmV2SGVpZ2h0ID0gaDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX3ByZXZXaWR0aCAhPT0gdyB8fCBfcHJldkhlaWdodCAhPT0gaCkge1xuICAgICAgICAgICAgICBfb25SZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBfZG9jLCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgX3JlZnJlc2hBbGwsIF93aW4sIFwibG9hZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2xhc3RTY3JvbGxUaW1lIHx8IF9yZWZyZXNoQWxsKCk7XG4gICAgICAgICAgfSwgX3dpbiwgXCJyZXNpemVcIiwgX29uUmVzaXplXTtcblxuICAgICAgICAgIF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfY29yZUluaXR0ZWQ7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5kZWZhdWx0cyA9IGZ1bmN0aW9uIGRlZmF1bHRzKGNvbmZpZykge1xuICAgIGZvciAodmFyIHAgaW4gY29uZmlnKSB7XG4gICAgICBfZGVmYXVsdHNbcF0gPSBjb25maWdbcF07XG4gICAgfVxuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIua2lsbCA9IGZ1bmN0aW9uIGtpbGwoKSB7XG4gICAgX2VuYWJsZWQgPSAwO1xuXG4gICAgX3RyaWdnZXJzLnNsaWNlKDApLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgIHJldHVybiB0cmlnZ2VyLmtpbGwoMSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2Nyb2xsVHJpZ2dlci5jb25maWcgPSBmdW5jdGlvbiBjb25maWcodmFycykge1xuICAgIFwibGltaXRDYWxsYmFja3NcIiBpbiB2YXJzICYmIChfbGltaXRDYWxsYmFja3MgPSAhIXZhcnMubGltaXRDYWxsYmFja3MpO1xuICAgIHZhciBtcyA9IHZhcnMuc3luY0ludGVydmFsO1xuICAgIG1zICYmIGNsZWFySW50ZXJ2YWwoX3N5bmNJbnRlcnZhbCkgfHwgKF9zeW5jSW50ZXJ2YWwgPSBtcykgJiYgc2V0SW50ZXJ2YWwoX3N5bmMsIG1zKTtcblxuICAgIGlmIChcImF1dG9SZWZyZXNoRXZlbnRzXCIgaW4gdmFycykge1xuICAgICAgX2l0ZXJhdGVBdXRvUmVmcmVzaChfcmVtb3ZlTGlzdGVuZXIpIHx8IF9pdGVyYXRlQXV0b1JlZnJlc2goX2FkZExpc3RlbmVyLCB2YXJzLmF1dG9SZWZyZXNoRXZlbnRzIHx8IFwibm9uZVwiKTtcbiAgICAgIF9pZ25vcmVSZXNpemUgPSAodmFycy5hdXRvUmVmcmVzaEV2ZW50cyArIFwiXCIpLmluZGV4T2YoXCJyZXNpemVcIikgPT09IC0xO1xuICAgIH1cbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnNjcm9sbGVyUHJveHkgPSBmdW5jdGlvbiBzY3JvbGxlclByb3h5KHRhcmdldCwgdmFycykge1xuICAgIHZhciB0ID0gX2dldFRhcmdldCh0YXJnZXQpLFxuICAgICAgICBpID0gX3Njcm9sbGVycy5pbmRleE9mKHQpLFxuICAgICAgICBpc1ZpZXdwb3J0ID0gX2lzVmlld3BvcnQodCk7XG5cbiAgICBpZiAofmkpIHtcbiAgICAgIF9zY3JvbGxlcnMuc3BsaWNlKGksIGlzVmlld3BvcnQgPyA2IDogMik7XG4gICAgfVxuXG4gICAgaXNWaWV3cG9ydCA/IF9wcm94aWVzLnVuc2hpZnQoX3dpbiwgdmFycywgX2JvZHksIHZhcnMsIF9kb2NFbCwgdmFycykgOiBfcHJveGllcy51bnNoaWZ0KHQsIHZhcnMpO1xuICB9O1xuXG4gIFNjcm9sbFRyaWdnZXIubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uIG1hdGNoTWVkaWEodmFycykge1xuICAgIC8vIF9tZWRpYSBpcyBwb3B1bGF0ZWQgaW4gdGhlIGZvbGxvd2luZyBvcmRlcjogbWVkaWFRdWVyeVN0cmluZywgb25NYXRjaCwgb25Vbm1hdGNoLCBpc01hdGNoZWQuIFNvIGlmIHRoZXJlIGFyZSB0d28gbWVkaWEgcXVlcmllcywgdGhlIEFycmF5IHdvdWxkIGhhdmUgYSBsZW5ndGggb2YgOFxuICAgIHZhciBtcSwgcCwgaSwgZnVuYywgcmVzdWx0O1xuXG4gICAgZm9yIChwIGluIHZhcnMpIHtcbiAgICAgIGkgPSBfbWVkaWEuaW5kZXhPZihwKTtcbiAgICAgIGZ1bmMgPSB2YXJzW3BdO1xuICAgICAgX2NyZWF0aW5nTWVkaWEgPSBwO1xuXG4gICAgICBpZiAocCA9PT0gXCJhbGxcIikge1xuICAgICAgICBmdW5jKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtcSA9IF93aW4ubWF0Y2hNZWRpYShwKTtcblxuICAgICAgICBpZiAobXEpIHtcbiAgICAgICAgICBtcS5tYXRjaGVzICYmIChyZXN1bHQgPSBmdW5jKCkpO1xuXG4gICAgICAgICAgaWYgKH5pKSB7XG4gICAgICAgICAgICBfbWVkaWFbaSArIDFdID0gX2NvbWJpbmVGdW5jKF9tZWRpYVtpICsgMV0sIGZ1bmMpO1xuICAgICAgICAgICAgX21lZGlhW2kgKyAyXSA9IF9jb21iaW5lRnVuYyhfbWVkaWFbaSArIDJdLCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpID0gX21lZGlhLmxlbmd0aDtcblxuICAgICAgICAgICAgX21lZGlhLnB1c2gocCwgZnVuYywgcmVzdWx0KTtcblxuICAgICAgICAgICAgbXEuYWRkTGlzdGVuZXIgPyBtcS5hZGRMaXN0ZW5lcihfb25NZWRpYUNoYW5nZSkgOiBtcS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIF9vbk1lZGlhQ2hhbmdlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfbWVkaWFbaSArIDNdID0gbXEubWF0Y2hlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfY3JlYXRpbmdNZWRpYSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9tZWRpYTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmNsZWFyTWF0Y2hNZWRpYSA9IGZ1bmN0aW9uIGNsZWFyTWF0Y2hNZWRpYShxdWVyeSkge1xuICAgIHF1ZXJ5IHx8IChfbWVkaWEubGVuZ3RoID0gMCk7XG4gICAgcXVlcnkgPSBfbWVkaWEuaW5kZXhPZihxdWVyeSk7XG4gICAgcXVlcnkgPj0gMCAmJiBfbWVkaWEuc3BsaWNlKHF1ZXJ5LCA0KTtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLmlzSW5WaWV3cG9ydCA9IGZ1bmN0aW9uIGlzSW5WaWV3cG9ydChlbGVtZW50LCByYXRpbywgaG9yaXpvbnRhbCkge1xuICAgIHZhciBib3VuZHMgPSAoX2lzU3RyaW5nKGVsZW1lbnQpID8gX2dldFRhcmdldChlbGVtZW50KSA6IGVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBvZmZzZXQgPSBib3VuZHNbaG9yaXpvbnRhbCA/IF93aWR0aCA6IF9oZWlnaHRdICogcmF0aW8gfHwgMDtcbiAgICByZXR1cm4gaG9yaXpvbnRhbCA/IGJvdW5kcy5yaWdodCAtIG9mZnNldCA+IDAgJiYgYm91bmRzLmxlZnQgKyBvZmZzZXQgPCBfd2luLmlubmVyV2lkdGggOiBib3VuZHMuYm90dG9tIC0gb2Zmc2V0ID4gMCAmJiBib3VuZHMudG9wICsgb2Zmc2V0IDwgX3dpbi5pbm5lckhlaWdodDtcbiAgfTtcblxuICBTY3JvbGxUcmlnZ2VyLnBvc2l0aW9uSW5WaWV3cG9ydCA9IGZ1bmN0aW9uIHBvc2l0aW9uSW5WaWV3cG9ydChlbGVtZW50LCByZWZlcmVuY2VQb2ludCwgaG9yaXpvbnRhbCkge1xuICAgIF9pc1N0cmluZyhlbGVtZW50KSAmJiAoZWxlbWVudCA9IF9nZXRUYXJnZXQoZWxlbWVudCkpO1xuICAgIHZhciBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICBzaXplID0gYm91bmRzW2hvcml6b250YWwgPyBfd2lkdGggOiBfaGVpZ2h0XSxcbiAgICAgICAgb2Zmc2V0ID0gcmVmZXJlbmNlUG9pbnQgPT0gbnVsbCA/IHNpemUgLyAyIDogcmVmZXJlbmNlUG9pbnQgaW4gX2tleXdvcmRzID8gX2tleXdvcmRzW3JlZmVyZW5jZVBvaW50XSAqIHNpemUgOiB+cmVmZXJlbmNlUG9pbnQuaW5kZXhPZihcIiVcIikgPyBwYXJzZUZsb2F0KHJlZmVyZW5jZVBvaW50KSAqIHNpemUgLyAxMDAgOiBwYXJzZUZsb2F0KHJlZmVyZW5jZVBvaW50KSB8fCAwO1xuICAgIHJldHVybiBob3Jpem9udGFsID8gKGJvdW5kcy5sZWZ0ICsgb2Zmc2V0KSAvIF93aW4uaW5uZXJXaWR0aCA6IChib3VuZHMudG9wICsgb2Zmc2V0KSAvIF93aW4uaW5uZXJIZWlnaHQ7XG4gIH07XG5cbiAgcmV0dXJuIFNjcm9sbFRyaWdnZXI7XG59KCk7XG5TY3JvbGxUcmlnZ2VyLnZlcnNpb24gPSBcIjMuOC4wXCI7XG5cblNjcm9sbFRyaWdnZXIuc2F2ZVN0eWxlcyA9IGZ1bmN0aW9uICh0YXJnZXRzKSB7XG4gIHJldHVybiB0YXJnZXRzID8gX3RvQXJyYXkodGFyZ2V0cykuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgLy8gc2F2ZWQgc3R5bGVzIGFyZSByZWNvcmRlZCBpbiBhIGNvbnNlY3V0aXZlIGFsdGVybmF0aW5nIEFycmF5LCBsaWtlIFtlbGVtZW50LCBjc3NUZXh0LCB0cmFuc2Zvcm0gYXR0cmlidXRlLCBjYWNoZSwgbWF0Y2hNZWRpYSwgLi4uXVxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LnN0eWxlKSB7XG4gICAgICB2YXIgaSA9IF9zYXZlZFN0eWxlcy5pbmRleE9mKHRhcmdldCk7XG5cbiAgICAgIGkgPj0gMCAmJiBfc2F2ZWRTdHlsZXMuc3BsaWNlKGksIDUpO1xuXG4gICAgICBfc2F2ZWRTdHlsZXMucHVzaCh0YXJnZXQsIHRhcmdldC5zdHlsZS5jc3NUZXh0LCB0YXJnZXQuZ2V0QkJveCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpLCBnc2FwLmNvcmUuZ2V0Q2FjaGUodGFyZ2V0KSwgX2NyZWF0aW5nTWVkaWEpO1xuICAgIH1cbiAgfSkgOiBfc2F2ZWRTdHlsZXM7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnJldmVydCA9IGZ1bmN0aW9uIChzb2Z0LCBtZWRpYSkge1xuICByZXR1cm4gX3JldmVydEFsbCghc29mdCwgbWVkaWEpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5jcmVhdGUgPSBmdW5jdGlvbiAodmFycywgYW5pbWF0aW9uKSB7XG4gIHJldHVybiBuZXcgU2Nyb2xsVHJpZ2dlcih2YXJzLCBhbmltYXRpb24pO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZWZyZXNoID0gZnVuY3Rpb24gKHNhZmUpIHtcbiAgcmV0dXJuIHNhZmUgPyBfb25SZXNpemUoKSA6IChfY29yZUluaXR0ZWQgfHwgU2Nyb2xsVHJpZ2dlci5yZWdpc3RlcigpKSAmJiBfcmVmcmVzaEFsbCh0cnVlKTtcbn07XG5cblNjcm9sbFRyaWdnZXIudXBkYXRlID0gX3VwZGF0ZUFsbDtcblNjcm9sbFRyaWdnZXIuY2xlYXJTY3JvbGxNZW1vcnkgPSBfY2xlYXJTY3JvbGxNZW1vcnk7XG5cblNjcm9sbFRyaWdnZXIubWF4U2Nyb2xsID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhvcml6b250YWwpIHtcbiAgcmV0dXJuIF9tYXhTY3JvbGwoZWxlbWVudCwgaG9yaXpvbnRhbCA/IF9ob3Jpem9udGFsIDogX3ZlcnRpY2FsKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0U2Nyb2xsRnVuYyA9IGZ1bmN0aW9uIChlbGVtZW50LCBob3Jpem9udGFsKSB7XG4gIHJldHVybiBfZ2V0U2Nyb2xsRnVuYyhfZ2V0VGFyZ2V0KGVsZW1lbnQpLCBob3Jpem9udGFsID8gX2hvcml6b250YWwgOiBfdmVydGljYWwpO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5nZXRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBfaWRzW2lkXTtcbn07XG5cblNjcm9sbFRyaWdnZXIuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX3RyaWdnZXJzLnNsaWNlKDApO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5pc1Njcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhX2xhc3RTY3JvbGxUaW1lO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5zbmFwRGlyZWN0aW9uYWwgPSBfc25hcERpcmVjdGlvbmFsO1xuXG5TY3JvbGxUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgdmFyIGEgPSBfbGlzdGVuZXJzW3R5cGVdIHx8IChfbGlzdGVuZXJzW3R5cGVdID0gW10pO1xuICB+YS5pbmRleE9mKGNhbGxiYWNrKSB8fCBhLnB1c2goY2FsbGJhY2spO1xufTtcblxuU2Nyb2xsVHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gIHZhciBhID0gX2xpc3RlbmVyc1t0eXBlXSxcbiAgICAgIGkgPSBhICYmIGEuaW5kZXhPZihjYWxsYmFjayk7XG4gIGkgPj0gMCAmJiBhLnNwbGljZShpLCAxKTtcbn07XG5cblNjcm9sbFRyaWdnZXIuYmF0Y2ggPSBmdW5jdGlvbiAodGFyZ2V0cywgdmFycykge1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICB2YXJzQ29weSA9IHt9LFxuICAgICAgaW50ZXJ2YWwgPSB2YXJzLmludGVydmFsIHx8IDAuMDE2LFxuICAgICAgYmF0Y2hNYXggPSB2YXJzLmJhdGNoTWF4IHx8IDFlOSxcbiAgICAgIHByb3h5Q2FsbGJhY2sgPSBmdW5jdGlvbiBwcm94eUNhbGxiYWNrKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW10sXG4gICAgICAgIHRyaWdnZXJzID0gW10sXG4gICAgICAgIGRlbGF5ID0gZ3NhcC5kZWxheWVkQ2FsbChpbnRlcnZhbCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZWxlbWVudHMsIHRyaWdnZXJzKTtcbiAgICAgIGVsZW1lbnRzID0gW107XG4gICAgICB0cmlnZ2VycyA9IFtdO1xuICAgIH0pLnBhdXNlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxmKSB7XG4gICAgICBlbGVtZW50cy5sZW5ndGggfHwgZGVsYXkucmVzdGFydCh0cnVlKTtcbiAgICAgIGVsZW1lbnRzLnB1c2goc2VsZi50cmlnZ2VyKTtcbiAgICAgIHRyaWdnZXJzLnB1c2goc2VsZik7XG4gICAgICBiYXRjaE1heCA8PSBlbGVtZW50cy5sZW5ndGggJiYgZGVsYXkucHJvZ3Jlc3MoMSk7XG4gICAgfTtcbiAgfSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHZhcnMpIHtcbiAgICB2YXJzQ29weVtwXSA9IHAuc3Vic3RyKDAsIDIpID09PSBcIm9uXCIgJiYgX2lzRnVuY3Rpb24odmFyc1twXSkgJiYgcCAhPT0gXCJvblJlZnJlc2hJbml0XCIgPyBwcm94eUNhbGxiYWNrKHAsIHZhcnNbcF0pIDogdmFyc1twXTtcbiAgfVxuXG4gIGlmIChfaXNGdW5jdGlvbihiYXRjaE1heCkpIHtcbiAgICBiYXRjaE1heCA9IGJhdGNoTWF4KCk7XG5cbiAgICBfYWRkTGlzdGVuZXIoU2Nyb2xsVHJpZ2dlciwgXCJyZWZyZXNoXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBiYXRjaE1heCA9IHZhcnMuYmF0Y2hNYXgoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF90b0FycmF5KHRhcmdldHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIGZvciAocCBpbiB2YXJzQ29weSkge1xuICAgICAgY29uZmlnW3BdID0gdmFyc0NvcHlbcF07XG4gICAgfVxuXG4gICAgY29uZmlnLnRyaWdnZXIgPSB0YXJnZXQ7XG4gICAgcmVzdWx0LnB1c2goU2Nyb2xsVHJpZ2dlci5jcmVhdGUoY29uZmlnKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5TY3JvbGxUcmlnZ2VyLnNvcnQgPSBmdW5jdGlvbiAoZnVuYykge1xuICByZXR1cm4gX3RyaWdnZXJzLnNvcnQoZnVuYyB8fCBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAoYS52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYgKyBhLnN0YXJ0IC0gKGIuc3RhcnQgKyAoYi52YXJzLnJlZnJlc2hQcmlvcml0eSB8fCAwKSAqIC0xZTYpO1xuICB9KTtcbn07XG5cbl9nZXRHU0FQKCkgJiYgZ3NhcC5yZWdpc3RlclBsdWdpbihTY3JvbGxUcmlnZ2VyKTtcbmV4cG9ydCB7IFNjcm9sbFRyaWdnZXIgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxuaWYgKCFBcnJheS5mcm9tKSB7XG4gIEFycmF5LmZyb20gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuICAgIHZhciBpc0NhbGxhYmxlID0gZnVuY3Rpb24gaXNDYWxsYWJsZShmbikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9O1xuXG4gICAgdmFyIHRvSW50ZWdlciA9IGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIG51bWJlciA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICBpZiAobnVtYmVyID09PSAwIHx8ICFpc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAobnVtYmVyID4gMCA/IDEgOiAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xuICAgIH07XG5cbiAgICB2YXIgbWF4U2FmZUludGVnZXIgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuXG4gICAgdmFyIHRvTGVuZ3RoID0gZnVuY3Rpb24gdG9MZW5ndGgodmFsdWUpIHtcbiAgICAgIHZhciBsZW4gPSB0b0ludGVnZXIodmFsdWUpO1xuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGxlbiwgMCksIG1heFNhZmVJbnRlZ2VyKTtcbiAgICB9OyAvLyBUaGUgbGVuZ3RoIHByb3BlcnR5IG9mIHRoZSBmcm9tIG1ldGhvZCBpcyAxLlxuXG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZnJvbShhcnJheUxpa2VcbiAgICAvKiAsIG1hcEZuLCB0aGlzQXJnICovXG4gICAgKSB7XG4gICAgICAvLyAxLiBMZXQgQyBiZSB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgIHZhciBDID0gdGhpczsgLy8gMi4gTGV0IGl0ZW1zIGJlIFRvT2JqZWN0KGFycmF5TGlrZSkuXG5cbiAgICAgIHZhciBpdGVtcyA9IE9iamVjdChhcnJheUxpa2UpOyAvLyAzLiBSZXR1cm5JZkFicnVwdChpdGVtcykuXG5cbiAgICAgIGlmIChhcnJheUxpa2UgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5mcm9tIHJlcXVpcmVzIGFuIGFycmF5LWxpa2Ugb2JqZWN0IC0gbm90IG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgICB9IC8vIDQuIElmIG1hcGZuIGlzIHVuZGVmaW5lZCwgdGhlbiBsZXQgbWFwcGluZyBiZSBmYWxzZS5cblxuXG4gICAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHZvaWQgdW5kZWZpbmVkO1xuICAgICAgdmFyIFQ7XG5cbiAgICAgIGlmICh0eXBlb2YgbWFwRm4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIDUuIGVsc2VcbiAgICAgICAgLy8gNS4gYSBJZiBJc0NhbGxhYmxlKG1hcGZuKSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICBpZiAoIWlzQ2FsbGFibGUobWFwRm4pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkuZnJvbTogd2hlbiBwcm92aWRlZCwgdGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfSAvLyA1LiBiLiBJZiB0aGlzQXJnIHdhcyBzdXBwbGllZCwgbGV0IFQgYmUgdGhpc0FyZzsgZWxzZSBsZXQgVCBiZSB1bmRlZmluZWQuXG5cblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBUID0gYXJndW1lbnRzWzJdO1xuICAgICAgICB9XG4gICAgICB9IC8vIDEwLiBMZXQgbGVuVmFsdWUgYmUgR2V0KGl0ZW1zLCBcImxlbmd0aFwiKS5cbiAgICAgIC8vIDExLiBMZXQgbGVuIGJlIFRvTGVuZ3RoKGxlblZhbHVlKS5cblxuXG4gICAgICB2YXIgbGVuID0gdG9MZW5ndGgoaXRlbXMubGVuZ3RoKTsgLy8gMTMuIElmIElzQ29uc3RydWN0b3IoQykgaXMgdHJ1ZSwgdGhlblxuICAgICAgLy8gMTMuIGEuIExldCBBIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBtZXRob2RcbiAgICAgIC8vIG9mIEMgd2l0aCBhbiBhcmd1bWVudCBsaXN0IGNvbnRhaW5pbmcgdGhlIHNpbmdsZSBpdGVtIGxlbi5cbiAgICAgIC8vIDE0LiBhLiBFbHNlLCBMZXQgQSBiZSBBcnJheUNyZWF0ZShsZW4pLlxuXG4gICAgICB2YXIgQSA9IGlzQ2FsbGFibGUoQykgPyBPYmplY3QobmV3IEMobGVuKSkgOiBuZXcgQXJyYXkobGVuKTsgLy8gMTYuIExldCBrIGJlIDAuXG5cbiAgICAgIHZhciBrID0gMDsgLy8gMTcuIFJlcGVhdCwgd2hpbGUgayA8IGxlbuKApiAoYWxzbyBzdGVwcyBhIC0gaClcblxuICAgICAgdmFyIGtWYWx1ZTtcblxuICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcbiAgICAgICAga1ZhbHVlID0gaXRlbXNba107XG5cbiAgICAgICAgaWYgKG1hcEZuKSB7XG4gICAgICAgICAgQVtrXSA9IHR5cGVvZiBUID09PSAndW5kZWZpbmVkJyA/IG1hcEZuKGtWYWx1ZSwgaykgOiBtYXBGbi5jYWxsKFQsIGtWYWx1ZSwgayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQVtrXSA9IGtWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGsgKz0gMTtcbiAgICAgIH0gLy8gMTguIExldCBwdXRTdGF0dXMgYmUgUHV0KEEsIFwibGVuZ3RoXCIsIGxlbiwgdHJ1ZSkuXG5cblxuICAgICAgQS5sZW5ndGggPSBsZW47IC8vIDIwLiBSZXR1cm4gQS5cblxuICAgICAgcmV0dXJuIEE7XG4gICAgfTtcbiAgfSgpO1xufVxuXG4vKlxuXHRCeSBPc3ZhbGRhcyBWYWx1dGlzLCB3d3cub3N2YWxkYXMuaW5mb1xuXHRBdmFpbGFibGUgZm9yIHVzZSB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4oZnVuY3Rpb24gKGRvY3VtZW50LCB3aW5kb3cpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICBzID0gZWwuc3R5bGUsXG4gICAgICBwcmVmaXhBbmltYXRpb24gPSAnJyxcbiAgICAgIHByZWZpeFRyYW5zaXRpb24gPSAnJztcbiAgaWYgKHMuV2Via2l0QW5pbWF0aW9uID09ICcnKSBwcmVmaXhBbmltYXRpb24gPSAnLXdlYmtpdC0nO1xuICBpZiAocy5Nb3pBbmltYXRpb24gPT0gJycpIHByZWZpeEFuaW1hdGlvbiA9ICctbW96LSc7XG4gIGlmIChzLk9BbmltYXRpb24gPT0gJycpIHByZWZpeEFuaW1hdGlvbiA9ICctby0nO1xuICBpZiAocy5XZWJraXRUcmFuc2l0aW9uID09ICcnKSBwcmVmaXhUcmFuc2l0aW9uID0gJy13ZWJraXQtJztcbiAgaWYgKHMuTW96VHJhbnNpdGlvbiA9PSAnJykgcHJlZml4VHJhbnNpdGlvbiA9ICctbW96LSc7XG4gIGlmIChzLk9UcmFuc2l0aW9uID09ICcnKSBwcmVmaXhUcmFuc2l0aW9uID0gJy1vLSc7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJvdG90eXBlLCAnb25DU1NBbmltYXRpb25FbmQnLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgcnVuT25jZSA9IGZ1bmN0aW9uIHJ1bk9uY2UoZSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICBlLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGUudHlwZSwgcnVuT25jZSk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdEFuaW1hdGlvbkVuZCcsIHJ1bk9uY2UpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdtb3pBbmltYXRpb25FbmQnLCBydW5PbmNlKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignb0FuaW1hdGlvbkVuZCcsIHJ1bk9uY2UpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdvYW5pbWF0aW9uZW5kJywgcnVuT25jZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIHJ1bk9uY2UpO1xuICAgICAgaWYgKHByZWZpeEFuaW1hdGlvbiA9PSAnJyAmJiAhKCdhbmltYXRpb24nIGluIHMpIHx8IGdldENvbXB1dGVkU3R5bGUodGhpcylbcHJlZml4QW5pbWF0aW9uICsgJ2FuaW1hdGlvbi1kdXJhdGlvbiddID09ICcwcycpIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ29uQ1NTVHJhbnNpdGlvbkVuZCcsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBydW5PbmNlID0gZnVuY3Rpb24gcnVuT25jZShlKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS50eXBlLCBydW5PbmNlKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHJ1bk9uY2UpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdtb3pUcmFuc2l0aW9uRW5kJywgcnVuT25jZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ29UcmFuc2l0aW9uRW5kJywgcnVuT25jZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBydW5PbmNlKTtcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHJ1bk9uY2UpO1xuICAgICAgaWYgKHByZWZpeFRyYW5zaXRpb24gPT0gJycgJiYgISgndHJhbnNpdGlvbicgaW4gcykgfHwgZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzKVtwcmVmaXhUcmFuc2l0aW9uICsgJ3RyYW5zaXRpb24tZHVyYXRpb24nXSA9PSAnMHMnKSBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcbn0pKGRvY3VtZW50LCB3aW5kb3csIDApO1xuXG4vKipcbiAqICBBQ0NPUkRJT05cbiAqXG4gKiBBIGxpZ2h0d2lnaHQgdmFuaWxsYSBKUyBhY2NvcmRpb24gd2l0aCBhbiBleHN0ZW5zaWJsZSBBUElcbiAqL1xuLy8gaW1wb3J0IHV1aWQgZnJvbSAndXVpZC92NCc7XG4vLyBjb25zdCB1dWlkVjQgPSB1dWlkO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuLyoqXG4gKiBDT05TVFJVQ1RPUlxuICogSW5pdGlhbGl6ZXMgdGhlIG9iamVjdFxuICovXG5cbnZhciBCYWRnZXJBY2NvcmRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYWRnZXJBY2NvcmRpb24oZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYWRnZXJBY2NvcmRpb24pO1xuXG4gICAgdmFyIGNvbnRhaW5lciA9IHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKSA6IGVsOyAvLyBJZiBlbCBpcyBub3QgZGVmaW5lZFxuXG4gICAgaWYgKGNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgaGVhZGVyQ2xhc3M6ICcuanMtYmFkZ2VyLWFjY29yZGlvbi1oZWFkZXInLFxuICAgICAgcGFuZWxDbGFzczogJy5qcy1iYWRnZXItYWNjb3JkaW9uLXBhbmVsJyxcbiAgICAgIHBhbmVsSW5uZXJDbGFzczogJy5qcy1iYWRnZXItYWNjb3JkaW9uLXBhbmVsLWlubmVyJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnLWJhLWlzLWhpZGRlbicsXG4gICAgICBhY3RpdmVDbGFzczogJy1iYS1pcy1hY3RpdmUnLFxuXG4gICAgICBnZXQgaGlkZW5DbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlkZGVuQ2xhc3M7XG4gICAgICB9LFxuXG4gICAgICBpbml0aWFsaXplZENsYXNzOiAnYmFkZ2VyLWFjY29yZGlvbi0taW5pdGlhbGl6ZWQnLFxuXG4gICAgICBnZXQgaW5pdGFsaXNlZENsYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplZENsYXNzO1xuICAgICAgfSxcblxuICAgICAgaGVhZGVyRGF0YUF0dHI6ICdkYXRhLWJhZGdlci1hY2NvcmRpb24taGVhZGVyLWlkJyxcbiAgICAgIG9wZW5NdWx0aXBsZVBhbmVsczogZmFsc2UsXG4gICAgICBvcGVuSGVhZGVyc09uTG9hZDogW10sXG4gICAgICBhZGRMaXN0ZW5lcnNPbkluaXQ6IHRydWUsXG4gICAgICBoZWFkZXJPcGVuTGFiZWw6ICcnLFxuICAgICAgaGVhZGVyQ2xvc2VMYWJlbDogJycsXG4gICAgICByb2xlczogdHJ1ZSAvLyB0b2dnbGVFbDogICAgICAgICAgICAvLyBJZiB5b3Ugd2FudCB0byB1c2UgYSBkaWZmZXJlbnQgZWxlbWVudCB0byB0cmlnZ2VyIHRoZSBhY2NvcmRpb25cblxuICAgIH07IC8vIE9wdGlvbnNcblxuICAgIHRoaXMuc2V0dGluZ3MgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdHMsIG9wdGlvbnMpOyAvLyBTZXR0aW5nIGdldHRpbmcgZWxlbWVudHNcblxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyOyAvLyBTZWxlY3RpbmcgY2hpbGRyZW4gb2YgdGhlIGN1cnJlbnQgYWNjb3JkaW9uIGluc3RhbmNlXG5cbiAgICB2YXIgY2hpbGRyZW4gPSBBcnJheS5mcm9tKHRoaXMuY29udGFpbmVyLmNoaWxkcmVuKTsgLy8gU2luY2UgdGhlIEFjY29yZGlvbnMgaGVhZGVyIGJ1dHRvbiBpcyBuZXN0ZWQgaW5zaWRlIGFuIGVsZW1lbnQgd2l0aCBjbGFzc1xuICAgIC8vIG9mIGBiYWRnZXItYWNjb3JkaW9uX19oZWFkZXJgIGl0IGlzIGEgZ3JhbmRjaGlsZCBvZiB0aGUgYWNjb3JkaW9uIGluc3RhbmNlLlxuICAgIC8vIEluIG9yZGVyIHRvIGhhdmUgbmVzdGVkIGFjY29yZGlvbnMgd2UgbmVlZCBlYWNoIHRvIG9ubHkgZ2V0IGFsbCB0aGUgYnV0dG9uXG4gICAgLy8gZWxlbWVudHMgZm9yIHRoaXMgaW5zdGFuY2UuIEhlcmUgYW4gYXJyYXkgaXMgY3JlYXRlZCB0byBzaG93IGFsbCB0aGUgY2hpbGRyZW5cbiAgICAvLyBvZiB0aGUgZWxlbWVudCBgYmFkZ2VyLWFjY29yZGlvbl9faGVhZGVyYC5cblxuICAgIHZhciBoZWFkZXJQYXJlbnQgPSBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGhlYWRlcikge1xuICAgICAgcmV0dXJuICFoZWFkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKF90aGlzMi5zZXR0aW5ncy5wYW5lbENsYXNzLnN1YnN0cigxKSk7XG4gICAgfSk7IC8vIENyZWF0aW5nIGFuIGFycmF5IG9mIGFsbCBET00gbm9kZXMgdGhhdCBhcmUgQWNjb3JkaW9uIGhlYWRlcnNcblxuICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlclBhcmVudC5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgaGVhZGVyKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgLy8gR2V0cyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgaGF2ZSB0aGUgaGVhZGVyQ2xhc3NcbiAgICAgIHZhciBhID0gQXJyYXkuZnJvbShoZWFkZXIuY2hpbGRyZW4pLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLmNsYXNzTGlzdC5jb250YWlucyhfdGhpczIuc2V0dGluZ3MuaGVhZGVyQ2xhc3Muc3Vic3RyKDEpKTtcbiAgICAgIH0pOyAvLyBNZXJnZXMgdGhlIGN1cnJlbnQgYGJhZGdlci1hY2NvcmRpb25fX2hlYWRlcmAgYWNjb3JkaW9uIHRyaWdnZXJzXG4gICAgICAvLyB3aXRoIGFsbCB0aGUgb3RoZXJzLlxuXG4gICAgICBhY2MgPSAoX3JlZiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZiwgX3RvQ29uc3VtYWJsZUFycmF5KGFjYykuY29uY2F0KFthXSkpO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7IC8vIENyZWF0ZXMgYW4gYXJyYXkgb2YgYWxsIHBhbmVsIGVsZW1lbnRzIGZvciB0aGlzIGluc3RhbmNlIG9mIHRoZSBhY2NvcmRpb25cblxuICAgIHRoaXMucGFuZWxzID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChwYW5lbCkge1xuICAgICAgcmV0dXJuIHBhbmVsLmNsYXNzTGlzdC5jb250YWlucyhfdGhpczIuc2V0dGluZ3MucGFuZWxDbGFzcy5zdWJzdHIoMSkpO1xuICAgIH0pO1xuICAgIHRoaXMudG9nZ2xlRWwgPSB0aGlzLnNldHRpbmdzLnRvZ2dsZUVsICE9PSB1bmRlZmluZWQgPyBBcnJheS5mcm9tKHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zZXR0aW5ncy50b2dnbGVFbCkpIDogdGhpcy5oZWFkZXJzOyAvLyBUaGlzIGlzIGZvciBtYW5hZ2luZyBzdGF0ZSBvZiB0aGUgYWNjb3JkaW9uLiBJdCBieSBkZWZhdWx0IHNldHNcbiAgICAvLyBhbGwgYWNjb3JkaW9uIHBhbmVscyB0byBiZSBjbG9zZWRcblxuICAgIHRoaXMuc3RhdGVzID0gW10ubWFwLmNhbGwodGhpcy5oZWFkZXJzLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZTogJ2Nsb3NlZCdcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy5pZHMgPSBbXS5tYXAuY2FsbCh0aGlzLmhlYWRlcnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwICsgMSlcbiAgICAgIH07XG4gICAgfSk7IC8vIFRoaXMgaXMgdG8gZW5zdXJlIHRoYXQgb25jZSBhbiBvcGVuL2Nsb3NlIGV2ZW50IGhhcyBiZWVuIGZpcmVkXG4gICAgLy8gYW5vdGhlciBjYW5ub3Qgc3RhcnQgdW50aWwgdGhlIGZpcnN0IGV2ZW50IGhhcyBmaW5pc2hlZC5cbiAgICAvLyBAVE9ETyAtIGdldCB0aGlzIHdvcmtpbmcuLi5cblxuICAgIHRoaXMudG9nZ2xpbmcgPSBmYWxzZTsgLy8gSW5pdGlhdGluZyB0aGUgYWNjb3JkaW9uXG5cbiAgICBpZiAodGhpcy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICBjb25zb2xlLmxvZygnU29tZXRoaW5nIGlzIHdyb25nIHdpdGggeW91IG1hcmt1cC4uLicpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogIElOSVRcbiAgICpcbiAgICogIEluaXRhbGlzZXMgdGhlIGFjY29yZGlvblxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhCYWRnZXJBY2NvcmRpb24sIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIC8vIFNldHMgdXAgSUQsIGFyaWEgYXR0cnMgJiBkYXRhLWF0dHJzXG4gICAgICB0aGlzLl9zZXR1cEF0dHJpYnV0ZXMoKTsgLy8gU2V0dGluZyB1cCB0aGUgaW5pdGFsIHZpZXcgb2YgdGhlIGFjY29yZGlvblxuXG5cbiAgICAgIHRoaXMuX2luaXRhbFN0YXRlKCk7IC8vIFNldHRpbmcgdGhlIGhlaWdodCBvZiBlYWNoIHBhbmVsXG5cblxuICAgICAgdGhpcy5jYWxjdWxhdGVBbGxQYW5lbHNIZWlnaHQoKTsgLy8gSW5zZXJ0aW5nIGRhdGEtYXR0cmlidXRlIG9udG8gZWFjaCBgaGVhZGVyYFxuXG4gICAgICB0aGlzLl9pbnNlcnREYXRhQXR0cnMoKTsgLy8gQWRkaW5nIGxpc3RlbmVycyB0byBoZWFkZXJzXG5cblxuICAgICAgdGhpcy5fYWRkTGlzdGVuZXJzKCk7IC8vIEFkZHMgY2xhc3MgdG8gYWNjb3JkaW9uIGZvciBpbml0YWxpc2F0aW9uXG5cblxuICAgICAgdGhpcy5fZmluaXNoSW5pdGlhbGl6YXRpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ0hFQ0sgUk9MRVMgRVRUSU5HXG4gICAgICogQHJldHVybiB7W2Jvb2xlYW5dfVxuICAgICAqIENoZWNrcyByb2xlcyBzZXR0aW5nIGZvciBhbGwgcm9sZXMgb3IgYSBzaW5nbGUgcm9sZS5cbiAgICAgKiBGaXJzdCBjaGVja3MgaWYgYSBgYm9vbGVhbmAgaGFzIGJlZW4gdXNlZCB0byBzZXQgYWxsXG4gICAgICogcm9sZXMgdG8gZWl0aGVyIHRydWUgb3IgZmFsc2UuIElmIHRoZSBzZXR0aW5nIGlzIGFuXG4gICAgICogb2JqZWN0IGl0IHdpbGwgb25seSBzZXQgdGhlIGF0dHJpYnV0ZSB3aGVyZSBlYWNoXG4gICAgICogYXR0cmlidXRlIGhhcyBleHBsaWNpdGx5IGJlZW4gc2V0IGFzIHRydWUsIGVnO1xuICAgICAqIGBgYFxuICAgICAqIHJvbGVzOiB7XG4gICAgICogICAgIHJlZ2lvbjogdHJ1ZVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRSb2xlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRSb2xlKHJvbGUsIGVsKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuc2V0dGluZ3Mucm9sZXMgPT09ICdib29sZWFuJyAmJiB0aGlzLnNldHRpbmdzLnJvbGVzIHx8IHRoaXMuc2V0dGluZ3Mucm9sZXNbcm9sZV0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLnNldHRpbmdzLnJvbGVzW3JvbGVdICE9PSBmYWxzZSkge1xuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCByb2xlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogIElOU0VSVCBEQVRBIEFUVFJTXG4gICAgICpcbiAgICAgKiAgVXBkYXRlcyBzdGF0ZSBvYmplY3QgZm9yIGluaXRhbCBsb2FkaW5nIG9mIHRoZSBhY2NvcmRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9pbml0YWxTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGFsU3RhdGUoKSB7XG4gICAgICAvLyBTZXRzIHN0YXRlIG9iamVjdCBhcyBwZXIgYHRoaXMuc2V0dGluZ3Mub3BlbkhlYWRlcnNPbkxvYWRgXG4gICAgICB2YXIgaGVhZGVyc1RvT3BlbiA9IHRoaXMuc2V0dGluZ3Mub3BlbkhlYWRlcnNPbkxvYWQ7XG5cbiAgICAgIGlmIChoZWFkZXJzVG9PcGVuLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9vcGVuSGVhZGVyc09uTG9hZChoZWFkZXJzVG9PcGVuKTtcbiAgICAgIH0gLy8gUmVuZGVyIERPTSBhcyBwZXIgdGhlIHVwZGF0ZXMgYHRoaXMuc3RhdGVzYCBvYmplY3RcblxuXG4gICAgICB0aGlzLl9yZW5kZXJEb20oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIElOU0VSVCBEQVRBIEFUVFJTXG4gICAgICpcbiAgICAgKiAgQWRkcyBgaGVhZGVyRGF0YUF0dHJgIHRvIGFsbCBoZWFkZXJzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfaW5zZXJ0RGF0YUF0dHJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbnNlcnREYXRhQXR0cnMoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlciwgaW5kZXgpIHtcbiAgICAgICAgaGVhZGVyLnNldEF0dHJpYnV0ZShfdGhpczMuc2V0dGluZ3MuaGVhZGVyRGF0YUF0dHIsIGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgRklOSVNIIElOSVRBTElTQVRJT05cbiAgICAgKlxuICAgICAqICBBZGRzIGluIGBpbml0aWFsaXplZENsYXNzYCB0byBhY2NvcmRpb25cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9maW5pc2hJbml0aWFsaXphdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluaXNoSW5pdGlhbGl6YXRpb24oKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHRoaXMuc2V0dGluZ3MuaW5pdGlhbGl6ZWRDbGFzcyk7XG5cbiAgICAgIHRoaXMuX3NldFJvbGUoJ3ByZXNlbnRhdGlvbicsIHRoaXMuY29udGFpbmVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEFERCBMSVNURU5FUlNcbiAgICAgKlxuICAgICAqICBBZGRzIGNsaWNrIGV2ZW50IHRvIGVhY2ggaGVhZGVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfYWRkTGlzdGVuZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRMaXN0ZW5lcnMoKSB7XG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuYWRkTGlzdGVuZXJzT25Jbml0KSByZXR1cm47IC8vIFNvIHdlIGNhbiByZWZlcmVuY2UgdGhlIGJhZGdlci1hY2NvcmRpb24gb2JqZWN0IGluc2lkZSBvdXQgZXZlbnRMaXN0ZW5lclxuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzOyAvLyBBZGRpbmcgY2xpY2sgZXZlbnQgdG8gYWNjb3JkaW9uXG5cblxuICAgICAgdGhpcy5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGhlYWRlciwgaW5kZXgpIHtcbiAgICAgICAgaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHRhcmdldCBvZiB0aGUgY2xpY2tcbiAgICAgICAgICAvLyBjb25zdCBjbGlja2VkRWwgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2soaGVhZGVyLCBpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBIQU5ETEUgQ0xJQ0tcbiAgICAgKlxuICAgICAqICBIYW5kbGVzIGNsaWNrIGFuZCBjaGVja3MgaWYgY2xpY2sgd2FzIG9uIGFuIGhlYWRlciBlbGVtZW50XG4gICAgICogIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRIZWFkZXIgLSBUaGUgaGVhZGVyIG5vZGUgeW91IHdhbnQgdG8gb3BlblxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFuZGxlQ2xpY2tcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlQ2xpY2sodGFyZ2V0SGVhZGVyLCBoZWFkZXJJbmRleCkge1xuICAgICAgLy8gUmVtb3ZpbmcgY3VycmVudCBgLmAgZnJvbSBgdGhpcy5zZXR0aW5ncy5oZWFkZXJDbGFzc2AgY2xhc3Mgc28gaXQgY2FuXG4gICAgICAvLyBiZSBjaGVja2VkIGFnYWluc3QgdGhlIGB0YXJnZXRIZWFkZXJgIGNsYXNzTGlzdFxuICAgICAgdmFyIHRhcmdldEhlYWRlckNsYXNzID0gdGhpcy5zZXR0aW5ncy5oZWFkZXJDbGFzcy5zdWJzdHIoMSk7IC8vIENoZWNraW5nIHRoYXQgdGhlIHRoaW5nIHRoYXQgd2FzIGNsaWNrZWQgb24gd2FzIHRoZSBhY2NvcmRpb25zIGhlYWRlclxuXG4gICAgICBpZiAodGFyZ2V0SGVhZGVyLmNsYXNzTGlzdC5jb250YWlucyh0YXJnZXRIZWFkZXJDbGFzcykgJiYgdGhpcy50b2dnbGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy50b2dnbGluZyA9IHRydWU7IC8vIFVwZGF0aW5nIHN0YXRlc1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoaGVhZGVySW5kZXgpOyAvLyBSZW5kZXIgRE9NIGFzIHBlciB0aGUgdXBkYXRlcyBgdGhpcy5zdGF0ZXNgIG9iamVjdFxuXG4gICAgICAgIHRoaXMuX3JlbmRlckRvbSgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU0VUIFNUQVRFU1xuICAgICAqXG4gICAgICogIFNldHMgdGhlIHN0YXRlIGZvciBhbGwgaGVhZGVycy4gVGhlICd0YXJnZXQgaGVhZGVyJyB3aWxsIGhhdmUgaXRzIHN0YXRlIHRvZ2dlbGVkXG4gICAgICogIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRIZWFkZXJJZCAtIFRoZSBoZWFkZXIgbm9kZSB5b3Ugd2FudCB0byBvcGVuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzZXRTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdGF0ZSh0YXJnZXRIZWFkZXJJZCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBzdGF0ZXMgPSB0aGlzLmdldFN0YXRlKCk7IC8vIElmIGB0aGlzLnNldHRpbmdzLm9wZW5NdWx0aXBsZVBhbmVsc2AgaXMgZmFsc2Ugd2UgbmVlZCB0byBlbnN1cmUgb25seSBvbmUgcGFuZWxcbiAgICAgIC8vIGJlIGNhbiBvcGVuIGF0IG9uY2UuIElmIGl0IGlzIGZhbHNlIHRoZW4gYWxsIHBhbmVscyBzdGF0ZSBBUEFSVCBmcm9tIHRoZSBvbmUgdGhhdFxuICAgICAgLy8gaGFzIGp1c3QgYmVlbiBjbGlja2VkIG5lZWRzIHRvIGJlIHNldCB0byAnY2xvc2VkJy5cblxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLm9wZW5NdWx0aXBsZVBhbmVscykge1xuICAgICAgICBzdGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChzdGF0ZSwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5kZXggIT0gdGFyZ2V0SGVhZGVySWQpIHtcbiAgICAgICAgICAgIHN0YXRlLnN0YXRlID0gJ2Nsb3NlZCc7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gLy8gVG9nZ2xlcyB0aGUgc3RhdGUgdmFsdWUgb2YgdGhlIHRhcmdldCBoZWFkZXIuIFRoaXMgd2FzIGBhcnJheS5maW5kYCBidXQgYGZpbmRgXG4gICAgICAvLyBpc250IHN1cHBvcnRlZCBpbiBJRTExXG5cblxuICAgICAgc3RhdGVzLmZpbHRlcihmdW5jdGlvbiAoc3RhdGUsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PSB0YXJnZXRIZWFkZXJJZCkge1xuICAgICAgICAgIHZhciBuZXdTdGF0ZSA9IF90aGlzNC50b2dnbGVTdGF0ZShzdGF0ZS5zdGF0ZSk7XG5cbiAgICAgICAgICByZXR1cm4gc3RhdGUuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBSRU5ERVIgRE9NXG4gICAgICpcbiAgICAgKiAgUmVuZGVycyB0aGUgYWNjb3JkaW9uIGluIHRoZSBET00gdXNpbmcgdGhlIGB0aGlzLnN0YXRlc2Agb2JqZWN0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfcmVuZGVyRG9tXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW5kZXJEb20oKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgLy8gRmlsdGVyIHRocm91Z2ggYWxsIG9wZW4gaGVhZGVycyBhbmQgb3BlbiB0aGVtXG4gICAgICB0aGlzLnN0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKHN0YXRlLCBpbmRleCkge1xuICAgICAgICBpZiAoc3RhdGUuc3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICAgIC8vIE9wZW5pbmcgdGhlIGN1cnJlbnQgcGFuZWwgYnV0IF9OT1RfIHVwZGF0aW5nIHRoZSBzdGF0ZVxuICAgICAgICAgIF90aGlzNS5vcGVuKGluZGV4LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBGaWx0ZXIgdGhyb3VnaCBhbGwgY2xvc2VkIGhlYWRlcnMgYW5kIGNsb3NlcyB0aGVtXG5cbiAgICAgIHRoaXMuc3RhdGVzLmZpbHRlcihmdW5jdGlvbiAoc3RhdGUsIGluZGV4KSB7XG4gICAgICAgIGlmIChzdGF0ZS5zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcbiAgICAgICAgICAvLyBDbG9zaW5nIHRoZSBjdXJyZW50IHBhbmVsIGJ1dCBfTk9UXyB1cGRhdGluZyB0aGUgc3RhdGVcbiAgICAgICAgICBfdGhpczUuY2xvc2UoaW5kZXgsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBPUEVOXG4gICAgICpcbiAgICAgKiAgQ2xvc2VzIGEgc3BlY2lmaWMgcGFuZWxcbiAgICAgKiAgQHBhcmFtIHtpbnRlZ2VyfSBoZWFkZXJJbmRleCAtIFRoZSBoZWFkZXIgbm9kZSBpbmRleCB5b3Ugd2FudCB0byBvcGVuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvcGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW4oaGVhZGVySW5kZXgpIHtcbiAgICAgIHZhciBzZXRTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICAgICAgLy8gMS4gSWYgYmVpbmcgZmlyZWQgZGlyZWN0bHkgdGhlIHN0YXRlIG5lZWRzIHRvIGJlIHVwZGF0ZWQuXG4gICAgICBpZiAoc2V0U3RhdGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShoZWFkZXJJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG9nZ2xlUGFuZWwoJ29wZW4nLCBoZWFkZXJJbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDTE9TRVxuICAgICAqXG4gICAgICogIENsb3NlcyBhIHNwZWNpZmljIHBhbmVsXG4gICAgICogIEBwYXJhbSB7aW50ZWdlcn0gaGVhZGVySW5kZXggLSBUaGUgaGVhZGVyIG5vZGUgaW5kZXggeW91IHdhbnQgdG8gY2xvc2VcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsb3NlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKGhlYWRlckluZGV4KSB7XG4gICAgICB2YXIgc2V0U3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICAgIC8vIDEuIElmIGJlaW5nIGZpcmVkIGRpcmVjdGx5IHRoZSBzdGF0ZSBuZWVkcyB0byBiZSB1cGRhdGVkLlxuICAgICAgaWYgKHNldFN0YXRlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoaGVhZGVySW5kZXgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRvZ2dsZVBhbmVsKCdjbG9zZWQnLCBoZWFkZXJJbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBPUEVOIEFMTFxuICAgICAqXG4gICAgICogIE9wZW5zIGFsbCBwYW5lbHNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9wZW5BbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbkFsbCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICB0aGlzLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyLCBoZWFkZXJJbmRleCkge1xuICAgICAgICBfdGhpczYudG9nZ2xlUGFuZWwoJ29wZW4nLCBoZWFkZXJJbmRleCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIENMT1NFIEFMTFxuICAgICAqXG4gICAgICogIENsb3NlcyBhbGwgcGFuZWxzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjbG9zZUFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZUFsbCgpIHtcbiAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICB0aGlzLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyLCBoZWFkZXJJbmRleCkge1xuICAgICAgICBfdGhpczcudG9nZ2xlUGFuZWwoJ2Nsb3NlZCcsIGhlYWRlckluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgR0VUIFNUQVRFXG4gICAgICpcbiAgICAgKiAgR2V0dGluZyBzdGF0ZSBvZiBoZWFkZXJzLiBCeSBkZWZhdWx0IGdldHMgc3RhdGUgb2YgYWxsIGhlYWRlcnNcbiAgICAgKiAgQHBhcmFtIHtzdHJpbmd9IGFuaW1hdGlvbkFjdGlvbiAtIFRoZSBhbmltYXRpb24geW91IHdhbnQgdG8gaW52b2tlXG4gICAgICogIEBwYXJhbSB7aW50ZWdlcn0gaGVhZGVySW5kZXggICAgLSBUaGUgaGVhZGVyIG5vZGUgaW5kZXggeW91IHdhbnQgdG8gYW5pbWF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9nZ2xlUGFuZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlUGFuZWwoYW5pbWF0aW9uQWN0aW9uLCBoZWFkZXJJbmRleCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIGlmIChhbmltYXRpb25BY3Rpb24gIT09IHVuZGVmaW5lZCAmJiBoZWFkZXJJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25BY3Rpb24gPT09ICdjbG9zZWQnKSB7XG4gICAgICAgICAgLy8gMS4gR2V0dGluZyBJRCBvZiBwYW5lbCB0aGF0IHdlIHdhbnQgdG8gY2xvc2VcbiAgICAgICAgICB2YXIgaGVhZGVyID0gdGhpcy5oZWFkZXJzW2hlYWRlckluZGV4XTtcbiAgICAgICAgICB2YXIgcGFuZWxUb0Nsb3NlID0gdGhpcy5wYW5lbHNbaGVhZGVySW5kZXhdOyAvLyAyLiBDbG9zZWluZyBwYW5lbFxuXG4gICAgICAgICAgcGFuZWxUb0Nsb3NlLmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5oaWRkZW5DbGFzcyk7IC8vIDMuIFJlbW92aW5nIGFjdGl2ZSBjbGFzc2VzXG5cbiAgICAgICAgICBwYW5lbFRvQ2xvc2UuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNldHRpbmdzLmFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNldHRpbmdzLmFjdGl2ZUNsYXNzKTsgLy8gNC4gU2V0IGFyaWEgYXR0cnNcblxuICAgICAgICAgIGhlYWRlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7IC8vIDUuIFJlc2V0dGluZyB0b2dnbGluZyBzbyBhIG5ldyBldmVudCBjYW4gYmUgZmlyZWRcblxuICAgICAgICAgIHBhbmVsVG9DbG9zZS5vbkNTU1RyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzOC50b2dnbGluZyA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGFuaW1hdGlvbkFjdGlvbiA9PT0gJ29wZW4nKSB7XG4gICAgICAgICAgLy8gMS4gR2V0dGluZyBJRCBvZiBwYW5lbCB0aGF0IHdlIHdhbnQgdG8gb3BlblxuICAgICAgICAgIHZhciBfaGVhZGVyID0gdGhpcy5oZWFkZXJzW2hlYWRlckluZGV4XTtcbiAgICAgICAgICB2YXIgcGFuZWxUb09wZW4gPSB0aGlzLnBhbmVsc1toZWFkZXJJbmRleF07IC8vIDIuIE9wZW5pbmcgcGFuZWxcblxuICAgICAgICAgIHBhbmVsVG9PcGVuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zZXR0aW5ncy5oaWRkZW5DbGFzcyk7IC8vIDMuIEFkZGluZyBhY3RpdmUgY2xhc3Nlc1xuXG4gICAgICAgICAgcGFuZWxUb09wZW4uY2xhc3NMaXN0LmFkZCh0aGlzLnNldHRpbmdzLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgICAgIF9oZWFkZXIuY2xhc3NMaXN0LmFkZCh0aGlzLnNldHRpbmdzLmFjdGl2ZUNsYXNzKTsgLy8gNC4gU2V0IGFyaWEgYXR0cnNcblxuXG4gICAgICAgICAgX2hlYWRlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTsgLy8gNS4gUmVzZXR0aW5nIHRvZ2dsaW5nIHNvIGEgbmV3IGV2ZW50IGNhbiBiZSBmaXJlZFxuXG5cbiAgICAgICAgICBwYW5lbFRvT3Blbi5vbkNTU1RyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzOC50b2dnbGluZyA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBAVE9ETyAtIGlzIHRoaXMgbmVlZGVkIGFueW1vcmU/XG4gICAgLy8gY2hlY2tTdGF0ZShoZWFkZXJJZCkge1xuICAgIC8vICAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlc1toZWFkZXJJZF0uc3RhdGU7XG4gICAgLy9cbiAgICAvLyAgICAgaWYoc3RhdGUgPT09ICdjbG9zZWQnKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgLy8gICAgIH0gZWxzZSBpZihzdGF0ZSA9PT0gJ29wZW4nKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICAvKipcbiAgICAgKiAgR0VUIFNUQVRFXG4gICAgICpcbiAgICAgKiAgR2V0dGluZyBzdGF0ZSBvZiBoZWFkZXJzLiBCeSBkZWZhdWx0IGdldHMgc3RhdGUgb2YgYWxsIGhlYWRlcnNcbiAgICAgKiAgQHBhcmFtIHthcnJheX0gaGVhZGVySWRzIC0gSWQvJ3Mgb2YgdGhlIGhlYWRlcnMgeW91IHdhbnQgdG8gY2hlY2tcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFN0YXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBoZWFkZXJJZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuXG4gICAgICBpZiAoaGVhZGVySWRzLmxlbmd0aCAmJiBBcnJheS5pc0FycmF5KGhlYWRlcklkcykpIHtcbiAgICAgICAgdmFyIHN0YXRlcyA9IGhlYWRlcklkcy5tYXAoZnVuY3Rpb24gKGhlYWRlcikge1xuICAgICAgICAgIHJldHVybiBfdGhpczkuc3RhdGVzW2hlYWRlcl07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3RhdGVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVzO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVE9HR0xFIFNUQVRFXG4gICAgICpcbiAgICAgKiAgVG9nZ2xpbmcgdGhlIHN0YXRlIHZhbHVlXG4gICAgICogIEBwYXJhbSB7c3RyaW5nfSBjdXJyZW50U3RhdGUgLSBDdXJyZW50IHN0YXRlIHZhbHVlIGZvciBhIGhlYWRlclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwidG9nZ2xlU3RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9nZ2xlU3RhdGUoY3VycmVudFN0YXRlKSB7XG4gICAgICBpZiAoY3VycmVudFN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZSA9PT0gJ2Nsb3NlZCcgPyAnb3BlbicgOiAnY2xvc2VkJztcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogIEhFQURFUlMgVE8gT1BFTlxuICAgICAqXG4gICAgICogIFNldHRpbmcgd2hpY2ggaGVhZGVycyBzaG91bGQgYmUgb3BlbiB3aGVuIGFjY29yZGlvbiBpcyBpbml0YWxpc2VkXG4gICAgICogIEBwYXJhbSB7YXJyYXl9IGhlYWRlcnNUb09wZW4gLSBBcnJheSBvZiBJRCdzIGZvciB0aGUgaGVhZGVycyB0byBiZSBvcGVuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfb3BlbkhlYWRlcnNPbkxvYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29wZW5IZWFkZXJzT25Mb2FkKCkge1xuICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICB2YXIgaGVhZGVyc1RvT3BlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgICAgIGlmIChoZWFkZXJzVG9PcGVuLmxlbmd0aCAmJiBBcnJheS5pc0FycmF5KGhlYWRlcnNUb09wZW4pKSB7XG4gICAgICAgIHZhciBoZWFkZXJzID0gaGVhZGVyc1RvT3Blbi5maWx0ZXIoZnVuY3Rpb24gKGhlYWRlcikge1xuICAgICAgICAgIHJldHVybiBoZWFkZXIgIT0gdW5kZWZpbmVkO1xuICAgICAgICB9KTtcbiAgICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcbiAgICAgICAgICBfdGhpczEwLnNldFN0YXRlKGhlYWRlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgU0VUIFVQIEFUVFJJQlVURVNcbiAgICAgKlxuICAgICAqICBJbml0YWxpc2VzIGFjY29yZGlvbiBhdHRyaWJ1dGUgbWV0aG9kc1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3NldHVwQXR0cmlidXRlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXBBdHRyaWJ1dGVzKCkge1xuICAgICAgLy8gQWRkaW5nIElEICYgYXJpYS1jb250cm9sc1xuICAgICAgdGhpcy5fc2V0dXBIZWFkZXJzKCk7IC8vIEFkZGluZyBJRCAmIGFyaWEtbGFiZWxsZWRieVxuXG5cbiAgICAgIHRoaXMuX3NldHVwUGFuZWxzKCk7IC8vIEluc2VydGluZyBkYXRhLWF0dHJpYnV0ZSBvbnRvIGVhY2ggYGhlYWRlcmBcblxuXG4gICAgICB0aGlzLl9pbnNlcnREYXRhQXR0cnMoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIFNFVCBQQU5FTCBIRUlHSFQgLSAqKiBERVBSSUNBVEVEICoqXG4gICAgICpcbiAgICAgKiAgRGVwcmVpY2F0ZWQgYXMgdGhpcyBtZXRob2QgaXMgYmVjb21pbmcgcHVibGljIGFuZFxuICAgICAqICBJIHdhbnQgdG8gbmFtZSBpdCBzb21ldGhpbmcgdGhhdCBsZXRzIGRldnMga25vd1xuICAgICAqICBpdCdzIG5vdCBqdXN0IGZvciB1c2luZyBpbnNpZGUgdGhlIGBpbml0KClgIG1ldGhvZC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9zZXRQYW5lbEhlaWdodFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UGFuZWxIZWlnaHQoKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZUFsbFBhbmVsc0hlaWdodCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgQ0FMQ1VMQVRFIFBBTkVMIEhFSUdIVFxuICAgICAqXG4gICAgICogIFNldHRpbmcgaGVpZ2h0IGZvciBwYW5lbHMgdXNpbmcgcGFubmVscyBpbm5lciBlbGVtZW50XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjYWxjdWxhdGVQYW5lbEhlaWdodFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVQYW5lbEhlaWdodChwYW5lbCkge1xuICAgICAgdmFyIHBhbmVsSW5uZXIgPSBwYW5lbC5xdWVyeVNlbGVjdG9yKHRoaXMuc2V0dGluZ3MucGFuZWxJbm5lckNsYXNzKTtcbiAgICAgIHZhciBhY3RpdmVIZWlnaHQgPSBwYW5lbElubmVyLm9mZnNldEhlaWdodDtcbiAgICAgIHJldHVybiBwYW5lbC5zdHlsZS5tYXhIZWlnaHQgPSBcIlwiLmNvbmNhdChhY3RpdmVIZWlnaHQsIFwicHhcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBDQUxDVUxBVEUgUEFORUwgSEVJR0hUXG4gICAgICpcbiAgICAgKiAgU2V0dGluZyBoZWlnaHQgZm9yIHBhbmVscyB1c2luZyBwYW5uZWxzIGlubmVyIGVsZW1lbnRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNhbGN1bGF0ZUFsbFBhbmVsc0hlaWdodFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjdWxhdGVBbGxQYW5lbHNIZWlnaHQoKSB7XG4gICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgIHRoaXMucGFuZWxzLmZvckVhY2goZnVuY3Rpb24gKHBhbmVsKSB7XG4gICAgICAgIF90aGlzMTEuY2FsY3VsYXRlUGFuZWxIZWlnaHQocGFuZWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNFVCBVUCBIRUFERVJTXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJfc2V0dXBIZWFkZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cEhlYWRlcnMoKSB7XG4gICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIsIGluZGV4KSB7XG4gICAgICAgIGhlYWRlci5zZXRBdHRyaWJ1dGUoJ2lkJywgXCJiYWRnZXItYWNjb3JkaW9uLWhlYWRlci1cIi5jb25jYXQoX3RoaXMxMi5pZHNbaW5kZXhdLmlkKSk7XG4gICAgICAgIGhlYWRlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCBcImJhZGdlci1hY2NvcmRpb24tcGFuZWwtXCIuY29uY2F0KF90aGlzMTIuaWRzW2luZGV4XS5pZCkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNFVCBVUCBQQU5FTFNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9zZXR1cFBhbmVsc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0dXBQYW5lbHMoKSB7XG4gICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgIHRoaXMucGFuZWxzLmZvckVhY2goZnVuY3Rpb24gKHBhbmVsLCBpbmRleCkge1xuICAgICAgICBwYW5lbC5zZXRBdHRyaWJ1dGUoJ2lkJywgXCJiYWRnZXItYWNjb3JkaW9uLXBhbmVsLVwiLmNvbmNhdChfdGhpczEzLmlkc1tpbmRleF0uaWQpKTtcbiAgICAgICAgcGFuZWwuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCBcImJhZGdlci1hY2NvcmRpb24taGVhZGVyLVwiLmNvbmNhdChfdGhpczEzLmlkc1tpbmRleF0uaWQpKTtcblxuICAgICAgICBpZiAoX3RoaXMxMy5zZXR0aW5ncy5yb2xlcyA9PT0gdHJ1ZSB8fCBfdGhpczEzLnNldHRpbmdzLnJvbGVzLnJlZ2lvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBfdGhpczEzLl9zZXRSb2xlKCdyZWdpb24nLCBwYW5lbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCYWRnZXJBY2NvcmRpb247XG59KCk7IC8vIEV4cG9ydFxuXG5leHBvcnQgZGVmYXVsdCBCYWRnZXJBY2NvcmRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWRnZXItYWNjb3JkaW9uLmVzbS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtnc2FwfSBmcm9tICdnc2FwJztcbmltcG9ydCB7U2Nyb2xsVHJpZ2dlcn0gZnJvbSAnZ3NhcC9TY3JvbGxUcmlnZ2VyJztcblxuICBmdW5jdGlvbiBhbmltYXRlRnJvbShlbGVtLCBkaXJlY3Rpb24pIHtcbiAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgMTtcbiAgICB2YXIgeCA9IDAsXG4gICAgICAgIHkgPSBkaXJlY3Rpb24gKiAxMDA7XG4gICAgaWYoZWxlbS5jbGFzc0xpc3QuY29udGFpbnMoXCJnc19yZXZlYWxfZnJvbUxlZnRcIikpIHtcbiAgICAgIHggPSAtMTAwO1xuICAgICAgeSA9IDA7XG4gICAgfSBlbHNlIGlmIChlbGVtLmNsYXNzTGlzdC5jb250YWlucyhcImdzX3JldmVhbF9mcm9tUmlnaHRcIikpIHtcbiAgICAgIHggPSAxMDA7XG4gICAgICB5ID0gMDtcbiAgICB9XG4gICAgZWxlbS5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiO1xuICAgIGVsZW0uc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xuICAgIGdzYXAuZnJvbVRvKGVsZW0sIHt4OiB4LCB5OiB5LCBhdXRvQWxwaGE6IDB9LCB7XG4gICAgICBkdXJhdGlvbjogMS4yNSwgXG4gICAgICB4OiAwLFxuICAgICAgeTogMCwgXG4gICAgICBhdXRvQWxwaGE6IDEsIFxuICAgICAgZWFzZTogXCJleHBvXCIsIFxuICAgICAgb3ZlcndyaXRlOiBcImF1dG9cIlxuICAgIH0pO1xuICB9XG4gIFxuICBmdW5jdGlvbiBoaWRlKGVsZW0pIHtcbiAgICBnc2FwLnNldChlbGVtLCB7YXV0b0FscGhhOiAwfSk7XG4gIH1cbiAgXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uKCkge1xuICAgIGdzYXAucmVnaXN0ZXJQbHVnaW4oU2Nyb2xsVHJpZ2dlcik7XG5cbiAgICBjb25zdCBzY3JvbGxVcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXInKTtcblxuICAgIFNjcm9sbFRyaWdnZXIuY3JlYXRlKHtcbiAgICAgIHN0YXJ0OiAndG9wIC0xMDAnLFxuICAgICAgZW5kOiA5OTk5OSxcbiAgICAgIHRvZ2dsZUNsYXNzOiB7Y2xhc3NOYW1lOiAnaGVhZGVyLS1zY3JvbGxlZCcsIHRhcmdldHM6ICcuaGVhZGVyJ31cbiAgICB9KTtcbiAgICBcbiAgICBTY3JvbGxUcmlnZ2VyLmNyZWF0ZSh7XG4gICAgICBzdGFydDogJ3RvcCAtMzAwJyxcbiAgICAgIGVuZDogOTk5OTksXG4gICAgICB0b2dnbGVDbGFzczoge2NsYXNzTmFtZTogJ2hlYWRlci0tdXAnLCB0YXJnZXRzOiAnLmhlYWRlcid9LFxuICAgICAgb25VcGRhdGU6IChvYmopID0+IHtcbiAgICAgICAgaWYgKG9iai5kaXJlY3Rpb24gPT0gLTEpIHtcbiAgICAgICAgICBzY3JvbGxVcC5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXItLXVwJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2Nyb2xsVXAuY2xhc3NMaXN0LmFkZCgnaGVhZGVyLS11cCcpO1xuICAgICAgICB9fVxuICAgIH0pO1xuICAgIFxuICAgIGdzYXAudXRpbHMudG9BcnJheShcIi5nc19yZXZlYWxcIikuZm9yRWFjaChmdW5jdGlvbihlbGVtKSB7XG4gICAgICBoaWRlKGVsZW0pOyAvLyBhc3N1cmUgdGhhdCB0aGUgZWxlbWVudCBpcyBoaWRkZW4gd2hlbiBzY3JvbGxlZCBpbnRvIHZpZXdcbiAgICAgIFxuICAgICAgU2Nyb2xsVHJpZ2dlci5jcmVhdGUoe1xuICAgICAgICB0cmlnZ2VyOiBlbGVtLFxuICAgICAgICBvbkVudGVyOiBmdW5jdGlvbigpIHsgYW5pbWF0ZUZyb20oZWxlbSkgfSwgXG4gICAgICAgIG9uRW50ZXJCYWNrOiBmdW5jdGlvbigpIHsgYW5pbWF0ZUZyb20oZWxlbSwgLTEpIH0sXG4gICAgICAgIC8vIG9uTGVhdmU6IGZ1bmN0aW9uKCkgeyBoaWRlKGVsZW0pIH0gLy8gYXNzdXJlIHRoYXQgdGhlIGVsZW1lbnQgaXMgaGlkZGVuIHdoZW4gc2Nyb2xsZWQgaW50byB2aWV3XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gICIsImltcG9ydCBCYWRnZXJBY2NvcmRpb24gZnJvbSAnYmFkZ2VyLWFjY29yZGlvbic7XHJcblxyXG5cclxuXHJcbmNvbnN0IGFjY29yZGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtYmFkZ2VyLWFjY29yZGlvbicpO1xyXG5cclxuQXJyYXkuZnJvbShhY2NvcmRpb25zKS5mb3JFYWNoKChhY2NvcmRpb24pID0+IHtcclxuICAgIGNvbnN0IGJhID0gbmV3IEJhZGdlckFjY29yZGlvbihhY2NvcmRpb24pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGJhLmdldFN0YXRlKFswXSkpO1xyXG59KTtcclxuXHJcblxyXG57XHJcbiAgLy9jb25zdCBzd2lwZXJPbmUgPSBuZXcgU3dpcGVyKCcuc2xpZGVyJywge2xvb3A6ZmFsc2V9KVxyXG4gICAgXHJcbiAgLy8gQ3JlYXRpbmcgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGFjY29yZGlvblxyXG4gIGNvbnN0IGFjY29yZGlvbkRvbU5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtYmFkZ2VyLWFjY29yZGlvbicpO1xyXG5cclxuICBjb25zdCBhY2NvcmRpb24gPSBuZXcgQmFkZ2VyQWNjb3JkaW9uKGFjY29yZGlvbkRvbU5vZGUpO1xyXG4gIHdpbmRvdy5hY2NvcmRpb24gPSBhY2NvcmRpb247XHJcblxyXG5cclxuICBjb25zdCBjYXJkUHJvZHVjdHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNhcmQtcHJvZHVjdCcpXTtcclxuXHJcbiAgZm9yIChsZXQgY2FyZFByb2R1Y3Qgb2YgY2FyZFByb2R1Y3RzKSB7XHJcbiAgICBjYXJkUHJvZHVjdC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsICgpID0+IHtcclxuICAgICAgY2FyZFByb2R1Y3QuY2xhc3NMaXN0LnRvZ2dsZSgnY2FyZC1wcm9kdWN0LWpzJyk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbn1cclxuXHJcblxyXG5cclxuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShuKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbnZhciBNaWNyb01vZGFsID0gZnVuY3Rpb24gKCkge1xuXG4gIHZhciBGT0NVU0FCTEVfRUxFTUVOVFMgPSBbJ2FbaHJlZl0nLCAnYXJlYVtocmVmXScsICdpbnB1dDpub3QoW2Rpc2FibGVkXSk6bm90KFt0eXBlPVwiaGlkZGVuXCJdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAnc2VsZWN0Om5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAndGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKScsICdidXR0b246bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKScsICdpZnJhbWUnLCAnb2JqZWN0JywgJ2VtYmVkJywgJ1tjb250ZW50ZWRpdGFibGVdJywgJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleF49XCItXCJdKSddO1xuXG4gIHZhciBNb2RhbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWwoX3JlZikge1xuICAgICAgdmFyIHRhcmdldE1vZGFsID0gX3JlZi50YXJnZXRNb2RhbCxcbiAgICAgICAgICBfcmVmJHRyaWdnZXJzID0gX3JlZi50cmlnZ2VycyxcbiAgICAgICAgICB0cmlnZ2VycyA9IF9yZWYkdHJpZ2dlcnMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiR0cmlnZ2VycyxcbiAgICAgICAgICBfcmVmJG9uU2hvdyA9IF9yZWYub25TaG93LFxuICAgICAgICAgIG9uU2hvdyA9IF9yZWYkb25TaG93ID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25TaG93LFxuICAgICAgICAgIF9yZWYkb25DbG9zZSA9IF9yZWYub25DbG9zZSxcbiAgICAgICAgICBvbkNsb3NlID0gX3JlZiRvbkNsb3NlID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbG9zZSxcbiAgICAgICAgICBfcmVmJG9wZW5UcmlnZ2VyID0gX3JlZi5vcGVuVHJpZ2dlcixcbiAgICAgICAgICBvcGVuVHJpZ2dlciA9IF9yZWYkb3BlblRyaWdnZXIgPT09IHZvaWQgMCA/ICdkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlcicgOiBfcmVmJG9wZW5UcmlnZ2VyLFxuICAgICAgICAgIF9yZWYkY2xvc2VUcmlnZ2VyID0gX3JlZi5jbG9zZVRyaWdnZXIsXG4gICAgICAgICAgY2xvc2VUcmlnZ2VyID0gX3JlZiRjbG9zZVRyaWdnZXIgPT09IHZvaWQgMCA/ICdkYXRhLW1pY3JvbW9kYWwtY2xvc2UnIDogX3JlZiRjbG9zZVRyaWdnZXIsXG4gICAgICAgICAgX3JlZiRvcGVuQ2xhc3MgPSBfcmVmLm9wZW5DbGFzcyxcbiAgICAgICAgICBvcGVuQ2xhc3MgPSBfcmVmJG9wZW5DbGFzcyA9PT0gdm9pZCAwID8gJ2lzLW9wZW4nIDogX3JlZiRvcGVuQ2xhc3MsXG4gICAgICAgICAgX3JlZiRkaXNhYmxlU2Nyb2xsID0gX3JlZi5kaXNhYmxlU2Nyb2xsLFxuICAgICAgICAgIGRpc2FibGVTY3JvbGwgPSBfcmVmJGRpc2FibGVTY3JvbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlU2Nyb2xsLFxuICAgICAgICAgIF9yZWYkZGlzYWJsZUZvY3VzID0gX3JlZi5kaXNhYmxlRm9jdXMsXG4gICAgICAgICAgZGlzYWJsZUZvY3VzID0gX3JlZiRkaXNhYmxlRm9jdXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlRm9jdXMsXG4gICAgICAgICAgX3JlZiRhd2FpdENsb3NlQW5pbWF0ID0gX3JlZi5hd2FpdENsb3NlQW5pbWF0aW9uLFxuICAgICAgICAgIGF3YWl0Q2xvc2VBbmltYXRpb24gPSBfcmVmJGF3YWl0Q2xvc2VBbmltYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRhd2FpdENsb3NlQW5pbWF0LFxuICAgICAgICAgIF9yZWYkYXdhaXRPcGVuQW5pbWF0aSA9IF9yZWYuYXdhaXRPcGVuQW5pbWF0aW9uLFxuICAgICAgICAgIGF3YWl0T3BlbkFuaW1hdGlvbiA9IF9yZWYkYXdhaXRPcGVuQW5pbWF0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGF3YWl0T3BlbkFuaW1hdGksXG4gICAgICAgICAgX3JlZiRkZWJ1Z01vZGUgPSBfcmVmLmRlYnVnTW9kZSxcbiAgICAgICAgICBkZWJ1Z01vZGUgPSBfcmVmJGRlYnVnTW9kZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnTW9kZTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsKTtcblxuICAgICAgLy8gU2F2ZSBhIHJlZmVyZW5jZSBvZiB0aGUgbW9kYWxcbiAgICAgIHRoaXMubW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRNb2RhbCk7IC8vIFNhdmUgYSByZWZlcmVuY2UgdG8gdGhlIHBhc3NlZCBjb25maWdcblxuICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgIGRlYnVnTW9kZTogZGVidWdNb2RlLFxuICAgICAgICBkaXNhYmxlU2Nyb2xsOiBkaXNhYmxlU2Nyb2xsLFxuICAgICAgICBvcGVuVHJpZ2dlcjogb3BlblRyaWdnZXIsXG4gICAgICAgIGNsb3NlVHJpZ2dlcjogY2xvc2VUcmlnZ2VyLFxuICAgICAgICBvcGVuQ2xhc3M6IG9wZW5DbGFzcyxcbiAgICAgICAgb25TaG93OiBvblNob3csXG4gICAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICAgIGF3YWl0Q2xvc2VBbmltYXRpb246IGF3YWl0Q2xvc2VBbmltYXRpb24sXG4gICAgICAgIGF3YWl0T3BlbkFuaW1hdGlvbjogYXdhaXRPcGVuQW5pbWF0aW9uLFxuICAgICAgICBkaXNhYmxlRm9jdXM6IGRpc2FibGVGb2N1c1xuICAgICAgfTsgLy8gUmVnaXN0ZXIgY2xpY2sgZXZlbnRzIG9ubHkgaWYgcHJlIGJpbmRpbmcgZXZlbnRMaXN0ZW5lcnNcblxuICAgICAgaWYgKHRyaWdnZXJzLmxlbmd0aCA+IDApIHRoaXMucmVnaXN0ZXJUcmlnZ2Vycy5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkodHJpZ2dlcnMpKTsgLy8gcHJlIGJpbmQgZnVuY3Rpb25zIGZvciBldmVudCBsaXN0ZW5lcnNcblxuICAgICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLm9uS2V5ZG93biA9IHRoaXMub25LZXlkb3duLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvb3BzIHRocm91Z2ggYWxsIG9wZW5UcmlnZ2VycyBhbmQgYmluZHMgY2xpY2sgZXZlbnRcbiAgICAgKiBAcGFyYW0gIHthcnJheX0gdHJpZ2dlcnMgW0FycmF5IG9mIG5vZGUgZWxlbWVudHNdXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBbe1xuICAgICAga2V5OiBcInJlZ2lzdGVyVHJpZ2dlcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclRyaWdnZXJzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB0cmlnZ2VycyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICB0cmlnZ2Vyc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyaWdnZXJzLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgdHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNob3dNb2RhbChldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzaG93TW9kYWxcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93TW9kYWwoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcbiAgICAgICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5tb2RhbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbmZpZy5vcGVuQ2xhc3MpO1xuICAgICAgICB0aGlzLnNjcm9sbEJlaGF2aW91cignZGlzYWJsZScpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmF3YWl0T3BlbkFuaW1hdGlvbikge1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICAgIF90aGlzMi5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBoYW5kbGVyLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIF90aGlzMi5zZXRGb2N1c1RvRmlyc3ROb2RlKCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0Rm9jdXNUb0ZpcnN0Tm9kZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcub25TaG93KHRoaXMubW9kYWwsIHRoaXMuYWN0aXZlRWxlbWVudCwgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZU1vZGFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgICB2YXIgbW9kYWwgPSB0aGlzLm1vZGFsO1xuICAgICAgICB0aGlzLm1vZGFsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsQmVoYXZpb3VyKCdlbmFibGUnKTtcblxuICAgICAgICBpZiAodGhpcy5hY3RpdmVFbGVtZW50ICYmIHRoaXMuYWN0aXZlRWxlbWVudC5mb2N1cykge1xuICAgICAgICAgIHRoaXMuYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb25maWcub25DbG9zZSh0aGlzLm1vZGFsLCB0aGlzLmFjdGl2ZUVsZW1lbnQsIGV2ZW50KTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYXdhaXRDbG9zZUFuaW1hdGlvbikge1xuICAgICAgICAgIHZhciBvcGVuQ2xhc3MgPSB0aGlzLmNvbmZpZy5vcGVuQ2xhc3M7IC8vIDwtIG9sZCBzY2hvb2wgZnR3XG5cbiAgICAgICAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKG9wZW5DbGFzcyk7XG4gICAgICAgICAgICBtb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jb25maWcub3BlbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9zZU1vZGFsQnlJZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlTW9kYWxCeUlkKHRhcmdldE1vZGFsKSB7XG4gICAgICAgIHRoaXMubW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRNb2RhbCk7XG4gICAgICAgIGlmICh0aGlzLm1vZGFsKSB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2Nyb2xsQmVoYXZpb3VyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2Nyb2xsQmVoYXZpb3VyKHRvZ2dsZSkge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmRpc2FibGVTY3JvbGwpIHJldHVybjtcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgICAgICAgc3dpdGNoICh0b2dnbGUpIHtcbiAgICAgICAgICBjYXNlICdlbmFibGUnOlxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5LnN0eWxlLCB7XG4gICAgICAgICAgICAgIG92ZXJmbG93OiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ2Rpc2FibGUnOlxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5LnN0eWxlLCB7XG4gICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJhZGRFdmVudExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgICB0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlkb3duKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgdGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljayk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5ZG93bik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uQ2xpY2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQuaGFzQXR0cmlidXRlKHRoaXMuY29uZmlnLmNsb3NlVHJpZ2dlcikpIHtcbiAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIm9uS2V5ZG93blwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uS2V5ZG93bihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMjcpIHRoaXMuY2xvc2VNb2RhbChldmVudCk7IC8vIGVzY1xuXG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSA5KSB0aGlzLnJldGFpbkZvY3VzKGV2ZW50KTsgLy8gdGFiXG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImdldEZvY3VzYWJsZU5vZGVzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rm9jdXNhYmxlTm9kZXMoKSB7XG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMubW9kYWwucXVlcnlTZWxlY3RvckFsbChGT0NVU0FCTEVfRUxFTUVOVFMpO1xuICAgICAgICByZXR1cm4gQXJyYXkuYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkobm9kZXMpKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogVHJpZXMgdG8gc2V0IGZvY3VzIG9uIGEgbm9kZSB3aGljaCBpcyBub3QgYSBjbG9zZSB0cmlnZ2VyXG4gICAgICAgKiBpZiBubyBvdGhlciBub2RlcyBleGlzdCB0aGVuIGZvY3VzZXMgb24gZmlyc3QgY2xvc2UgdHJpZ2dlclxuICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2V0Rm9jdXNUb0ZpcnN0Tm9kZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvY3VzVG9GaXJzdE5vZGUoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5kaXNhYmxlRm9jdXMpIHJldHVybjtcbiAgICAgICAgdmFyIGZvY3VzYWJsZU5vZGVzID0gdGhpcy5nZXRGb2N1c2FibGVOb2RlcygpOyAvLyBubyBmb2N1c2FibGUgbm9kZXNcblxuICAgICAgICBpZiAoZm9jdXNhYmxlTm9kZXMubGVuZ3RoID09PSAwKSByZXR1cm47IC8vIHJlbW92ZSBub2RlcyBvbiB3aG9zZSBjbGljaywgdGhlIG1vZGFsIGNsb3Nlc1xuICAgICAgICAvLyBjb3VsZCBub3QgdGhpbmsgb2YgYSBiZXR0ZXIgbmFtZSA6KFxuXG4gICAgICAgIHZhciBub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzID0gZm9jdXNhYmxlTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgcmV0dXJuICFub2RlLmhhc0F0dHJpYnV0ZShfdGhpczMuY29uZmlnLmNsb3NlVHJpZ2dlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobm9kZXNXaGljaEFyZU5vdENsb3NlVGFyZ2V0cy5sZW5ndGggPiAwKSBub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzWzBdLmZvY3VzKCk7XG4gICAgICAgIGlmIChub2Rlc1doaWNoQXJlTm90Q2xvc2VUYXJnZXRzLmxlbmd0aCA9PT0gMCkgZm9jdXNhYmxlTm9kZXNbMF0uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmV0YWluRm9jdXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXRhaW5Gb2N1cyhldmVudCkge1xuICAgICAgICB2YXIgZm9jdXNhYmxlTm9kZXMgPSB0aGlzLmdldEZvY3VzYWJsZU5vZGVzKCk7IC8vIG5vIGZvY3VzYWJsZSBub2Rlc1xuXG4gICAgICAgIGlmIChmb2N1c2FibGVOb2Rlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbHRlcnMgbm9kZXMgd2hpY2ggYXJlIGhpZGRlbiB0byBwcmV2ZW50XG4gICAgICAgICAqIGZvY3VzIGxlYWsgb3V0c2lkZSBtb2RhbFxuICAgICAgICAgKi9cblxuICAgICAgICBmb2N1c2FibGVOb2RlcyA9IGZvY3VzYWJsZU5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlLm9mZnNldFBhcmVudCAhPT0gbnVsbDtcbiAgICAgICAgfSk7IC8vIGlmIGRpc2FibGVGb2N1cyBpcyB0cnVlXG5cbiAgICAgICAgaWYgKCF0aGlzLm1vZGFsLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgZm9jdXNhYmxlTm9kZXNbMF0uZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgZm9jdXNlZEl0ZW1JbmRleCA9IGZvY3VzYWJsZU5vZGVzLmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkgJiYgZm9jdXNlZEl0ZW1JbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgZm9jdXNhYmxlTm9kZXNbZm9jdXNhYmxlTm9kZXMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFldmVudC5zaGlmdEtleSAmJiBmb2N1c2FibGVOb2Rlcy5sZW5ndGggPiAwICYmIGZvY3VzZWRJdGVtSW5kZXggPT09IGZvY3VzYWJsZU5vZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGZvY3VzYWJsZU5vZGVzWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBNb2RhbDtcbiAgfSgpO1xuICAvKipcbiAgICogTW9kYWwgcHJvdG90eXBlIGVuZHMuXG4gICAqIEhlcmUgb24gY29kZSBpcyByZXNwb25zaWJsZSBmb3IgZGV0ZWN0aW5nIGFuZFxuICAgKiBhdXRvIGJpbmRpbmcgZXZlbnQgaGFuZGxlcnMgb24gbW9kYWwgdHJpZ2dlcnNcbiAgICovXG4gIC8vIEtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIG9wZW5lZCBtb2RhbFxuXG5cbiAgdmFyIGFjdGl2ZU1vZGFsID0gbnVsbDtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiBhc3NvY2lhdGl2ZSBhcnJheSBvZiBtb2RhbHMgYW5kIGl0J3NcbiAgICogcmVzcGVjdGl2ZSB0cmlnZ2Vyc1xuICAgKiBAcGFyYW0gIHthcnJheX0gdHJpZ2dlcnMgICAgIEFuIGFycmF5IG9mIGFsbCB0cmlnZ2Vyc1xuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRyaWdnZXJBdHRyIFRoZSBkYXRhLWF0dHJpYnV0ZSB3aGljaCB0cmlnZ2VycyB0aGUgbW9kdWxlXG4gICAqIEByZXR1cm4ge2FycmF5fVxuICAgKi9cblxuICB2YXIgZ2VuZXJhdGVUcmlnZ2VyTWFwID0gZnVuY3Rpb24gZ2VuZXJhdGVUcmlnZ2VyTWFwKHRyaWdnZXJzLCB0cmlnZ2VyQXR0cikge1xuICAgIHZhciB0cmlnZ2VyTWFwID0gW107XG4gICAgdHJpZ2dlcnMuZm9yRWFjaChmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgdmFyIHRhcmdldE1vZGFsID0gdHJpZ2dlci5hdHRyaWJ1dGVzW3RyaWdnZXJBdHRyXS52YWx1ZTtcbiAgICAgIGlmICh0cmlnZ2VyTWFwW3RhcmdldE1vZGFsXSA9PT0gdW5kZWZpbmVkKSB0cmlnZ2VyTWFwW3RhcmdldE1vZGFsXSA9IFtdO1xuICAgICAgdHJpZ2dlck1hcFt0YXJnZXRNb2RhbF0ucHVzaCh0cmlnZ2VyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJpZ2dlck1hcDtcbiAgfTtcbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB3aGV0aGVyIGEgbW9kYWwgb2YgdGhlIGdpdmVuIGlkIGV4aXN0c1xuICAgKiBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSAge251bWJlcn0gaWQgIFRoZSBpZCBvZiB0aGUgbW9kYWxcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICB2YXIgdmFsaWRhdGVNb2RhbFByZXNlbmNlID0gZnVuY3Rpb24gdmFsaWRhdGVNb2RhbFByZXNlbmNlKGlkKSB7XG4gICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIk1pY3JvTW9kYWw6IFxcdTI3NTdTZWVtcyBsaWtlIHlvdSBoYXZlIG1pc3NlZCAlYydcIi5jb25jYXQoaWQsIFwiJ1wiKSwgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgJ0lEIHNvbWV3aGVyZSBpbiB5b3VyIGNvZGUuIFJlZmVyIGV4YW1wbGUgYmVsb3cgdG8gcmVzb2x2ZSBpdC4nKTtcbiAgICAgIGNvbnNvbGUud2FybihcIiVjRXhhbXBsZTpcIiwgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbFxcXCIgaWQ9XFxcIlwiLmNvbmNhdChpZCwgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogVmFsaWRhdGVzIGlmIHRoZXJlIGFyZSBtb2RhbCB0cmlnZ2VycyBwcmVzZW50XG4gICAqIGluIHRoZSBET01cbiAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJzIEFuIGFycmF5IG9mIGRhdGEtdHJpZ2dlcnNcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG5cblxuICB2YXIgdmFsaWRhdGVUcmlnZ2VyUHJlc2VuY2UgPSBmdW5jdGlvbiB2YWxpZGF0ZVRyaWdnZXJQcmVzZW5jZSh0cmlnZ2Vycykge1xuICAgIGlmICh0cmlnZ2Vycy5sZW5ndGggPD0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFwiTWljcm9Nb2RhbDogXFx1Mjc1N1BsZWFzZSBzcGVjaWZ5IGF0IGxlYXN0IG9uZSAlYydtaWNyb21vZGFsLXRyaWdnZXInXCIsICdiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO2NvbG9yOiAjNTA1OTZjO2ZvbnQtd2VpZ2h0OiBib2xkOycsICdkYXRhIGF0dHJpYnV0ZS4nKTtcbiAgICAgIGNvbnNvbGUud2FybihcIiVjRXhhbXBsZTpcIiwgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgXCI8YSBocmVmPVxcXCIjXFxcIiBkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlcj1cXFwibXktbW9kYWxcXFwiPjwvYT5cIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQ2hlY2tzIGlmIHRyaWdnZXJzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG1vZGFsc1xuICAgKiBhcmUgcHJlc2VudCBpbiB0aGUgRE9NXG4gICAqIEBwYXJhbSAge2FycmF5fSB0cmlnZ2VycyAgIEFycmF5IG9mIERPTSBub2RlcyB3aGljaCBoYXZlIGRhdGEtdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJNYXAgQXNzb2NpYXRpdmUgYXJyYXkgb2YgbW9kYWxzIGFuZCB0aGVpciB0cmlnZ2Vyc1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cblxuXG4gIHZhciB2YWxpZGF0ZUFyZ3MgPSBmdW5jdGlvbiB2YWxpZGF0ZUFyZ3ModHJpZ2dlcnMsIHRyaWdnZXJNYXApIHtcbiAgICB2YWxpZGF0ZVRyaWdnZXJQcmVzZW5jZSh0cmlnZ2Vycyk7XG4gICAgaWYgKCF0cmlnZ2VyTWFwKSByZXR1cm4gdHJ1ZTtcblxuICAgIGZvciAodmFyIGlkIGluIHRyaWdnZXJNYXApIHtcbiAgICAgIHZhbGlkYXRlTW9kYWxQcmVzZW5jZShpZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIC8qKlxuICAgKiBCaW5kcyBjbGljayBoYW5kbGVycyB0byBhbGwgbW9kYWwgdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7b2JqZWN0fSBjb25maWcgW2Rlc2NyaXB0aW9uXVxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG5cblxuICB2YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQoY29uZmlnKSB7XG4gICAgLy8gQ3JlYXRlIGFuIGNvbmZpZyBvYmplY3Qgd2l0aCBkZWZhdWx0IG9wZW5UcmlnZ2VyXG4gICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICBvcGVuVHJpZ2dlcjogJ2RhdGEtbWljcm9tb2RhbC10cmlnZ2VyJ1xuICAgIH0sIGNvbmZpZyk7IC8vIENvbGxlY3RzIGFsbCB0aGUgbm9kZXMgd2l0aCB0aGUgdHJpZ2dlclxuXG4gICAgdmFyIHRyaWdnZXJzID0gX3RvQ29uc3VtYWJsZUFycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIuY29uY2F0KG9wdGlvbnMub3BlblRyaWdnZXIsIFwiXVwiKSkpOyAvLyBNYWtlcyBhIG1hcHBpbmdzIG9mIG1vZGFscyB3aXRoIHRoZWlyIHRyaWdnZXIgbm9kZXNcblxuXG4gICAgdmFyIHRyaWdnZXJNYXAgPSBnZW5lcmF0ZVRyaWdnZXJNYXAodHJpZ2dlcnMsIG9wdGlvbnMub3BlblRyaWdnZXIpOyAvLyBDaGVja3MgaWYgbW9kYWxzIGFuZCB0cmlnZ2VycyBleGlzdCBpbiBkb21cblxuICAgIGlmIChvcHRpb25zLmRlYnVnTW9kZSA9PT0gdHJ1ZSAmJiB2YWxpZGF0ZUFyZ3ModHJpZ2dlcnMsIHRyaWdnZXJNYXApID09PSBmYWxzZSkgcmV0dXJuOyAvLyBGb3IgZXZlcnkgdGFyZ2V0IG1vZGFsIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2VcblxuICAgIGZvciAodmFyIGtleSBpbiB0cmlnZ2VyTWFwKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0cmlnZ2VyTWFwW2tleV07XG4gICAgICBvcHRpb25zLnRhcmdldE1vZGFsID0ga2V5O1xuICAgICAgb3B0aW9ucy50cmlnZ2VycyA9IF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZSk7XG4gICAgICBhY3RpdmVNb2RhbCA9IG5ldyBNb2RhbChvcHRpb25zKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBTaG93cyBhIHBhcnRpY3VsYXIgbW9kYWxcbiAgICogQHBhcmFtICB7c3RyaW5nfSB0YXJnZXRNb2RhbCBbVGhlIGlkIG9mIHRoZSBtb2RhbCB0byBkaXNwbGF5XVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZyBbVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIHBhc3NdXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuXG5cbiAgdmFyIHNob3cgPSBmdW5jdGlvbiBzaG93KHRhcmdldE1vZGFsLCBjb25maWcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGNvbmZpZyB8fCB7fTtcbiAgICBvcHRpb25zLnRhcmdldE1vZGFsID0gdGFyZ2V0TW9kYWw7IC8vIENoZWNrcyBpZiBtb2RhbHMgYW5kIHRyaWdnZXJzIGV4aXN0IGluIGRvbVxuXG4gICAgaWYgKG9wdGlvbnMuZGVidWdNb2RlID09PSB0cnVlICYmIHZhbGlkYXRlTW9kYWxQcmVzZW5jZSh0YXJnZXRNb2RhbCkgPT09IGZhbHNlKSByZXR1cm47IC8vIGNsZWFyIGV2ZW50cyBpbiBjYXNlIHByZXZpb3VzIG1vZGFsIHdhc24ndCBjbG9zZVxuXG4gICAgaWYgKGFjdGl2ZU1vZGFsKSBhY3RpdmVNb2RhbC5yZW1vdmVFdmVudExpc3RlbmVycygpOyAvLyBzdG9yZXMgcmVmZXJlbmNlIHRvIGFjdGl2ZSBtb2RhbFxuXG4gICAgYWN0aXZlTW9kYWwgPSBuZXcgTW9kYWwob3B0aW9ucyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG5cbiAgICBhY3RpdmVNb2RhbC5zaG93TW9kYWwoKTtcbiAgfTtcbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgYWN0aXZlIG1vZGFsXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFyZ2V0TW9kYWwgW1RoZSBpZCBvZiB0aGUgbW9kYWwgdG8gY2xvc2VdXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuXG5cbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UodGFyZ2V0TW9kYWwpIHtcbiAgICB0YXJnZXRNb2RhbCA/IGFjdGl2ZU1vZGFsLmNsb3NlTW9kYWxCeUlkKHRhcmdldE1vZGFsKSA6IGFjdGl2ZU1vZGFsLmNsb3NlTW9kYWwoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGluaXQ6IGluaXQsXG4gICAgc2hvdzogc2hvdyxcbiAgICBjbG9zZTogY2xvc2VcbiAgfTtcbn0oKTtcbndpbmRvdy5NaWNyb01vZGFsID0gTWljcm9Nb2RhbDtcblxuZXhwb3J0IGRlZmF1bHQgTWljcm9Nb2RhbDtcbiIsImltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcblxuY29uc29sZS5sb2coJ2dlbmVyaWNzJyk7XG4kKCcucHJvamVjdC1oZWFkZXJfX3NxdWFyZScpLm9uKCdjbGljaycsIChlKSA9PiB7XG5cdGUucHJldmVudERlZmF1bHQoKTtcblx0Y29uc29sZS5sb2coJ2NsaWNrJyk7XG5cblx0JCgnI2V4dGVyaW9yJykudG9nZ2xlQ2xhc3MoJ3NsaWRlci1oaWRkZW4nKTtcblx0JCgnI3BsYW5uaW5nJykudG9nZ2xlQ2xhc3MoJ3NsaWRlci1oaWRkZW4nKTtcbn0pXG4iLCJpbXBvcnQgTWljcm9Nb2RhbCBmcm9tICdtaWNyb21vZGFsJztcblxuXG5NaWNyb01vZGFsLmluaXQoe1xuXHRvblNob3c6IG1vZGFsID0+IGNvbnNvbGUuaW5mbyhgJHttb2RhbC5pZH0gaXMgc2hvd25gKSwgLy8gWzFdXG5cdG9uQ2xvc2U6IG1vZGFsID0+IGNvbnNvbGUuaW5mbyhgJHttb2RhbC5pZH0gaXMgaGlkZGVuYCksIC8vIFsyXVxuXHRvcGVuVHJpZ2dlcjogJ2RhdGEtY3VzdG9tLW9wZW4nLCAvLyBbM11cblx0Y2xvc2VUcmlnZ2VyOiAnZGF0YS1jdXN0b20tY2xvc2UnLCAvLyBbNF1cblx0b3BlbkNsYXNzOiAnaXMtb3BlbicsIC8vIFs1XVxuXHRkaXNhYmxlU2Nyb2xsOiB0cnVlLCAvLyBbNl1cblx0ZGlzYWJsZUZvY3VzOiBmYWxzZSwgLy8gWzddXG5cdGF3YWl0T3BlbkFuaW1hdGlvbjogdHJ1ZSwgLy8gWzhdXG5cdGF3YWl0Q2xvc2VBbmltYXRpb246IHRydWUsIC8vIFs5XVxuXHRkZWJ1Z01vZGU6IGZhbHNlIC8vIFsxMF1cbn0pO1xuXG4vLyBNaWNyb01vZGFsLnNob3coJ21vZGFsLTEnLCB7XG4vLyBcdGNsb3NlVHJpZ2dlcjogJ2RhdGEtY3VzdG9tLWNsb3NlJyxcbi8vIH0pOyIsImltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcblxuY29uc3QgcXVlcnlBamF4ID0gKGRhdGEsIHR5cGUpID0+IHtcblx0JC5hamF4KHtcblx0XHR1cmw6IHRydWVfb2JqLmFqYXh1cmwsXG5cdFx0ZGF0YSxcblx0XHRtZXRob2Q6IFwiUE9TVFwiLFxuXHRcdFxuXHRcdGJlZm9yZVNlbmQoeGhyKSB7XG5cdFx0XG5cdFx0fSxcblx0XHRzdWNjZXNzKHJlc3VsdCkge1xuXHRcdFx0Ly9zd2l0Y2hlckNoZWNrYm94LnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhyZXN1bHQpO1xuXG5cdFx0XHRjb25zdCByZXNwb25zZSA9IEpTT04ucGFyc2UocmVzdWx0KTtcblx0XHRcdC8vY29uc29sZS5sb2cocmVzcG9uc2UpO1xuXG5cdFx0XHRjb25zdCBwcm9qZWN0cyA9IHJlc3BvbnNlWydwcm9qZWN0cyddLmxlbmd0aCAhPSAwICA/IFxuXHRcdFx0cmVzcG9uc2VbJ3Byb2plY3RzJ10ucmVkdWNlKCAocHJldlByb2plY3QsIHByb2plY3QpID0+IHByZXZQcm9qZWN0ICsgcHJvamVjdCApIDpcblx0XHRcdCcgJztcblxuXHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ21vcmUnOlx0XHRcdFx0XG5cdFx0XHRcdFx0JCgnLnByb2plY3RzX19wcm9kdWN0JykuYXBwZW5kKHByb2plY3RzKTtcblx0XHRcdFx0XHRmaWx0ZXJBcmcubWF4UGFnZXMgPSByZXNwb25zZS5tYXhQYWdlcztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdCQoJy5wcm9qZWN0c19fcHJvZHVjdCcpLmh0bWwocHJvamVjdHMpO1xuXHRcdFx0XHRcdGZpbHRlckFyZy5tYXhQYWdlcyA9IHJlc3BvbnNlLm1heFBhZ2VzO1xuXHRcdFx0fVx0XG5cdFx0fVxuXHR9KVxufVxuXG5jb25zdCBpc1R5cGUgPSBCb29sZWFuKCQoJ3NlY3Rpb25bZGF0YS10eXBlXScpLmRhdGEoJ3R5cGUnKSA9PSAnb2Jqc2FsZScpO1xuY29uc29sZS5sb2coaXNUeXBlLCAkKCdzZWN0aW9uW2RhdGEtdHlwZV0nKS5kYXRhKCd0eXBlJykpO1xuXG5jb25zdCBjcmVhdGVEYXRhID0gKGZpbHRlciwgYWN0aW9uPSdjYXRhbG9nJykgPT4ge1xuXHRjb25zdCBvYmogPSB7XG5cdFx0YWN0aW9uOiBpc1R5cGUgPyAnb2Jqc2FsZScgOiAnY2F0YWxvZycsXG5cdFx0ZmlsdGVyLFxuXHR9XG5cblx0cmV0dXJuIG9iajtcbn1cblxuXG5jb25zdCBhcmVhID0gJCgnI2FyZWEnKTtcbmNvbnN0IGJlZHJvb20gPSAkKCcjYmVkcm9vbScpO1xuY29uc3QgYmF0aHJvb20gPSAkKCcjYmF0aHJvb20nKTtcbmNvbnN0IHJlc2V0ID0gJCgnI3Jlc2V0Jyk7XG5jb25zdCBidG5Nb3JlID0gJCgnI21vcmUyJyk7XG5cblxuY29uc3QgZmlsdGVyQXJnID0ge1xuXHRhcmVhOiAnZnVsbCcsXG5cdGJlZHJvb206ICdmdWxsJyxcblx0YmF0aHJvb206ICdmdWxsJyxcblx0cGFnZWQ6IDEsXG5cdG1heFBhZ2VzOiB0eXBlb2YoYnRuTW9yZS5kYXRhKCdwYXJhbScpKSA9PSAnbnVtYmVyJyA/IGJ0bk1vcmUuZGF0YSgncGFyYW0nKSA6IDEsXG59XG5cbnJlc2V0Lm9uKCdjbGljaycsIGUgPT4ge1xuXHRmaWx0ZXJBcmcuYXJlYSA9IFwiZnVsbFwiO1xuXHRmaWx0ZXJBcmcuYmVkcm9vbSA9IFwiZnVsbFwiO1xuXHRmaWx0ZXJBcmcuYmF0aHJvb20gPSBcImZ1bGxcIjtcblx0ZmlsdGVyQXJnLm1heFBhZ2VzID0gMTtcblx0ZmlsdGVyQXJnLnBhZ2VkID0gMTtcblx0Y29uc3QgY3VzdG9tU2libGluZ3MgPSBlbCA9PiBbXS5zbGljZS5jYWxsKGVsLnBhcmVudE5vZGUuY2hpbGRyZW4pLmZpbHRlcihjaGlsZCA9PiAoY2hpbGQgIT09IGVsKSk7XG5cdGNvbnN0IGxpc3QgPSAkKCd1bC5saXN0Jyk7XG5cdGxpc3QuZWFjaCgoaSwgdWwpID0+IHtcblx0XHRjb25zdCB0ZXh0ID0gdWwucXVlcnlTZWxlY3RvcignbGlbZGF0YS1kaXNwbGF5XScpLmdldEF0dHJpYnV0ZSgnZGF0YS1kaXNwbGF5Jylcblx0XHRcblx0XHRjb25zdCBzcGFuID0gY3VzdG9tU2libGluZ3ModWwpWzBdO1xuXHRcdHNwYW4uaW5uZXJUZXh0ID0gdGV4dDtcblxuXHRcdHVsLnF1ZXJ5U2VsZWN0b3IoJ2xpLnNlbGVjdGVkJykuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcblx0XHR1bC5xdWVyeVNlbGVjdG9yKCdsaVtkYXRhLWRpc3BsYXldJykuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcblx0fSk7XG5cblx0Y29uc3QgZGF0YSA9IGNyZWF0ZURhdGEoZmlsdGVyQXJnKTtcblx0cXVlcnlBamF4KGRhdGEpO1xufSlcblxuXG5hcmVhLm9uKCdjaGFuZ2UnLCAoZSkgPT4ge1xuXHRjb25zdCB2YWx1ZSA9IGFyZWEudmFsKCk7XG5cdGZpbHRlckFyZy5hcmVhID0gdmFsdWU7XG5cdGNvbnN0IGRhdGEgPSBjcmVhdGVEYXRhKGZpbHRlckFyZyk7XG5cdHF1ZXJ5QWpheChkYXRhKTtcbn0pXG5cbmJlZHJvb20ub24oJ2NoYW5nZScsIChlKSA9PiB7XG5cdGNvbnN0IHZhbHVlID0gYmVkcm9vbS52YWwoKTtcblx0ZmlsdGVyQXJnLmJlZHJvb20gPSB2YWx1ZTtcblx0Y29uc3QgZGF0YSA9IGNyZWF0ZURhdGEoZmlsdGVyQXJnKTtcblx0cXVlcnlBamF4KGRhdGEpO1xufSlcblxuYmF0aHJvb20ub24oJ2NoYW5nZScsIChlKSA9PiB7XG5cdGNvbnN0IHZhbHVlID0gYmF0aHJvb20udmFsKCk7XG5cdGZpbHRlckFyZy5iYXRocm9vbSA9IHZhbHVlO1xuXHRjb25zdCBkYXRhID0gY3JlYXRlRGF0YShmaWx0ZXJBcmcpO1xuXHRxdWVyeUFqYXgoZGF0YSk7XG59KVxuXG5cbmJ0bk1vcmUub24oJ2NsaWNrJywgKGUpID0+IHtcblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQvL2NvbnNvbGUubG9nKGZpbHRlckFyZyk7XG5cdC8vY29uc29sZS5sb2coJ2J0bk1vcmUnLCBmaWx0ZXJBcmcubWF4UGFnZXMsICc+JywgZmlsdGVyQXJnLnBhZ2VkKTtcblx0aWYgKGZpbHRlckFyZy5tYXhQYWdlcyA+IGZpbHRlckFyZy5wYWdlZCkge1xuXHRcdGZpbHRlckFyZy5wYWdlZCArPSAxOyBcblx0XHRjb25zdCBkYXRhID0gY3JlYXRlRGF0YShmaWx0ZXJBcmcpO1xuXHRcdHF1ZXJ5QWpheChkYXRhLCAnbW9yZScpO1xuXHR9IGVsc2Uge1xuXHRcdGJ0bk1vcmUuaGlkZSgpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59KSIsImltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcbi8vINCd0LDRgdGC0YDQvtC50LrQsCDQvNC10L3RjiBcblx0JCgnLm1lbnUtaXRlbS1oYXMtY2hpbGRyZW4nKS5hZGRDbGFzcygoKSA9PiAnbmF2aWdhdGlvbl9fc3VibmF2IGljb24tYXJyb3ctZG93bicpO1xuLy8g0JrQvdC+0L/QutCwINGA0LDRgdC60YDRi9GC0LjRjyDRg9GB0LvRg9CzINC10YnQtVxuXHQkKCcucHJvamVjdHNfX2ZpbHRlci1uZXh0Jykub24oJ2NsaWNrJywgKGUpID0+IHtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0JCgnLnByb2plY3RzX19maWx0ZXItc2VydmljZXMnKS50b2dnbGVDbGFzcygnYWN0aXZlJylcblx0XHQkKCcucHJvamVjdHNfX2ZpbHRlci1uZXh0JykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG5cdH0pIFxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL9Ck0LjQu9GM0YLQtdGALy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdGNvbnN0IGxvYWRlckhUTUwgPSAoKSA9PiB7XG5cdFx0cmV0dXJuIGA8ZGl2IGNsYXNzPVwicHJlbG9hZGVyIHByZWxvYWRlci0tcGFydFwiPlxuXHRcdDxkaXYgY2xhc3M9XCJiYW50ZXItbG9hZGVyXCI+XG5cdFx0PGRpdiBjbGFzcz1cImJhbnRlci1sb2FkZXJfX2JveFwiPjwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJiYW50ZXItbG9hZGVyX19ib3hcIj48L2Rpdj5cblx0PGRpdiBjbGFzcz1cImJhbnRlci1sb2FkZXJfX2JveFwiPjwvZGl2PlxuXHQ8ZGl2IGNsYXNzPVwiYmFudGVyLWxvYWRlcl9fYm94XCI+PC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJiYW50ZXItbG9hZGVyX19ib3hcIj48L2Rpdj5cblx0PGRpdiBjbGFzcz1cImJhbnRlci1sb2FkZXJfX2JveFwiPjwvZGl2PlxuXHQ8ZGl2IGNsYXNzPVwiYmFudGVyLWxvYWRlcl9fYm94XCI+PC9kaXY+XG5cdDxkaXYgY2xhc3M9XCJiYW50ZXItbG9hZGVyX19ib3hcIj48L2Rpdj5cblx0PGRpdiBjbGFzcz1cImJhbnRlci1sb2FkZXJfX2JveFwiPjwvZGl2PlxuXHQ8L2Rpdj5cbjwvZGl2PmA7XG59XG5cblxuXG5jb25zdCBjcmVhdGVEYXRhID0gKGZpbHRlciwgYWN0aW9uPSdoZWxsbycpID0+IHtcblx0Y29uc3Qgb2JqID0ge1xuXHRcdGFjdGlvbjogJ2hlbGxvJyxcblx0XHRmaWx0ZXIsXG5cdH1cblxuXHRyZXR1cm4gb2JqO1xufVxuXG5cblxuY29uc3Qgc3dpdGNoZXIgPSAkKCcuY2FuLXRvZ2dsZScpO1xuXG5jb25zdCBzd2l0Y2hlckNoZWNrYm94ID0gc3dpdGNoZXIuZmluZCgnaW5wdXQnKTtcblxuY29uc3QgbGFiZWxzID0gJCgnLnByb2plY3RzX19maWx0ZXItc2VydmljZXMgbGFiZWwnKTtcbmNvbnN0IGJ0bk1vcmUgPSAkKCcjbW9yZScpO1xuLy8g0KHQvtGB0YLQvtGP0L3QuNC1INGE0LjQu9GM0YLRgNCwXG5cblxuY29uc3QgZmlsdGVyQXJnID0ge1xuXHRzd2l0aGNlclR5cGU6ICdpbXBsZW1lbnRlZCcsXG5cdHNlcnZpY2VzSWQ6ICdhbGwnLFxuXHRwYWdlZDogMSxcblx0bWF4UGFnZXM6IHR5cGVvZihidG5Nb3JlLmRhdGEoJ3BhcmFtJykpID09ICdudW1iZXInID8gYnRuTW9yZS5kYXRhKCdwYXJhbScpIDogMSxcbn1cblxuY29uc29sZS5sb2coJ21heCcsIGZpbHRlckFyZy5tYXhQYWdlcyk7XG5cbmNvbnN0IHF1ZXJ5QWpheCA9IChkYXRhLCB0eXBlKSA9PiB7XG5cdCQuYWpheCh7XG5cdFx0dXJsOiB0cnVlX29iai5hamF4dXJsLFxuXHRcdGRhdGEsXG5cdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcblx0XHRiZWZvcmVTZW5kKHhocikge1xuXHRcdFx0c3dpdGNoZXJDaGVja2JveC5wcm9wKCdkaXNhYmxlZCcsIHRydWUpO1xuXHRcdH0sXG5cdFx0c3VjY2VzcyhyZXN1bHQpIHtcblx0XHRcdHN3aXRjaGVyQ2hlY2tib3gucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKHJlc3VsdCk7XG5cblx0XHRcdGNvbnN0IHJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXN1bHQpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cblx0XHRcdGNvbnN0IHByb2plY3RzID0gcmVzcG9uc2VbJ3Byb2plY3RzJ10ubGVuZ3RoICE9IDAgID8gXG5cdFx0XHRyZXNwb25zZVsncHJvamVjdHMnXS5yZWR1Y2UoIChwcmV2UHJvamVjdCwgcHJvamVjdCkgPT4gcHJldlByb2plY3QgKyBwcm9qZWN0ICkgOlxuXHRcdFx0Jyc7XG5cblx0XHRcdGlmICgkKCcucHJvamVjdHMnKS5kYXRhKCdzbGlkZXInKSkge1xuXHRcdFx0XHR0eXBlID0gJ3NsaWRlcic7XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRjYXNlICdtb3JlJzpcdFx0XHRcdFxuXHRcdFx0XHRcdCQoJy5wcm9qZWN0c19fcHJvZHVjdCcpLmFwcGVuZChwcm9qZWN0cyk7XG5cdFx0XHRcdFx0ZmlsdGVyQXJnLm1heFBhZ2VzID0gcmVzcG9uc2UubWF4UGFnZXM7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3NsaWRlcic6IFxuXHRcdFx0XHRcdGNvbnN0IHNsaWRlcldyYXBwZXIgPSByZXNwb25zZVsncHJvamVjdHMnXS5sZW5ndGggIT0gMCAgPyBcblx0XHRcdFx0XHRyZXNwb25zZVsncHJvamVjdHMnXS5tYXAoIChlbGVtKSA9PiBgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZVwiPiR7ZWxlbX08L2Rpdj5gKSA6XG5cdFx0XHRcdFx0Jyc7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2codHlwZW9mIHNsaWRlcldyYXBwZXIsIEJvb2xlYW4oc2xpZGVyV3JhcHBlcikpO1xuXHRcdFx0XHRcdGNvbnN0IHNsaWRlclByb2plY3RzID0gKHNsaWRlcldyYXBwZXIubGVuZ3RoICE9IDAgfHwgQm9vbGVhbihzbGlkZXJXcmFwcGVyKSkgPyBcblx0XHRcdFx0XHRzbGlkZXJXcmFwcGVyLnJlZHVjZSggKHByZXZQcm9qZWN0LCBwcm9qZWN0KSA9PiBwcmV2UHJvamVjdCArIHByb2plY3QgKSA6XG5cdFx0XHRcdFx0Jyc7XG5cdFx0XHRcdFxuXHRcdFx0XHRcdC8vY29uc3Qgc2NyaXB0ID0gYDxzY3JpcHQgc3JjPVwiLy8ke2xvY2F0aW9uLmhvc3RuYW1lfS93cC1jb250ZW50L3RoZW1lcy93cC1wcm8vZGlzdC9hc3NldHMvanMvc2xpZGVyLmpzXCI+PC9zY3JpcHQ+YDtcblx0XHRcdFx0XHRjb25zdCBzY3JpcHQgPSAnJztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQkKCcucHJvamVjdHNfX3Byb2R1Y3Qtc2xpZGVyIC5zd2lwZXItd3JhcHBlcicpLmh0bWwoc2xpZGVyUHJvamVjdHMgKyBzY3JpcHQpO1xuXG5cdFx0XHRcdFx0ZmlsdGVyQXJnLm1heFBhZ2VzID0gcmVzcG9uc2UubWF4UGFnZXM7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0JCgnLnByb2plY3RzX19wcm9kdWN0JykuaHRtbChwcm9qZWN0cyk7XG5cdFx0XHRcdFx0ZmlsdGVyQXJnLm1heFBhZ2VzID0gcmVzcG9uc2UubWF4UGFnZXM7XG5cdFx0XHR9XHRcblx0XHR9XG5cdH0pXG59XG5cblxuY29uc3Qgc3dpdGNoZXJDaGFuZ2UgPSAoY2hlY2tlZCwgc3dpdGhjZXJUeXBlKSA9PiB7XG5cdHN3aXRjaGVyQ2hlY2tib3gucHJvcChcImNoZWNrZWRcIiwgQm9vbGVhbihjaGVja2VkKSlcblx0ZmlsdGVyQXJnLnN3aXRoY2VyVHlwZSA9IFN0cmluZyhzd2l0aGNlclR5cGUpO1xuXHRmaWx0ZXJBcmcucGFnZWQgPSAxO1xuXHRjb25zdCBkYXRhID0gY3JlYXRlRGF0YShmaWx0ZXJBcmcpO1xuXHRxdWVyeUFqYXgoZGF0YSk7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuY29uc3QgaGFzaCA9IGxvY2F0aW9uLmhhc2guc2xpY2UoMSk7XG5cbmlmIChoYXNoID09PSBcImltcGxlbWVudGVkXCIpIHtcblx0c3dpdGNoZXJDaGFuZ2UoZmFsc2UsICdpbXBsZW1lbnRlZCcpO1xufVxuXG5pZiAoaGFzaCA9PT0gXCJjdXJyZW50XCIpIHtcblx0c3dpdGNoZXJDaGFuZ2UodHJ1ZSwgJ2N1cnJlbnQnKTtcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJoYXNoY2hhbmdlXCIsICgpID0+IHtcblx0Y29uc3QgaGFzaCA9IGxvY2F0aW9uLmhhc2guc2xpY2UoMSk7XG5cdGlmIChoYXNoID09PSBcImltcGxlbWVudGVkXCIpIHtcblx0XHRzd2l0Y2hlckNoYW5nZShmYWxzZSwgJ2ltcGxlbWVudGVkJyk7XG5cdH1cblx0XG5cdGlmIChoYXNoID09PSBcImN1cnJlbnRcIikge1xuXHRcdHN3aXRjaGVyQ2hhbmdlKHRydWUsICdjdXJyZW50Jyk7XG5cdH1cbn0pXG5cbnN3aXRjaGVyLm9uKCdjaGFuZ2UnLCAoZSkgPT4ge1xuXHRpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuXHRcdGZpbHRlckFyZy5zd2l0aGNlclR5cGUgPSAnY3VycmVudCc7XG5cdFx0aGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgJ2N1cnJlbnQnLCBgJHtsb2NhdGlvbi5wYXRobmFtZX0jY3VycmVudGApO1xuXHR9IGVsc2Uge1xuXHRcdGZpbHRlckFyZy5zd2l0aGNlclR5cGUgPSAnaW1wbGVtZW50ZWQnO1xuXHRcdGhpc3RvcnkucHVzaFN0YXRlKG51bGwsICdpbXBsZW1lbnRlZCcsIGAke2xvY2F0aW9uLnBhdGhuYW1lfSNpbXBsZW1lbnRlZGApO1xuXHR9XG5cblx0YnRuTW9yZS5zaG93KCk7XG5cdGZpbHRlckFyZy5wYWdlZCA9IDE7XG5cdGNvbnN0IGRhdGEgPSBjcmVhdGVEYXRhKGZpbHRlckFyZylcblx0cXVlcnlBamF4KGRhdGEpO1xuXHRyZXR1cm4gZmFsc2U7XG59KVxuXG5sYWJlbHMub24oJ2NsaWNrJywgKGUpID0+IHtcblxuXHRjb25zdCBpbnB1dElkID0gZS50YXJnZXQuaHRtbEZvcjtcblx0Y29uc3QgaW5wdXQgPSAkKGAucHJvamVjdHNfX2ZpbHRlci1zZXJ2aWNlcyBpbnB1dFtpZD0ke2lucHV0SWR9XWApO1xuXHRjb25zdCBpbnB1dFZhbHVlID0gaW5wdXQudmFsKCk7XG5cblx0ZmlsdGVyQXJnLnNlcnZpY2VzSWQgPSBpbnB1dFZhbHVlO1xuXG5cdGNvbnN0IGRhdGEgPSBjcmVhdGVEYXRhKGZpbHRlckFyZyk7XG5cblx0cXVlcnlBamF4KGRhdGEpO1xufSlcblxuYnRuTW9yZS5vbignY2xpY2snLCAoZSkgPT4ge1xuXHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdGNvbnNvbGUubG9nKGZpbHRlckFyZyk7XG5cdGNvbnNvbGUubG9nKCdidG5Nb3JlJywgZmlsdGVyQXJnLm1heFBhZ2VzLCAnPicsIGZpbHRlckFyZy5wYWdlZCk7XG5cdGlmIChmaWx0ZXJBcmcubWF4UGFnZXMgPiBmaWx0ZXJBcmcucGFnZWQpIHtcblx0XHRmaWx0ZXJBcmcucGFnZWQgKz0gMTsgXG5cdFx0Y29uc3QgZGF0YSA9IGNyZWF0ZURhdGEoZmlsdGVyQXJnKTtcblx0XHRxdWVyeUFqYXgoZGF0YSwgJ21vcmUnKTtcblx0fSBlbHNlIHtcblx0XHRidG5Nb3JlLmhpZGUoKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSlcbiJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJodG1sIiwicXVlcnlTZWxlY3RvciIsImh1bWJ1cmdlciIsIm1lbnUiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGluayIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImxpbmtQcm9qZWN0cyIsImNvbnNvbGUiLCJsb2ciLCJlIiwicHJldmVudERlZmF1bHQiLCJib2R5IiwiYWRkIiwid2luZG93Iiwic2V0VGltZW91dCIsInJlbW92ZSIsImlzT2JqZWN0Iiwib2JqIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJleHRlbmQiLCJ0YXJnZXQiLCJzcmMiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImxlbmd0aCIsInNzckRvY3VtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwibm9kZU5hbWUiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwibG9jYXRpb24iLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJnZXREb2N1bWVudCIsImRvYyIsInNzcldpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJDdXN0b21FdmVudCIsInRoaXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsImNsZWFyVGltZW91dCIsIm1hdGNoTWVkaWEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWQiLCJ3aW4iLCJfZ2V0UHJvdG90eXBlT2YiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJhcmdzIiwiQ2xhc3MiLCJhIiwicHVzaCIsImFwcGx5IiwiaW5zdGFuY2UiLCJGdW5jdGlvbiIsImJpbmQiLCJhcmd1bWVudHMiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiX2NhY2hlIiwiTWFwIiwidW5kZWZpbmVkIiwiZm4iLCJpbmRleE9mIiwiVHlwZUVycm9yIiwiaGFzIiwiZ2V0Iiwic2V0IiwiV3JhcHBlciIsImNyZWF0ZSIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiRG9tNyIsIl9BcnJheSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIml0ZW1zIiwiX3RoaXMiLCJwcm90byIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0eSIsIkFycmF5IiwiYXJyYXlGbGF0IiwiYXJyIiwicmVzIiwiZWwiLCJpc0FycmF5IiwiYXJyYXlGaWx0ZXIiLCJmaWx0ZXIiLCIkIiwic2VsZWN0b3IiLCJjb250ZXh0IiwidHJpbSIsInRvQ3JlYXRlIiwidGVtcFBhcmVudCIsImlubmVySFRNTCIsImkiLCJxc2EiLCJub2RlVHlwZSIsInVuaXF1ZUFycmF5IiwiYXJyYXlVbmlxdWUiLCJub1RyaWdnZXIiLCJzcGxpdCIsInNob3J0Y3V0IiwibmFtZSIsIl9sZW4iLCJfa2V5IiwidHJpZ2dlciIsIm9uIiwiTWV0aG9kcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImNsYXNzTmFtZXMiLCJtYXAiLCJjIiwiX2VsJGNsYXNzTGlzdCIsInJlbW92ZUNsYXNzIiwiX2xlbjIiLCJfa2V5MiIsIl9lbCRjbGFzc0xpc3QyIiwiaGFzQ2xhc3MiLCJfbGVuNCIsIl9rZXk0IiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJ0b2dnbGVDbGFzcyIsIl9sZW4zIiwiX2tleTMiLCJhdHRyIiwiYXR0cnMiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyTmFtZSIsInJlbW92ZUF0dHIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbGVuNSIsIl9rZXk1IiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsImlzIiwiX3BhcmVudHMiLCJwYXJlbnRzIiwiayIsImhhbmRsZUV2ZW50IiwiaiIsImV2ZW50cyIsIl9ldmVudCIsImRvbTdMaXZlTGlzdGVuZXJzIiwicHJveHlMaXN0ZW5lciIsImV2ZW50IiwiZG9tN0xpc3RlbmVycyIsIm9mZiIsIl9sZW42IiwiX2tleTYiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJkb203cHJveHkiLCJzcGxpY2UiLCJfbGVuOSIsIl9rZXk5IiwiZXZ0IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkYXRhIiwiZGF0YUluZGV4IiwiZGlzcGF0Y2hFdmVudCIsInRyYW5zaXRpb25FbmQiLCJkb20iLCJmaXJlQ2FsbEJhY2siLCJvdXRlcldpZHRoIiwiaW5jbHVkZU1hcmdpbnMiLCJfc3R5bGVzIiwic3R5bGVzIiwib2Zmc2V0V2lkdGgiLCJwYXJzZUZsb2F0Iiwib3V0ZXJIZWlnaHQiLCJfc3R5bGVzMiIsIm9mZnNldEhlaWdodCIsIm9mZnNldCIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxZIiwic2Nyb2xsTGVmdCIsInNjcm9sbFgiLCJ0b3AiLCJsZWZ0IiwiY3NzIiwicHJvcHMiLCJfcHJvcCIsImVhY2giLCJpbmRleCIsInRleHQiLCJ0ZXh0Q29udGVudCIsImNvbXBhcmVXaXRoIiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiY2hpbGQiLCJwcmV2aW91c1NpYmxpbmciLCJlcSIsInJldHVybkluZGV4IiwiYXBwZW5kIiwibmV3Q2hpbGQiLCJ0ZW1wRGl2IiwiZmlyc3RDaGlsZCIsImFwcGVuZENoaWxkIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0QWxsIiwibmV4dEVscyIsIl9uZXh0IiwicHJldiIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2QWxsIiwicHJldkVscyIsIl9wcmV2IiwicGFyZW50IiwicGFyZW50Tm9kZSIsIl9wYXJlbnQiLCJjbG9zZXN0IiwiZmluZCIsImZvdW5kRWxlbWVudHMiLCJmb3VuZCIsInJlbW92ZUNoaWxkIiwibWV0aG9kTmFtZSIsIm5leHRUaWNrIiwiZGVsYXkiLCJub3ciLCJzbGljZSIsImlzTm9kZSIsIm5vZGUiLCJIVE1MRWxlbWVudCIsInRvIiwibm9FeHRlbmQiLCJuZXh0U291cmNlIiwia2V5c0FycmF5IiwibmV4dEluZGV4IiwibGVuIiwibmV4dEtleSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX3N3aXBlcl9fIiwiYmluZE1vZHVsZU1ldGhvZHMiLCJzdWJLZXkiLCJjbGFzc2VzVG9TZWxlY3RvciIsInJlcGxhY2UiLCJjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIiwiJGNvbnRhaW5lciIsInBhcmFtcyIsImNyZWF0ZUVsZW1lbnRzIiwiY2hlY2tQcm9wcyIsImF1dG8iLCJlbGVtZW50Iiwic3VwcG9ydCIsImRldmljZSIsImJyb3dzZXIiLCJnZXRTdXBwb3J0IiwidG91Y2giLCJEb2N1bWVudFRvdWNoIiwicG9pbnRlckV2ZW50cyIsIlBvaW50ZXJFdmVudCIsIm1heFRvdWNoUG9pbnRzIiwib2JzZXJ2ZXIiLCJwYXNzaXZlTGlzdGVuZXIiLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiZ2VzdHVyZXMiLCJjYWxjU3VwcG9ydCIsImdldERldmljZSIsIm92ZXJyaWRlcyIsIl90ZW1wIiwicGxhdGZvcm0iLCJ1YSIsImlvcyIsImFuZHJvaWQiLCJzY3JlZW5XaWR0aCIsIndpZHRoIiwic2NyZWVuSGVpZ2h0IiwiaGVpZ2h0IiwibWF0Y2giLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsIm9zIiwiY2FsY0RldmljZSIsImdldEJyb3dzZXIiLCJpc0VkZ2UiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiaXNXZWJWaWV3IiwidGVzdCIsImNhbGNCcm93c2VyIiwic3dpcGVyIiwicmVzaXplIiwiY3JlYXRlT2JzZXJ2ZXIiLCJkZXN0cm95ZWQiLCJpbml0aWFsaXplZCIsIlJlc2l6ZU9ic2VydmVyIiwiZW50cmllcyIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0IiwiX3JlZiIsImNvbnRlbnRCb3hTaXplIiwiY29udGVudFJlY3QiLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwicmVzaXplSGFuZGxlciIsIm9ic2VydmUiLCJyZW1vdmVPYnNlcnZlciIsInVub2JzZXJ2ZSIsImVtaXQiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJpbml0IiwicmVzaXplT2JzZXJ2ZXIiLCJkZXN0cm95IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJzb3VyY2UiLCJoYXNPd25Qcm9wZXJ0eSIsIk9ic2VydmVyIiwiYXR0YWNoIiwib3B0aW9ucyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVycyIsIm9ic2VydmVQYXJlbnRzIiwiY29udGFpbmVyUGFyZW50cyIsIiRlbCIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiJHdyYXBwZXJFbCIsImRpc2Nvbm5lY3QiLCJwcmlvcml0eSIsIm1ldGhvZCIsImV2ZW50c0xpc3RlbmVycyIsIm9uY2UiLCJvbmNlSGFuZGxlciIsIl9fZW1pdHRlclByb3h5Iiwib25BbnkiLCJldmVudHNBbnlMaXN0ZW5lcnMiLCJvZmZBbnkiLCJldmVudEhhbmRsZXIiLCJldmVudHNBcnJheSIsInVwZGF0ZVNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsIk51bWJlciIsImlzTmFOIiwic2l6ZSIsInVwZGF0ZVNsaWRlcyIsImdldERpcmVjdGlvbkxhYmVsIiwicHJvcGVydHkiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJzd2lwZXJTaXplIiwicnRsIiwicnRsVHJhbnNsYXRlIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzIiwic2xpZGVDbGFzcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic3BhY2VCZXR3ZWVuIiwic2xpZGVQb3NpdGlvbiIsInByZXZTbGlkZVNpemUiLCJzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIiwic2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJzbGlkZXNQZXJDb2x1bW4iLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlckNvbHVtbkZpbGwiLCJtYXgiLCJuZXdTbGlkZXNHcmlkIiwiXyR3cmFwcGVyRWwkY3NzIiwiXyR3cmFwcGVyRWwkY3NzMiIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwic2xpZGUiLCJuZXdTbGlkZU9yZGVySW5kZXgiLCJjb2x1bW4iLCJyb3ciLCJzbGlkZXNQZXJHcm91cCIsImdyb3VwSW5kZXgiLCJzbGlkZUluZGV4SW5Hcm91cCIsImNvbHVtbnNJbkdyb3VwIiwibWluIiwib3JkZXIiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJfc2xpZGUkIiwic3dpcGVyU2xpZGVTaXplIiwiY2VudGVyZWRTbGlkZXMiLCJhYnMiLCJzbGlkZXNQZXJHcm91cFNraXAiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsIl9pIiwic2xpZGVzR3JpZEl0ZW0iLCJfaTIiLCJfc2xpZGVzR3JpZEl0ZW0iLCJfc2xpZGVzJGZpbHRlciRjc3MiLCJfIiwic2xpZGVJbmRleCIsImNzc01vZGUiLCJjZW50ZXJlZFNsaWRlc0JvdW5kcyIsImFsbFNsaWRlc1NpemUiLCJzbGlkZVNpemVWYWx1ZSIsIm1heFNuYXAiLCJzbmFwIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwiX2FsbFNsaWRlc1NpemUiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbmFwSW5kZXgiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ3YXRjaFNsaWRlc1Zpc2liaWxpdHkiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJ1cGRhdGVBdXRvSGVpZ2h0Iiwic3BlZWQiLCJhY3RpdmVTbGlkZXMiLCJzZXRUcmFuc2l0aW9uIiwiZ2V0U2xpZGVCeUluZGV4IiwidmlzaWJsZVNsaWRlcyIsImFjdGl2ZUluZGV4Iiwic3dpcGVyU2xpZGVPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJ0cmFuc2xhdGUiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZVZpc2libGVDbGFzcyIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsImF1dG9IZWlnaHQiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJwcm9ncmVzcyIsInVwZGF0ZVByb2dyZXNzIiwibXVsdGlwbGllciIsInRyYW5zbGF0ZXNEaWZmIiwibWF4VHJhbnNsYXRlIiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJhY3RpdmVTbGlkZSIsInJlYWxJbmRleCIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwic2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyIsInNsaWRlRHVwbGljYXRlTmV4dENsYXNzIiwic2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MiLCJsb29wIiwic2xpZGVEdXBsaWNhdGVDbGFzcyIsIm5leHRTbGlkZSIsInByZXZTbGlkZSIsImVtaXRTbGlkZXNDbGFzc2VzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4Iiwibm9ybWFsaXplU2xpZGVJbmRleCIsInNraXAiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInNsaWRlVG8iLCJydW5DYWxsYmFja3MiLCJpbnRlcm5hbCIsImluaXRpYWwiLCJFcnJvciIsImluZGV4QXNOdW1iZXIiLCJpc0Zpbml0ZSIsIndyYXBwZXJFbCIsImFuaW1hdGluZyIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsImluaXRpYWxTbGlkZSIsImRpcmVjdGlvbiIsIm5vcm1hbGl6ZWRUcmFuc2xhdGUiLCJub3JtYWxpemVkR2lyZCIsIm5vcm1hbGl6ZWRHcmlkTmV4dCIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJzZXRUcmFuc2xhdGUiLCJ0cmFuc2l0aW9uU3RhcnQiLCJfd3JhcHBlckVsJHNjcm9sbFRvIiwiaXNIIiwidCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsVG8iLCJiZWhhdmlvciIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsImxvb3BlZFNsaWRlcyIsInNsaWRlTmV4dCIsImluY3JlbWVudCIsImxvb3BQcmV2ZW50c1NsaWRlIiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwicHJldkluZGV4Iiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJ0aHJlc2hvbGQiLCJjdXJyZW50U25hcCIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwic2xpZGVUb0luZGV4IiwibG9vcENyZWF0ZSIsImxvb3BGaWxsR3JvdXBXaXRoQmxhbmsiLCJibGFua1NsaWRlc051bSIsImJsYW5rTm9kZSIsInNsaWRlQmxhbmtDbGFzcyIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwicHJlcGVuZFNsaWRlcyIsImFwcGVuZFNsaWRlcyIsImNsb25lTm9kZSIsImRpZmYiLCJnZXRUcmFuc2xhdGUiLCJsb29wRGVzdHJveSIsIm9uVG91Y2hTdGFydCIsInRvdWNoRXZlbnRzRGF0YSIsInRvdWNoZXMiLCJvcmlnaW5hbEV2ZW50IiwiJHRhcmdldEVsIiwidG91Y2hFdmVudHNUYXJnZXQiLCJpc1RvdWNoRXZlbnQiLCJ0eXBlIiwid2hpY2giLCJidXR0b24iLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwibm9Td2lwaW5nQ2xhc3MiLCJzaGFkb3dSb290IiwicGF0aCIsIm5vU3dpcGluZ1NlbGVjdG9yIiwiaXNUYXJnZXRTaGFkb3ciLCJub1N3aXBpbmciLCJiYXNlIiwiX19jbG9zZXN0RnJvbSIsImFzc2lnbmVkU2xvdCIsImdldFJvb3ROb2RlIiwiY2xvc2VzdEVsZW1lbnQiLCJhbGxvd0NsaWNrIiwic3dpcGVIYW5kbGVyIiwiY3VycmVudFgiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJjdXJyZW50WSIsInBhZ2VZIiwic3RhcnRYIiwic3RhcnRZIiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwiaW5uZXJXaWR0aCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJvblRvdWNoTW92ZSIsInRhcmdldFRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJwcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciIsInRvdWNoUmVsZWFzZU9uRWRnZXMiLCJ0b3VjaEFuZ2xlIiwiZGlmZlgiLCJkaWZmWSIsInNxcnQiLCJwb3ciLCJhdGFuMiIsIlBJIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RvcFByb3BhZ2F0aW9uIiwic3RhcnRUcmFuc2xhdGUiLCJhbGxvd01vbWVudHVtQm91bmNlIiwiZ3JhYkN1cnNvciIsInNldEdyYWJDdXJzb3IiLCJ0b3VjaFJhdGlvIiwiY3VycmVudFRyYW5zbGF0ZSIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwiZnJlZU1vZGUiLCJ2ZWxvY2l0aWVzIiwicG9zaXRpb24iLCJ0aW1lIiwib25Ub3VjaEVuZCIsImN1cnJlbnRQb3MiLCJ0b3VjaEVuZFRpbWUiLCJ0aW1lRGlmZiIsImxhc3RDbGlja1RpbWUiLCJmcmVlTW9kZU1vbWVudHVtIiwibGFzdE1vdmVFdmVudCIsInBvcCIsInZlbG9jaXR5RXZlbnQiLCJkaXN0YW5jZSIsInZlbG9jaXR5IiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsIm1vbWVudHVtRHVyYXRpb24iLCJmcmVlTW9kZU1vbWVudHVtUmF0aW8iLCJtb21lbnR1bURpc3RhbmNlIiwibmV3UG9zaXRpb24iLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwibmVlZHNMb29wRml4IiwiZG9Cb3VuY2UiLCJib3VuY2VBbW91bnQiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW8iLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlIiwiZnJlZU1vZGVTdGlja3kiLCJtb3ZlRGlzdGFuY2UiLCJjdXJyZW50U2xpZGVTaXplIiwibG9uZ1N3aXBlc01zIiwic3RvcEluZGV4IiwiZ3JvdXBTaXplIiwiX2luY3JlbWVudCIsInJhdGlvIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsIm9uUmVzaXplIiwiYnJlYWtwb2ludHMiLCJzZXRCcmVha3BvaW50IiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwicnVuIiwib25DbGljayIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJvblNjcm9sbCIsInByZXZpb3VzVHJhbnNsYXRlIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnRzIiwidG91Y2hFdmVudHMiLCJzdGFydCIsIm1vdmUiLCJlbmQiLCJwYXNzaXZlTGlzdGVuZXJzIiwicGFzc2l2ZSIsImNhbmNlbCIsInNpbXVsYXRlVG91Y2giLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImRldGFjaEV2ZW50cyIsImFkZENsYXNzZXMiLCJwcmVmaXgiLCJyZXN1bHRDbGFzc2VzIiwic3VmZml4ZXMiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwiaXRlbSIsImpvaW4iLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsInJlbW92ZUNsYXNzZXMiLCJ1cmwiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiYnJlYWtwb2ludHNCYXNlIiwidW5pcXVlTmF2RWxlbWVudHMiLCJwcmVsb2FkSW1hZ2VzIiwidXBkYXRlT25JbWFnZXNSZWFkeSIsIndyYXBwZXJDbGFzcyIsIl9lbWl0Q2xhc3NlcyIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiZGVzY3JpcHRvciIsInByb3RvdHlwZXMiLCJtb2R1bGFyIiwidXNlUGFyYW1zIiwiaW5zdGFuY2VQYXJhbXMiLCJtb2R1bGVzIiwibW9kdWxlTmFtZSIsIm1vZHVsZSIsInVzZU1vZHVsZXMiLCJtb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1zIiwibW9kdWxlRXZlbnROYW1lIiwiZXZlbnRzRW1pdHRlciIsInVwZGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsImN1cnJlbnRTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwiYnlDb250cm9sbGVyIiwieCIsInkiLCJ0cmFuc2xhdGVUbyIsInRyYW5zbGF0ZUJvdW5kcyIsIm5ld1RyYW5zbGF0ZSIsIm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsImRpciIsIm1vdmluZyIsImlzTG9ja2VkIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwibWFuaXB1bGF0aW9uIiwiYXBwZW5kU2xpZGUiLCJwcmVwZW5kU2xpZGUiLCJhZGRTbGlkZSIsImFjdGl2ZUluZGV4QnVmZmVyIiwiYmFzZUxlbmd0aCIsInNsaWRlc0J1ZmZlciIsImN1cnJlbnRTbGlkZSIsInJlbW92ZVNsaWRlIiwic2xpZGVzSW5kZXhlcyIsImluZGV4VG9SZW1vdmUiLCJyZW1vdmVBbGxTbGlkZXMiLCJfc3dpcGVyJGxvb3BlZFNsaWRlcyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50T25seVBhcmFtcyIsInBhcmFtIiwicGFyYW1WYWx1ZSIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsIndhc0VuYWJsZWQiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJjaGFuZ2VEaXJlY3Rpb24iLCJpc0VuYWJsZWQiLCJkaXNhYmxlIiwiZW5hYmxlIiwiY29udGFpbmVyRWwiLCJjdXJyZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJwb2ludHMiLCJwb2ludCIsIm1pblJhdGlvIiwic3Vic3RyIiwic29ydCIsImIiLCJfcG9pbnRzJGkiLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVQb3NpdGlvbiIsImltYWdlcyIsImxvYWRJbWFnZSIsImltYWdlRWwiLCJzcmNzZXQiLCJzaXplcyIsImNoZWNrRm9yQ29tcGxldGUiLCJpbWFnZSIsIm9uUmVhZHkiLCJjb21wbGV0ZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJpbWFnZXNMb2FkZWQiLCJpbWFnZXNUb0xvYWQiLCJjdXJyZW50U3JjIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJtb2R1bGVQYXJhbU5hbWUiLCJkZXNrdG9wIiwic3dpcGVyUGFyYW1zIiwiZGVmYXVsdHMiLCJwYXNzZWRQYXJhbXMiLCJldmVudE5hbWUiLCJ0b3VjaEV2ZW50c1RvdWNoIiwidG91Y2hFdmVudHNEZXNrdG9wIiwiY2xpY2tUaW1lb3V0IiwiQ29uc3RydWN0b3IiLCJzdGF0aWNQcm9wcyIsIl9wcm90byIsInNldFByb2dyZXNzIiwiY3VycmVudCIsImdldFNsaWRlQ2xhc3NlcyIsInNsaWRlRWwiLCJ1cGRhdGVzIiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsIm1vdW50IiwibW91bnRlZCIsImdldFdyYXBwZXJTZWxlY3RvciIsImdldFdyYXBwZXIiLCJ3cmFwcGVyIiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsIm9iamVjdCIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwibSIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJGYWRlIiwiJHNsaWRlRWwiLCJ0eCIsInR5Iiwic2xpZGVPcGFjaXR5IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsIm9wYWNpdHkiLCJldmVudFRyaWdnZXJlZCIsInRyaWdnZXJFdmVudHMiLCJiZWZvcmVJbml0Iiwib3ZlcndyaXRlUGFyYW1zIiwiTmF2aWdhdGlvbiIsInRvZ2dsZUVsIiwiZGlzYWJsZWQiLCJkaXNhYmxlZENsYXNzIiwidGFnTmFtZSIsIl9zd2lwZXIkbmF2aWdhdGlvbiIsIiRuZXh0RWwiLCIkcHJldkVsIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIl9zd2lwZXIkbmF2aWdhdGlvbjIiLCJoaWRlT25DbGljayIsImhpZGRlbkNsYXNzIiwidG9FZGdlIiwiZnJvbUVkZ2UiLCJfc3dpcGVyJG5hdmlnYXRpb24zIiwiY2xpY2siLCJfc3dpcGVyJG5hdmlnYXRpb240IiwidGFyZ2V0RWwiLCJwYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwiaXNIaWRkZW4iLCJQYWdpbmF0aW9uIiwidG90YWwiLCJwYWdpbmF0aW9uVHlwZSIsImJ1bGxldHMiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwibWlkSW5kZXgiLCJkeW5hbWljQnVsbGV0cyIsImJ1bGxldFNpemUiLCJkeW5hbWljTWFpbkJ1bGxldHMiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJidWxsZXRBY3RpdmVDbGFzcyIsImJ1bGxldCIsIiRidWxsZXQiLCJidWxsZXRJbmRleCIsIiRmaXJzdERpc3BsYXllZEJ1bGxldCIsIiRsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsImN1cnJlbnRDbGFzcyIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsInRvdGFsQ2xhc3MiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInJlbmRlckN1c3RvbSIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwicmVuZGVyQnVsbGV0IiwiYnVsbGV0Q2xhc3MiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyRnJhY3Rpb24iLCJyZW5kZXJQcm9ncmVzc2JhciIsImNsaWNrYWJsZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsIm51bWJlciIsImFjdGl2ZUluZGV4Q2hhbmdlIiwic25hcEluZGV4Q2hhbmdlIiwic2xpZGVzTGVuZ3RoQ2hhbmdlIiwic25hcEdyaWRMZW5ndGhDaGFuZ2UiLCJTY3JvbGxiYXIiLCJzY3JvbGxiYXIiLCJkcmFnU2l6ZSIsInRyYWNrU2l6ZSIsIiRkcmFnRWwiLCJuZXdTaXplIiwibmV3UG9zIiwiaGlkZSIsInRpbWVvdXQiLCJkaXZpZGVyIiwibW92ZURpdmlkZXIiLCJkaXNwbGF5IiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJzZXREcmFnUG9zaXRpb24iLCJwb3NpdGlvblJhdGlvIiwiZHJhZ1N0YXJ0UG9zIiwib25EcmFnU3RhcnQiLCJkcmFnVGltZW91dCIsIm9uRHJhZ01vdmUiLCJyZXR1cm5WYWx1ZSIsIm9uRHJhZ0VuZCIsInNuYXBPblJlbGVhc2UiLCJlbmFibGVEcmFnZ2FibGUiLCJhY3RpdmVMaXN0ZW5lciIsImRpc2FibGVEcmFnZ2FibGUiLCIkc3dpcGVyRWwiLCJkcmFnQ2xhc3MiLCJkcmFnRWwiLCJkcmFnZ2FibGUiLCJDb250cm9sbGVyIiwiTGluZWFyU3BsaW5lIiwibWF4SW5kZXgiLCJtaW5JbmRleCIsImd1ZXNzIiwiaTEiLCJpMyIsImludGVycG9sYXRlIiwieDIiLCJhcnJheSIsImJpbmFyeVNlYXJjaCIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJjb250cm9sbGVyIiwic3BsaW5lIiwiX3NldFRyYW5zbGF0ZSIsImNvbnRyb2xsZWRUcmFuc2xhdGUiLCJjb250cm9sbGVkIiwiY29udHJvbCIsInNldENvbnRyb2xsZWRUcmFuc2xhdGUiLCJieSIsImludmVyc2UiLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsIlBhcmFsbGF4Iiwic2V0VHJhbnNmb3JtIiwicnRsRmFjdG9yIiwiY3VycmVudE9wYWNpdHkiLCJjdXJyZW50U2NhbGUiLCJwYXJhbGxheCIsInBhcmFsbGF4RWwiLCIkcGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCJNb3VzZXdoZWVsIiwibGFzdFNjcm9sbFRpbWUiLCJsYXN0RXZlbnRCZWZvcmVTbmFwIiwicmVjZW50V2hlZWxFdmVudHMiLCJpc1N1cHBvcnRlZCIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJzWCIsInNZIiwicFgiLCJwWSIsIndoZWVsRGVsdGEiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGFYIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFZIiwiZGVsdGFYIiwic2hpZnRLZXkiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwiaGFuZGxlTW91c2VFbnRlciIsIm1vdXNlRW50ZXJlZCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGUiLCJtb3VzZXdoZWVsIiwiZXZlbnRzVGFyZ2V0IiwicmVsZWFzZU9uRWRnZXMiLCJkZWx0YSIsImZvcmNlVG9BeGlzIiwiaW52ZXJ0IiwicG9zaXRpb25zIiwic2Vuc2l0aXZpdHkiLCJfbmV3RXZlbnQiLCJzaWduIiwiaWdub3JlV2hlZWxFdmVudHMiLCJfcmVjZW50V2hlZWxFdmVudHMiLCJzaGlmdCIsIl9wcmV2RXZlbnQiLCJmaXJzdEV2ZW50Iiwic25hcFRvVGhyZXNob2xkIiwiYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiIsInN0b3AiLCJuZXdFdmVudCIsInJhdyIsInByZXZFdmVudCIsImFuaW1hdGVTbGlkZXIiLCJyZWxlYXNlU2Nyb2xsIiwidGhyZXNob2xkRGVsdGEiLCJ0aHJlc2hvbGRUaW1lIiwiZ2V0VGltZSIsIkVmZmVjdEZhZGUiLCJoZWFkZXJTbGlkZXIiLCJ0aHVtYnNTbGlkZXIiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsInciLCJub0dsb2JhbCIsImdldFByb3RvIiwiZmxhdCIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwic2NyaXB0IiwiaGVhZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVsZW0iLCJmaXJzdCIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZWxzIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwicXNhRXJyb3IiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiYWRkSGFuZGxlIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsImF0dGFjaEV2ZW50IiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImF0dHJJZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsImV4cHIiLCJlbGVtZW50cyIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNGb2N1cyIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjb250ZW50cyIsInNpYmxpbmciLCJ0YXJnZXRzIiwibCIsImFkZEJhY2siLCJwYXJlbnRzVW50aWwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJzdG9wT25GYWxzZSIsImVtcHR5IiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJwcmltYXJ5IiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiSlNPTiIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJkaXYiLCJyY2hlY2thYmxlVHlwZSIsInJ0YWdOYW1lIiwicnNjcmlwdFR5cGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY2hlY2tDbG9uZSIsIm5vQ2xvbmVDaGVja2VkIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImxldmVyYWdlTmF0aXZlIiwibm90QXN5bmMiLCJzYXZlZCIsImlzVHJpZ2dlciIsImRlbGVnYXRlVHlwZSIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImhhbmRsZU9iaiIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsImxvYWQiLCJub0J1YmJsZSIsImJlZm9yZXVubG9hZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJjdHJsS2V5IiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRvRWxlbWVudCIsImZvY3VzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm1lYXN1cmUiLCJyb3VuZCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0Iiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImlzQm9yZGVyQm94IiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsInNjcm9sbGJveFNpemVCdWdneSIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicGVyY2VudCIsImVhc2VkIiwicG9zIiwic3RlcCIsImZ4IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsInBhcnNlckVycm9yRWxlbSIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicyIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwiX2luaGVyaXRzTG9vc2UiLCJuaWNlU2VsZWN0IiwiJHNlbGVjdCIsIiRkcm9wZG93biIsImNyZWF0ZV9uaWNlX3NlbGVjdCIsIiRvcHRpb25zIiwiJHNlbGVjdGVkIiwiJG9wdGlvbiIsIiRmb2N1c2VkX29wdGlvbiIsIiRuZXh0IiwiJHByZXYiLCJfc3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dsb2JhbFRpbWVsaW5lIiwiX3dpbiIsIl9jb3JlSW5pdHRlZCIsIl9kb2MiLCJfY29yZVJlYWR5IiwiX2xhc3RSZW5kZXJlZEZyYW1lIiwiX3F1aWNrVHdlZW4iLCJfdGlja2VyQWN0aXZlIiwibjEiLCJlYXNlT3V0IiwiX2NvbmZpZyIsImF1dG9TbGVlcCIsImZvcmNlM0QiLCJudWxsVGFyZ2V0V2FybiIsInVuaXRzIiwibGluZUhlaWdodCIsIl9kZWZhdWx0cyIsIm92ZXJ3cml0ZSIsIl9iaWdOdW0iLCJfdGlueU51bSIsIl8yUEkiLCJfSEFMRl9QSSIsIl9nc0lEIiwiX3NxcnQiLCJfY29zIiwiX3NpbiIsInNpbiIsIl9pc1N0cmluZyIsIl9pc0Z1bmN0aW9uIiwiX2lzTnVtYmVyIiwiX2lzVW5kZWZpbmVkIiwiX2lzT2JqZWN0IiwiX2lzTm90RmFsc2UiLCJfd2luZG93RXhpc3RzIiwiX2lzRnVuY09yU3RyaW5nIiwiX2lzVHlwZWRBcnJheSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiX2lzQXJyYXkiLCJfc3RyaWN0TnVtRXhwIiwiX251bUV4cCIsIl9udW1XaXRoVW5pdEV4cCIsIl9jb21wbGV4U3RyaW5nTnVtRXhwIiwiX3JlbEV4cCIsIl9kZWxpbWl0ZWRWYWx1ZUV4cCIsIl91bml0RXhwIiwiX2dsb2JhbHMiLCJfaW5zdGFsbFNjb3BlIiwiX2luc3RhbGwiLCJfbWVyZ2UiLCJnc2FwIiwiX21pc3NpbmdQbHVnaW4iLCJfd2FybiIsInN1cHByZXNzIiwiX2FkZEdsb2JhbCIsIl9lbXB0eUZ1bmMiLCJfcmVzZXJ2ZWRQcm9wcyIsIl9sYXp5VHdlZW5zIiwiX2xhenlMb29rdXAiLCJfcGx1Z2lucyIsIl9lZmZlY3RzIiwiX25leHRHQ0ZyYW1lIiwiX2hhcm5lc3NQbHVnaW5zIiwiX2NhbGxiYWNrTmFtZXMiLCJfaGFybmVzcyIsImhhcm5lc3NQbHVnaW4iLCJfZ3NhcCIsImhhcm5lc3MiLCJ0YXJnZXRUZXN0IiwiR1NDYWNoZSIsIl9nZXRDYWNoZSIsIl9nZXRQcm9wZXJ0eSIsIl9mb3JFYWNoTmFtZSIsIm5hbWVzIiwiX3JvdW5kIiwiX3JvdW5kUHJlY2lzZSIsIl9hcnJheUNvbnRhaW5zQW55IiwidG9TZWFyY2giLCJ0b0ZpbmQiLCJfbGF6eVJlbmRlciIsIl9sYXp5IiwiX2xhenlTYWZlUmVuZGVyIiwic3VwcHJlc3NFdmVudHMiLCJmb3JjZSIsIl9udW1lcmljSWZQb3NzaWJsZSIsIl9wYXNzVGhyb3VnaCIsIl9zZXREZWZhdWx0cyIsIl9zZXRLZXlmcmFtZURlZmF1bHRzIiwidG9NZXJnZSIsIl9tZXJnZURlZXAiLCJfY29weUV4Y2x1ZGluZyIsImV4Y2x1ZGluZyIsIl9pbmhlcml0RGVmYXVsdHMiLCJ2YXJzIiwia2V5ZnJhbWVzIiwiaW5oZXJpdCIsIl9kcCIsIl9yZW1vdmVMaW5rZWRMaXN0SXRlbSIsImZpcnN0UHJvcCIsImxhc3RQcm9wIiwiX3JlbW92ZUZyb21QYXJlbnQiLCJvbmx5SWZQYXJlbnRIYXNBdXRvUmVtb3ZlIiwiYXV0b1JlbW92ZUNoaWxkcmVuIiwiX2FjdCIsIl91bmNhY2hlIiwiX2VuZCIsIl9kdXIiLCJfc3RhcnQiLCJfZGlydHkiLCJfcmVjYWNoZUFuY2VzdG9ycyIsInRvdGFsRHVyYXRpb24iLCJfaGFzTm9QYXVzZWRBbmNlc3RvcnMiLCJfdHMiLCJfZWxhcHNlZEN5Y2xlRHVyYXRpb24iLCJfcmVwZWF0IiwiX2FuaW1hdGlvbkN5Y2xlIiwiX3RUaW1lIiwiX3JEZWxheSIsInRUaW1lIiwiY3ljbGVEdXJhdGlvbiIsIndob2xlIiwiX3BhcmVudFRvQ2hpbGRUb3RhbFRpbWUiLCJwYXJlbnRUaW1lIiwiX3REdXIiLCJfc2V0RW5kIiwiX3J0cyIsIl9hbGlnblBsYXloZWFkIiwidG90YWxUaW1lIiwic21vb3RoQ2hpbGRUaW1pbmciLCJfdGltZSIsIl9wb3N0QWRkQ2hlY2tzIiwidGltZWxpbmUiLCJfaW5pdHRlZCIsInJhd1RpbWUiLCJfY2xhbXAiLCJfelRpbWUiLCJfYWRkVG9UaW1lbGluZSIsInNraXBDaGVja3MiLCJfcGFyc2VQb3NpdGlvbiIsIl9kZWxheSIsInRpbWVTY2FsZSIsInNvcnRCeSIsIl9hZGRMaW5rZWRMaXN0SXRlbSIsIl9zb3J0IiwiX2lzRnJvbU9yRnJvbVN0YXJ0IiwiX3JlY2VudCIsIl9zY3JvbGxUcmlnZ2VyIiwiU2Nyb2xsVHJpZ2dlciIsIl9hdHRlbXB0SW5pdFR3ZWVuIiwiX2luaXRUd2VlbiIsIl9wdCIsImxhenkiLCJfdGlja2VyIiwiZnJhbWUiLCJfcGFyZW50UGxheWhlYWRJc0JlZm9yZVN0YXJ0IiwiX2xvY2siLCJfcmVmMiIsIl9zZXREdXJhdGlvbiIsInNraXBVbmNhY2hlIiwibGVhdmVQbGF5aGVhZCIsInJlcGVhdCIsImR1ciIsInRvdGFsUHJvZ3Jlc3MiLCJfb25VcGRhdGVUb3RhbER1cmF0aW9uIiwiVGltZWxpbmUiLCJfemVyb1Bvc2l0aW9uIiwiZW5kVGltZSIsInBlcmNlbnRBbmltYXRpb24iLCJpc1BlcmNlbnQiLCJsYWJlbHMiLCJyZWNlbnQiLCJjbGlwcGVkRHVyYXRpb24iLCJjaGFyQXQiLCJfY3JlYXRlVHdlZW5UeXBlIiwiaXJWYXJzIiwiaXNMZWdhY3kiLCJ2YXJzSW5kZXgiLCJpbW1lZGlhdGVSZW5kZXIiLCJydW5CYWNrd2FyZHMiLCJzdGFydEF0IiwiX2NvbmRpdGlvbmFsUmV0dXJuIiwiZ2V0VW5pdCIsIl9zbGljZSIsIl9pc0FycmF5TGlrZSIsIm5vbkVtcHR5IiwibGVhdmVTdHJpbmdzIiwiX3dha2UiLCJhciIsImFjY3VtdWxhdG9yIiwiX2FjY3VtdWxhdG9yIiwiX2ZsYXR0ZW4iLCJzaHVmZmxlIiwiZGlzdHJpYnV0ZSIsImVhc2UiLCJfcGFyc2VFYXNlIiwiZnJvbSIsImlzRGVjaW1hbCIsInJhdGlvcyIsInJhdGlvWCIsInJhdGlvWSIsImNlbnRlciIsImVkZ2VzIiwib3JpZ2luWCIsIm9yaWdpblkiLCJ3cmFwQXQiLCJkaXN0YW5jZXMiLCJncmlkIiwiYW1vdW50IiwidSIsIl9pbnZlcnRFYXNlIiwiX3JvdW5kTW9kaWZpZXIiLCJzbmFwVG8iLCJyYWRpdXMiLCJpczJEIiwiZHgiLCJkeSIsInJvdW5kaW5nSW5jcmVtZW50IiwicmV0dXJuRnVuY3Rpb24iLCJfd3JhcEFycmF5IiwiX3JlcGxhY2VSYW5kb20iLCJudW1zIiwibWFwUmFuZ2UiLCJpbk1pbiIsImluTWF4Iiwib3V0TWluIiwib3V0TWF4IiwiaW5SYW5nZSIsIm91dFJhbmdlIiwiX2dldExhYmVsSW5EaXJlY3Rpb24iLCJmcm9tVGltZSIsImJhY2t3YXJkIiwiX2NhbGxiYWNrIiwiZXhlY3V0ZUxhenlGaXJzdCIsImNhbGxiYWNrU2NvcGUiLCJfaW50ZXJydXB0Iiwic2Nyb2xsVHJpZ2dlciIsImtpbGwiLCJfY3JlYXRlUGx1Z2luIiwiY29uZmlnIiwiaXNGdW5jIiwiUGx1Z2luIiwiX3Byb3BzIiwiaW5zdGFuY2VEZWZhdWx0cyIsIl9yZW5kZXJQcm9wVHdlZW5zIiwiX2FkZFByb3BUd2VlbiIsIl9raWxsUHJvcFR3ZWVuc09mIiwibW9kaWZpZXIiLCJfYWRkUGx1Z2luTW9kaWZpZXIiLCJyYXdWYXJzIiwic3RhdGljcyIsImdldFNldHRlciIsIl9nZXRTZXR0ZXIiLCJhbGlhc2VzIiwicmVnaXN0ZXIiLCJQcm9wVHdlZW4iLCJfMjU1IiwiX2NvbG9yTG9va3VwIiwiYXF1YSIsImxpbWUiLCJzaWx2ZXIiLCJibGFjayIsIm1hcm9vbiIsInRlYWwiLCJibHVlIiwibmF2eSIsIndoaXRlIiwib2xpdmUiLCJ5ZWxsb3ciLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwiZ3JlZW4iLCJyZWQiLCJwaW5rIiwiY3lhbiIsInRyYW5zcGFyZW50IiwiX2h1ZSIsImgiLCJtMSIsIm0yIiwic3BsaXRDb2xvciIsInRvSFNMIiwiZm9yY2VBbHBoYSIsInIiLCJnIiwid2FzSFNMIiwiX2NvbG9yT3JkZXJEYXRhIiwiX2NvbG9yRXhwIiwiX2Zvcm1hdENvbG9ycyIsIm9yZGVyTWF0Y2hEYXRhIiwic2hlbGwiLCJjb2xvcnMiLCJjb2xvciIsIl9oc2xFeHAiLCJfY29sb3JTdHJpbmdGaWx0ZXIiLCJjb21iaW5lZCIsIl9pZCIsIl9yZXEiLCJfcmFmIiwiX3NlbGYiLCJfZGVsdGEiLCJfZ2V0VGltZSIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfc3RhcnRUaW1lIiwiX2xhc3RVcGRhdGUiLCJfZ2FwIiwiX25leHRUaW1lIiwiX2xpc3RlbmVycyIsIl90aWNrIiwib3ZlcmxhcCIsImVsYXBzZWQiLCJtYW51YWwiLCJkZWx0YVJhdGlvIiwiZnBzIiwid2FrZSIsImdzYXBWZXJzaW9ucyIsIkdyZWVuU29ja0dsb2JhbHMiLCJzbGVlcCIsImYiLCJsYWdTbW9vdGhpbmciLCJhZGp1c3RlZExhZyIsIl9mcHMiLCJfZWFzZU1hcCIsIl9jdXN0b21FYXNlRXhwIiwiX3F1b3Rlc0V4cCIsIl9wYXJzZU9iamVjdEluU3RyaW5nIiwicGFyc2VkVmFsIiwibGFzdEluZGV4T2YiLCJfcHJvcGFnYXRlWW95b0Vhc2UiLCJpc1lveW8iLCJfZmlyc3QiLCJ5b3lvRWFzZSIsIl95b3lvIiwiX2Vhc2UiLCJfeUVhc2UiLCJkZWZhdWx0RWFzZSIsImNsb3NlIiwic3Vic3RyaW5nIiwiX0NFIiwiX2NvbmZpZ0Vhc2VGcm9tU3RyaW5nIiwiX2luc2VydEVhc2UiLCJlYXNlSW4iLCJlYXNlSW5PdXQiLCJfZWFzZUluT3V0RnJvbU91dCIsIl9jb25maWdFbGFzdGljIiwiYW1wbGl0dWRlIiwicGVyaW9kIiwicDEiLCJwMiIsInAzIiwiYXNpbiIsIl9jb25maWdCYWNrIiwib3ZlcnNob290IiwicG93ZXIiLCJMaW5lYXIiLCJlYXNlTm9uZSIsIm5vbmUiLCJTdGVwcGVkRWFzZSIsInN0ZXBzIiwiaW1tZWRpYXRlU3RhcnQiLCJJbmZpbml0eSIsInJlcGVhdERlbGF5IiwieW95byIsIl90b3RhbFRpbWUiLCJfcHRMb29rdXAiLCJfcFRpbWUiLCJpdGVyYXRpb24iLCJfcHMiLCJpbmNsdWRlUmVwZWF0cyIsIndyYXBSZXBlYXRzIiwiZ2xvYmFsVGltZSIsInNlZWsiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicGxheSIsInJldmVyc2VkIiwicGF1c2UiLCJhdFRpbWUiLCJyZXN1bWUiLCJpbnZhbGlkYXRlIiwiaXNBY3RpdmUiLCJldmVudENhbGxiYWNrIiwiX29uVXBkYXRlIiwiUHJvbWlzZSIsIl9yZXNvbHZlIiwiX3RoZW4iLCJfcHJvbSIsIl9BbmltYXRpb24iLCJzb3J0Q2hpbGRyZW4iLCJfcHJvdG8yIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsInN0YWdnZXJUbyIsInN0YWdnZXIiLCJvbkNvbXBsZXRlQWxsIiwib25Db21wbGV0ZUFsbFBhcmFtcyIsIm9uQ29tcGxldGUiLCJvbkNvbXBsZXRlUGFyYW1zIiwic3RhZ2dlckZyb20iLCJzdGFnZ2VyRnJvbVRvIiwicHJldlBhdXNlZCIsInBhdXNlVHdlZW4iLCJwcmV2U3RhcnQiLCJwcmV2SXRlcmF0aW9uIiwicHJldlRpbWUiLCJ0RHVyIiwiY3Jvc3NpbmdTdGFydCIsInJld2luZGluZyIsImRvZXNXcmFwIiwicmVwZWF0UmVmcmVzaCIsIm9uUmVwZWF0IiwiX2hhc1BhdXNlIiwiX2ZvcmNpbmciLCJfbGFzdCIsIl9maW5kTmV4dFBhdXNlVHdlZW4iLCJvblVwZGF0ZSIsImFkanVzdGVkVGltZSIsIl90aGlzMiIsImFkZExhYmVsIiwiZ2V0Q2hpbGRyZW4iLCJ0aW1lbGluZXMiLCJpZ25vcmVCZWZvcmVUaW1lIiwiYW5pbWF0aW9ucyIsInJlbW92ZUxhYmVsIiwia2lsbFR3ZWVuc09mIiwiX3RvdGFsVGltZTIiLCJhZGRQYXVzZSIsInJlbW92ZVBhdXNlIiwib25seUFjdGl2ZSIsImdldFR3ZWVuc09mIiwiX292ZXJ3cml0aW5nVHdlZW4iLCJwYXJzZWRUYXJnZXRzIiwiaXNHbG9iYWxUaW1lIiwiX3RhcmdldHMiLCJ0d2VlblRvIiwiaW5pdHRlZCIsInRsIiwiX3ZhcnMiLCJfb25TdGFydCIsIm9uU3RhcnQiLCJvblN0YXJ0UGFyYW1zIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwibmV4dExhYmVsIiwiYWZ0ZXJUaW1lIiwicHJldmlvdXNMYWJlbCIsImJlZm9yZVRpbWUiLCJjdXJyZW50TGFiZWwiLCJzaGlmdENoaWxkcmVuIiwiYWRqdXN0TGFiZWxzIiwiY2xlYXIiLCJpbmNsdWRlTGFiZWxzIiwidXBkYXRlUm9vdCIsIl9hZGRDb21wbGV4U3RyaW5nUHJvcFR3ZWVuIiwic3RyaW5nRmlsdGVyIiwiZnVuY1BhcmFtIiwic3RhcnROdW1zIiwiZW5kTnVtIiwiY2h1bmsiLCJzdGFydE51bSIsImhhc1JhbmRvbSIsInB0IiwiX3JlbmRlckNvbXBsZXhTdHJpbmciLCJtYXRjaEluZGV4IiwiZnAiLCJwYXJzZWRTdGFydCIsIl9zZXR0ZXJGdW5jV2l0aFBhcmFtIiwiX3NldHRlckZ1bmMiLCJfc2V0dGVyUGxhaW4iLCJfcmVuZGVyQm9vbGVhbiIsIl9yZW5kZXJQbGFpbiIsIl9jaGVja1BsdWdpbiIsInBsdWdpbiIsInB0TG9va3VwIiwiX3BhcnNlRnVuY09yU3RyaW5nIiwiX3Byb2Nlc3NWYXJzIiwiY2xlYW5WYXJzIiwiaGFzUHJpb3JpdHkiLCJnc0RhdGEiLCJoYXJuZXNzVmFycyIsIm9uVXBkYXRlUGFyYW1zIiwiYXV0b1JldmVydCIsInByZXZTdGFydEF0IiwiX3N0YXJ0QXQiLCJmdWxsVGFyZ2V0cyIsImF1dG9PdmVyd3JpdGUiLCJfb3ZlcndyaXRlIiwiX2Zyb20iLCJfb3AiLCJfc29ydFByb3BUd2VlbnNCeVByaW9yaXR5IiwiX29uSW5pdCIsIl9zdGFnZ2VyVHdlZW5Qcm9wcyIsIl9zdGFnZ2VyUHJvcHNUb1NraXAiLCJfQW5pbWF0aW9uMiIsInNraXBJbmhlcml0IiwiX3RoaXMzIiwiY3VyVGFyZ2V0Iiwic3RhZ2dlckZ1bmMiLCJzdGFnZ2VyVmFyc1RvTWVyZ2UiLCJfdGhpczMkdmFycyIsIl9wcm90bzMiLCJwcmV2UmF0aW8iLCJfcmVuZGVyWmVyb0R1cmF0aW9uVHdlZW4iLCJvdmVyd3JpdHRlblByb3BzIiwiY3VyTG9va3VwIiwiY3VyT3ZlcndyaXRlUHJvcHMiLCJraWxsaW5nVGFyZ2V0cyIsInByb3BUd2Vlbkxvb2t1cCIsImZpcnN0UFQiLCJhMSIsImEyIiwiX2FycmF5c01hdGNoIiwicHJvcGVydHlBbGlhc2VzIiwiX2FkZEFsaWFzZXNUb1ZhcnMiLCJvblJldmVyc2VDb21wbGV0ZSIsIm9uUmV2ZXJzZUNvbXBsZXRlUGFyYW1zIiwiX3NldHRlckF0dHJpYnV0ZSIsImhhc05vbkRlcGVuZGVudFJlbWFpbmluZyIsIm9wIiwiZGVwIiwiX3NldHRlcldpdGhNb2RpZmllciIsIm1TZXQiLCJtdCIsInB0MiIsInByIiwiY2hhbmdlIiwicmVuZGVyZXIiLCJUd2Vlbk1heCIsIlR3ZWVuTGl0ZSIsIlRpbWVsaW5lTGl0ZSIsIlRpbWVsaW5lTWF4IiwicmVnaXN0ZXJQbHVnaW4iLCJnZXRQcm9wZXJ0eSIsInVuY2FjaGUiLCJmb3JtYXQiLCJxdWlja1NldHRlciIsInNldHRlcnMiLCJpc1R3ZWVuaW5nIiwicmVnaXN0ZXJFZmZlY3QiLCJfcmVmMyIsInBsdWdpbnMiLCJleHRlbmRUaW1lbGluZSIsInBsdWdpbk5hbWUiLCJyZWdpc3RlckVhc2UiLCJwYXJzZUVhc2UiLCJleHBvcnRSb290IiwiaW5jbHVkZURlbGF5ZWRDYWxscyIsInV0aWxzIiwicmFuZ2UiLCJ3cmFwWW95byIsImNsYW1wIiwibmF0aXZlRWxlbWVudCIsImZ1bmN0aW9ucyIsInJlZHVjZSIsInVuaXRpemUiLCJtdXRhdGUiLCJpbnRlcnBvbGF0b3JzIiwiaWwiLCJpc1N0cmluZyIsIm1hc3RlciIsImluc3RhbGwiLCJlZmZlY3RzIiwidGlja2VyIiwiZ2xvYmFsVGltZWxpbmUiLCJjb3JlIiwiZ2xvYmFscyIsImdldENhY2hlIiwic3VwcHJlc3NPdmVyd3JpdGVzIiwiX2dldFBsdWdpblByb3BUd2VlbiIsIl9idWlsZE1vZGlmaWVyUGx1Z2luIiwibW9kaWZpZXJzIiwiX2FkZE1vZGlmaWVycyIsIlBvd2VyMCIsIlBvd2VyMSIsIlBvd2VyMiIsIlBvd2VyMyIsIlBvd2VyNCIsIlF1YWQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTdHJvbmciLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsIlNpbmUiLCJFeHBvIiwiQ2lyYyIsIl9kb2NFbGVtZW50IiwiX3BsdWdpbkluaXR0ZWQiLCJfdGVtcERpdiIsIl9yZWNlbnRTZXR0ZXJQbHVnaW4iLCJfc3VwcG9ydHMzRCIsIl90cmFuc2Zvcm1Qcm9wcyIsIl9SQUQyREVHIiwiX0RFRzJSQUQiLCJfYXRhbjIiLCJfY2Fwc0V4cCIsIl9ob3Jpem9udGFsRXhwIiwiX2NvbXBsZXhFeHAiLCJfcHJvcGVydHlBbGlhc2VzIiwiYXV0b0FscGhhIiwiYWxwaGEiLCJfcmVuZGVyQ1NTUHJvcCIsIl9yZW5kZXJQcm9wV2l0aEVuZCIsIl9yZW5kZXJDU1NQcm9wV2l0aEJlZ2lubmluZyIsIl9yZW5kZXJSb3VuZGVkQ1NTUHJvcCIsIl9yZW5kZXJOb25Ud2VlbmluZ1ZhbHVlIiwiX3JlbmRlck5vblR3ZWVuaW5nVmFsdWVPbmx5QXRFbmQiLCJfc2V0dGVyQ1NTU3R5bGUiLCJfc2V0dGVyQ1NTUHJvcCIsIl9zZXR0ZXJUcmFuc2Zvcm0iLCJfc2V0dGVyU2NhbGUiLCJfc2V0dGVyU2NhbGVXaXRoUmVuZGVyIiwicmVuZGVyVHJhbnNmb3JtIiwiX3NldHRlclRyYW5zZm9ybVdpdGhSZW5kZXIiLCJfdHJhbnNmb3JtUHJvcCIsIl90cmFuc2Zvcm1PcmlnaW5Qcm9wIiwiX2NyZWF0ZUVsZW1lbnQiLCJucyIsIl9nZXRDb21wdXRlZFByb3BlcnR5Iiwic2tpcFByZWZpeEZhbGxiYWNrIiwiY3MiLCJfY2hlY2tQcm9wUHJlZml4IiwiX3ByZWZpeGVzIiwicHJlZmVyUHJlZml4IiwiX2luaXRDb3JlIiwiX2dldEJCb3hIYWNrIiwic3dhcElmUG9zc2libGUiLCJiYm94Iiwic3ZnIiwib3duZXJTVkdFbGVtZW50Iiwib2xkUGFyZW50Iiwib2xkU2libGluZyIsIm9sZENTUyIsImdldEJCb3giLCJfZ3NhcEJCb3giLCJfZ2V0QXR0cmlidXRlRmFsbGJhY2tzIiwiYXR0cmlidXRlc0FycmF5IiwiaGFzQXR0cmlidXRlIiwiX2dldEJCb3giLCJib3VuZHMiLCJfaXNTVkciLCJnZXRDVE0iLCJfcmVtb3ZlUHJvcGVydHkiLCJyZW1vdmVQcm9wZXJ0eSIsIl9hZGROb25Ud2VlbmluZ1BUIiwiYmVnaW5uaW5nIiwib25seVNldEF0RW5kIiwiX25vbkNvbnZlcnRpYmxlVW5pdHMiLCJkZWciLCJyYWQiLCJ0dXJuIiwiX2NvbnZlcnRUb1VuaXQiLCJweCIsImlzU1ZHIiwiY3VyVW5pdCIsImhvcml6b250YWwiLCJpc1Jvb3RTVkciLCJtZWFzdXJlUHJvcGVydHkiLCJ0b1BpeGVscyIsInRvUGVyY2VudCIsIl9nZXQiLCJfcGFyc2VUcmFuc2Zvcm0iLCJfZmlyc3RUd29Pbmx5Iiwiek9yaWdpbiIsIl9zcGVjaWFsUHJvcHMiLCJfdHdlZW5Db21wbGV4Q1NTU3RyaW5nIiwic3RhcnRWYWx1ZXMiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJlbmRVbml0Iiwic3RhcnRVbml0IiwiX2tleXdvcmRUb1BlcmNlbnQiLCJib3R0b20iLCJfcmVuZGVyQ2xlYXJQcm9wcyIsImNsZWFyVHJhbnNmb3JtcyIsImNsZWFyUHJvcHMiLCJfaWRlbnRpdHkyRE1hdHJpeCIsIl9yb3RhdGlvbmFsUHJvcGVydGllcyIsIl9pc051bGxUcmFuc2Zvcm0iLCJfZ2V0Q29tcHV0ZWRUcmFuc2Zvcm1NYXRyaXhBc0FycmF5IiwibWF0cml4U3RyaW5nIiwiX2dldE1hdHJpeCIsImZvcmNlMkQiLCJhZGRlZFRvRE9NIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwiX2FwcGx5U1ZHT3JpZ2luIiwib3JpZ2luSXNBYnNvbHV0ZSIsInNtb290aCIsIm1hdHJpeEFycmF5IiwicGx1Z2luVG9BZGRQcm9wVHdlZW5zVG8iLCJkZXRlcm1pbmFudCIsInhPcmlnaW5PbGQiLCJ4T3JpZ2luIiwieU9yaWdpbk9sZCIsInlPcmlnaW4iLCJ4T2Zmc2V0T2xkIiwieE9mZnNldCIsInlPZmZzZXRPbGQiLCJ5T2Zmc2V0Iiwib3JpZ2luU3BsaXQiLCJ6Iiwicm90YXRpb24iLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJza2V3WCIsInNrZXdZIiwicGVyc3BlY3RpdmUiLCJhbmdsZSIsImExMiIsImEyMiIsInQxIiwidDIiLCJ0MyIsImExMyIsImEyMyIsImEzMyIsImE0MiIsImE0MyIsImEzMiIsImludmVydGVkU2NhbGVYIiwiZm9yY2VDU1MiLCJ4UGVyY2VudCIsInlQZXJjZW50IiwidHJhbnNmb3JtUGVyc3BlY3RpdmUiLCJfcmVuZGVyU1ZHVHJhbnNmb3JtcyIsIl9yZW5kZXJDU1NUcmFuc2Zvcm1zIiwiX3JlbmRlck5vbjNEVHJhbnNmb3JtcyIsIl9hZGRQeFRyYW5zbGF0ZSIsIl96ZXJvRGVnIiwiX3plcm9QeCIsIl9lbmRQYXJlbnRoZXNpcyIsInRyYW5zZm9ybXMiLCJ1c2UzRCIsImExMSIsImEyMSIsInRhbiIsIl9hZGRSb3RhdGlvbmFsUHJvcFR3ZWVuIiwiY2FwIiwiX2Fzc2lnbiIsIl9hZGRSYXdUcmFuc2Zvcm1QVHMiLCJlbmRDYWNoZSIsInN0YXJ0Q2FjaGUiLCJzaWRlIiwiYWxsIiwiQ1NTUGx1Z2luIiwic3BlY2lhbFByb3AiLCJpc1RyYW5zZm9ybVJlbGF0ZWQiLCJ0cmFuc2Zvcm1Qcm9wVHdlZW4iLCJwYXJzZVRyYW5zZm9ybSIsInNtb290aE9yaWdpbiIsImF1dG9Sb3VuZCIsImNoZWNrUHJlZml4IiwicG9zaXRpb25BbmRTY2FsZSIsIl9kb2NFbCIsIl9ib2R5IiwiX3Jvb3QiLCJfcmVzaXplRGVsYXkiLCJfcmVxdWVzdCIsIl90b0FycmF5IiwiX3RpbWUyIiwiX3N5bmNJbnRlcnZhbCIsIl9yZWZyZXNoaW5nIiwiX3BvaW50ZXJJc0Rvd24iLCJfcHJldldpZHRoIiwiX3ByZXZIZWlnaHQiLCJfYXV0b1JlZnJlc2giLCJfaWdub3JlUmVzaXplIiwiX2xpbWl0Q2FsbGJhY2tzIiwiX2NyZWF0aW5nTWVkaWEiLCJfbGFzdE1lZGlhVGljayIsIl9yZWZyZXNoaW5nQWxsIiwiZ3NhcFdpdGhDU1MiLCJfc3RhcnR1cCIsIl9wcm94aWVzIiwiX3Njcm9sbGVycyIsIl90aW1lMSIsIl9sYXN0U2Nyb2xsVGltZSIsIl9lbmFibGVkIiwiX2dldFRhcmdldCIsIl9nZXRHU0FQIiwiX2lzVmlld3BvcnQiLCJfZ2V0UHJveHlQcm9wIiwiX2dldFNjcm9sbEZ1bmMiLCJzYyIsIl92ZXJ0aWNhbCIsIl9nZXRCb3VuZHNGdW5jIiwiX3dpbk9mZnNldHMiLCJfZ2V0Qm91bmRzIiwiX21heFNjcm9sbCIsImQyIiwiX2l0ZXJhdGVBdXRvUmVmcmVzaCIsIl9jYWxsSWZGdW5jIiwiX2NvbWJpbmVGdW5jIiwiZjEiLCJmMiIsInJlc3VsdDEiLCJyZXN1bHQyIiwiX2VuZEFuaW1hdGlvbiIsImNhbGxiYWNrQW5pbWF0aW9uIiwiX2FicyIsIl9sZWZ0IiwiX3JpZ2h0IiwiX2JvdHRvbSIsIl93aWR0aCIsIl9oZWlnaHQiLCJfcGFkZGluZyIsIl9tYXJnaW4iLCJfV2lkdGgiLCJfcHgiLCJfaG9yaXpvbnRhbCIsIm9zMiIsIl9nZXRDb21wdXRlZFN0eWxlIiwid2l0aG91dFRyYW5zZm9ybXMiLCJfZ2V0U2l6ZSIsIl9yZWY0IiwiX2dldExhYmVsUmF0aW9BcnJheSIsIl9zbmFwRGlyZWN0aW9uYWwiLCJzbmFwSW5jcmVtZW50T3JBcnJheSIsInNuYXBwZWQiLCJfbXVsdGlMaXN0ZW5lciIsIl9hZGRMaXN0ZW5lciIsIl9yZW1vdmVMaXN0ZW5lciIsIl9tYXJrZXJEZWZhdWx0cyIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsImluZGVudCIsImZvbnRTaXplIiwidG9nZ2xlQWN0aW9ucyIsImFudGljaXBhdGVQaW4iLCJfa2V5d29yZHMiLCJfb2Zmc2V0VG9QeCIsImVxSW5kZXgiLCJfY3JlYXRlTWFya2VyIiwiX3JlZjUiLCJtYXRjaFdpZHRoRWwiLCJjb250YWluZXJBbmltYXRpb24iLCJ1c2VGaXhlZFBvc2l0aW9uIiwiaXNTY3JvbGxlciIsImlzU3RhcnQiLCJfaXNTdGFydCIsImlubmVyVGV4dCIsIl9vZmZzZXQiLCJfcG9zaXRpb25NYXJrZXIiLCJtYXJrZXIiLCJmbGlwcGVkIiwib3Bwb3NpdGVTaWRlIiwiX2lzRmxpcHBlZCIsIl90cmlnZ2VycyIsIl9pZHMiLCJfc3luYyIsIl91cGRhdGVBbGwiLCJfb25TY3JvbGwiLCJfZGlzcGF0Y2giLCJfb25SZXNpemUiLCJmdWxsc2NyZWVuRWxlbWVudCIsIl9lbXB0eUFycmF5IiwiX21lZGlhIiwiX29uTWVkaWFDaGFuZ2UiLCJfcmV2ZXJ0QWxsIiwiX3JldmVydFJlY29yZGVkIiwiX3JlZnJlc2hBbGwiLCJfc29mdFJlZnJlc2giLCJfc2F2ZWRTdHlsZXMiLCJtZWRpYSIsInJldmVydCIsIl9jbGVhclNjcm9sbE1lbW9yeSIsInJlYyIsInNraXBSZXZlcnQiLCJyZWZyZXNoSW5pdHMiLCJyZWZyZXNoIiwiX2xhc3RTY3JvbGwiLCJfZGlyZWN0aW9uIiwicmVjb3JkVmVsb2NpdHkiLCJzY3JvbGwiLCJfcHJvcE5hbWVzVG9Db3B5IiwiX3N0YXRlUHJvcHMiLCJfc3dhcFBpbkluIiwicGluIiwic3BhY2VyIiwic3BhY2VyU3RhdGUiLCJzcGFjZXJTdHlsZSIsInBpblN0eWxlIiwiX3NldFN0YXRlIiwiX2dldFN0YXRlIiwic2Nyb2xsZXJTaXplIiwibWFya2VyU2Nyb2xsZXIiLCJzY3JvbGxlckJvdW5kcyIsImJvcmRlcldpZHRoIiwic2Nyb2xsZXJNYXgiLCJsb2NhbE9mZnNldCIsImdsb2JhbE9mZnNldCIsIm9mZnNldHMiLCJfY2FTY3JvbGxEaXN0IiwiX3ByZWZpeEV4cCIsIl9yZXBhcmVudCIsIl9zdE9yaWciLCJfZ2V0VHdlZW5DcmVhdG9yIiwic2Nyb2xsZXIiLCJsYXN0U2Nyb2xsMSIsImxhc3RTY3JvbGwyIiwiZ2V0U2Nyb2xsIiwiZ2V0VHdlZW4iLCJpbml0aWFsVmFsdWUiLCJjaGFuZ2UxIiwiY2hhbmdlMiIsInRvU3RyIiwiaXNDYWxsYWJsZSIsIm1heFNhZmVJbnRlZ2VyIiwidG9MZW5ndGgiLCJwaW5DYWNoZSIsInNuYXBGdW5jIiwic2Nyb2xsMSIsInNjcm9sbDIiLCJtYXJrZXJTdGFydCIsIm1hcmtlckVuZCIsIm1hcmtlclN0YXJ0VHJpZ2dlciIsIm1hcmtlckVuZFRyaWdnZXIiLCJtYXJrZXJWYXJzIiwicGluT3JpZ2luYWxTdGF0ZSIsInBpbkFjdGl2ZVN0YXRlIiwicGluU3RhdGUiLCJwaW5HZXR0ZXIiLCJwaW5TZXR0ZXIiLCJwaW5TdGFydCIsInBpbkNoYW5nZSIsInNwYWNpbmdTdGFydCIsIm1hcmtlclN0YXJ0U2V0dGVyIiwibWFya2VyRW5kU2V0dGVyIiwic25hcDEiLCJzbmFwMiIsInNjcnViVHdlZW4iLCJzY3J1YlNtb290aCIsInNuYXBEdXJDbGFtcCIsInNuYXBEZWxheWVkQ2FsbCIsInByZXZQcm9ncmVzcyIsInByZXZTY3JvbGwiLCJwcmV2QW5pbVByb2dyZXNzIiwiY2FNYXJrZXJTZXR0ZXIiLCJvblRvZ2dsZSIsIm9uUmVmcmVzaCIsInNjcnViIiwicGluU3BhY2luZyIsImludmFsaWRhdGVPblJlZnJlc2giLCJvblNjcnViQ29tcGxldGUiLCJvblNuYXBDb21wbGV0ZSIsInBpblJlcGFyZW50IiwicGluU3BhY2VyIiwiZmFzdFNjcm9sbEVuZCIsInByZXZlbnRPdmVybGFwcyIsImlzVG9nZ2xlIiwic2Nyb2xsZXJDYWNoZSIsImlzVmlld3BvcnQiLCJwaW5UeXBlIiwiY2FsbGJhY2tzIiwib25FbnRlciIsIm9uTGVhdmUiLCJvbkVudGVyQmFjayIsIm9uTGVhdmVCYWNrIiwibWFya2VycyIsIm9uUmVmcmVzaEluaXQiLCJnZXRTY3JvbGxlclNpemUiLCJfZ2V0U2l6ZUZ1bmMiLCJnZXRTY3JvbGxlck9mZnNldHMiLCJfZ2V0T2Zmc2V0c0Z1bmMiLCJsYXN0U25hcCIsInNjcm9sbEZ1bmMiLCJ0d2VlblNjcm9sbCIsInNjcm9sbEJlaGF2aW9yIiwiX2dldENsb3Nlc3RMYWJlbCIsInN0IiwiZGlyZWN0aW9uYWwiLCJnZXRWZWxvY2l0eSIsIm5hdHVyYWxFbmQiLCJpbmVydGlhIiwiZW5kU2Nyb2xsIiwiX3NuYXAiLCJfb25JbnRlcnJ1cHQiLCJvbkludGVycnVwdCIsIl9vbkNvbXBsZXRlIiwic3BhY2VySXNOYXRpdmUiLCJvbGRPblVwZGF0ZSIsIm9sZFBhcmFtcyIsInByZXZpb3VzIiwicHJldlJlZnJlc2hpbmciLCJpc1JldmVydGVkIiwiX3N3YXBQaW5PdXQiLCJzb2Z0Iiwib3ZlcnJpZGUiLCJjdXJUcmlnZ2VyIiwiY3VyUGluIiwib3Bwb3NpdGVTY3JvbGwiLCJyZXZlcnRlZFBpbnMiLCJvdGhlclBpbk9mZnNldCIsInBhcnNlZEVuZCIsInBhcnNlZEVuZFRyaWdnZXIiLCJlbmRUcmlnZ2VyIiwicGlubmVkQ29udGFpbmVyIiwidHJpZ2dlckluZGV4IiwiX3BpblB1c2giLCJvbWl0T2Zmc2V0cyIsIl9jb3B5U3RhdGUiLCJfcGluT2Zmc2V0IiwiZW5kQW5pbWF0aW9uIiwiZ2V0VHJhaWxpbmciLCJmb3JjZUZha2UiLCJ0b2dnbGVTdGF0ZSIsImFjdGlvbiIsInN0YXRlQ2hhbmdlZCIsInRvZ2dsZWQiLCJpc0F0TWF4IiwiaXNUYWtpbmdBY3Rpb24iLCJjbGlwcGVkIiwiYWxsb3dBbmltYXRpb24iLCJib2R5U3R5bGUiLCJib3JkZXJUb3BTdHlsZSIsInNldEludGVydmFsIiwibGltaXRDYWxsYmFja3MiLCJtcyIsInN5bmNJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJhdXRvUmVmcmVzaEV2ZW50cyIsInNjcm9sbGVyUHJveHkiLCJtcSIsImFkZExpc3RlbmVyIiwiY2xlYXJNYXRjaE1lZGlhIiwicXVlcnkiLCJpc0luVmlld3BvcnQiLCJwb3NpdGlvbkluVmlld3BvcnQiLCJyZWZlcmVuY2VQb2ludCIsImFuaW1hdGVGcm9tIiwic2F2ZVN0eWxlcyIsInNhZmUiLCJjbGVhclNjcm9sbE1lbW9yeSIsIm1heFNjcm9sbCIsImdldFNjcm9sbEZ1bmMiLCJzbmFwRGlyZWN0aW9uYWwiLCJiYXRjaCIsInZhcnNDb3B5IiwiYmF0Y2hNYXgiLCJwcm94eUNhbGxiYWNrIiwidHJpZ2dlcnMiLCJyZWZyZXNoUHJpb3JpdHkiLCJzY3JvbGxVcCIsInRvSW50ZWdlciIsImFycmF5TGlrZSIsIkMiLCJUIiwibWFwRm4iLCJrVmFsdWUiLCJBIiwicHJlZml4QW5pbWF0aW9uIiwicHJlZml4VHJhbnNpdGlvbiIsIldlYmtpdEFuaW1hdGlvbiIsIk1vekFuaW1hdGlvbiIsIk9BbmltYXRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwicnVuT25jZSIsIkJhZGdlckFjY29yZGlvbiIsIl9jbGFzc0NhbGxDaGVjayIsImhlYWRlckNsYXNzIiwicGFuZWxDbGFzcyIsInBhbmVsSW5uZXJDbGFzcyIsImFjdGl2ZUNsYXNzIiwiaGlkZW5DbGFzcyIsImluaXRpYWxpemVkQ2xhc3MiLCJpbml0YWxpc2VkQ2xhc3MiLCJoZWFkZXJEYXRhQXR0ciIsIm9wZW5NdWx0aXBsZVBhbmVscyIsIm9wZW5IZWFkZXJzT25Mb2FkIiwiYWRkTGlzdGVuZXJzT25Jbml0IiwiaGVhZGVyT3BlbkxhYmVsIiwiaGVhZGVyQ2xvc2VMYWJlbCIsInJvbGVzIiwiaGVhZGVyUGFyZW50IiwiaGVhZGVyIiwiYWNjIiwiYXJyMiIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwicGFuZWxzIiwicGFuZWwiLCJzdGF0ZXMiLCJpZHMiLCJ0b2dnbGluZyIsInByb3RvUHJvcHMiLCJfc2V0dXBBdHRyaWJ1dGVzIiwiX2luaXRhbFN0YXRlIiwiY2FsY3VsYXRlQWxsUGFuZWxzSGVpZ2h0IiwiX2luc2VydERhdGFBdHRycyIsIl9hZGRMaXN0ZW5lcnMiLCJfZmluaXNoSW5pdGlhbGl6YXRpb24iLCJyb2xlIiwiaGVhZGVyc1RvT3BlbiIsIl9vcGVuSGVhZGVyc09uTG9hZCIsIl9yZW5kZXJEb20iLCJfc2V0Um9sZSIsImhhbmRsZUNsaWNrIiwidGFyZ2V0SGVhZGVyIiwiaGVhZGVySW5kZXgiLCJ0YXJnZXRIZWFkZXJDbGFzcyIsInNldFN0YXRlIiwidGFyZ2V0SGVhZGVySWQiLCJfdGhpczQiLCJnZXRTdGF0ZSIsIm5ld1N0YXRlIiwiX3RoaXM1IiwidG9nZ2xlUGFuZWwiLCJfdGhpczYiLCJfdGhpczciLCJhbmltYXRpb25BY3Rpb24iLCJfdGhpczgiLCJwYW5lbFRvQ2xvc2UiLCJvbkNTU1RyYW5zaXRpb25FbmQiLCJfaGVhZGVyIiwicGFuZWxUb09wZW4iLCJfdGhpczkiLCJoZWFkZXJJZHMiLCJjdXJyZW50U3RhdGUiLCJfdGhpczEwIiwiX3NldHVwSGVhZGVycyIsIl9zZXR1cFBhbmVscyIsImFjdGl2ZUhlaWdodCIsIm1heEhlaWdodCIsIl90aGlzMTEiLCJjYWxjdWxhdGVQYW5lbEhlaWdodCIsIl90aGlzMTIiLCJfdGhpczEzIiwicmVnaW9uIiwiYWNjb3JkaW9ucyIsImFjY29yZGlvbiIsImJhIiwiYWNjb3JkaW9uRG9tTm9kZSIsImNhcmRQcm9kdWN0IiwibWluTGVuIiwiRk9DVVNBQkxFX0VMRU1FTlRTIiwiTW9kYWwiLCJhY3RpdmVNb2RhbCIsInZhbGlkYXRlTW9kYWxQcmVzZW5jZSIsInZhbGlkYXRlQXJncyIsIk1pY3JvTW9kYWwiLCJ0YXJnZXRNb2RhbCIsIl9yZWYkdHJpZ2dlcnMiLCJfcmVmJG9uU2hvdyIsIm9uU2hvdyIsIl9yZWYkb25DbG9zZSIsIm9uQ2xvc2UiLCJfcmVmJG9wZW5UcmlnZ2VyIiwib3BlblRyaWdnZXIiLCJfcmVmJGNsb3NlVHJpZ2dlciIsImNsb3NlVHJpZ2dlciIsIl9yZWYkb3BlbkNsYXNzIiwib3BlbkNsYXNzIiwiX3JlZiRkaXNhYmxlU2Nyb2xsIiwiZGlzYWJsZVNjcm9sbCIsIl9yZWYkZGlzYWJsZUZvY3VzIiwiZGlzYWJsZUZvY3VzIiwiX3JlZiRhd2FpdENsb3NlQW5pbWF0IiwiYXdhaXRDbG9zZUFuaW1hdGlvbiIsIl9yZWYkYXdhaXRPcGVuQW5pbWF0aSIsImF3YWl0T3BlbkFuaW1hdGlvbiIsIl9yZWYkZGVidWdNb2RlIiwiZGVidWdNb2RlIiwibW9kYWwiLCJyZWdpc3RlclRyaWdnZXJzIiwib25LZXlkb3duIiwiQm9vbGVhbiIsInNob3dNb2RhbCIsInNjcm9sbEJlaGF2aW91ciIsImFkZEV2ZW50TGlzdGVuZXJzIiwic2V0Rm9jdXNUb0ZpcnN0Tm9kZSIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiY2xvc2VNb2RhbCIsInJldGFpbkZvY3VzIiwiZm9jdXNhYmxlTm9kZXMiLCJnZXRGb2N1c2FibGVOb2RlcyIsIm5vZGVzV2hpY2hBcmVOb3RDbG9zZVRhcmdldHMiLCJmb2N1c2VkSXRlbUluZGV4IiwidHJpZ2dlck1hcCIsInZhbGlkYXRlVHJpZ2dlclByZXNlbmNlIiwidHJpZ2dlckF0dHIiLCJnZW5lcmF0ZVRyaWdnZXJNYXAiLCJjbG9zZU1vZGFsQnlJZCIsImluZm8iLCJxdWVyeUFqYXgiLCJ0cnVlX29iaiIsImFqYXh1cmwiLCJwcm9qZWN0cyIsInByZXZQcm9qZWN0IiwicHJvamVjdCIsImZpbHRlckFyZyIsIm1heFBhZ2VzIiwiaXNUeXBlIiwiY3JlYXRlRGF0YSIsImFyZWEiLCJiZWRyb29tIiwiYmF0aHJvb20iLCJidG5Nb3JlIiwicGFnZWQiLCJ1bCIsInN3aXRjaGVyIiwic3dpdGNoZXJDaGVja2JveCIsInN3aXRoY2VyVHlwZSIsInNlcnZpY2VzSWQiLCJzbGlkZXJXcmFwcGVyIiwic2xpZGVyUHJvamVjdHMiLCJzd2l0Y2hlckNoYW5nZSIsImlucHV0SWQiLCJodG1sRm9yIiwiaW5wdXRWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=